cscope 15 $HOME/Desktop/Course/CS-503/xinu-cs503-fall2019               0000418428
	@config/conf.c

3 
	~<xöu.h
>

6 
devˇŒ
 
i€º
();

7 
devˇŒ
 
i⁄uŒ
();

11 
díåy
 
	gdevèb
[
NDEVS
] =

24 (*)
âyöô
, (*)
i⁄uŒ
, (*)ionull,

25 (*)
âyªad
, (*)
âywrôe
, (*)
i€º
,

26 (*)
âygëc
, (*)
âyputc
, (*)
âyc⁄åﬁ
,

27 (*)0x3f8, (*)
âyh™dÀr
, 33 },

31 (*)
i⁄uŒ
, (*)ionull, (*)ionull,

32 (*)
i⁄uŒ
, (*)i⁄uŒ, (*)
i€º
,

33 (*)
i⁄uŒ
, (*)i⁄uŒ, (*)
i€º
,

34 (*)0x0, (*)
i€º
, 0 },

38 (*)
ëhöô
, (*)
i€º
, (*)ioerr,

39 (*)
ëhªad
, (*)
ëhwrôe
, (*)
i€º
,

40 (*)
i€º
, (*)i€º, (*)
ëhc⁄åﬁ
,

41 (*)0x0, (*)
ëhh™dÀr
, 34 },

45 (*)
«möô
, (*)
«m›í
, (*)
i€º
,

46 (*)
i€º
, (*)ioerr, (*)ioerr,

47 (*)
i€º
, (*)ioerr, (*)ioerr,

48 (*)0x0, (*)
i€º
, 0 },

52 (*)
rdsöô
, (*)
rds›í
, (*)
rds˛o£
,

53 (*)
rd§ód
, (*)
rdswrôe
, (*)
i€º
,

54 (*)
i€º
, (*)i€º, (*)
rdsc⁄åﬁ
,

55 (*)0x0, (*)
i⁄uŒ
, 0 },

59 (*)
ømöô
, (*)
øm›í
, (*)
øm˛o£
,

60 (*)
ømªad
, (*)
ømwrôe
, (*)
i€º
,

61 (*)
i€º
, (*)ioerr, (*)ioerr,

62 (*)0x0, (*)
i⁄uŒ
, 0 },

66 (*)
rfsöô
, (*)
rfs›í
, (*)
i€º
,

67 (*)
i€º
, (*)ioerr, (*)ioerr,

68 (*)
i€º
, (*)i€º, (*)
rfsc⁄åﬁ
,

69 (*)0x0, (*)
i⁄uŒ
, 0 },

73 (*)
rÊöô
, (*)
i€º
, (*)
rÊ˛o£
,

74 (*)
rÊªad
, (*)
rÊwrôe
, (*)
rÊ£ek
,

75 (*)
rÊgëc
, (*)
rÊputc
, (*)
i€º
,

76 (*)0x0, (*)
i⁄uŒ
, 0 },

80 (*)
rÊöô
, (*)
i€º
, (*)
rÊ˛o£
,

81 (*)
rÊªad
, (*)
rÊwrôe
, (*)
rÊ£ek
,

82 (*)
rÊgëc
, (*)
rÊputc
, (*)
i€º
,

83 (*)0x0, (*)
i⁄uŒ
, 0 },

87 (*)
rÊöô
, (*)
i€º
, (*)
rÊ˛o£
,

88 (*)
rÊªad
, (*)
rÊwrôe
, (*)
rÊ£ek
,

89 (*)
rÊgëc
, (*)
rÊputc
, (*)
i€º
,

90 (*)0x0, (*)
i⁄uŒ
, 0 },

94 (*)
rÊöô
, (*)
i€º
, (*)
rÊ˛o£
,

95 (*)
rÊªad
, (*)
rÊwrôe
, (*)
rÊ£ek
,

96 (*)
rÊgëc
, (*)
rÊputc
, (*)
i€º
,

97 (*)0x0, (*)
i⁄uŒ
, 0 },

101 (*)
rÊöô
, (*)
i€º
, (*)
rÊ˛o£
,

102 (*)
rÊªad
, (*)
rÊwrôe
, (*)
rÊ£ek
,

103 (*)
rÊgëc
, (*)
rÊputc
, (*)
i€º
,

104 (*)0x0, (*)
i⁄uŒ
, 0 },

108 (*)
rÊöô
, (*)
i€º
, (*)
rÊ˛o£
,

109 (*)
rÊªad
, (*)
rÊwrôe
, (*)
rÊ£ek
,

110 (*)
rÊgëc
, (*)
rÊputc
, (*)
i€º
,

111 (*)0x0, (*)
i⁄uŒ
, 0 },

115 (*)
rÊöô
, (*)
i€º
, (*)
rÊ˛o£
,

116 (*)
rÊªad
, (*)
rÊwrôe
, (*)
rÊ£ek
,

117 (*)
rÊgëc
, (*)
rÊputc
, (*)
i€º
,

118 (*)0x0, (*)
i⁄uŒ
, 0 },

122 (*)
rÊöô
, (*)
i€º
, (*)
rÊ˛o£
,

123 (*)
rÊªad
, (*)
rÊwrôe
, (*)
rÊ£ek
,

124 (*)
rÊgëc
, (*)
rÊputc
, (*)
i€º
,

125 (*)0x0, (*)
i⁄uŒ
, 0 },

129 (*)
rÊöô
, (*)
i€º
, (*)
rÊ˛o£
,

130 (*)
rÊªad
, (*)
rÊwrôe
, (*)
rÊ£ek
,

131 (*)
rÊgëc
, (*)
rÊputc
, (*)
i€º
,

132 (*)0x0, (*)
i⁄uŒ
, 0 },

136 (*)
rÊöô
, (*)
i€º
, (*)
rÊ˛o£
,

137 (*)
rÊªad
, (*)
rÊwrôe
, (*)
rÊ£ek
,

138 (*)
rÊgëc
, (*)
rÊputc
, (*)
i€º
,

139 (*)0x0, (*)
i⁄uŒ
, 0 },

143 (*)
lfsöô
, (*)
lfs›í
, (*)
i€º
,

144 (*)
i€º
, (*)ioerr, (*)ioerr,

145 (*)
i€º
, (*)ioerr, (*)ioerr,

146 (*)0x0, (*)
i⁄uŒ
, 0 },

150 (*)
lÊöô
, (*)
i€º
, (*)
lÊ˛o£
,

151 (*)
lÊªad
, (*)
lÊwrôe
, (*)
lÊ£ek
,

152 (*)
lÊgëc
, (*)
lÊputc
, (*)
lÊc⁄åﬁ
,

153 (*)0x0, (*)
i⁄uŒ
, 0 },

157 (*)
lÊöô
, (*)
i€º
, (*)
lÊ˛o£
,

158 (*)
lÊªad
, (*)
lÊwrôe
, (*)
lÊ£ek
,

159 (*)
lÊgëc
, (*)
lÊputc
, (*)
lÊc⁄åﬁ
,

160 (*)0x0, (*)
i⁄uŒ
, 0 },

164 (*)
lÊöô
, (*)
i€º
, (*)
lÊ˛o£
,

165 (*)
lÊªad
, (*)
lÊwrôe
, (*)
lÊ£ek
,

166 (*)
lÊgëc
, (*)
lÊputc
, (*)
lÊc⁄åﬁ
,

167 (*)0x0, (*)
i⁄uŒ
, 0 },

171 (*)
lÊöô
, (*)
i€º
, (*)
lÊ˛o£
,

172 (*)
lÊªad
, (*)
lÊwrôe
, (*)
lÊ£ek
,

173 (*)
lÊgëc
, (*)
lÊputc
, (*)
lÊc⁄åﬁ
,

174 (*)0x0, (*)
i⁄uŒ
, 0 },

178 (*)
lÊöô
, (*)
i€º
, (*)
lÊ˛o£
,

179 (*)
lÊªad
, (*)
lÊwrôe
, (*)
lÊ£ek
,

180 (*)
lÊgëc
, (*)
lÊputc
, (*)
lÊc⁄åﬁ
,

181 (*)0x0, (*)
i⁄uŒ
, 0 },

185 (*)
lÊöô
, (*)
i€º
, (*)
lÊ˛o£
,

186 (*)
lÊªad
, (*)
lÊwrôe
, (*)
lÊ£ek
,

187 (*)
lÊgëc
, (*)
lÊputc
, (*)
lÊc⁄åﬁ
,

188 (*)0x0, (*)
i⁄uŒ
, 0 }

	@config/conf.h

6 
	sdíåy
 {

7 
öt32
 
	mdvnum
;

8 
öt32
 
	mdvmö‹
;

9 *
	mdv«me
;

10 
devˇŒ
 (*
dvöô
Ë(
	mdíåy
 *);

11 
devˇŒ
 (*
dv›í
Ë(
	mdíåy
 *, *, *);

12 
devˇŒ
 (*
dv˛o£
)(
	mdíåy
 *);

13 
devˇŒ
 (*
dvªad
Ë(
	mdíåy
 *, *, 
	muöt32
);

14 
devˇŒ
 (*
dvwrôe
)(
	mdíåy
 *, *, 
	muöt32
);

15 
devˇŒ
 (*
dv£ek
Ë(
	mdíåy
 *, 
	möt32
);

16 
devˇŒ
 (*
dvgëc
Ë(
	mdíåy
 *);

17 
devˇŒ
 (*
dvputc
Ë(
	mdíåy
 *, );

18 
devˇŒ
 (*
dv˙é
Ë(
	mdíåy
 *, 
	möt32
, int32, int32);

19 *
	mdvc§
;

20 (*
	mdvöå
)();

21 
byã
 
	mdvúq
;

24 
díåy
 
devèb
[];

28 
	#CONSOLE
 0

	)

29 
	#NULLDEV
 1

	)

30 
	#ETHER0
 2

	)

31 
	#NAMESPACE
 3

	)

32 
	#RDISK
 4

	)

33 
	#RAM0
 5

	)

34 
	#RFILESYS
 6

	)

35 
	#RFILE0
 7

	)

36 
	#RFILE1
 8

	)

37 
	#RFILE2
 9

	)

38 
	#RFILE3
 10

	)

39 
	#RFILE4
 11

	)

40 
	#RFILE5
 12

	)

41 
	#RFILE6
 13

	)

42 
	#RFILE7
 14

	)

43 
	#RFILE8
 15

	)

44 
	#RFILE9
 16

	)

45 
	#LFILESYS
 17

	)

46 
	#LFILE0
 18

	)

47 
	#LFILE1
 19

	)

48 
	#LFILE2
 20

	)

49 
	#LFILE3
 21

	)

50 
	#LFILE4
 22

	)

51 
	#LFILE5
 23

	)

55 
	#NnuŒ
 1

	)

56 
	#Nây
 1

	)

57 
	#Nëh
 1

	)

58 
	#Nrds
 1

	)

59 
	#Nøm
 1

	)

60 
	#Nrfs
 1

	)

61 
	#NrÊ
 10

	)

62 
	#Nlfs
 1

	)

63 
	#NlÊ
 6

	)

64 
	#N«m
 1

	)

66 
	#NDEVS
 24

	)

71 
	#NPROC
 100

	)

72 
	#NSEM
 100

	)

73 
	#IRQBASE
 32

	)

74 
	#IRQ_TIMER
 
IRQ_HW5


	)

75 
	#IRQ_ATH_MISC
 
IRQ_HW4


	)

76 
	#CLKFREQ
 200000000

	)

78 
	#LF_DISK_DEV
 
RAM0


	)

	@config/config.l

2 
löe˘r
;

3 
brkcou¡
;

4 
	gskùpög
;

6 
OCT
 0[0-7]*

7 
DEC
 [1-9][0-9]*

8 
HEX
 0x[0-9a-
fA
-
F
]+

9 
ID
 [
a
-
z_A
-
Z
][a-z_A-
Z0
-9]*

10 %% /* 
	$yyÀx
 */

11 "/*" { 
skùpög
 = 1; }

12 "*/" { 
skùpög
 = 0; }

13 "%%" { i‡(! 
skùpög
)

14 i‡(++
brkcou¡
 >= 2)

17 {  
DEFBRK
; } }

18 ":" { i‡(! 
skùpög
Ë 
COLON
; }

19 {
OCT
} { i‡(! 
skùpög
Ë 
INTEGER
; }

20 {
DEC
} { i‡(! 
skùpög
Ë 
INTEGER
; }

21 {
HEX
} { i‡(! 
skùpög
Ë 
INTEGER
; }

22 
is
 { i‡(! 
skùpög
Ë 
IS
; }

23 
⁄
 { i‡(! 
skùpög
Ë 
ON
; }

25 -?
öå
 { i‡(! 
skùpög
Ë 
INTR
; }

26 -?
c§
 { i‡(! 
skùpög
Ë 
CSR
; }

27 -?
úq
 { i‡(! 
skùpög
Ë 
IRQ
; }

28 -?
i
 { i‡(! 
skùpög
Ë 
INIT
; }

29 -?
o
 { i‡(! 
skùpög
Ë 
OPEN
; }

30 -?
c
 { i‡(! 
skùpög
Ë 
CLOSE
; }

31 -?
r
 { i‡(! 
skùpög
Ë 
READ
; }

32 -?
g
 { i‡(! 
skùpög
Ë 
GETC
; }

33 -?
p
 { i‡(! 
skùpög
Ë 
PUTC
; }

34 -?
w
 { i‡(! 
skùpög
Ë 
WRITE
; }

35 -?
s
 { i‡(! 
skùpög
Ë 
SEEK
; }

36 -?
n
 { i‡(! 
skùpög
Ë 
CONTROL
; }

37 [ \
t
]+ ;

38 "\n" { 
löe˘r
++; }

39 {
ID
} { i‡(! 
skùpög
Ë 
IDENT
; }

40 . { i‡(! 
skùpög
Ë 
yyãxt
[0]; }

	@config/config.y

12 %
tokí
 
DEFBRK
 
IFBRK
 
COLON
 
OCTAL
 
INTEGER
 
IDENT
 
CSR
 
IRQ
 
INTR
 
INIT
 
OPEN


13 
CLOSE
 
READ
 
WRITE
 
SEEK
 
CONTROL
 
IS
 
ON
 
GETC
 
PUTC


15 
	~<°dlib.h
>

16 
	~<°dio.h
>

17 
	~<°rög.h
>

18 
	~<˘y≥.h
>

20 *
yyãxt
;

28 #i‚de‡
YY_TYPEDEF_YY_SIZE_T


29 
	#YY_TYPEDEF_YY_SIZE_T


	)

30 
	tyy_size_t
;

33 
yyÀng
;

42 
	#NIL
 (
dev_ít
 *)0x00

	)

44 
	#CONFC
 "c⁄f.c"

	)

45 
	#CONFH
 "c⁄f.h"

	)

46 
	#CONFHREF
 "<c⁄f.h>"

	)

47 
	#INFILE
 "C⁄figuøti⁄"

	)

48 
	#MAXNAME
 16

	)

50 
	#NDEVS
 250

	)

51 
	#NTYPES
 250

	)

53 
	glöe˘r
 = 1;

55 
FILE
 *
	gc⁄fc
;

56 
FILE
 *
	gc⁄fh
;

58 
	gbrkcou¡
 = 0;

60 *
	gdoög
 = "deviceÅype declarations";

62 
	sdev_ít
 {

63 
	m«me
[
MAXNAME
];

64 
	mäame
[
MAXNAME
];

65 
	mis⁄
[
MAXNAME
];

66 
	mtödex
;

67 
	mc§
;

68 
	múq
;

69 
	möå
[
MAXNAME
];

70 
	möô
[
MAXNAME
];

71 
	m›í
[
MAXNAME
];

72 
	m˛o£
[
MAXNAME
];

73 
	mªad
[
MAXNAME
];

74 
	mwrôe
[
MAXNAME
];

75 
	mc⁄åﬁ
[
MAXNAME
];

76 
	m£ek
[
MAXNAME
];

77 
	mgëc
[
MAXNAME
];

78 
	mputc
[
MAXNAME
];

79 
	mmö‹
;

84 
dev_ít
 
	gdty≥s
[
NTYPES
];

85 
	g¡y≥s
 = 0;

87 
dev_ít
 
	gdevs
[
NDEVS
];

88 
	gndevs
 = 0;

90 *
	gdev°ab
[] = {

110 
NULL


113 
	gßvóârid
[
MAXNAME
];

121 
add©å
(, );

122 
addt⁄
(*);

123 
c⁄fig_©oi
(*, );

124 
devisid
(*);

125 
dev⁄id
(*);

126 
gë©åid
(*);

127 
√wdev
(*);

128 
√wty≥
(*);

129 
yyîr‹
(*);

130 
yyÀx
();

135 %% /* 
	$yy∑r£
 */ 
	`yyÀx
()

142 
c⁄figuøti⁄
: 
devty≥s
 
DEFBRK
 
devi˚s


151 
devty≥s
: { 
doög
 = "device definitions"; }

152 | 
devty≥s
 
devty≥


155 
devty≥
: 
äame
 
COLON
 
dev_éi°


158 
äame
: 
IDENT
 { 
$$
 = 
	`√wty≥
(
yyãxt
); }

161 
dev_éi°
: 
thódî
 
©å_li°


162 | 
dev_éi°
 
thódî
 
©å_li°


165 
thódî
: 
ON
 
t⁄id
 { 
$$
 = 
$2
; }

168 
t⁄id
: 
IDENT
 { 
$$
 = 
	`addt⁄
(
yyãxt
); }

171 
©å_li°
:

172 | 
©å_li°
 
©å


175 
©å
: 
CSR
 
numbî
 { 
	`add©å
(CSR, 
$2
); }

176 | 
IRQ
 
numbî
 { 
	`add©å
(IRQ, 
$2
); }

177 | 
INTR
 
id
 { 
	`add©å
(INTR, 0); }

178 | 
OPEN
 
id
 { 
	`add©å
(OPEN, 0); }

179 | 
CLOSE
 
id
 { 
	`add©å
(CLOSE, 0); }

180 | 
INIT
 
id
 { 
	`add©å
(INIT, 0); }

181 | 
GETC
 
id
 { 
	`add©å
(GETC, 0); }

182 | 
PUTC
 
id
 { 
	`add©å
(PUTC, 0); }

183 | 
READ
 
id
 { 
	`add©å
(READ, 0); }

184 | 
WRITE
 
id
 { 
	`add©å
(WRITE, 0); }

185 | 
SEEK
 
id
 { 
	`add©å
(SEEK, 0); }

186 | 
CONTROL
 
id
 { 
	`add©å
(CONTROL, 0); }

189 
id
: 
IDENT
 { 
$$
 = 0; 
	`gë©åid
(
yyãxt
); }

192 
numbî
: 
INTEGER
 { 
$$
 = 
	`c⁄fig_©oi
(
yyãxt
, 
yyÀng
); }

202 
devi˚s
: { 
doög
 = "interfaceÅypes"; }

203 | 
devi˚s
 
devi˚


206 
devi˚
: 
dhódî
 
©å_li°


209 
dhódî
: 
d«me
 
devis
 
dev⁄


212 
d«me
: 
IDENT
 { 
	`√wdev
(
yyãxt
); }

215 
devis
: 
IS
 
devisid


218 
devisid
: 
IDENT
 { 
	`devisid
(
yyãxt
); }

221 
dev⁄
: 
ON
 
dev⁄id


224 
dev⁄id
: 
IDENT
 { 
	`dev⁄id
(
yyãxt
); }

227 
	}
%%

229 
	~"Àx.yy.c
"

240 
	$maö
(
¨gc
, **
¨gv
) {

241 
n
, 
i
, 
j
, 
l
, 
fcou¡
;

242 
dev_ít
 *
s
;

243 
vîbo£
 = 0;

244 *
p
;

245 
c
;

247 i‡–
¨gc
 > 1 && (
	`°∫cmp
("-v", 
¨gv
[1], 2) == 0) ) {

248 
¨gc
--;

249 
¨gv
++;

250 
vîbo£
++;

253 i‡–
¨gc
 > 4 ) {

254 
	`Ârötf
(
°dîr
, "use: config [-v] [input_file] [conf.c] [conf.h]\n");

255 
	`exô
(1);

258 i‡(
vîbo£
Ë{ 
	`¥ötf
("Opening input file...\n"); }

260 i‡(
¨gc
 >= 2) {

261 i‡(
	`‰e›í
(
¨gv
[1], "r", 
°dö
Ë=
NULL
) {

262 
	`Ârötf
(
°dîr
, "C™'à›í %s\n", 
¨gv
[1]);

263 
	`exô
(1);

267 i‡(
	`‰e›í
(
INFILE
, "r", 
°dö
Ë=
NULL
) {

268 
	`Ârötf
(
°dîr
, "C™'à›í %s\n", 
INFILE
);

269 
	`exô
(1);

280 i‡(
vîbo£
Ë{ 
	`¥ötf
("Parsing configuration specs...\n"); }

282 i‡–(
n
 = 
	`yy∑r£
()Ë!0 ) { 
	`exô
(n); }

286 i‡(
vîbo£
Ë{ 
	`¥ötf
("Opening output files...\n"); }

288 i‡(
¨gc
 >= 3) {

289 i‡–(
c⁄fc
 = 
	`f›í
(
¨gv
[2],"w"ËË=
NULL
) {

290 
	`Ârötf
(
°dîr
, "C™'àwrôê⁄ %s\n", 
¨gv
[2]);

291 
	`exô
(1);

295 i‡–(
c⁄fc
 = 
	`f›í
(
CONFC
,"w"ËË=
NULL
) {

296 
	`Ârötf
(
°dîr
, "C™'àwrôê⁄ %s\n", 
CONFC
);

297 
	`exô
(1);

301 i‡(
¨gc
 >= 4) {

302 i‡–(
c⁄fh
 = 
	`f›í
(
¨gv
[3],"w"ËË=
NULL
) {

303 
	`Ârötf
(
°dîr
, "C™'àwrôê⁄ %s\n", 
¨gv
[3]);

304 
	`exô
(1);

308 i‡–(
c⁄fh
 = 
	`f›í
(
CONFH
,"w"ËË=
NULL
) {

309 
	`Ârötf
(
°dîr
, "C™'àwrôê⁄ %s\n", 
CONFH
);

310 
	`exô
(1);

321 
	`Ârötf
(
c⁄fh
, "/* conf.h (GENERATED FILE; DO NOT EDIT) */\n\n");

323 i‡(
vîbo£
Ë{ 
	`¥ötf
("Writing output...\n"); }

325 
	`Ârötf
(
c⁄fh
, "/* Device switchÅable declarations */\n\n");

327 
i
 = 0; (
p
 = 
dev°ab
[i]Ë!
NULL
; i++) {

328 
	`Ârötf
(
c⁄fh
, "%s\n", 
p
);

331 
	`Ârötf
(
c⁄fh
, "\n");

335 
	`Ârötf
(
c⁄fh
, "/* DeviceÇame definitions */\n\n");

336 
i
 = 0; i<
ndevs
; i++) {

337 
s
 = &
devs
[
i
];

338 
	`Ârötf
(
c⁄fh
, "#define %-20s%2d\t/*Åype %-8s */\n",

339 
s
->
«me
, 
i
, s->
äame
);

341 
	`Ârötf
(
c⁄fh
, "\n");

345 
	`Ârötf
(
c⁄fh
, "/* Control block sizes */\n\n");

346 
i
 = 0; i < 
¡y≥s
; i++) {

347 
s
 = &
dty≥s
[
i
];

348 i‡(
s
->
mö‹
 > 0) {

349 
	`Ârötf
(
c⁄fh
, "#define\tN%s\t%d\n",

350 
s
->
äame
, s->
mö‹
);

354 
	`Ârötf
(
c⁄fh
, "\n");

356 i‡(
ndevs
 > 0Ë{ 
	`Ârötf
(
c⁄fh
, "#define NDEVS %d\n",Çdevs); }

360 i‡(
brkcou¡
 >4 && 
vîbo£
) {

361 
	`¥ötf
("C›yög deföôi⁄†tÿ%s...\n", 
CONFH
);

364 i‡(
brkcou¡
 >= 2) {

365  (
c
 = 
	`öput
()) > 0) {

366 
	`putc
(
c
, 
c⁄fh
);

369 
	`f˛o£
(
c⁄fh
);

379 
	`Ârötf
(
c⁄fc
, "/* conf.c (GENERATED FILE; DO NOT EDIT) */\n\n");

380 
	`Ârötf
(
c⁄fc
, "#include <xinu.h>\n\n");

381 
	`Ârötf
(
c⁄fc
, "\n");

383 
	`Ârötf
(
c⁄fc
, "extern\tdevcall\tioerr(void);\n");

384 
	`Ârötf
(
c⁄fc
, "extern\tdevcall\tionull(void);\n\n");

387 
	`Ârötf
(
c⁄fc
, "/* Device independent I/O switch */\n\n");

388 i‡(
ndevs
 > 0)

390 
	`Ârötf
(
c⁄fc
, "struct dentry devtab[NDEVS] =\n{\n");

391 
	`Ârötf
(
c⁄fc
, "%s\n%s\n%s\n%s\n%s\n%s\n%s\n%s\n\n",

402 
i
=0; i<
ndevs
; i++) {

403 
s
 = &
devs
[
i
];

404 
	`Ârötf
(
c⁄fc
, "/* %†i†%†*/\n", 
s
->
«me
, s->
äame
);

405 
	`Ârötf
(
c⁄fc
, "\t{ %d, %d, \"%s\",\n", 
i
, 
s
->
mö‹
, s->
«me
);

406 
	`Ârötf
(
c⁄fc
, "\t (void *)%s, (void *)%s, (void *)%s,\n",

407 
s
->
öô
, s->
›í
, s->
˛o£
);

408 
	`Ârötf
(
c⁄fc
, "\t (void *)%s, (void *)%s, (void *)%s,\n",

409 
s
->
ªad
, s->
wrôe
, s->
£ek
);

410 
	`Ârötf
(
c⁄fc
, "\t (void *)%s, (void *)%s, (void *)%s,\n",

411 
s
->
gëc
, s->
putc
, s->
c⁄åﬁ
);

412 
	`Ârötf
(
c⁄fc
, "\t (void *)0x%x, (void *)%s, %d }",

413 
s
->
c§
, s->
öå
, s->
úq
);

414 i‡(
i
< 
ndevs
-1) {

415 
	`Ârötf
(
c⁄fc
, ",\n\n");

417 
	`Ârötf
(
c⁄fc
, "\n};");

422 
	`Ârötf
(
c⁄fc
, "\n");

423 
	`f˛o£
(
c⁄fc
);

426 i‡(
vîbo£
) {

427 
	`¥ötf
("C⁄figuøti⁄ com∂ëe. Numbî o‡devs=%d:\n", 
ndevs
);

428 
i
=0; i<
ndevs
; i++) {

429 
s
 = &
devs
[
i
];

430 
	`¥ötf
("Devi˚ %†(⁄ %s)\n", 
s
->
«me
, s->
is⁄
);

431 
	`¥ötf
(" csr=0x%04x, irq=0x%04x, minor=%d\n",

432 
s
->
c§
, s->
úq
, s->
mö‹
);

435 
	}
}

445 
	$add©å
(
tok
, 
vÆ
) {

446 
dev_ít
 *
s
;

447 *
c
;

449 i‡(
brkcou¡
 == 0) {

451 
s
 = &
dty≥s
[
¡y≥s
-1];

454 
s
 = &
devs
[
ndevs
-1];

457 
tok
) {

458 
CSR
: 
s
->
c§
 = 
vÆ
; ;

459 
IRQ
: 
s
->
úq
 = 
vÆ
; ;

460 
INTR
: 
	`°r˝y
(
s
->
öå
, 
ßvóârid
); ;

461 
READ
: 
	`°r˝y
(
s
->
ªad
, 
ßvóârid
); ;

462 
WRITE
: 
	`°r˝y
(
s
->
wrôe
,
ßvóârid
); ;

463 
GETC
: 
	`°r˝y
(
s
->
gëc
, 
ßvóârid
); ;

464 
PUTC
: 
	`°r˝y
(
s
->
putc
, 
ßvóârid
); ;

465 
OPEN
: 
	`°r˝y
(
s
->
›í
, 
ßvóârid
); ;

466 
CLOSE
: 
	`°r˝y
(
s
->
˛o£
,
ßvóârid
); ;

467 
INIT
: 
	`°r˝y
(
s
->
öô
, 
ßvóârid
); ;

468 
SEEK
: 
	`°r˝y
(
s
->
£ek
, 
ßvóârid
); ;

469 
CONTROL
: 
	`°r˝y
(
s
->
c⁄åﬁ
,
ßvóârid
); ;

470 : 
	`Ârötf
(
°dîr
, "InternalÉrror 1\n");

472 
	}
}

481 
	$addt⁄
(*
t⁄id
) {

482 
cuºty≥
;

484 i‡(
	`°æí
(
t⁄id
Ë>
MAXNAME
) {

485 
	`Ârötf
(
°dîr
,"string %s isÅooÜong onÜine %d\n",

486 
t⁄id
, 
löe˘r
);

487 
	`exô
(1);

489 
cuºty≥
 = 
¡y≥s
 - 1;

490 
	`°r˝y
(
dty≥s
[
cuºty≥
].
is⁄
, 
t⁄id
);

492  
cuºty≥
;

493 
	}
}

503 
	$c⁄fig_©oi
(*
p
, 
Àn
) {

504 
ba£
, 
rv
;

506 i‡(*
p
 == '0')

508 ++
p
;

509 --
Àn
;

510 i‡(*
p
 == 'x' || *p == 'X')

512 ++
p
; --
Àn
;

513 
ba£
 = 16;

517 
ba£
 = 8;

522 
ba£
 = 10;

525 
rv
 = 0;

526 ; 
Àn
 > 0; ++
p
, --len)

528 
rv
 *
ba£
;

529 i‡(
	`isdigô
(*
p
)Ë{ 
rv
 += *p - '0'; }

530 i‡(
	`isuµî
(*
p
)Ë{ 
rv
 += *p - 'A' + 10; }

531 { 
rv
 +*
p
 - 'a' + 10; }

534  
rv
;

535 
	}
}

543 
	$devisid
(*
äame
) {

544 
cuºdev
;

545 
i
;

547 i‡(
	`°æí
(
äame
Ë>
MAXNAME
) {

548 
	`Ârötf
(
°dîr
,"string %s isÅooÜong onÜine %d\n",

549 
äame
, 
löe˘r
);

550 
	`exô
(1);

554 
i
=0; i<
¡y≥s
; i++) {

555 i‡(
	`°rcmp
(
äame
, 
dty≥s
[
i
].tname) == 0) {

559 i‡(
i
 >
¡y≥s
) {

560 
	`Ârötf
(
°dîr
, "IllegalÅypeÇame %s onÜine %d\n",

561 
äame
, 
löe˘r
);

562 
	`exô
(1);

564 
cuºdev
 = 
ndevs
 - 1;

565 
	`°r˝y
(
devs
[
cuºdev
].
äame
,Åname);

568 
	}
}

578 
	$dev⁄id
(*
⁄«me
) {

579 
cuºdev
;

580 
i
;

581 
dev_ít
 *
d±r
;

582 
dev_ít
 *
çå
;

583 
tmp
[
MAXNAME
];

586 i‡(
	`°æí
(
⁄«me
Ë>
MAXNAME
) {

587 
	`Ârötf
(
°dîr
,"string %s isÅooÜong onÜine %d\n",

588 
⁄«me
, 
löe˘r
);

589 
	`exô
(1);

591 i‡(
ndevs
 <=0) {

592 
	`Ârötf
(
°dîr
,"InternalÉrror 3\n");

593 
	`exô
(1);

595 
cuºdev
 = 
ndevs
 - 1;

596 
d±r
 = &
devs
[
cuºdev
];

598 
	`°r˝y
(
d±r
->
is⁄
, 
⁄«me
);

602 
i
=0; i<
¡y≥s
; i++) {

603 
çå
 = &
dty≥s
[
i
];

604 i‡–(
	`°rcmp
(
d±r
->
äame
,
çå
->tname) == 0 ) &&

605 (
	`°rcmp
(
d±r
->
is⁄
, 
çå
->ison) == 0 ) ){

611 
	`°r˝y
(
tmp
, 
d±r
->
«me
);

612 
	`bc›y
 (
çå
, 
d±r
, (
dev_ít
));

615 
çå
->
mö‹
++;

616 
	`°r˝y
(
d±r
->
«me
, 
tmp
);

621 
	`Ârötf
(
°dîr
, "IÀagÆ devi˚ s≥cifiˇti⁄ o¿löê%d\n", 
löe˘r
);

622 
	`exô
(1);

623 
	}
}

632 
	$gë©åid
(*
°r
) {

634 i‡(
	`°æí
(
°r
Ë>
MAXNAME
) {

635 
	`Ârötf
(
°dîr
,"atribute string %s isÅooÜong onÜine %d\n",

636 
°r
, 
löe˘r
);

637 
	`exô
(1);

639 
	`°r˝y
(
ßvóârid
, 
°r
);

641 
	}
}

650 
	$√wdev
(*
«me
) {

652 
dev_ít
 *
d±r
;

653 
i
;

655 i‡(
ndevs
 >
NDEVS
) {

656 
	`Ârötf
(
°dîr
,"Toÿm™y devi˚†⁄Üöê%d", 
löe˘r
);

657 
	`exô
(1);

659 i‡(
	`°æí
(
«me
Ë>
MAXNAME
) {

660 
	`Ârötf
(
°dîr
,"DeviceÇame %s isÅooÜong onÜine %d\n",

661 
«me
, 
löe˘r
);

662 
	`exô
(1);

667 
i
=0; i<
ndevs
; i++) {

668 i‡(
	`°rcmp
(
«me
, 
devs
[
i
].name) == 0) {

669 
	`Ârötf
(
°dîr
, "Duplicate deviceÇame %s onÜine %d\n",

670 
«me
, 
löe˘r
);

671 
	`exô
(1);

675 
d±r
 = &
devs
[
ndevs
];

679 
	`bzîo
((*)
d±r
, (
dev_ít
));

680 
	`°r˝y
(
d±r
->
«me
,Çame);

681 
ndevs
++;

683 
	}
}

692 
	$√wty≥
(*
«me
) {

694 
dev_ít
 *
d±r
;

695 
i
;

697 i‡(
¡y≥s
 >
NTYPES
) {

698 
	`Ârötf
(
°dîr
,"Toÿm™yÅy≥†⁄Üöê%d", 
löe˘r
);

699 
	`exô
(1);

701 i‡(
	`°æí
(
«me
Ë>
MAXNAME
) {

702 
	`Ârötf
(
°dîr
,"TypeÇame %s isÅooÜong onÜine %d\n",

703 
«me
, 
löe˘r
);

704 
	`exô
(1);

709 
i
=0; i<
¡y≥s
; i++) {

710 i‡(
	`°rcmp
(
«me
, 
dty≥s
[
i
].
äame
) == 0) {

711 
	`Ârötf
(
°dîr
, "DuplicateÅypeÇame %s onÜine %d\n",

712 
«me
, 
löe˘r
);

713 
	`exô
(1);

717 
d±r
 = &
dty≥s
[
¡y≥s
];

721 
	`bzîo
((*)
d±r
, (
dev_ít
));

722 
	`°r˝y
(
d±r
->
äame
, 
«me
);

723 
	`°∫˝y
(
d±r
->
öå
, "ioerr", 5);

724 
	`°∫˝y
(
d±r
->
öô
, "ioerr", 5);

725 
	`°∫˝y
(
d±r
->
›í
, "ioerr", 5);

726 
	`°∫˝y
(
d±r
->
˛o£
, "ioerr", 5);

727 
	`°∫˝y
(
d±r
->
ªad
, "ioerr", 5);

728 
	`°∫˝y
(
d±r
->
wrôe
, "ioerr", 5);

729 
	`°∫˝y
(
d±r
->
c⁄åﬁ
, "ioerr", 5);

730 
	`°∫˝y
(
d±r
->
£ek
, "ioerr", 5);

731 
	`°∫˝y
(
d±r
->
gëc
, "ioerr", 5);

732 
	`°∫˝y
(
d±r
->
putc
, "ioerr", 5);

734  
¡y≥s
++;

735 
	}
}

744 
	$yyîr‹
(*
s
) {

746 
	`Ârötf
(
°dîr
, "Sy¡axÉº‹ i¿%†⁄Üöê%d\n", 
doög
, 
löe˘r
);

747 
	}
}

	@device/eth/ethcontrol.c

3 
	~<xöu.h
>

9 
devˇŒ
 
	$ëhc⁄åﬁ
 (

10 
díåy
 *
dev±r
,

11 
öt32
 
func
,

12 
öt32
 
¨g1
,

13 
öt32
 
¨g2


16 
ëhcblk
 *
ëh±r
;

17 
öt32
 
ªtvÆ
 = 
OK
;

19 
ëh±r
 = &
ëhîèb
[
dev±r
->
dvmö‹
];

21 
func
) {

25 
ETH_CTRL_GET_MAC
:

26 
	`mem˝y
((
byã
 *)
¨g1
, 
ëh±r
->
devAddªss
,

27 
ETH_ADDR_LEN
);

32 
ETH_CTRL_ADD_MCAST
:

33 
ªtvÆ
 = 
	`ëhmˇ°_add
(
ëh±r
, (
byã
 *)
¨g1
);

38 
ETH_CTRL_REMOVE_MCAST
:

39 
ªtvÆ
 = 
	`ëhmˇ°_ªmove
(
ëh±r
, (
byã
 *)
¨g1
);

43  
SYSERR
;

46  
ªtvÆ
;

47 
	}
}

	@device/eth/ethhandler.c

3 
	~<xöu.h
>

9 
	$ëhh™dÀr
 (

10 
öt32
 
¨g


13 
díåy
 *
dev±r
;

14 
ëhcblk
 *
ëh±r
;

15 
ëh_q_c§eg
 *
c§±r
;

16 
ëh_q_tx_desc
 *
tdes˝å
;

17 
ëh_q_rx_desc
 *
rdes˝å
;

18 vﬁ©ûê
uöt32
 
§
;

19 
öt32
 
cou¡
;

20 
öt32
 
cuº_rögsize
;

22 
dev±r
 = (
díåy
 *)
¨g
;

23 
ëh±r
 = &
ëhîèb
[
dev±r
->
dvmö‹
];

25 
c§±r
 = (
ëh_q_c§eg
 *)
ëh±r
->
c§
;

29 
§
 = 
c§±r
->sr;

33 if((
c§±r
->
§
 & 
ETH_QUARK_SR_NIS
) == 0) {

39 
c§±r
->
§
 = sr;

43 i‡(
§
 & 
ETH_QUARK_SR_TI
) {

47 
tdes˝å
 = (
ëh_q_tx_desc
 *)
ëh±r
->
txRög
 +

48 
ëh±r
->
txHód
;

52 
cou¡
 = 
	`£mcou¡
(
ëh±r
->
o£m
);

54 if(
cou¡
 < 0) {

55 
cuº_rögsize
 = 
ëh±r
->
txRögSize
;

58 
cuº_rögsize
 = 
ëh±r
->
txRögSize
 - 
cou¡
;

63 
cou¡
 = 0;

67 
cuº_rögsize
 > 0) {

71 if(
tdes˝å
->
˘æ°©
 & 
ETH_QUARK_TDCS_OWN
) {

77 
cou¡
++;

81 
cuº_rögsize
--;

85 
tdes˝å
 += 1;

89 
ëh±r
->
txHód
 += 1;

90 if(
ëh±r
->
txHód
 >ëh±r->
txRögSize
) {

91 
ëh±r
->
txHód
 = 0;

92 
tdes˝å
 = (
ëh_q_tx_desc
 *)

93 
ëh±r
->
txRög
;

100 
	`sig« 
(
ëh±r
->
o£m
, 
cou¡
);

103 if(
§
 & 
ETH_QUARK_SR_RI
) {

107 
rdes˝å
 = (
ëh_q_rx_desc
 *)
ëh±r
->
rxRög
 +

108 
ëh±r
->
rxTaû
;

110 
cou¡
 = 0;

115 
cou¡
 <
ëh±r
->
rxRögSize
) {

119 if(
rdes˝å
->
°©us
 & 
ETH_QUARK_RDST_OWN
) {

124 
cou¡
++;

128 
rdes˝å
 += 1;

132 
ëh±r
->
rxTaû
 += 1;

133 if(
ëh±r
->
rxTaû
 >ëh±r->
rxRögSize
) {

134 
ëh±r
->
rxTaû
 = 0;

135 
rdes˝å
 = (
ëh_q_rx_desc
 *)

136 
ëh±r
->
rxRög
;

143 
	`sig« 
(
ëh±r
->
i£m
, 
cou¡
);

147 
	}
}

	@device/eth/ethinit.c

3 
	~<xöu.h
>

5 
ëhcblk
 
	gëhîèb
[1];

11 
uöt16
 
	$ëh_phy_ªad
 (

12 vﬁ©ûê
ëh_q_c§eg
 *
c§±r
,

13 
uöt32
 
ªgnum


16 
uöt32
 
ªåõs
;

20 
c§±r
->
gmiür
 & 
ETH_QUARK_GMIIAR_GB
);

24 
c§±r
->
gmiür
 =

26 (
ªgnum
 << 6) |

27 (
ETH_QUARK_GMIIAR_CR
) |

28 (
ETH_QUARK_GMIIAR_GB
);

32 
ªåõs
 = 0;

33 
c§±r
->
gmiür
 & 
ETH_QUARK_GMIIAR_GB
) {

34 
	`DELAY
(
ETH_QUARK_INIT_DELAY
);

35 if((++
ªåõs
Ë> 
ETH_QUARK_MAX_RETRIES
)

41  (
uöt16
)
c§±r
->
gmiidr
;

42 
	}
}

48 
	$ëh_phy_wrôe
 (

49 vﬁ©ûê
ëh_q_c§eg
 *
c§±r
,

50 
uöt32
 
ªgnum
,

51 
uöt16
 
vÆue


54 
uöt32
 
ªåõs
;

58 
c§±r
->
gmiür
 & 
ETH_QUARK_GMIIAR_GB
);

62 
c§±r
->
gmiidr
 = (
uöt32
)
vÆue
;

66 
c§±r
->
gmiür
 =

68 (
ªgnum
 << 6) |

69 (
ETH_QUARK_GMIIAR_CR
) |

70 (
ETH_QUARK_GMIIAR_GW
) |

71 (
ETH_QUARK_GMIIAR_GB
);

75 
ªåõs
 = 0;

76 
c§±r
->
gmiür
 & 
ETH_QUARK_GMIIAR_GB
) {

77 
	`DELAY
(
ETH_QUARK_INIT_DELAY
);

78 if((++
ªåõs
Ë> 
ETH_QUARK_MAX_RETRIES
)

81 
	}
}

87 
öt32
 
	$ëh_phy_ª£t
 (

88 vﬁ©ûê
ëh_q_c§eg
 *
c§±r


91 
uöt16
 
vÆue
;

92 
uöt32
 
ªåõs
;

96 
vÆue
 = 
	`ëh_phy_ªad
(
c§±r
, 0);

100 
	`ëh_phy_wrôe
(
c§±r
, 0, (
vÆue
 | 0x8000));

104 
ªåõs
 = 0;

105 
	`ëh_phy_ªad
(
c§±r
, 0) & 0x8000) {

106 
	`DELAY
(
ETH_QUARK_INIT_DELAY
);

107 if((++
ªåõs
Ë> 
ETH_QUARK_MAX_RETRIES
)

108  
SYSERR
;

113 
vÆue
 = 
	`ëh_phy_ªad
(
c§±r
, 1);

114 if(
vÆue
 & 0x0008) {

118 
ªåõs
 = 0;

119 (
	`ëh_phy_ªad
(
c§±r
, 1) & 0x0020) == 0) {

120 
	`DELAY
(
ETH_QUARK_INIT_DELAY
);

121 if((++
ªåõs
Ë> 
ETH_QUARK_MAX_RETRIES
)

122  
SYSERR
;

128 
ªåõs
 = 0;

129 (
	`ëh_phy_ªad
(
c§±r
, 1) & 0x0004) == 0) {

130 
	`DELAY
(
ETH_QUARK_INIT_DELAY
);

131 if((++
ªåõs
Ë> 
ETH_QUARK_MAX_RETRIES
)

132  
SYSERR
;

135 
	`DELAY
(100000);

137 
	`k¥ötf
("\nEthernet Link is Up\n");

139  
OK
;

140 
	}
}

146 
öt32
 
	$ëhöô
 (

147 
díåy
 *
dev±r


150 
ëhcblk
 *
ëh±r
;

151 vﬁ©ûê
ëh_q_c§eg
 *
c§±r
;

152 
ëh_q_tx_desc
 *
tx_descs
;

153 
ëh_q_rx_desc
 *
rx_descs
;

154 
√çackë
 *
pkçå
;

155 *
ãm±r
;

156 
uöt32
 
bmr
;

157 
uöt32
 
ªåõs
;

158 
öt32
 
ªtvÆ
;

159 
öt32
 
i
;

161 
ëh±r
 = &
ëhîèb
[
dev±r
->
dvmö‹
];

163 
ëh±r
->
c§
 = (
ëh_q_c§eg
 *)
dev±r
->
dvc§
;

164 
c§±r
 = (
ëh_q_c§eg
 *)
ëh±r
->
c§
;

167 
	`pci_wrôe_c⁄fig_w‹d
(
ëh±r
->
pcidev
, 0x4, 0x0006);

170 
ªtvÆ
 = 
	`ëh_phy_ª£t
(
c§±r
);

171 if(
ªtvÆ
 =
SYSERR
) {

172  
SYSERR
;

176 
c§±r
->
bmr
 |
ETH_QUARK_BMR_SWR
;

179 
ªåõs
 = 0;

180 
c§±r
->
bmr
 & 
ETH_QUARK_BMR_SWR
) {

181 
	`DELAY
(
ETH_QUARK_INIT_DELAY
);

182 if((++
ªåõs
Ë> 
ETH_QUARK_MAX_RETRIES
)

183  
SYSERR
;

186 
bmr
 = 
c§±r
->bmr;

187 
bmr
 &~(
ETH_QUARK_BMR_PBL_MASK
 | 
ETH_QUARK_BMR_MB
);

188 
bmr
 |
ETH_QUARK_BMR_PBL16
 |

189 
ETH_QUARK_BMR_FB
 |

190 
ETH_QUARK_BMR_RIX
;

191 
c§±r
->
bmr
 = bmr;

194 
c§±r
->
omr
 |
ETH_QUARK_OMR_TSF
 | 
ETH_QUARK_OMR_OSF
;

197 
	`pci_£t_ivec
(
ëh±r
->
pcidev
, 
dev±r
->
dvúq
,

198 
dev±r
->
dvöå
, (
öt32
)devptr);

201 
c§±r
->
mac¸
 |(
ETH_QUARK_MACCR_RMIISPD100
 |

202 
ETH_QUARK_MACCR_DM
);

205 
c§±r
->
mmc¸
 |
ETH_QUARK_MMC_CNTFREEZ
 | 
ETH_QUARK_MMC_CNTRST
;

208 
	`gë_qu¨k_pd©_íåy_d©a_by_id
(
QUARK_MAC1_ID
,

209 (*)(
ëh±r
->
devAddªss
), 
ETH_ADDR_LEN
);

211 
	`k¥ötf
("MACáddress is %02x:%02x:%02x:%02x:%02x:%02x\n",

212 0xff&
ëh±r
->
devAddªss
[0],

213 0xff&
ëh±r
->
devAddªss
[1],

214 0xff&
ëh±r
->
devAddªss
[2],

215 0xff&
ëh±r
->
devAddªss
[3],

216 0xff&
ëh±r
->
devAddªss
[4],

217 0xff&
ëh±r
->
devAddªss
[5]);

221 
c§±r
->
maˇddr0l
 = (
uöt32
)(*((uöt32 *)
ëh±r
->
devAddªss
));

222 
c§±r
->
maˇddr0h
 = ((
uöt32
)

223 (*((
uöt16
 *)(
ëh±r
->
devAddªss
 + 4))) | 0x80000000);

225 
ëh±r
->
txRögSize
 = 
ETH_QUARK_TX_RING_SIZE
;

228 
ãm±r
 = (*)
	`gëmem
((
ëh_q_tx_desc
) *

229 (
ëh±r
->
txRögSize
+1));

230 if(()
ãm±r
 =
SYSERR
) {

231  
SYSERR
;

233 
	`mem£t
(
ãm±r
, 0, (
ëh_q_tx_desc
) *

234 (
ëh±r
->
txRögSize
+1));

237 
ëh±r
->
txRög
 = (*)(((
uöt32
)
ãm±r
 + 3) & (~3));

240 
ëh±r
->
txBufs
 = (*)
	`gëmem
(
ETH_BUF_SIZE
 *

241 (
ëh±r
->
txRögSize
+1));

242 if(()
ëh±r
->
txBufs
 =
SYSERR
) {

243  
SYSERR
;

245 
ëh±r
->
txBufs
 = (*)(((
uöt32
)ethptr->txBufs + 3) & (~3));

248 
tx_descs
 = (
ëh_q_tx_desc
 *)
ëh±r
->
txRög
;

249 
pkçå
 = (
√çackë
 *)
ëh±r
->
txBufs
;

252 
i
 = 0; i < 
ëh±r
->
txRögSize
; i++) {

253 
tx_descs
[
i
].
buf„r1
 = (
uöt32
)(
pkçå
 + i);

257 
ëh±r
->
o£m
 = 
	`£m¸óã
”th±r->
txRögSize
);

258 if(()
ëh±r
->
o£m
 =
SYSERR
) {

259  
SYSERR
;

262 
ëh±r
->
rxRögSize
 = 
ETH_QUARK_RX_RING_SIZE
;

265 
ãm±r
 = (*)
	`gëmem
((
ëh_q_rx_desc
) *

266 (
ëh±r
->
rxRögSize
+1));

267 if(()
ãm±r
 =
SYSERR
) {

268  
SYSERR
;

270 
	`mem£t
(
ãm±r
, 0, (
ëh_q_rx_desc
) *

271 (
ëh±r
->
rxRögSize
+1));

274 
ëh±r
->
rxRög
 = (
ëh_q_rx_desc
 *)

275 (((
uöt32
)
ãm±r
 + 3) & (~3));

278 
ëh±r
->
rxBufs
 = (*)
	`gëmem
(
ETH_BUF_SIZE
 *

279 (
ëh±r
->
rxRögSize
+1));

280 if(()
ëh±r
->
rxBufs
 =
SYSERR
) {

281  
SYSERR
;

285 
ëh±r
->
rxBufs
 = (*)(((
uöt32
)ethptr->rxBufs + 3) & (~3));

288 
rx_descs
 = (
ëh_q_rx_desc
 *)
ëh±r
->
rxRög
;

291 
pkçå
 = (
√çackë
 *)
ëh±r
->
rxBufs
;

294 
i
 = 0; i < 
ëh±r
->
rxRögSize
; i++) {

296 
rx_descs
[
i
].
°©us
 = 
ETH_QUARK_RDST_OWN
;

297 
rx_descs
[
i
].
buf1size
 = (
uöt32
)
ETH_BUF_SIZE
;

298 
rx_descs
[
i
].
buf„r1
 = (
uöt32
)(
pkçå
 + i);

302 
rx_descs
[
ëh±r
->
rxRögSize
-1].
buf1size
 |(
ETH_QUARK_RDCTL1_RER
);

305 
ëh±r
->
i£m
 = 
	`£m¸óã
(0);

306 if(()
ëh±r
->
i£m
 =
SYSERR
) {

307  
SYSERR
;

311 
c§±r
->
õr
 = ( 
ETH_QUARK_IER_NIE
 |

312 
ETH_QUARK_IER_TIE
 |

313 
ETH_QUARK_IER_RIE
 );

316 
c§±r
->
tdœ
 = (
uöt32
)
ëh±r
->
txRög
;

319 
c§±r
->
rdœ
 = (
uöt32
)
ëh±r
->
rxRög
;

322 
c§±r
->
mac¸
 |(
ETH_QUARK_MACCR_TE
 | 
ETH_QUARK_MACCR_RE
);

325 
c§±r
->
omr
 |(
ETH_QUARK_OMR_ST
 | 
ETH_QUARK_OMR_SR
);

327  
OK
;

329 
	}
}

	@device/eth/ethmcast.c

3 
	~<xöu.h
>

9 
öt32
 
	$ëhmˇ°_add
 (

10 
ëhcblk
 *
ëh±r
,

11 
byã
 
addr
[
ETH_ADDR_LEN
]

14 
öt16
 
mˇ°_cou¡
;

16 
ëh_q_c§eg
 *
c§±r
 = (ëh_q_c§eg *)
ëh±r
->
c§
;

20 
c§±r
->
macff
 |= 0x00000010;

24 
mˇ°_cou¡
 = 
ëh±r
->
ed_mcc
;

28 if(
mˇ°_cou¡
 < 
ETH_NUM_MCAST
){

29 
	`mem˝y
(
ëh±r
->
ed_mˇ
[
mˇ°_cou¡
],
addr
,
ETH_ADDR_LEN
);

30 
mˇ°_cou¡
++;

31 
ëh±r
->
ed_mcc
 = 
mˇ°_cou¡
;

32  
OK
;

34  
SYSERR
;

36 
	}
}

42 
öt32
 
	$ëhmˇ°_ªmove
 (

43 
ëhcblk
 *
ëh±r
,

44 
byã
 
addr
[
ETH_ADDR_LEN
]

47 
öt16
 
mˇ°_cou¡
;

48 
öt32
 
i
, 
j
;

50 
mˇ°_cou¡
 = 
ëh±r
->
ed_mcc
;

54 
i
 = 0; i < 
mˇ°_cou¡
; i++) {

55 i‡(
	`memcmp
(
addr
, 
ëh±r
->
ed_mˇ
[
i
], 
ETH_ADDR_LEN
) ==0) {

59 
j
 = 
i
; j < 
mˇ°_cou¡
; j++) {

60 
	`mem˝y
(
ëh±r
->
ed_mˇ
[
j
],

61 
ëh±r
->
ed_mˇ
[
j
+1],
ETH_ADDR_LEN
);

62 
	`mem£t
(
ëh±r
->
ed_mˇ
[
j
+1],'0',

63 
ETH_ADDR_LEN
);

69 if(
i
 < 
mˇ°_cou¡
) {

73 
mˇ°_cou¡
--;

74 
ëh±r
->
ed_mcc
 = 
mˇ°_cou¡
;

75  
OK
;

77  
SYSERR
;

79 
	}
}

	@device/eth/ethread.c

3 
	~<xöu.h
>

9 
devˇŒ
 
	$ëhªad
 (

10 
díåy
 *
dev±r
,

11 *
buf
,

12 
öt32
 
Àn


15 
ëhcblk
 *
ëh±r
;

16 
ëh_q_rx_desc
 *
rdes˝å
;

17 
√çackë
 *
pkçå
;

18 
öt32
 
£gÀn
 = 0;

19 
öt32
 
‰amñí
 = 0;

20 
öt32
 
c›yÀn
 = 0;

21 *
˝å
;

22 
boﬁ8
 
fú°
, 
œ°
;

23 
boﬁ8
 
vÆid_addr
;

24 
öt32
 
i
;

26 
ëh±r
 = &
ëhîèb
[
dev±r
->
dvmö‹
];

28 
pkçå
 = (
√çackë
 *)
buf
;

34 
	`waô
(
ëh±r
->
i£m
);

38 
rdes˝å
 = (
ëh_q_rx_desc
 *)
ëh±r
->
rxRög
 +

39 
ëh±r
->
rxHód
;

43 
fú°
 = (
rdes˝å
->
°©us
 & 
ETH_QUARK_RDST_FS
) != 0;

44 
œ°
 = (
rdes˝å
->
°©us
 & 
ETH_QUARK_RDST_LS
) != 0;

46 if(
fú°
) {

50 
˝å
 = 
buf
;

51 
£gÀn
 = 
‰amñí
 = 
c›yÀn
 = 0;

56 
£gÀn
 = (
rdes˝å
->
°©us
 >> 16) & 0x3FFF;

58 if(
œ°
) {

63 
£gÀn
 -
‰amñí
;

68 
‰amñí
 +
£gÀn
;

72 
c›yÀn
 = 
£gÀn
;

73 if(
‰amñí
 > 
Àn
) {

74 
c›yÀn
 -(
‰amñí
 - 
Àn
);

79 if(
c›yÀn
 > 0) {

80 
	`mem˝y
(
˝å
, (*)
rdes˝å
->
buf„r1
,

81 (
uöt32
)
c›yÀn
);

82 
˝å
 +
c›yÀn
;

85 if(
œ°
) {

89 if(!
	`memcmp
(
pkçå
->
√t_ëhd°
,

90 
ëh±r
->
devAddªss
, 6)) {

91 
vÆid_addr
 = 
TRUE
;

95 } if(!
	`memcmp
(
pkçå
->
√t_ëhd°
,

96 
NëD©a
.
ëhbˇ°
,6)) {

97 
vÆid_addr
 = 
TRUE
;

102 
vÆid_addr
 = 
FALSE
;

103 
i
 = 0; i < (
ëh±r
->
ed_mcc
); i++) {

104 if(
	`memcmp
(
pkçå
->
√t_ëhd°
,

105 
ëh±r
->
ed_mˇ
[
i
], 6) == 0){

106 
vÆid_addr
 = 
TRUE
;

115 
ëh±r
->
rxHód
 += 1;

116 if(
ëh±r
->
rxHód
 >
ETH_QUARK_RX_RING_SIZE
) {

117 
ëh±r
->
rxHód
 = 0;

122 
rdes˝å
->
buf1size
 = 
ETH_BUF_SIZE
;

126 if(
ëh±r
->
rxHód
 == 0) {

127 
rdes˝å
->
rd˘l1
 |(
ETH_QUARK_RDCTL1_RER
);

132 
rdes˝å
->
°©us
 = 
ETH_QUARK_RDST_OWN
;

134 if(
vÆid_addr
 =
TRUE
) {

141  (
‰amñí
 > 
Àn
) ?Üen : framelen;

143 
	}
}

	@device/eth/ethwrite.c

3 
	~<xöu.h
>

9 
devˇŒ
 
	$ëhwrôe
 (

10 
díåy
 *
dev±r
,

11 *
buf
,

12 
öt32
 
Àn


15 
ëhcblk
 *
ëh±r
;

16 
ëh_q_c§eg
 *
c§±r
;

17 vﬁ©ûê
ëh_q_tx_desc
 *
des˝å
;

18 
uöt32
 
i
;

20 
ëh±r
 = &
ëhîèb
[
dev±r
->
dvmö‹
];

22 
c§±r
 = (
ëh_q_c§eg
 *)
ëh±r
->
c§
;

26 
	`waô
(
ëh±r
->
o£m
);

30 
des˝å
 = (
ëh_q_tx_desc
 *)
ëh±r
->
txRög
 +Éth±r->
txTaû
;

34 
ëh±r
->
txTaû
 += 1;

35 if(
ëh±r
->
txTaû
 >ëh±r->
txRögSize
) {

36 
ëh±r
->
txTaû
 = 0;

41 
des˝å
->
buf1size
 = 
Àn
;

45 
i
 = 0; i < 
Àn
; i++) {

46 *((*)
des˝å
->
buf„r1
 + 
i
Ë*((*)
buf
 + i);

51 if(
ëh±r
->
txTaû
 == 0) {

52 
des˝å
->
˘æ°©
 = 
ETH_QUARK_TDCS_TER
;

54 
des˝å
->
˘æ°©
 = 0;

59 
des˝å
->
˘æ°©
 |=

60 (
ETH_QUARK_TDCS_OWN
 |

61 
ETH_QUARK_TDCS_IC
 |

62 
ETH_QUARK_TDCS_LS
 |

63 
ETH_QUARK_TDCS_FS
);

67 
c§±r
->
çdr
 = 1;

69  
OK
;

70 
	}
}

	@device/lfs/lfdballoc.c

3 
	~<xöu.h
>

5 
	#DFILL
 '+'

	)

12 
dbid32
 
	$lfdbÆloc
 (

13 
lfdb‰ì
 *
dbuff


16 
dbid32
 
dnum
;

17 
öt32
 
ªtvÆ
;

21 
dnum
 = 
Lf_d©a
.
lf_dú
.
lfd_d‰ì
;

22 i‡(
dnum
 =
LF_DNULL
) {

23 
	`∑nic
("out of data blocks");

25 
ªtvÆ
 = 
	`ªad
(
Lf_d©a
.
lf_dskdev
, (*)
dbuff
, 
dnum
);

26 i‡(
ªtvÆ
 =
SYSERR
) {

27 
	`∑nic
("lfdballoc cannotÑead disk block\n\r");

32 
Lf_d©a
.
lf_dú
.
lfd_d‰ì
 = 
dbuff
->
lf_√xtdb
;

33 
	`wrôe
(
Lf_d©a
.
lf_dskdev
, (*)&Lf_d©a.
lf_dú
, 
LF_AREA_DIR
);

34 
Lf_d©a
.
lf_dúdúty
 = 
FALSE
;

38 
	`mem£t
((*)
dbuff
, 
DFILL
, 
LF_BLKSIZ
);

39  
dnum
;

40 
	}
}

	@device/lfs/lfdbfree.c

3 
	~<xöu.h
>

10 
°©us
 
	$lfdb‰ì
(

11 
did32
 
diskdev
,

12 
dbid32
 
dnum


15 
lfdú
 *
dú±r
;

16 
lfdb‰ì
 
buf
;

18 
dú±r
 = &
Lf_d©a
.
lf_dú
;

19 
buf
.
lf_√xtdb
 = 
dú±r
->
lfd_d‰ì
;

20 
dú±r
->
lfd_d‰ì
 = 
dnum
;

21 
	`wrôe
(
diskdev
, (*)&
buf
, 
dnum
);

22 
	`wrôe
(
diskdev
, (*)
dú±r
, 
LF_AREA_DIR
);

24  
OK
;

25 
	}
}

	@device/lfs/lfflush.c

3 
	~<xöu.h
>

10 
°©us
 
	$lfÊush
 (

11 
lÊcblk
 *
lÂå


15 i‡(
lÂå
->
lf°©e
 =
LF_FREE
) {

16  
SYSERR
;

21 i‡(
Lf_d©a
.
lf_dúdúty
) {

22 
	`wrôe
(
Lf_d©a
.
lf_dskdev
, (*)&Lf_d©a.
lf_dú
,

23 
LF_AREA_DIR
);

24 
Lf_d©a
.
lf_dúdúty
 = 
FALSE
;

29 i‡(
lÂå
->
lfdbdúty
) {

30 
	`wrôe
(
Lf_d©a
.
lf_dskdev
, 
lÂå
->
lfdblock
,ÜÂå->
lfdnum
);

31 
lÂå
->
lfdbdúty
 = 
FALSE
;

36 i‡(
lÂå
->
lfibdúty
) {

37 
	`lfibput
(
Lf_d©a
.
lf_dskdev
, 
lÂå
->
lföum
, &lÂå->
lfiblock
);

38 
lÂå
->
lfibdúty
 = 
FALSE
;

41  
OK
;

42 
	}
}

	@device/lfs/lfgetmode.c

3 
	~<xöu.h
>

9 
öt32
 
	$lfgëmode
 (

10 *
mode


13 
öt32
 
mbôs
;

14 
ch
;

16 
mbôs
 = 0;

24  (
ch
 = *
mode
++Ë!
NULLCH
) {

25 
ch
) {

27 'r': i‡(
mbôs
&
LF_MODE_R
) {

28  
SYSERR
;

30 
mbôs
 |
LF_MODE_R
;

33 'w': i‡(
mbôs
&
LF_MODE_W
) {

34  
SYSERR
;

36 
mbôs
 |
LF_MODE_W
;

39 'o': i‡(
mbôs
&
LF_MODE_O
 || mbôs&
LF_MODE_N
) {

40  
SYSERR
;

42 
mbôs
 |
LF_MODE_O
;

45 'n': i‡(
mbôs
&
LF_MODE_O
 || mbôs&
LF_MODE_N
) {

46  
SYSERR
;

48 
mbôs
 |
LF_MODE_N
;

51 :  
SYSERR
;

57 i‡–(
mbôs
&
LF_MODE_RW
) == 0 ) {

58 
mbôs
 |
LF_MODE_RW
;

60  
mbôs
;

61 
	}
}

	@device/lfs/lfiballoc.c

3 
	~<xöu.h
>

10 
ibid32
 
	$lfibÆloc
 ()

12 
ibid32
 
ibnum
;

13 
lfiblk
 
iblock
;

17 
ibnum
 = 
Lf_d©a
.
lf_dú
.
lfd_i‰ì
;

18 i‡(
ibnum
 =
LF_INULL
) {

19 
	`∑nic
("out of index blocks");

21 
	`lfibgë
(
Lf_d©a
.
lf_dskdev
, 
ibnum
, &
iblock
);

25 
Lf_d©a
.
lf_dú
.
lfd_i‰ì
 = 
iblock
.
ib_√xt
;

29 
	`wrôe
(
Lf_d©a
.
lf_dskdev
, (*Ë&Lf_d©a.
lf_dú
, 
LF_AREA_DIR
);

30 
Lf_d©a
.
lf_dúdúty
 = 
FALSE
;

32  
ibnum
;

33 
	}
}

	@device/lfs/lfibclear.c

3 
	~<xöu.h
>

9 
	$lfib˛ór
(

10 
lfiblk
 *
ib±r
,

11 
öt32
 
off£t


14 
öt32
 
i
;

16 
ib±r
->
ib_off£t
 = 
off£t
;

17 
i
=0 ; i<
LF_IBLEN
 ; i++) {

18 
ib±r
->
ib_dba
[
i
] = 
LF_DNULL
;

20 
ib±r
->
ib_√xt
 = 
LF_INULL
;

22 
	}
}

	@device/lfs/lfibget.c

3 
	~<xöu.h
>

10 
	$lfibgë
(

11 
did32
 
diskdev
,

12 
ibid32
 
öum
,

13 
lfiblk
 *
ibuff


16 *
‰om
, *
to
;

17 
öt32
 
i
;

18 
dbuff
[
LF_BLKSIZ
];

22 
	`ªad
(
diskdev
, 
dbuff
, 
	`ib2£˘
(
öum
));

26 
‰om
 = 
dbuff
 + 
	`ib2di•
(
öum
);

27 
to
 = (*)
ibuff
;

28 
i
=0 ; i<(
lfiblk
) ; i++)

29 *
to
++ = *
‰om
++;

31 
	}
}

	@device/lfs/lfibput.c

3 
	~<xöu.h
>

10 
°©us
 
	$lfibput
(

11 
did32
 
diskdev
,

12 
ibid32
 
öum
,

13 
lfiblk
 *
ibuff


16 
dbid32
 
diskblock
;

17 *
‰om
, *
to
;

18 
öt32
 
i
;

19 
dbuff
[
LF_BLKSIZ
];

23 
diskblock
 = 
	`ib2£˘
(
öum
);

24 
to
 = 
dbuff
 + 
	`ib2di•
(
öum
);

25 
‰om
 = (*)
ibuff
;

29 i‡(
	`ªad
(
diskdev
, 
dbuff
, 
diskblock
Ë=
SYSERR
) {

30  
SYSERR
;

35 
i
=0 ; i<(
lfiblk
) ; i++) {

36 *
to
++ = *
‰om
++;

41 
	`wrôe
(
diskdev
, 
dbuff
, 
diskblock
);

42  
OK
;

43 
	}
}

	@device/lfs/lflclose.c

3 
	~<xöu.h
>

9 
devˇŒ
 
	$lÊ˛o£
 (

10 
díåy
 *
dev±r


13 
lÊcblk
 *
lÂå
;

17 
lÂå
 = &
lÊèb
[
dev±r
->
dvmö‹
];

18 
	`waô
(
lÂå
->
lfmuãx
);

22 i‡(
lÂå
->
lf°©e
 !
LF_USED
) {

23 
	`sig«l
(
lÂå
->
lfmuãx
);

24  
SYSERR
;

29 i‡(
Lf_d©a
.
lf_dúdúty
 || 
lÂå
->
lfdbdúty
 ||ÜÂå->
lfibdúty
) {

30 
	`lfÊush
(
lÂå
);

35 
lÂå
->
lf°©e
 = 
LF_FREE
;

36 
	`sig«l
(
lÂå
->
lfmuãx
);

37  
OK
;

38 
	}
}

	@device/lfs/lflcontrol.c

3 
	~<xöu.h
>

9 
devˇŒ
 
	$lÊc⁄åﬁ
 (

10 
díåy
 *
dev±r
,

11 
öt32
 
func
,

12 
öt32
 
¨g1
,

13 
öt32
 
¨g2


16 
lÊcblk
 *
lÂå
;

17 
öt32
 
ªtvÆ
;

21 
lÂå
 = &
lÊèb
[
dev±r
->
dvmö‹
];

22 
	`waô
(
lÂå
->
lfmuãx
);

26 i‡(
lÂå
->
lf°©e
 !
LF_USED
) {

27 
	`sig«l
(
lÂå
->
lfmuãx
);

28  
SYSERR
;

31 
func
) {

35 
LF_CTL_TRUNC
:

36 
	`waô
(
Lf_d©a
.
lf_muãx
);

37 
ªtvÆ
 = 
	`l·runˇã
(
lÂå
);

38 
	`sig«l
(
Lf_d©a
.
lf_muãx
);

39 
	`sig«l
(
lÂå
->
lfmuãx
);

40  
ªtvÆ
;

43 
	`k¥ötf
("lfc⁄åﬁ: fun˘i⁄ %dÇŸ vÆid\n\r", 
func
);

44 
	`sig«l
(
lÂå
->
lfmuãx
);

45  
SYSERR
;

47 
	}
}

	@device/lfs/lflgetc.c

3 
	~<xöu.h
>

9 
devˇŒ
 
	$lÊgëc
 (

10 
díåy
 *
dev±r


13 
lÊcblk
 *
lÂå
;

14 
ldíåy
 *
ld±r
;

16 
öt32
 
⁄ebyã
;

20 
lÂå
 = &
lÊèb
[
dev±r
->
dvmö‹
];

21 
	`waô
(
lÂå
->
lfmuãx
);

25 i‡(
lÂå
->
lf°©e
 !
LF_USED
) {

26 
	`sig«l
(
lÂå
->
lfmuãx
);

27  
SYSERR
;

32 
ld±r
 = 
lÂå
->
lfdú±r
;

33 i‡(
lÂå
->
lÂos
 >
ld±r
->
ld_size
) {

34 
	`sig«l
(
lÂå
->
lfmuãx
);

35  
EOF
;

41 i‡(
lÂå
->
lfbyã
 >&lÂå->
lfdblock
[
LF_BLKSIZ
]) {

42 
	`lf£tup
(
lÂå
);

48 
⁄ebyã
 = 0xf‡& *
lÂå
->
lfbyã
++;

49 
lÂå
->
lÂos
++;

50 
	`sig«l
(
lÂå
->
lfmuãx
);

51  
⁄ebyã
;

52 
	}
}

	@device/lfs/lflinit.c

3 
	~<xöu.h
>

5 
lÊcblk
 
	glÊèb
[
NlÊ
];

11 
devˇŒ
 
	$lÊöô
 (

12 
díåy
 *
dev±r


15 
lÊcblk
 *
lÂå
;

16 
öt32
 
i
;

18 
lÂå
 = &
lÊèb
[ 
dev±r
->
dvmö‹
 ];

22 
lÂå
->
lf°©e
 = 
LF_FREE
;

23 
lÂå
->
lfdev
 = 
dev±r
->
dvnum
;

24 
lÂå
->
lfmuãx
 = 
	`£m¸óã
(1);

28 
lÂå
->
lfdú±r
 = (
ldíåy
 *Ë
NULL
;

29 
lÂå
->
lÂos
 = 0;

30 
i
=0; i<
LF_NAME_LEN
; i++) {

31 
lÂå
->
l‚ame
[
i
] = 
NULLCH
;

36 
lÂå
->
lföum
 = 
LF_INULL
;

37 
	`mem£t
((*Ë&
lÂå
->
lfiblock
, 
NULLCH
, (
lfiblk
));

38 
lÂå
->
lfdnum
 = 0;

39 
	`mem£t
((*Ë&
lÂå
->
lfdblock
, 
NULLCH
, 
LF_BLKSIZ
);

43 
lÂå
->
lfbyã
 = &lÂå->
lfdblock
[
LF_BLKSIZ
];

44 
lÂå
->
lfibdúty
 =ÜÂå->
lfdbdúty
 = 
FALSE
;

45  
OK
;

46 
	}
}

	@device/lfs/lflputc.c

3 
	~<xöu.h
>

9 
devˇŒ
 
	$lÊputc
 (

10 
díåy
 *
dev±r
,

11 
ch


14 
lÊcblk
 *
lÂå
;

15 
ldíåy
 *
ld±r
;

20 
lÂå
 = &
lÊèb
[
dev±r
->
dvmö‹
];

21 
	`waô
(
lÂå
->
lfmuãx
);

25 i‡(
lÂå
->
lf°©e
 !
LF_USED
) {

26 
	`sig«l
(
lÂå
->
lfmuãx
);

27  
SYSERR
;

33 
ld±r
 = 
lÂå
->
lfdú±r
;

34 i‡(
lÂå
->
lÂos
 > 
ld±r
->
ld_size
) {

35 
	`sig«l
(
lÂå
->
lfmuãx
);

36  
SYSERR
;

41 i‡(
lÂå
->
lfbyã
 >&lÂå->
lfdblock
[
LF_BLKSIZ
]) {

45 
	`lf£tup
(
lÂå
);

51 i‡(
lÂå
->
lÂos
 >
ld±r
->
ld_size
) {

52 
ld±r
->
ld_size
++;

53 
Lf_d©a
.
lf_dúdúty
 = 
TRUE
;

58 *
lÂå
->
lfbyã
++ = 
ch
;

59 
lÂå
->
lÂos
++;

60 
lÂå
->
lfdbdúty
 = 
TRUE
;

62 
	`sig«l
(
lÂå
->
lfmuãx
);

63  
OK
;

64 
	}
}

	@device/lfs/lflread.c

3 
	~<xöu.h
>

9 
devˇŒ
 
	$lÊªad
 (

10 
díåy
 *
dev±r
,

11 *
buff
,

12 
öt32
 
cou¡


15 
uöt32
 
numªad
;

16 
öt32
 
nxtbyã
;

18 i‡(
cou¡
 < 0) {

19  
SYSERR
;

24 
numªad
=0 ;Çumªad < 
cou¡
 ;Çumread++) {

25 
nxtbyã
 = 
	`lÊgëc
(
dev±r
);

26 i‡(
nxtbyã
 =
SYSERR
) {

27  
SYSERR
;

28 } i‡(
nxtbyã
 =
EOF
) {

29 i‡(
numªad
 == 0) {

30  
EOF
;

32  
numªad
;

35 *
buff
++ = (Ë(0xf‡& 
nxtbyã
);

38  
numªad
;

39 
	}
}

	@device/lfs/lflseek.c

3 
	~<xöu.h
>

9 
devˇŒ
 
	$lÊ£ek
 (

10 
díåy
 *
dev±r
,

11 
uöt32
 
off£t


14 
lÊcblk
 *
lÂå
;

18 
lÂå
 = &
lÊèb
[
dev±r
->
dvmö‹
];

19 
	`waô
(
lÂå
->
lfmuãx
);

20 i‡(
lÂå
->
lf°©e
 !
LF_USED
) {

21 
	`sig«l
(
lÂå
->
lfmuãx
);

22  
SYSERR
;

27 i‡(
off£t
 > 
lÂå
->
lfdú±r
->
ld_size
) {

28 
	`sig«l
(
lÂå
->
lfmuãx
);

29  
SYSERR
;

36 
lÂå
->
lÂos
 = 
off£t
;

37 
lÂå
->
lfbyã
 = &lÂå->
lfdblock
[
LF_BLKSIZ
];

39 
	`sig«l
(
lÂå
->
lfmuãx
);

40  
OK
;

41 
	}
}

	@device/lfs/lflwrite.c

3 
	~<xöu.h
>

9 
devˇŒ
 
	$lÊwrôe
 (

10 
díåy
 *
dev±r
,

11 *
buff
,

12 
öt32
 
cou¡


15 
öt32
 
i
;

17 i‡(
cou¡
 < 0) {

18  
SYSERR
;

23 
i
=0; i<
cou¡
; i++) {

24 i‡(
	`lÊputc
(
dev±r
, *
buff
++Ë=
SYSERR
) {

25  
SYSERR
;

28  
cou¡
;

29 
	}
}

	@device/lfs/lfscheck.c

3 
	~<xöu.h
>

4 
	~<ømdisk.h
>

10 
°©us
 
	$lfscheck
 (

11 
lfdú
 *
dú±r


14 
uöt32
 
ªvî£
;

18 i‡–(
dú±r
->
lfd_fsysid
 !
LFS_ID
) ||

19 (
dú±r
->
lfd_Ælzîos
 != 0x00000000) ||

20 (
dú±r
->
lfd_Æl⁄es
 != 0xffffffff) ) {

21  
SYSERR
;

26 
ªvî£
 = ((
LFS_ID
>>24) & 0x000000ff) |

27 ((
LFS_ID
>> 8) & 0x0000ff00) |

28 ((
LFS_ID
<< 8) & 0x00ff0000) |

29 ((
LFS_ID
<<24) & 0xff000000) ;

31 i‡(
dú±r
->
lfd_ªvid
 !
ªvî£
) {

32  
SYSERR
;

36 i‡(
dú±r
->
lfd_nfûes
 < 0){

37  
SYSERR
;

39  
OK
;

40 
	}
}

	@device/lfs/lfsckfmt.c

3 
	~<xöu.h
>

4 
	~<ømdisk.h
>

10 
°©us
 
	$lfsckfmt
 (

11 
did32
 
disk


14 
uöt32
 
ib£˘‹s
;

15 
lfdú
 
dú
;

16 
uöt32
 
dblks
;

17 
lfiblk
 
iblock
;

18 
lfdb‰ì
 
dblock
;

19 
öt32
 
lfiblks
;

20 
öt32
 
ªtvÆ
;

21 
ibid32
 
√xtib
;

22 
dbid32
 
√xtdb
;

26 
ªtvÆ
 = 
	`ªad
(
disk
,(*)&
dú
, 
LF_AREA_DIR
);

27 i‡(
ªtvÆ
 =
SYSERR
) {

28 
	`∑nic
("cannotÑead directory");

30 
	`k¥ötf
("HaveÑead directory from disk device %d\n\r",

31 
disk
);

35 i‡(
	`lfscheck
(&
dú
Ë=
SYSERR
) {

36 
	`∑nic
("directory doesÇot containá Xinu file system");

38 
	`k¥ötf
("Directory correspondsÅoáÜocal Xinu file system\n");

42 
lfiblks
 = 0;

43 
√xtib
 = 
dú
.
lfd_i‰ì
;

44 
	`k¥ötf
("öôü»ödex block i†%d\n\r", 
√xtib
);

45 
√xtib
 !
LF_INULL
) {

46 
lfiblks
++;

47 
	`lfibgë
(
disk
, 
√xtib
, &
iblock
);

48 
√xtib
 = 
iblock
.
ib_√xt
;

50 
ib£˘‹s
 = (
lfiblks
 + 6) /7;

51 
	`k¥ötf
("Found %d index block†(%d se˘‹s)\n\r", 
lfiblks
, 
ib£˘‹s
);

55 
dblks
 = 0;

56 
√xtdb
 = 
dú
.
lfd_d‰ì
;

57 
	`k¥ötf
("öôü»d©®block i†%d\n\r", 
√xtdb
);

58 
√xtdb
 !
LF_DNULL
) {

59 
dblks
++;

60 
	`ªad
(
disk
, (*)&
dblock
, 
√xtdb
);

61 
√xtdb
 = 
dblock
.
lf_√xtdb
;

63 
	`k¥ötf
("Found %d d©®blocks\n\r", 
dblks
);

64  
OK
;

65 
	}
}

	@device/lfs/lfscreate.c

3 
	~<xöu.h
>

4 
	~<ømdisk.h
>

10 
°©us
 
	$lfs¸óã
 (

11 
did32
 
disk
,

12 
ibid32
 
lfiblks
,

13 
uöt32
 
dsiz


16 
uöt32
 
£˘‹s
;

17 
uöt32
 
ib£˘‹s
;

18 
uöt32
 
ib≥r£˘‹
;

19 
lfdú
 
dú
;

20 
uöt32
 
dblks
;

21 
lfiblk
 
iblock
;

22 
lfdb‰ì
 
dblock
;

23 
dbid32
 
dbödex
;

24 
öt32
 
ªtvÆ
;

25 
öt32
 
i
;

29 
£˘‹s
 = 
dsiz
 / 
LF_BLKSIZ
;

33 
ib≥r£˘‹
 = 
LF_BLKSIZ
 / (
lfiblk
);

34 
ib£˘‹s
 = (
lfiblks
+(
ib≥r£˘‹
-1)) / ibpersector;

35 
lfiblks
 = 
ib£˘‹s
 * 
ib≥r£˘‹
;

36 i‡(
ib£˘‹s
 > 
£˘‹s
/2) {

37  
SYSERR
;

42 
	`mem£t
((*)&
dú
, 
NULLCH
, (
lfdú
));

43 
dú
.
lfd_nfûes
 = 0;

44 
dbödex
(
dbid32
)(
ib£˘‹s
 + 1);

45 
dú
.
lfd_d‰ì
 = 
dbödex
;

46 
dblks
 = 
£˘‹s
 - 
ib£˘‹s
 - 1;

47 
ªtvÆ
 = 
	`wrôe
(
disk
,(*)&
dú
, 
LF_AREA_DIR
);

48 i‡(
ªtvÆ
 =
SYSERR
) {

49  
SYSERR
;

54 
	`lfib˛ór
(&
iblock
, 0);

55 
i
=0; i<
lfiblks
-1; i++) {

56 
iblock
.
ib_√xt
 = (
ibid32
)(
i
 + 1);

57 
	`lfibput
(
disk
, 
i
, &
iblock
);

59 
iblock
.
ib_√xt
 = 
LF_INULL
;

60 
	`lfibput
(
disk
, 
i
, &
iblock
);

64 
	`mem£t
((*)&
dblock
, 
NULLCH
, 
LF_BLKSIZ
);

65 
i
=0; i<
dblks
-1; i++) {

66 
dblock
.
lf_√xtdb
 = 
dbödex
 + 1;

67 
	`wrôe
(
disk
, (*)&
dblock
, 
dbödex
);

68 
dbödex
++;

70 
dblock
.
lf_√xtdb
 = 
LF_DNULL
;

71 
	`wrôe
(
disk
, (*)&
dblock
, 
dbödex
);

72 
	`˛o£
(
disk
);

73  
OK
;

74 
	}
}

	@device/lfs/lfsetup.c

3 
	~<xöu.h
>

10 
°©us
 
	$lf£tup
 (

11 
lÊcblk
 *
lÂå


14 
dbid32
 
dnum
;

15 
ibid32
 
ibnum
;

16 
ldíåy
 *
ld±r
;

17 
lfiblk
 *
ib±r
;

18 
uöt32
 
√woff£t
;

20 
öt32
 
dödex
;

26 
	`waô
(
Lf_d©a
.
lf_muãx
);

31 
ld±r
 = 
lÂå
->
lfdú±r
;

32 
ib±r
 = &
lÂå
->
lfiblock
;

36 i‡(
lÂå
->
lfibdúty
 ||ÜÂå->
lfdbdúty
) {

37 
	`lfÊush
(
lÂå
);

39 
ibnum
 = 
lÂå
->
lföum
;

45 i‡(
ibnum
 =
LF_INULL
) {

49 
ibnum
 = 
ld±r
->
ld_ûi°
;

50 i‡(
ibnum
 =
LF_INULL
) {

51 
ibnum
 = 
	`lfibÆloc
();

52 
	`lfib˛ór
(
ib±r
, 0);

53 
ld±r
->
ld_ûi°
 = 
ibnum
;

54 
lÂå
->
lfibdúty
 = 
TRUE
;

56 
	`lfibgë
(
Lf_d©a
.
lf_dskdev
, 
ibnum
, 
ib±r
);

58 
lÂå
->
lföum
 = 
ibnum
;

64 } i‡(
lÂå
->
lÂos
 < 
ib±r
->
ib_off£t
) {

69 
ibnum
 = 
ld±r
->
ld_ûi°
;

70 
	`lfibgë
(
Lf_d©a
.
lf_dskdev
, 
ibnum
, 
ib±r
);

71 
lÂå
->
lföum
 = 
ibnum
;

78 (
lÂå
->
lÂos
 & ~
LF_IMASK
Ë> 
ib±r
->
ib_off£t
 ) {

79 
ibnum
 = 
ib±r
->
ib_√xt
;

80 i‡(
ibnum
 =
LF_INULL
) {

82 
ibnum
 = 
	`lfibÆloc
();

83 
ib±r
->
ib_√xt
 = 
ibnum
;

84 
	`lfibput
(
Lf_d©a
.
lf_dskdev
, 
lÂå
->
lföum
, 
ib±r
);

85 
lÂå
->
lföum
 = 
ibnum
;

86 
√woff£t
 = 
ib±r
->
ib_off£t
 + 
LF_IDATA
;

87 
	`lfib˛ór
(
ib±r
, 
√woff£t
);

88 
lÂå
->
lfibdúty
 = 
TRUE
;

90 
	`lfibgë
(
Lf_d©a
.
lf_dskdev
, 
ibnum
, 
ib±r
);

91 
lÂå
->
lföum
 = 
ibnum
;

93 
lÂå
->
lfdnum
 = 
LF_DNULL
;

100 
dödex
 = (
lÂå
->
lÂos
 & 
LF_IMASK
) >> 9;

105 
dnum
 = 
lÂå
->
lfiblock
.
ib_dba
[
dödex
];

106 i‡(
dnum
 =
LF_DNULL
) {

107 
dnum
 = 
	`lfdbÆloc
((
lfdb‰ì
 *)&
lÂå
->
lfdblock
);

108 
lÂå
->
lfiblock
.
ib_dba
[
dödex
] = 
dnum
;

109 
lÂå
->
lfibdúty
 = 
TRUE
;

110 } i‡–
dnum
 !
lÂå
->
lfdnum
) {

111 
	`ªad
(
Lf_d©a
.
lf_dskdev
, (*)
lÂå
->
lfdblock
, 
dnum
);

112 
lÂå
->
lfdbdúty
 = 
FALSE
;

114 
lÂå
->
lfdnum
 = 
dnum
;

119 
lÂå
->
lfbyã
 = &lÂå->
lfdblock
[lÂå->
lÂos
 & 
LF_DMASK
];

120 
	`sig«l
(
Lf_d©a
.
lf_muãx
);

121  
OK
;

122 
	}
}

	@device/lfs/lfsinit.c

3 
	~<xöu.h
>

5 
lfd©a
 
	gLf_d©a
;

11 
devˇŒ
 
	$lfsöô
 (

12 
díåy
 *
dev±r


17 
Lf_d©a
.
lf_dskdev
 = 
LF_DISK_DEV
;

21 
Lf_d©a
.
lf_muãx
 = 
	`£m¸óã
(1);

25 
	`mem£t
((*)&
Lf_d©a
.
lf_dú
, 
NULLCH
, (
lfdú
));

29 
Lf_d©a
.
lf_dú¥e£¡
 = Lf_d©a.
lf_dúdúty
 = 
FALSE
;

31  
OK
;

32 
	}
}

	@device/lfs/lfsopen.c

3 
	~<xöu.h
>

9 
devˇŒ
 
	$lfs›í
 (

10 
díåy
 *
dev±r
,

11 *
«me
,

12 *
mode


15 
lfdú
 *
dú±r
;

16 *
‰om
, *
to
;

17 *
«m
, *
cmp
;

18 
öt32
 
i
;

19 
did32
 
l‚ext
;

21 
ldíåy
 *
ld±r
;

22 
lÊcblk
 *
lÂå
;

23 
boﬁ8
 
found
;

24 
öt32
 
ªtvÆ
;

25 
öt32
 
mbôs
;

29 
‰om
 = 
«me
;

30 
i
=0; i< 
LF_NAME_LEN
; i++) {

31 i‡(*
‰om
++ =
NULLCH
) {

35 i‡(
i
 >
LF_NAME_LEN
) {

36  
SYSERR
;

41 
mbôs
 = 
	`lfgëmode
(
mode
);

42 i‡(
mbôs
 =
SYSERR
) {

43  
SYSERR
;

48 
l‚ext
 = 
SYSERR
;

49 
i
=0; i<
NlÊ
; i++) {

50 
lÂå
 = &
lÊèb
[
i
];

51 i‡(
lÂå
->
lf°©e
 =
LF_FREE
) {

52 i‡(
l‚ext
 =
SYSERR
) {

53 
l‚ext
 = 
i
;

60 
«m
 = 
«me
;

61 
cmp
 = 
lÂå
->
l‚ame
;

62 *
«m
 !
NULLCH
) {

63 i‡(*
«m
 !*
cmp
) {

66 
«m
++;

67 
cmp
++;

72 i‡–(*
«m
==
NULLCH
Ë&& (*
cmp
 == NULLCH) ) {

73  
SYSERR
;

76 i‡(
l‚ext
 =
SYSERR
) {

77  
SYSERR
;

82 
dú±r
 = &
Lf_d©a
.
lf_dú
;

83 
	`waô
(
Lf_d©a
.
lf_muãx
);

84 i‡(! 
Lf_d©a
.
lf_dú¥e£¡
) {

85 
ªtvÆ
 = 
	`ªad
(
Lf_d©a
.
lf_dskdev
,(*)
dú±r
,
LF_AREA_DIR
);

86 i‡(
ªtvÆ
 =
SYSERR
 ) {

87 
	`sig«l
(
Lf_d©a
.
lf_muãx
);

88  
SYSERR
;

90 i‡(
	`lfscheck
(
dú±r
Ë=
SYSERR
 ) {

91 
	`k¥ötf
("Disk doesÇot containá Xinu file system\n");

92 
	`sig«l
(
Lf_d©a
.
lf_muãx
);

93  
SYSERR
;

95 
Lf_d©a
.
lf_dú¥e£¡
 = 
TRUE
;

100 
found
 = 
FALSE
;

101 
i
=0; i<
dú±r
->
lfd_nfûes
; i++) {

102 
ld±r
 = &
dú±r
->
lfd_fûes
[
i
];

103 
«m
 = 
«me
;

104 
cmp
 = 
ld±r
->
ld_«me
;

105 *
«m
 !
NULLCH
) {

106 i‡(*
«m
 !*
cmp
) {

109 
«m
++;

110 
cmp
++;

112 i‡–(*
«m
==
NULLCH
Ë&& (*
cmp
==NULLCH) ) {

113 
found
 = 
TRUE
;

120 i‡(! 
found
) {

121 i‡(
mbôs
 & 
LF_MODE_O
) {

122 
	`sig«l
(
Lf_d©a
.
lf_muãx
);

123  
SYSERR
;

130 i‡(
dú±r
->
lfd_nfûes
 >
LF_NUM_DIR_ENT
) {

131 
	`sig«l
(
Lf_d©a
.
lf_muãx
);

132  
SYSERR
;

137 
ld±r
 = &
dú±r
->
lfd_fûes
[dú±r->
lfd_nfûes
++];

138 
ld±r
->
ld_size
 = 0;

139 
‰om
 = 
«me
;

140 
to
 = 
ld±r
->
ld_«me
;

141  (*
to
++ = *
‰om
++Ë!
NULLCH
 ) {

144 
ld±r
->
ld_ûi°
 = 
LF_INULL
;

148 } i‡(
mbôs
 & 
LF_MODE_N
) {

149 
	`sig«l
(
Lf_d©a
.
lf_muãx
);

150  
SYSERR
;

155 
lÂå
 = &
lÊèb
[
l‚ext
];

156 
lÂå
->
lf°©e
 = 
LF_USED
;

157 
lÂå
->
lfdú±r
 = 
ld±r
;

158 
lÂå
->
lfmode
 = 
mbôs
 & 
LF_MODE_RW
;

162 
lÂå
->
lÂos
 = 0;

164 
to
 = 
lÂå
->
l‚ame
;

165 
‰om
 = 
«me
;

166  (*
to
++ = *
‰om
++Ë!
NULLCH
 ) {

172 
lÂå
->
lföum
 = 
LF_INULL
;

173 
lÂå
->
lfdnum
 = 
LF_DNULL
;

178 
lÂå
->
lfbyã
 = &lÂå->
lfdblock
[
LF_BLKSIZ
];

179 
lÂå
->
lfibdúty
 = 
FALSE
;

180 
lÂå
->
lfdbdúty
 = 
FALSE
;

182 
	`sig«l
(
Lf_d©a
.
lf_muãx
);

184  
lÂå
->
lfdev
;

185 
	}
}

	@device/lfs/lftruncate.c

3 
	~<xöu.h
>

10 
°©us
 
	$l·runˇã
 (

11 
lÊcblk
 *
lÂå


14 
ldíåy
 *
ld±r
;

15 
lfiblk
 
iblock
;

16 
ibid32
 
i‰ì
;

17 
ibid32
 
fú°ib
;

18 
ibid32
 
√xtib
;

20 
dbid32
 
√xtdb
;

21 
öt32
 
i
;

24 
ld±r
 = 
lÂå
->
lfdú±r
;

25 i‡(
ld±r
->
ld_size
 == 0) {

26  
OK
;

31 i‡–(
lÂå
->
lfibdúty
Ë|| (lÂå->
lfdbdúty
) ) {

32 
	`lfÊush
(
lÂå
);

34 
lÂå
->
lÂos
 = 0;

35 
lÂå
->
lföum
 = 
LF_INULL
;

36 
lÂå
->
lfdnum
 = 
LF_DNULL
;

37 
lÂå
->
lfbyã
 = &lÂå->
lfdblock
[
LF_BLKSIZ
];

41 
i‰ì
 = 
Lf_d©a
.
lf_dú
.
lfd_i‰ì
;

45 
fú°ib
 = 
ld±r
->
ld_ûi°
;

46 
ld±r
->
ld_ûi°
 = 
LF_INULL
;

47 
ld±r
->
ld_size
 = 0;

48 
Lf_d©a
.
lf_dúdúty
 = 
TRUE
;

54 
√xtib
=
fú°ib
;Çextib!=
i‰ì
;Çextib=
iblock
.
ib_√xt
) {

58 
	`lfibgë
(
Lf_d©a
.
lf_dskdev
, 
√xtib
, &
iblock
);

62 
i
=0; i<
LF_IBLEN
; i++) {

66 
√xtdb
 = 
iblock
.
ib_dba
[
i
];

67 i‡(
√xtdb
 !
LF_DNULL
) {

68 
	`lfdb‰ì
(
Lf_d©a
.
lf_dskdev
, 
√xtdb
);

73 
iblock
.
ib_dba
[
i
] = 
LF_DNULL
;

78 
iblock
.
ib_off£t
 = 0;

83 i‡(
iblock
.
ib_√xt
 =
LF_INULL
) {

84 
iblock
.
ib_√xt
 = 
i‰ì
;

89 
	`lfibput
(
Lf_d©a
.
lf_dskdev
, 
√xtib
, &
iblock
);

97 
Lf_d©a
.
lf_dú
.
lfd_i‰ì
 = 
fú°ib
;

101 
Lf_d©a
.
lf_dúdúty
 = 
TRUE
;

103  
OK
;

104 
	}
}

	@device/nam/mount.c

3 
	~<xöu.h
>

9 
sysˇŒ
 
	$mou¡
(

10 *
¥efix
,

11 *
ª∂a˚
,

12 
did32
 
devi˚


15 
ötmask
 
mask
;

16 
nmíåy
 *
«m±r
;

17 
öt32
 
psiz
, 
rsiz
;

18 
öt32
 
i
;

20 
mask
 = 
	`dißbÀ
();

22 
psiz
 = 
	`«mÀn
(
¥efix
, 
NM_PRELEN
);

23 
rsiz
 = 
	`«mÀn
(
ª∂a˚
, 
NM_REPLLEN
);

27 i‡–(
psiz
 =
SYSERR
Ë|| (
rsiz
 == SYSERR) ||

28 (
	`isbaddev
(
devi˚
)Ë|| (
¬ames
 >
NNAMES
) ) {

29 
	`ª°‹e
(
mask
);

30  
SYSERR
;

35 
«m±r
 = &
«mëab
[
¬ames
];

39 
i
=0; i<
psiz
; i++) {

40 
«m±r
->
≈ªfix
[
i
] = *
¥efix
++;

43 
i
=0; i<
rsiz
; i++) {

44 
«m±r
->
ƒïœ˚
[
i
] = *
ª∂a˚
++;

47 
«m±r
->
ndevi˚
 = 
devi˚
;

49 
¬ames
++;

51 
	`ª°‹e
(
mask
);

52  
OK
;

53 
	}
}

60 
öt32
 
	$«mÀn
(

61 *
«me
,

62 
öt32
 
maxÀn


66 
öt32
 
i
;

70 
i
=0; i < 
maxÀn
; i++) {

71 i‡(*
«me
++ =
NULLCH
) {

72  
i
+1;

75  
SYSERR
;

76 
	}
}

	@device/nam/naminit.c

3 
	~<xöu.h
>

5 #i‚def 
RFILESYS


6 
	#RFILESYS
 
SYSERR


	)

9 #i‚def 
FILESYS


10 
	#FILESYS
 
SYSERR


	)

13 #i‚def 
LFILESYS


14 
	#LFILESYS
 
SYSERR


	)

17 
nmíåy
 
	g«mëab
[
NNAMES
];

18 
öt32
 
	g¬ames
;

24 
°©us
 
	$«möô
()

26 
did32
 
i
;

27 
díåy
 *
dev±r
;

28 
tmp°r
[
NM_MAXLEN
];

29 
°©us
 
ªtvÆ
;

30 *
çå
;

31 *
≈å
;

32 
dev¥efix
[] = "/dev/";

33 
öt32
 
Àn
;

34 
ch
;

38 
¬ames
 = 0;

40 
i
=0; i<
NDEVS
 ; i++) {

41 
çå
 = 
tmp°r
;

42 
≈å
 = 
dev¥efix
;

46 
Àn
 = 0;

47 (*
çå
++ = *
≈å
++Ë!
NULLCH
) {

48 
Àn
++;

50 
çå
--;

51 
dev±r
 = &
devèb
[
i
];

52 
≈å
 = 
dev±r
->
dv«me
;

56 ++
Àn
 < 
NM_MAXLEN
) {

57 
ch
 = *
≈å
++;

58 i‡–(
ch
 >= 'A') && (ch <= 'Z')) {

59 
ch
 += 'a' - 'A';

61 i‡–(*
çå
++ = 
ch
Ë=
NULLCH
) {

66 i‡(
Àn
 > 
NM_MAXLEN
) {

67 
	`k¥ötf
("namespace: deviceÇame %sÅooÜong\r\n",

68 
dev±r
->
dv«me
);

72 
ªtvÆ
 = 
	`mou¡
(
tmp°r
, 
NULLSTR
, 
dev±r
->
dvnum
);

73 i‡(
ªtvÆ
 =
SYSERR
) {

74 
	`k¥ötf
("namespace: cannot mount device %d\r\n",

75 
dev±r
->
dv«me
);

82 
	`mou¡
("/dev/nuŒ", "", 
NULLDEV
);

83 
	`mou¡
("/ªmŸe/", "ªmŸe:", 
RFILESYS
);

84 
	`mou¡
("/loˇl/", 
NULLSTR
, 
LFILESYS
);

85 
	`mou¡
("/dev/", 
NULLSTR
, 
SYSERR
);

86 
	`mou¡
("~/", 
NULLSTR
, 
LFILESYS
);

87 
	`mou¡
("/", "roŸ:", 
RFILESYS
);

88 
	`mou¡
("", "", 
LFILESYS
);

90  
OK
;

91 
	}
}

	@device/nam/nammap.c

3 
	~<xöu.h
>

5 
°©us
 
«m˝y
(*, *, 
öt32
);

6 
did32
 
«mª∂
(*, []);

12 
devˇŒ
 
	$«mm≠
(

13 *
«me
,

14 
√w«me
[
NM_MAXLEN
],

15 
did32
 
«mdev


18 
did32
 
√wdev
;

19 
tm≤ame
[
NM_MAXLEN
];

20 
öt32
 
ôî
;

24 i‡(
	`«m˝y
(
tm≤ame
, 
«me
, 
NM_MAXLEN
Ë=
SYSERR
) {

25  
SYSERR
;

31 
ôî
=0; iãr<
¬ames
 ; iter++) {

32 
√wdev
 = 
	`«mª∂
(
tm≤ame
, 
√w«me
);

33 i‡(
√wdev
 !
«mdev
) {

34  
√wdev
;

36 
	`«m˝y
(
tm≤ame
, 
√w«me
, 
NM_MAXLEN
);

38  
SYSERR
;

39 
	}
}

45 
did32
 
	$«mª∂
(

46 *
«me
,

47 
√w«me
[
NM_MAXLEN
]

50 
öt32
 
i
;

51 *
µå
;

52 *
Ωå
;

53 *
›å
;

54 *
≈å
;

55 
ﬁí
;

57 
öt32
 
∂í
;

59 
öt32
 
æí
;

60 
öt32
 
ªmaö
;

61 
nmíåy
 *
«m±r
;

65 
i
=0; i<
¬ames
; i++) {

66 
«m±r
 = &
«mëab
[
i
];

67 
›å
 = 
«me
;

68 
µå
 = 
«m±r
->
≈ªfix
;

72 
∂í
=0; *
µå
 !
NULLCH
 ;Ölen++) {

73 i‡(*
µå
 !*
›å
) {

76 
µå
++;

77 
›å
++;

79 i‡(*
µå
 !
NULLCH
) {

88 
ﬁí
 = 
	`«mÀn
(
«me
 ,
NM_MAXLEN
);

89 
æí
 = 
	`«mÀn
(
«m±r
->
ƒïœ˚
,
NM_MAXLEN
) - 1;

90 
ªmaö
 = 
ﬁí
 - 
∂í
;

91 i‡–(
æí
 + 
ªmaö
Ë> 
NM_MAXLEN
) {

92  (
did32
)
SYSERR
;

99 
≈å
 = 
√w«me
;

100 
Ωå
 = 
«m±r
->
ƒïœ˚
;

101 ; 
æí
>0 ;Ñlen--) {

102 *
≈å
++ = *
Ωå
++;

104 ; 
ªmaö
>0 ;Ñemain--) {

105 *
≈å
++ = *
›å
++;

107  
«m±r
->
ndevi˚
;

109  (
did32
)
SYSERR
;

110 
	}
}

116 
°©us
 
	$«m˝y
(

117 *
√w«me
,

118 *
ﬁd«me
,

119 
öt32
 
buÊí


122 *
≈å
;

123 *
›å
;

124 
öt32
 
˙t
;

126 
≈å
 = 
√w«me
;

127 
›å
 = 
ﬁd«me
;

129 
˙t
=0; c¡<
buÊí
; cnt++) {

130 i‡–(*
≈å
++ = *
›å
++Ë=
NULLCH
) {

131  
OK
;

134  
SYSERR
;

135 
	}
}

	@device/nam/namopen.c

3 
	~<xöu.h
>

9 
devˇŒ
 
	$«m›í
(

10 
díåy
 *
dev±r
,

11 *
«me
,

12 *
mode


15 
√w«me
[
NM_MAXLEN
];

16 
did32
 
√wdev
;

20 
√wdev
 = 
	`«mm≠
(
«me
, 
√w«me
, 
dev±r
->
dvnum
);

22 i‡(
√wdev
 =
SYSERR
) {

23  
SYSERR
;

28  
	`›í
(
√wdev
, 
√w«me
, 
mode
);

29 
	}
}

	@device/ram/ramclose.c

3 
	~<xöu.h
>

9 
devˇŒ
 
	$øm˛o£
 (

10 
díåy
 *
dev±r


13  
OK
;

14 
	}
}

	@device/ram/raminit.c

3 
	~<xöu.h
>

4 
	~<ømdisk.h
>

6 
ømdisk
 
	gRam
;

12 
devˇŒ
 
	$ømöô
 (

13 
díåy
 *
dev±r


16 
	`mem˝y
(
Ram
.
disk
, "hopeless", 8);

17 
	`mem˝y
–&
Ram
.
disk
[8], Ram.disk, 
RM_BLKSIZ
 * 
RM_BLKS
 - 8);

18  
OK
;

19 
	}
}

	@device/ram/ramopen.c

3 
	~<xöu.h
>

10 
devˇŒ
 
	$øm›í
 (

11 
díåy
 *
dev±r
,

12 *
«me
,

13 *
mode


18  
dev±r
->
dvnum
;

19 
	}
}

	@device/ram/ramread.c

3 
	~<xöu.h
>

4 
	~<ømdisk.h
>

10 
devˇŒ
 
	$ømªad
 (

11 
díåy
 *
dev±r
,

12 *
buff
,

13 
öt32
 
blk


16 
öt32
 
bpos
;

18 
bpos
 = 
RM_BLKSIZ
 * 
blk
;

19 
	`mem˝y
(
buff
, &
Ram
.
disk
[
bpos
], 
RM_BLKSIZ
);

20  
OK
;

21 
	}
}

	@device/ram/ramwrite.c

3 
	~<xöu.h
>

4 
	~<ømdisk.h
>

10 
devˇŒ
 
	$ømwrôe
 (

11 
díåy
 *
dev±r
,

12 *
buff
,

13 
öt32
 
blk


16 
öt32
 
bpos
;

18 
bpos
 = 
RM_BLKSIZ
 * 
blk
;

19 
	`mem˝y
(&
Ram
.
disk
[
bpos
], 
buff
, 
RM_BLKSIZ
);

20  
OK
;

21 
	}
}

	@device/rds/rdsbufalloc.c

3 
	~<xöu.h
>

9 
rdbuff
 *
	$rdsbuÁŒoc
 (

10 
rdscblk
 *
rd±r


13 
rdbuff
 *
b±r
;

14 
rdbuff
 *
µå
;

15 
rdbuff
 *
≈å
;

19 
	`waô
(
rd±r
->
rd_avaû£m
);

23 
b±r
 = 
rd±r
->
rd_‰ì
;

25 i‡–
b±r
 !(
rdbuff
 *)
NULL
 ) {

26 
rd±r
->
rd_‰ì
 = 
b±r
->
rd_√xt
;

27  
b±r
;

34 
b±r
 = 
rd±r
->
rd_˘¥ev
;

35 
b±r
 !(
rdbuff
 *Ë&
rd±r
->
rd_ch√xt
) {

36 i‡(
b±r
->
rd_ªf˙t
 <= 0) {

40 
µå
 = 
b±r
->
rd_¥ev
;

41 
≈å
 = 
b±r
->
rd_√xt
;

42 
µå
->
rd_√xt
 = 
≈å
;

43 
≈å
->
rd_¥ev
 = 
µå
;

44  
b±r
;

46 
b±r
 = b±r->
rd_¥ev
;

48 
	`∑nic
("Remote disk cannot findánávailable buffer");

49  (
rdbuff
 *)
SYSERR
;

50 
	}
}

	@device/rds/rdsclose.c

3 
	~<xöu.h
>

9 
devˇŒ
 
	$rds˛o£
 (

10 
díåy
 *
dev±r


13 
rdscblk
 *
rd±r
;

14 
rdbuff
 *
b±r
;

15 
rdbuff
 *
≈å
;

16 
öt32
 
nmoved
;

20 
rd±r
 = &
rd°ab
[
dev±r
->
dvmö‹
];

21 i‡(
rd±r
->
rd_°©e
 !
RD_OPEN
) {

22  
SYSERR
;

27 i‡(
rd±r
->
rd_rh√xt
 !(
rdbuff
 *)&rd±r->
rd_π√xt
) {

28  
SYSERR
;

33 
b±r
 = 
rd±r
->
rd_ch√xt
;

34 
nmoved
 = 0;

35 
b±r
 !(
rdbuff
 *)&
rd±r
->
rd_˘√xt
) {

36 
nmoved
++;

40 
≈å
 = 
b±r
->
rd_√xt
;

41 (
b±r
->
rd_¥ev
)->
rd_√xt
 = 
≈å
;

42 
≈å
->
rd_¥ev
 = 
b±r
->rd_prev;

46 
b±r
->
rd_√xt
 = 
rd±r
->
rd_‰ì
;

48 
rd±r
->
rd_‰ì
 = 
b±r
;

49 
b±r
->
rd_°©us
 = 
RD_INVALID
;

53 
b±r
 = 
≈å
;

58 
rd±r
->
rd_°©e
 = 
RD_FREE
;

59  
OK
;

60 
	}
}

	@device/rds/rdscomm.c

3 
	~<xöu.h
>

11 
°©us
 
	$rdscomm
 (

12 
rd_msg_hdr
 *
msg
,

13 
öt32
 
mÀn
,

14 
rd_msg_hdr
 *
ª∂y
,

15 
öt32
 
æí
,

16 
rdscblk
 *
rd±r


19 
ötmask
 
mask
;

20 
öt32
 
i
;

21 
öt32
 
ªtvÆ
;

22 
öt32
 
£q
;

23 
uöt32
 
loˇlù
;

24 
öt16
 
πy≥
;

25 
boﬁ8
 
xmô
;

26 
öt32
 
¶Ÿ
;

30 
mask
 = 
	`dißbÀ
();

34 i‡–! 
rd±r
->
rd_ªgi°îed
 ) {

35 
¶Ÿ
 = 
	`udp_ªgi°î
(0, 
rd±r
->
rd_£r_p‹t
,

36 
rd±r
->
rd_loc_p‹t
);

37 if(
¶Ÿ
 =
SYSERR
) {

38 
	`ª°‹e
(
mask
);

39  
SYSERR
;

41 
rd±r
->
rd_udp¶Ÿ
 = 
¶Ÿ
;

42 
rd±r
->
rd_ªgi°îed
 = 
TRUE
;

47 i‡–
NëD©a
.
ùvÆid
 =
FALSE
 ) {

48 
loˇlù
 = 
	`gëloˇlù
();

49 if((
öt32
)
loˇlù
 =
SYSERR
) {

50 
	`ª°‹e
(
mask
);

51  
SYSERR
;

54 
	`ª°‹e
(
mask
);

58 
¶Ÿ
 = 
rd±r
->
rd_udp¶Ÿ
;

62 
£q
 = 
rd±r
->
rd_£q
++;

63 
msg
->
rd_£q
 = 
	`ht⁄l
(
£q
);

67 
xmô
 = 
TRUE
;

68 
i
=0; i<
RD_RETRIES
; i++) {

69 i‡(
xmô
) {

73 
ªtvÆ
 = 
	`udp_£ndto
(
¶Ÿ
, 
rd±r
->
rd_£r_ù
,Ñd±r->
rd_£r_p‹t
,

74 (*)
msg
, 
mÀn
);

75 i‡(
ªtvÆ
 =
SYSERR
) {

76 
	`k¥ötf
("Cannot sendÅoÑemote disk server\n\r");

77  
SYSERR
;

80 
xmô
 = 
TRUE
;

85 
ªtvÆ
 = 
	`udp_ªcv
(
¶Ÿ
, (*)
ª∂y
, 
æí
,

86 
RD_TIMEOUT
);

88 i‡(
ªtvÆ
 =
TIMEOUT
) {

90 } i‡(
ªtvÆ
 =
SYSERR
) {

91 
	`k¥ötf
("ErrorÑeadingÑemote diskÑeply\n\r");

92  
SYSERR
;

98 i‡(
	`¡ohl
(
ª∂y
->
rd_£q
Ë< 
£q
) {

99 
xmô
 = 
FALSE
;

100 } i‡(
	`¡ohl
(
ª∂y
->
rd_£q
Ë!
£q
) {

106 
πy≥
 = 
	`¡ohs
(
ª∂y
->
rd_ty≥
);

107 i‡(
πy≥
 !–
	`¡ohs
(
msg
->
rd_ty≥
Ë| 
RD_MSG_RESPONSE
) ) {

113 i‡(
	`¡ohs
(
ª∂y
->
rd_°©us
) != 0) {

114  
SYSERR
;

117  
OK
;

122 
	`k¥ötf
("Timeout onÉxchange withÑemote disk server\n\r");

123  
TIMEOUT
;

124 
	}
}

	@device/rds/rdscontrol.c

3 
	~<xöu.h
>

9 
devˇŒ
 
	$rdsc⁄åﬁ
 (

10 
díåy
 *
dev±r
,

11 
öt32
 
func
,

12 
öt32
 
¨g1
,

13 
öt32
 
¨g2


16 
rdscblk
 *
rd±r
;

17 
rdbuff
 *
b±r
;

19 
rdbuff
 *
µå
;

21 
rd_msg_dªq
 
msg
;

22 
rd_msg_dªs
 
ª•
;

23 *
to
, *
‰om
;

24 
öt32
 
ªtvÆ
;

28 
rd±r
 = &
rd°ab
[
dev±r
->
dvmö‹
];

29 i‡(
rd±r
->
rd_°©e
 !
RD_OPEN
) {

30  
SYSERR
;

35 i‡–! 
rd±r
->
rd_comruns
 ) {

36 
rd±r
->
rd_comruns
 = 
TRUE
;

37 
	`ªsume
(
rd±r
->
rd_com¥oc
);

40 
func
) {

44 
RDS_CTL_SYNC
:

48 
b±r
 = 
	`rdsbuÁŒoc
(
rd±r
);

49 i‡(
b±r
 =(
rdbuff
 *)
SYSERR
) {

50  
SYSERR
;

55 
b±r
->
rd_›
 = 
RD_OP_SYNC
;

56 
b±r
->
rd_ªf˙t
 = 1;

57 
b±r
->
rd_blknum
 = 0;

58 
b±r
->
rd_°©us
 = 
RD_INVALID
;

59 
b±r
->
rd_pid
 = 
	`gëpid
();

63 
µå
 = 
rd±r
->
rd_π¥ev
;

64 
rd±r
->
rd_π¥ev
 = 
b±r
;

65 
b±r
->
rd_√xt
 = 
µå
->rd_next;

66 
b±r
->
rd_¥ev
 = 
µå
;

67 
µå
->
rd_√xt
 = 
b±r
;

71 
	`ªcv˛r
();

75 
	`sig«l
(
rd±r
->
rd_ªq£m
);

79 
b±r
 = (
rdbuff
 *)
	`ª˚ive
();

80 i‡(
b±r
 =(
rdbuff
 *)
SYSERR
) {

81  
SYSERR
;

87 
RDS_CTL_DEL
:

92 
msg
.
rd_ty≥
 = 
	`ht⁄s
(
RD_MSG_DREQ
);

93 
msg
.
rd_°©us
 = 
	`ht⁄s
(0);

94 
msg
.
rd_£q
 = 0;

95 
to
 = 
msg
.
rd_id
;

96 
	`mem£t
(
to
, 
NULLCH
, 
RD_IDLEN
);

97 
‰om
 = 
rd±r
->
rd_id
;

98  (*
to
++ = *
‰om
++Ë!
NULLCH
 ) {

104 
ªtvÆ
 = 
	`rdscomm
((
rd_msg_hdr
 *)&
msg
,

105 (
rd_msg_dªq
),

106 (
rd_msg_hdr
 *)&
ª•
,

107 (
rd_msg_dªs
),

108 
rd±r
);

112 i‡(
ªtvÆ
 =
SYSERR
) {

113  
SYSERR
;

114 } i‡(
ªtvÆ
 =
TIMEOUT
) {

115 
	`k¥ötf
("Timeout duringÑemote file delete\n\r");

116  
SYSERR
;

117 } i‡(
	`¡ohs
(
ª•
.
rd_°©us
) != 0) {

118  
SYSERR
;

123  
	`rds˛o£
(
dev±r
);

126 
	`k¥ötf
("rfsC⁄åﬁ: fun˘i⁄ %dÇŸ vÆid\n\r", 
func
);

127  
SYSERR
;

130  
OK
;

131 
	}
}

	@device/rds/rdsinit.c

3 
	~<xöu.h
>

5 
rdscblk
 
	grd°ab
[
Nrds
];

11 
devˇŒ
 
	$rdsöô
 (

12 
díåy
 *
dev±r


15 
rdscblk
 *
rd±r
;

16 
rdbuff
 *
b±r
;

18 
rdbuff
 *
µå
;

19 
rdbuff
 *
buf„nd
;

20 
uöt32
 
size
;

25 
rd±r
 = &
rd°ab
[
dev±r
->
dvmö‹
];

29 
rd±r
->
rd_°©e
 = 
RD_FREE
;

36 
rd±r
->
rd_com¥oc
 = 
	`¸óã
(
rd•ro˚ss
, 
RD_STACK
, 
PSSCHED
, 
RD_PRIO
,

37 "rd•roc", 1, 
rd±r
);

38 i‡(
rd±r
->
rd_com¥oc
 =
SYSERR
) {

39 
	`∑nic
("Cannot createÑemote diskÖrocess");

41 
rd±r
->
rd_comruns
 = 
FALSE
;

43 
rd±r
->
rd_id
[0] = 
NULLCH
;

47 
rd±r
->
rd_£q
 = 1;

51 
rd±r
->
rd_rh√xt
 = (
rdbuff
 *Ë&rd±r->
rd_π√xt
;

52 
rd±r
->
rd_rh¥ev
 = (
rdbuff
 *)
NULL
;

54 
rd±r
->
rd_π√xt
 = (
rdbuff
 *)
NULL
;

55 
rd±r
->
rd_π¥ev
 = (
rdbuff
 *Ë&rd±r->
rd_rh√xt
;

58 
rd±r
->
rd_ch√xt
 = (
rdbuff
 *Ë&rd±r->
rd_˘√xt
;

59 
rd±r
->
rd_ch¥ev
 = (
rdbuff
 *)
NULL
;

61 
rd±r
->
rd_˘√xt
 = (
rdbuff
 *)
NULL
;

62 
rd±r
->
rd_˘¥ev
 = (
rdbuff
 *Ë&rd±r->
rd_ch√xt
;

67 
size
 = (
rdbuff
Ë* 
RD_BUFFS
;

69 
b±r
 = (
rdbuff
 *)
	`gëmem
(
size
);

70 
rd±r
->
rd_‰ì
 = 
b±r
;

72 i‡((
öt32
)
b±r
 =
SYSERR
) {

73 
	`∑nic
("Cannotállocate memory forÑemote disk buffers");

76 
µå
 = (
rdbuff
 *Ë
NULL
;

77 
buf„nd
 = (
rdbuff
 *Ë((*)
b±r
 + 
size
);

78 
b±r
 < 
buf„nd
) {

79 
µå
 = 
b±r
;

80 
b±r
 = (
rdbuff
 *)

81 ((
rdbuff
)+ (*)
b±r
);

82 
µå
->
rd_°©us
 = 
RD_INVALID
;

83 
µå
->
rd_√xt
 = 
b±r
;

85 
µå
->
rd_√xt
 = (
rdbuff
 *Ë
NULL
;

89 
rd±r
->
rd_avaû£m
 = 
	`£m¸óã
(
RD_BUFFS
);

90 
rd±r
->
rd_ªq£m
 = 
	`£m¸óã
(0);

94 i‡–
	`dŸ2ù
(
RD_SERVER_IP
, &
rd±r
->
rd_£r_ù
Ë=
SYSERR
 ) {

95 
	`∑nic
("invalid IPáddress forÑemote disk server");

100 
rd±r
->
rd_£r_p‹t
 = 
RD_SERVER_PORT
;

101 
rd±r
->
rd_loc_p‹t
 = 
RD_LOC_PORT
 + 
dev±r
->
dvmö‹
;

105 
rd±r
->
rd_ªgi°îed
 = 
FALSE
;

107  
OK
;

108 
	}
}

	@device/rds/rdsopen.c

3 
	~<xöu.h
>

10 
devˇŒ
 
	$rds›í
 (

11 
díåy
 *
dev±r
,

12 *
diskid
,

13 *
mode


16 
rdscblk
 *
rd±r
;

17 
rd_msg_‹eq
 
msg
;

18 
rd_msg_‹es
 
ª•
;

19 
öt32
 
ªtvÆ
;

20 
öt32
 
Àn
;

21 *
idto
;

22 *
id‰om
;

24 
rd±r
 = &
rd°ab
[
dev±r
->
dvmö‹
];

28 i‡(
rd±r
->
rd_°©e
 !
RD_FREE
) {

29  
SYSERR
;

31 
rd±r
->
rd_°©e
 = 
RD_PEND
;

35 
idto
 = 
rd±r
->
rd_id
;

36 
id‰om
 = 
diskid
;

37 
Àn
 = 0;

38  (*
idto
++ = *
id‰om
++Ë!
NULLCH
) {

39 
Àn
++;

40 i‡(
Àn
 >
RD_IDLEN
) {

41  
SYSERR
;

47 i‡(
Àn
 == 0) {

48  
SYSERR
;

53 
msg
.
rd_ty≥
 = 
	`ht⁄s
(
RD_MSG_OREQ
);

54 
msg
.
rd_°©us
 = 
	`ht⁄s
(0);

55 
msg
.
rd_£q
 = 0;

56 
idto
 = 
msg
.
rd_id
;

57 
	`mem£t
(
idto
, 
NULLCH
, 
RD_IDLEN
);

59 
id‰om
 = 
diskid
;

60  (*
idto
++ = *
id‰om
++Ë!
NULLCH
 ) {

66 
ªtvÆ
 = 
	`rdscomm
((
rd_msg_hdr
 *)&
msg
,

67 (
rd_msg_‹eq
),

68 (
rd_msg_hdr
 *)&
ª•
,

69 (
rd_msg_‹es
),

70 
rd±r
 );

74 i‡(
ªtvÆ
 =
SYSERR
) {

75 
rd±r
->
rd_°©e
 = 
RD_FREE
;

76  
SYSERR
;

77 } i‡(
ªtvÆ
 =
TIMEOUT
) {

78 
	`k¥ötf
("Timeout duringÑemote file open\n\r");

79 
rd±r
->
rd_°©e
 = 
RD_FREE
;

80  
SYSERR
;

81 } i‡(
	`¡ohs
(
ª•
.
rd_°©us
) != 0) {

82 
rd±r
->
rd_°©e
 = 
RD_FREE
;

83  
SYSERR
;

88 
rd±r
->
rd_°©e
 = 
RD_OPEN
;

92  
dev±r
->
dvnum
;

93 
	}
}

	@device/rds/rdsprocess.c

3 
	~<xöu.h
>

12 
	$rd•ro˚ss
 (

13 
rdscblk
 *
rd±r


16 
rd_msg_wªq
 
msg
;

18 
rd_msg_ºes
 
ª•
;

20 
öt32
 
ªtvÆ
;

21 *
idto
;

22 *
id‰om
;

23 
rdbuff
 *
b±r
;

25 
rdbuff
 *
≈å
;

27 
rdbuff
 *
µå
;

28 
rdbuff
 *
q±r
;

30 
öt32
 
i
;

32 
TRUE
) {

35 
	`waô
(
rd±r
->
rd_ªq£m
);

36 
b±r
 = 
rd±r
->
rd_rh√xt
;

40 
b±r
->
rd_›
) {

42 
RD_OP_READ
:

46 
msg
.
rd_ty≥
 = 
	`ht⁄s
(
RD_MSG_RREQ
);

47 
msg
.
rd_°©us
 = 
	`ht⁄s
(0);

48 
msg
.
rd_£q
 = 0;

49 
idto
 = 
msg
.
rd_id
;

50 
	`mem£t
(
idto
, 
NULLCH
, 
RD_IDLEN
);

51 
id‰om
 = 
rd±r
->
rd_id
;

52  (*
idto
++ = *
id‰om
++Ë!
NULLCH
 ) {

58 
ªtvÆ
 = 
	`rdscomm
((
rd_msg_hdr
 *)&
msg
,

59 (
rd_msg_ºeq
),

60 (
rd_msg_hdr
 *)&
ª•
,

61 (
rd_msg_ºes
),

62 
rd±r
 );

66 i‡–(
ªtvÆ
 =
SYSERR
Ë|| (ªtvÆ =
TIMEOUT
) ||

67 (
	`¡ohs
(
ª•
.
rd_°©us
) != 0) ) {

68 
	`∑nic
("FailedÅo contactÑemote disk server");

73 
i
=0; i<
RD_BLKSIZ
; i++) {

74 
b±r
->
rd_block
[
i
] = 
ª•
.
rd_d©a
[i];

79 
≈å
 = 
b±r
->
rd_√xt
;

80 
µå
 = 
b±r
->
rd_¥ev
;

81 
≈å
->
rd_¥ev
 = 
b±r
->rd_prev;

82 
µå
->
rd_√xt
 = 
b±r
->rd_next;

86 
µå
 = (
rdbuff
 *Ë&
rd±r
->
rd_ch√xt
;

87 
≈å
 = 
µå
->
rd_√xt
;

88 
b±r
->
rd_√xt
 = 
≈å
;

89 
b±r
->
rd_¥ev
 = 
µå
;

90 
µå
->
rd_√xt
 = 
b±r
;

91 
≈å
->
rd_¥ev
 = 
b±r
;

95 
b±r
->
rd_ªf˙t
 = 1;

99 
	`sig«l
(
rd±r
->
rd_avaû£m
);

103 
	`£nd
(
b±r
->
rd_pid
, (
uöt32
)bptr);

108 
q±r
 = 
rd±r
->
rd_rh√xt
;

109 
q±r
 !(
rdbuff
 *)&
rd±r
->
rd_π√xt
) {

110 i‡(
q±r
->
rd_blknum
 =
b±r
->rd_blknum) {

111 
b±r
->
rd_ªf˙t
++;

112 
	`£nd
(
q±r
->
rd_pid
,(
uöt32
)
b±r
);

116 
µå
 = 
q±r
->
rd_¥ev
;

117 
≈å
 = 
q±r
->
rd_√xt
;

118 
µå
->
rd_√xt
 = 
b±r
->rd_next;

119 
≈å
->
rd_¥ev
 = 
b±r
->rd_prev;

123 
q±r
->
rd_√xt
 = 
rd±r
->
rd_‰ì
;

124 
rd±r
->
rd_‰ì
 = 
q±r
;

125 
	`sig«l
(
rd±r
->
rd_avaû£m
);

128 
q±r
 = q±r->
rd_√xt
;

132 
RD_OP_WRITE
:

136 
msg
.
rd_ty≥
 = 
	`ht⁄s
(
RD_MSG_WREQ
);

137 
msg
.
rd_blk
 = 
b±r
->
rd_blknum
;

138 
msg
.
rd_°©us
 = 
	`ht⁄s
(0);

139 
msg
.
rd_£q
 = 0;

140 
idto
 = 
msg
.
rd_id
;

141 
	`mem£t
(
idto
, 
NULLCH
, 
RD_IDLEN
);

142 
id‰om
 = 
rd±r
->
rd_id
;

143  (*
idto
++ = *
id‰om
++Ë!
NULLCH
 ) {

146 
i
=0; i<
RD_BLKSIZ
; i++) {

147 
msg
.
rd_d©a
[
i
] = 
b±r
->
rd_block
[i];

152 
≈å
 = 
b±r
->
rd_√xt
;

153 
µå
 = 
b±r
->
rd_¥ev
;

154 
µå
->
rd_√xt
 = 
≈å
;

155 
≈å
->
rd_¥ev
 = 
µå
;

159 
µå
 = (
rdbuff
 *Ë&
rd±r
->
rd_ch√xt
;

160 
≈å
 = 
µå
->
rd_√xt
;

161 
b±r
->
rd_√xt
 = 
≈å
;

162 
b±r
->
rd_¥ev
 = 
µå
;

163 
µå
->
rd_√xt
 = 
b±r
;

164 
≈å
->
rd_¥ev
 = 
b±r
;

168 
b±r
->
rd_ªf˙t
 = 0;

169 
	`sig«l
(
rd±r
->
rd_avaû£m
);

173 
ªtvÆ
 = 
	`rdscomm
((
rd_msg_hdr
 *)&
msg
,

174 (
rd_msg_wªq
),

175 (
rd_msg_hdr
 *)&
ª•
,

176 (
rd_msg_wªs
),

177 
rd±r
 );

181 i‡–(
ªtvÆ
 =
SYSERR
Ë|| (ªtvÆ =
TIMEOUT
) ||

182 (
	`¡ohs
(
ª•
.
rd_°©us
) != 0) ) {

183 
	`∑nic
("failedÅo contactÑemote disk server");

187 
RD_OP_SYNC
:

191 
	`£nd
(
b±r
->
rd_pid
, 
OK
);

195 
≈å
 = 
b±r
->
rd_√xt
;

196 
µå
 = 
b±r
->
rd_¥ev
;

197 
≈å
->
rd_¥ev
 = 
b±r
->rd_prev;

198 
µå
->
rd_√xt
 = 
b±r
->rd_next;

202 
b±r
->
rd_√xt
 = 
rd±r
->
rd_‰ì
;

203 
rd±r
->
rd_‰ì
 = 
b±r
;

204 
	`sig«l
(
rd±r
->
rd_avaû£m
);

208 
	}
}

	@device/rds/rdsread.c

3 
	~<xöu.h
>

9 
devˇŒ
 
	$rd§ód
 (

10 
díåy
 *
dev±r
,

11 *
buff
,

12 
öt32
 
blk


15 
rdscblk
 *
rd±r
;

16 
rdbuff
 *
b±r
;

18 
rdbuff
 *
≈å
;

20 
rdbuff
 *
µå
;

22 
rdbuff
 *
˝å
;

26 
rd±r
 = &
rd°ab
[
dev±r
->
dvmö‹
];

27 i‡(
rd±r
->
rd_°©e
 !
RD_OPEN
) {

28  
SYSERR
;

33 i‡–! 
rd±r
->
rd_comruns
 ) {

34 
rd±r
->
rd_comruns
 = 
TRUE
;

35 
	`ªsume
(
rd±r
->
rd_com¥oc
);

40 
b±r
 = 
rd±r
->
rd_ch√xt
;

41 
b±r
 !(
rdbuff
 *)&
rd±r
->
rd_˘√xt
) {

42 i‡(
b±r
->
rd_blknum
 =
blk
) {

43 i‡(
b±r
->
rd_°©us
 =
RD_INVALID
) {

46 
	`mem˝y
(
buff
, 
b±r
->
rd_block
, 
RD_BLKSIZ
);

47  
OK
;

49 
b±r
 = b±r->
rd_√xt
;

54 
b±r
 = 
rd±r
->
rd_π¥ev
;

56 
b±r
 !(
rdbuff
 *)&
rd±r
->
rd_rh√xt
) {

57 i‡(
b±r
->
rd_blknum
 =
blk
) {

61 i‡(
b±r
->
rd_›
 =
RD_OP_WRITE
) {

62 
	`mem˝y
(
buff
, 
b±r
->
rd_block
, 
RD_BLKSIZ
);

63  
OK
;

67 
b±r
 = b±r->
rd_¥ev
;

72 
b±r
 = 
	`rdsbuÁŒoc
(
rd±r
);

73 
b±r
->
rd_›
 = 
RD_OP_READ
;

74 
b±r
->
rd_ªf˙t
 = 1;

75 
b±r
->
rd_blknum
 = 
blk
;

76 
b±r
->
rd_°©us
 = 
RD_INVALID
;

77 
b±r
->
rd_pid
 = 
	`gëpid
();

81 
µå
 = 
rd±r
->
rd_π¥ev
;

82 
rd±r
->
rd_π¥ev
 = 
b±r
;

83 
b±r
->
rd_√xt
 = 
µå
->rd_next;

84 
b±r
->
rd_¥ev
 = 
µå
;

85 
µå
->
rd_√xt
 = 
b±r
;

89 
	`ªcv˛r
();

93 
	`sig«l
(
rd±r
->
rd_ªq£m
);

97 
b±r
 = (
rdbuff
 *)
	`ª˚ive
();

98 i‡(
b±r
 =(
rdbuff
 *)
SYSERR
) {

99  
SYSERR
;

101 
	`mem˝y
(
buff
, 
b±r
->
rd_block
, 
RD_BLKSIZ
);

102 
b±r
->
rd_ªf˙t
--;

103 i‡(
b±r
->
rd_ªf˙t
 <= 0) {

109 
˝å
 = 
rd±r
->
rd_ch√xt
;

110 
˝å
 !
b±r
) {

111 i‡(
˝å
->
rd_blknum
 =
blk
) {

115 
µå
 = 
b±r
->
rd_¥ev
;

116 
≈å
 = 
b±r
->
rd_√xt
;

117 
µå
->
rd_√xt
 = 
≈å
;

118 
≈å
->
rd_¥ev
 = 
µå
;

122 
b±r
->
rd_√xt
 = 
rd±r
->
rd_‰ì
;

123 
rd±r
->
rd_‰ì
 = 
b±r
;

126 
˝å
 = c±r->
rd_√xt
;

129  
OK
;

130 
	}
}

	@device/rds/rdswrite.c

3 
	~<xöu.h
>

9 
devˇŒ
 
	$rdswrôe
 (

10 
díåy
 *
dev±r
,

11 *
buff
,

12 
öt32
 
blk


15 
rdscblk
 *
rd±r
;

16 
rdbuff
 *
b±r
;

17 
rdbuff
 *
µå
;

18 
rdbuff
 *
≈å
;

19 
boﬁ8
 
found
;

23 
rd±r
 = &
rd°ab
[
dev±r
->
dvmö‹
];

24 i‡(
rd±r
->
rd_°©e
 !
RD_OPEN
) {

25  
SYSERR
;

30 i‡–! 
rd±r
->
rd_comruns
 ) {

31 
rd±r
->
rd_comruns
 = 
TRUE
;

32 
	`ªsume
(
rd±r
->
rd_com¥oc
);

38 
b±r
 = 
rd±r
->
rd_rh√xt
;

39 
b±r
 !(
rdbuff
 *)&
rd±r
->
rd_π√xt
) {

40 i‡–(
b±r
->
rd_blknum
 =
blk
) &&

41 (
b±r
->
rd_›
 =
RD_OP_WRITE
) ) {

42 
	`mem˝y
(
b±r
->
rd_block
, 
buff
, 
RD_BLKSIZ
);

43  
OK
;

45 
b±r
 = b±r->
rd_√xt
;

50 
b±r
 = 
rd±r
->
rd_ch√xt
;

51 
found
 = 
FALSE
;

52 
b±r
 !(
rdbuff
 *)&
rd±r
->
rd_˘√xt
) {

53 i‡(
b±r
->
rd_blknum
 =
blk
) {

54 i‡(
b±r
->
rd_ªf˙t
 <= 0) {

55 
µå
 = 
b±r
->
rd_¥ev
;

56 
≈å
 = 
b±r
->
rd_√xt
;

61 
µå
->
rd_√xt
 = 
b±r
->rd_next;

62 
≈å
->
rd_¥ev
 = 
b±r
->rd_prev;

63 
	`£mª£t
(
rd±r
->
rd_avaû£m
,

64 
	`£mcou¡
(
rd±r
->
rd_avaû£m
) - 1);

65 
found
 = 
TRUE
;

69 
b±r
 = b±r->
rd_√xt
;

72 i‡–!
found
 ) {

73 
b±r
 = 
	`rdsbuÁŒoc
(
rd±r
);

78 
	`mem˝y
(
b±r
->
rd_block
, 
buff
, 
RD_BLKSIZ
);

79 
b±r
->
rd_›
 = 
RD_OP_WRITE
;

80 
b±r
->
rd_ªf˙t
 = 0;

81 
b±r
->
rd_blknum
 = 
blk
;

82 
b±r
->
rd_°©us
 = 
RD_VALID
;

83 
b±r
->
rd_pid
 = 
	`gëpid
();

87 
µå
 = 
rd±r
->
rd_π¥ev
;

88 
rd±r
->
rd_π¥ev
 = 
b±r
;

89 
b±r
->
rd_√xt
 = 
µå
->rd_next;

90 
b±r
->
rd_¥ev
 = 
µå
;

91 
µå
->
rd_√xt
 = 
b±r
;

95 
	`sig«l
(
rd±r
->
rd_ªq£m
);

96  
OK
;

97 
	}
}

	@device/rfs/rflclose.c

3 
	~<xöu.h
>

9 
devˇŒ
 
	$rÊ˛o£
 (

10 
díåy
 *
dev±r


13 
rÊcblk
 *
rÂå
;

17 
	`waô
(
Rf_d©a
.
rf_muãx
);

21 
rÂå
 = &
rÊèb
[
dev±r
->
dvmö‹
];

22 i‡(
rÂå
->
rf°©e
 =
RF_FREE
) {

23 
	`sig«l
(
Rf_d©a
.
rf_muãx
);

24  
SYSERR
;

29 
rÂå
->
rf°©e
 = 
RF_FREE
;

30 
	`sig«l
(
Rf_d©a
.
rf_muãx
);

31  
OK
;

32 
	}
}

	@device/rfs/rflgetc.c

3 
	~<xöu.h
>

9 
devˇŒ
 
	$rÊgëc
(

10 
díåy
 *
dev±r


13 
ch
;

14 
öt32
 
ªtvÆ
;

16 
ªtvÆ
 = 
	`rÊªad
(
dev±r
, &
ch
, 1);

18 i‡(
ªtvÆ
 != 1) {

19  
SYSERR
;

22  (
devˇŒ
)
ch
;

23 
	}
}

	@device/rfs/rflinit.c

3 
	~<xöu.h
>

5 
rÊcblk
 
	grÊèb
[
NrÊ
];

11 
devˇŒ
 
	$rÊöô
(

12 
díåy
 *
dev±r


15 
rÊcblk
 *
rÊ±r
;

16 
öt32
 
i
;

18 
rÊ±r
 = &
rÊèb
[ 
dev±r
->
dvmö‹
 ];

22 
rÊ±r
->
rf°©e
 = 
RF_FREE
;

23 
rÊ±r
->
rfdev
 = 
dev±r
->
dvnum
;

24 
i
=0; i<
RF_NAMLEN
; i++) {

25 
rÊ±r
->
r‚ame
[
i
] = 
NULLCH
;

27 
rÊ±r
->
rÂos
 =ÑÊ±r->
rfmode
 = 0;

28  
OK
;

29 
	}
}

	@device/rfs/rflputc.c

3 
	~<xöu.h
>

9 
devˇŒ
 
	$rÊputc
(

10 
díåy
 *
dev±r
,

11 
ch


14 i‡(
	`rÊwrôe
(
dev±r
, &
ch
, 1) != 1) {

15  
SYSERR
;

18  
OK
;

19 
	}
}

	@device/rfs/rflread.c

3 
	~<xöu.h
>

9 
devˇŒ
 
	$rÊªad
 (

10 
díåy
 *
dev±r
,

11 *
buff
,

12 
öt32
 
cou¡


15 
rÊcblk
 *
rÂå
;

16 
öt32
 
ªtvÆ
;

17 
rf_msg_ºeq
 
msg
;

18 
rf_msg_ºes
 
ª•
;

19 
öt32
 
i
;

20 *
‰om
, *
to
;

21 
öt32
 
Àn
;

25 
	`waô
(
Rf_d©a
.
rf_muãx
);

29 i‡–(
cou¡
 <0Ë|| (cou¡ > 
RF_DATALEN
) ) {

30 
	`sig«l
(
Rf_d©a
.
rf_muãx
);

31  
SYSERR
;

36 
rÂå
 = &
rÊèb
[
dev±r
->
dvmö‹
];

40 i‡(
rÂå
->
rf°©e
 =
RF_FREE
) {

41 
	`sig«l
(
Rf_d©a
.
rf_muãx
);

42  
SYSERR
;

47 i‡((
rÂå
->
rfmode
 & 
RF_MODE_R
) == 0) {

48 
	`sig«l
(
Rf_d©a
.
rf_muãx
);

49  
SYSERR
;

54 
msg
.
rf_ty≥
 = 
	`ht⁄s
(
RF_MSG_RREQ
);

55 
msg
.
rf_°©us
 = 
	`ht⁄s
(0);

56 
msg
.
rf_£q
 = 0;

57 
‰om
 = 
rÂå
->
r‚ame
;

58 
to
 = 
msg
.
rf_«me
;

59 
	`mem£t
(
to
, 
NULLCH
, 
RF_NAMLEN
);

60 
Àn
 = 0;

61  (*
to
++ = *
‰om
++) ) {

62 i‡(++
Àn
 >
RF_NAMLEN
) {

63 
	`sig«l
(
Rf_d©a
.
rf_muãx
);

64  
SYSERR
;

67 
msg
.
rf_pos
 = 
	`ht⁄l
(
rÂå
->
rÂos
);

68 
msg
.
rf_Àn
 = 
	`ht⁄l
(
cou¡
);

72 
ªtvÆ
 = 
	`rfscomm
((
rf_msg_hdr
 *)&
msg
,

73 (
rf_msg_ºeq
),

74 (
rf_msg_hdr
 *)&
ª•
,

75 (
rf_msg_ºes
) );

79 i‡(
ªtvÆ
 =
SYSERR
) {

80 
	`sig«l
(
Rf_d©a
.
rf_muãx
);

81  
SYSERR
;

82 } i‡(
ªtvÆ
 =
TIMEOUT
) {

83 
	`k¥ötf
("Timeout duringÑemote fileÑead\n");

84 
	`sig«l
(
Rf_d©a
.
rf_muãx
);

85  
SYSERR
;

86 } i‡(
	`¡ohs
(
ª•
.
rf_°©us
) != 0) {

87 
	`sig«l
(
Rf_d©a
.
rf_muãx
);

88  
SYSERR
;

93 
i
=0; i<
	`¡ohl
(
ª•
.
rf_Àn
); i++) {

94 *
buff
++ = 
ª•
.
rf_d©a
[
i
];

96 
rÂå
->
rÂos
 +
	`¡ohl
(
ª•
.
rf_Àn
);

98 
	`sig«l
(
Rf_d©a
.
rf_muãx
);

99  
	`¡ohl
(
ª•
.
rf_Àn
);

100 
	}
}

	@device/rfs/rflseek.c

3 
	~<xöu.h
>

9 
devˇŒ
 
	$rÊ£ek
 (

10 
díåy
 *
dev±r
,

11 
uöt32
 
pos


14 
rÊcblk
 *
rÂå
;

18 
	`waô
(
Rf_d©a
.
rf_muãx
);

22 
rÂå
 = &
rÊèb
[
dev±r
->
dvmö‹
];

23 i‡(
rÂå
->
rf°©e
 =
RF_FREE
) {

24 
	`sig«l
(
Rf_d©a
.
rf_muãx
);

25  
SYSERR
;

30 
rÂå
->
rÂos
 = 
pos
;

31 
	`sig«l
(
Rf_d©a
.
rf_muãx
);

32  
OK
;

33 
	}
}

	@device/rfs/rflwrite.c

3 
	~<xöu.h
>

9 
devˇŒ
 
	$rÊwrôe
 (

10 
díåy
 *
dev±r
,

11 *
buff
,

12 
öt32
 
cou¡


15 
rÊcblk
 *
rÂå
;

16 
öt32
 
ªtvÆ
;

17 
rf_msg_wªq
 
msg
;

18 
rf_msg_wªs
 
ª•
;

19 *
‰om
, *
to
;

20 
i
;

21 
öt32
 
Àn
;

25 
	`waô
(
Rf_d©a
.
rf_muãx
);

29 i‡–(
cou¡
 <0Ë|| (cou¡ > 
RF_DATALEN
) ) {

30 
	`sig«l
(
Rf_d©a
.
rf_muãx
);

31  
SYSERR
;

36 
rÂå
 = &
rÊèb
[
dev±r
->
dvmö‹
];

37 i‡–(
rÂå
->
rf°©e
 =
RF_FREE
) ||

38 ! (
rÂå
->
rfmode
 & 
RF_MODE_W
) ) {

39 
	`sig«l
(
Rf_d©a
.
rf_muãx
);

40  
SYSERR
;

45 
msg
.
rf_ty≥
 = 
	`ht⁄s
(
RF_MSG_WREQ
);

46 
msg
.
rf_°©us
 = 
	`ht⁄s
(0);

47 
msg
.
rf_£q
 = 0;

48 
‰om
 = 
rÂå
->
r‚ame
;

49 
to
 = 
msg
.
rf_«me
;

50 
	`mem£t
(
to
, 
NULLCH
, 
RF_NAMLEN
);

51 
Àn
 = 0;

52  (*
to
++ = *
‰om
++) ) {

53 i‡(++
Àn
 >
RF_NAMLEN
) {

54 
	`sig«l
(
Rf_d©a
.
rf_muãx
);

55  
SYSERR
;

58  (*
to
++ = *
‰om
++) ) {

61 
msg
.
rf_pos
 = 
	`ht⁄l
(
rÂå
->
rÂos
);

62 
msg
.
rf_Àn
 = 
	`ht⁄l
(
cou¡
);

63 
i
=0; i<
cou¡
; i++) {

64 
msg
.
rf_d©a
[
i
] = *
buff
++;

66 
i
 < 
RF_DATALEN
) {

67 
msg
.
rf_d©a
[
i
++] = 
NULLCH
;

72 
ªtvÆ
 = 
	`rfscomm
((
rf_msg_hdr
 *)&
msg
,

73 (
rf_msg_wªq
),

74 (
rf_msg_hdr
 *)&
ª•
,

75 (
rf_msg_wªs
) );

79 i‡(
ªtvÆ
 =
SYSERR
) {

80 
	`sig«l
(
Rf_d©a
.
rf_muãx
);

81  
SYSERR
;

82 } i‡(
ªtvÆ
 =
TIMEOUT
) {

83 
	`k¥ötf
("Timeout duringÑemote fileÑead\n");

84 
	`sig«l
(
Rf_d©a
.
rf_muãx
);

85  
SYSERR
;

86 } i‡(
	`¡ohs
(
ª•
.
rf_°©us
) != 0) {

87 
	`sig«l
(
Rf_d©a
.
rf_muãx
);

88  
SYSERR
;

93 
rÂå
->
rÂos
 +
	`¡ohl
(
ª•
.
rf_Àn
);

95 
	`sig«l
(
Rf_d©a
.
rf_muãx
);

96  
	`¡ohl
(
ª•
.
rf_Àn
);

97 
	}
}

	@device/rfs/rfscomm.c

3 
	~<xöu.h
>

10 
öt32
 
	$rfscomm
 (

11 
rf_msg_hdr
 *
msg
,

12 
öt32
 
mÀn
,

13 
rf_msg_hdr
 *
ª∂y
,

14 
öt32
 
æí


17 
öt32
 
i
;

18 
öt32
 
ªtvÆ
;

19 
öt32
 
£q
;

20 
öt16
 
πy≥
;

21 
öt32
 
¶Ÿ
;

25 i‡–! 
Rf_d©a
.
rf_ªgi°îed
 ) {

26 i‡–(
¶Ÿ
 = 
	`udp_ªgi°î
(
Rf_d©a
.
rf_£r_ù
,

27 
Rf_d©a
.
rf_£r_p‹t
,

28 
Rf_d©a
.
rf_loc_p‹t
)Ë=
SYSERR
) {

29  
SYSERR
;

31 
Rf_d©a
.
rf_udp_¶Ÿ
 = 
¶Ÿ
;

32 
Rf_d©a
.
rf_ªgi°îed
 = 
TRUE
;

37 
£q
 = 
Rf_d©a
.
rf_£q
++;

38 
msg
->
rf_£q
 = 
	`ht⁄l
(
£q
);

42 
i
=0; i<
RF_RETRIES
; i++) {

46 
ªtvÆ
 = 
	`udp_£nd
(
Rf_d©a
.
rf_udp_¶Ÿ
, (*)
msg
,

47 
mÀn
);

48 i‡(
ªtvÆ
 =
SYSERR
) {

49 
	`k¥ötf
("Cannot sendÅoÑemote file server\n");

50  
SYSERR
;

55 
ªtvÆ
 = 
	`udp_ªcv
(
Rf_d©a
.
rf_udp_¶Ÿ
, (*)
ª∂y
,

56 
æí
, 
RF_TIMEOUT
);

58 i‡(
ªtvÆ
 =
TIMEOUT
) {

60 } i‡(
ªtvÆ
 =
SYSERR
) {

61 
	`k¥ötf
("ErrorÑeadingÑemote fileÑeply\n");

62  
SYSERR
;

67 i‡(
	`¡ohl
(
ª∂y
->
rf_£q
Ë!
£q
) {

73 
πy≥
 = 
	`¡ohs
(
ª∂y
->
rf_ty≥
);

74 i‡(
πy≥
 !–
	`¡ohs
(
msg
->
rf_ty≥
Ë| 
RF_MSG_RESPONSE
) ) {

78  
ªtvÆ
;

83 
	`k¥ötf
("Timeout onÉxchange withÑemote file server\n");

84  
TIMEOUT
;

85 
	}
}

	@device/rfs/rfscontrol.c

3 
	~<xöu.h
>

9 
devˇŒ
 
	$rfsc⁄åﬁ
 (

10 
díåy
 *
dev±r
,

11 
öt32
 
func
,

12 
öt32
 
¨g1
,

13 
öt32
 
¨g2


16 
öt32
 
Àn
;

17 
rf_msg_§eq
 
msg
;

18 
rf_msg_§es
 
ª•
;

19 *
to
, *
‰om
;

20 
öt32
 
ªtvÆ
;

24 
	`waô
(
Rf_d©a
.
rf_muãx
);

29 
‰om
 = (*)
¨g1
;

30 
to
 = 
msg
.
rf_«me
;

31 
Àn
 = 0;

32 
	`mem£t
(
to
, 
NULLCH
, 
RF_NAMLEN
);

33  (*
to
++ = *
‰om
++) ) {

34 
Àn
++;

35 i‡(
Àn
 >(
RF_NAMLEN
 - 1) ) {

36 
	`sig«l
(
Rf_d©a
.
rf_muãx
);

37  
SYSERR
;

41 
func
) {

45 
RFS_CTL_DEL
:

46 i‡(
	`rf¢dmsg
(
RF_MSG_DREQ
, (*)
¨g1
Ë=
SYSERR
) {

47 
	`sig«l
(
Rf_d©a
.
rf_muãx
);

48  
SYSERR
;

54 
RFS_CTL_TRUNC
:

55 i‡(
	`rf¢dmsg
(
RF_MSG_TREQ
, (*)
¨g1
Ë=
SYSERR
) {

56 
	`sig«l
(
Rf_d©a
.
rf_muãx
);

57  
SYSERR
;

65 
RFS_CTL_MKDIR
:

66 i‡(
	`rf¢dmsg
(
RF_MSG_MREQ
, (*)
¨g1
Ë=
SYSERR
) {

67 
	`sig«l
(
Rf_d©a
.
rf_muãx
);

68  
SYSERR
;

74 
RFS_CTL_RMDIR
:

75 i‡(
	`rf¢dmsg
(
RF_MSG_XREQ
, (*)
¨g1
Ë=
SYSERR
) {

76 
	`sig«l
(
Rf_d©a
.
rf_muãx
);

77  
SYSERR
;

84 
RFS_CTL_SIZE
:

88 
msg
.
rf_ty≥
 = 
	`ht⁄s
(
RF_MSG_SREQ
);

89 
msg
.
rf_°©us
 = 
	`ht⁄s
(0);

90 
msg
.
rf_£q
 = 0;

94 
ªtvÆ
 = 
	`rfscomm
–(
rf_msg_hdr
 *)&
msg
,

95 (
rf_msg_§eq
),

96 (
rf_msg_hdr
 *)&
ª•
,

97 (
rf_msg_§es
) );

98 i‡–(
ªtvÆ
 =
SYSERR
Ë|| (ªtvÆ =
TIMEOUT
) ) {

99 
	`sig«l
(
Rf_d©a
.
rf_muãx
);

100  
SYSERR
;

102 
	`sig«l
(
Rf_d©a
.
rf_muãx
);

103  
	`¡ohl
(
ª•
.
rf_size
);

107 
	`k¥ötf
("rfsc⁄åﬁ: fun˘i⁄ %dÇŸ vÆid\n", 
func
);

108 
	`sig«l
(
Rf_d©a
.
rf_muãx
);

109  
SYSERR
;

112 
	`sig«l
(
Rf_d©a
.
rf_muãx
);

113  
OK
;

114 
	}
}

	@device/rfs/rfsgetmode.c

3 
	~<xöu.h
>

10 
öt32
 
	$rfsgëmode
 (

11 *
mode


14 
öt32
 
mbôs
;

16 
ch
;

18 
mbôs
 = 0;

26  (
ch
 = *
mode
++Ë!
NULLCH
) {

27 
ch
) {

29 'r': i‡(
mbôs
&
RF_MODE_R
) {

30  
SYSERR
;

32 
mbôs
 |
RF_MODE_R
;

35 'w': i‡(
mbôs
&
RF_MODE_W
) {

36  
SYSERR
;

38 
mbôs
 |
RF_MODE_W
;

41 'o': i‡(
mbôs
&
RF_MODE_O
 || mbôs&
RF_MODE_N
) {

42  
SYSERR
;

44 
mbôs
 |
RF_MODE_O
;

47 'n': i‡(
mbôs
&
RF_MODE_O
 || mbôs&
RF_MODE_N
) {

48  
SYSERR
;

50 
mbôs
 |
RF_MODE_N
;

53 :  
SYSERR
;

59 i‡–(
mbôs
&
RF_MODE_RW
) == 0 ) {

60 
mbôs
 |
RF_MODE_RW
;

62  
mbôs
;

63 
	}
}

	@device/rfs/rfsinit.c

3 
	~<xöu.h
>

5 
rfd©a
 
	gRf_d©a
;

11 
devˇŒ
 
	$rfsöô
(

12 
díåy
 *
dev±r


18 
Rf_d©a
.
rf_£q
 = 1;

22 i‡–
	`dŸ2ù
(
RF_SERVER_IP
, &
Rf_d©a
.
rf_£r_ù
Ë=
SYSERR
 ) {

23 
	`∑nic
("invalid IPáddress forÑemote file server");

25 
Rf_d©a
.
rf_£r_p‹t
 = 
RF_SERVER_PORT
;

26 
Rf_d©a
.
rf_loc_p‹t
 = 
RF_LOC_PORT
;

30 i‡–(
Rf_d©a
.
rf_muãx
 = 
	`£m¸óã
(1)Ë=
SYSERR
 ) {

31 
	`∑nic
("Cannot createÑemote file system semaphore");

36 
Rf_d©a
.
rf_ªgi°îed
 = 
FALSE
;

38  
OK
;

39 
	}
}

	@device/rfs/rfsndmsg.c

3 
	~<xöu.h
>

9 
°©us
 
	$rf¢dmsg
 (

10 
uöt16
 
ty≥
,

11 *
«me


14 
rf_msg_hdr
 
ªq
;

15 
rf_msg_hdr
 
ª•
;

16 
öt32
 
ªtvÆ
;

17 *
to
;

21 
ªq
.
rf_ty≥
 = 
	`ht⁄s
(
ty≥
);

22 
ªq
.
rf_°©us
 = 
	`ht⁄s
(0);

23 
ªq
.
rf_£q
 = 0;

24 
to
 = 
ªq
.
rf_«me
;

25  (*
to
++ = *
«me
++) ) {

31 
ªtvÆ
 = 
	`rfscomm
(&
ªq
, (
rf_msg_hdr
),

32 &
ª•
, (
rf_msg_hdr
) );

36 i‡(
ªtvÆ
 =
SYSERR
) {

37  
SYSERR
;

38 } i‡(
ªtvÆ
 =
TIMEOUT
) {

39 
	`k¥ötf
("Timeout duringÑemote file serveráccess\n");

40  
SYSERR
;

41 } i‡(
	`¡ohl
(
ª•
.
rf_°©us
) != 0) {

42  
SYSERR
;

45  
OK
;

46 
	}
}

	@device/rfs/rfsopen.c

3 
	~<xöu.h
>

10 
devˇŒ
 
	$rfs›í
 (

11 
díåy
 *
dev±r
,

12 *
«me
,

13 *
mode


16 
rÊcblk
 *
rÂå
;

17 
rf_msg_‹eq
 
msg
;

18 
rf_msg_‹es
 
ª•
;

19 
öt32
 
ªtvÆ
;

20 
öt32
 
Àn
;

21 *
≈å
;

22 *
Âå
;

23 
öt32
 
i
;

27 
	`waô
(
Rf_d©a
.
rf_muãx
);

31 
i
=0; i<
NrÊ
; i++) {

32 
rÂå
 = &
rÊèb
[
i
];

33 i‡(
rÂå
->
rf°©e
 =
RF_FREE
) {

37 i‡(
i
 >
NrÊ
) {

38 
	`sig«l
(
Rf_d©a
.
rf_muãx
);

39  
SYSERR
;

44 
≈å
 = 
«me
;

45 
Âå
 = 
rÂå
->
r‚ame
;

46 
Àn
 = 0;

47  (*
Âå
++ = *
≈å
++Ë!
NULLCH
) {

48 
Àn
++;

49 i‡(
Àn
 >
RF_NAMLEN
) {

50 
	`sig«l
(
Rf_d©a
.
rf_muãx
);

51  
SYSERR
;

57 i‡(
Àn
==0) {

58 
	`sig«l
(
Rf_d©a
.
rf_muãx
);

59  
SYSERR
;

64 i‡–(
rÂå
->
rfmode
 = 
	`rfsgëmode
(
mode
)Ë=
SYSERR
 ) {

65 
	`sig«l
(
Rf_d©a
.
rf_muãx
);

66  
SYSERR
;

71 
msg
.
rf_ty≥
 = 
	`ht⁄s
(
RF_MSG_OREQ
);

72 
msg
.
rf_°©us
 = 
	`ht⁄s
(0);

73 
msg
.
rf_£q
 = 0;

74 
≈å
 = 
msg
.
rf_«me
;

75 
	`mem£t
(
≈å
, 
NULLCH
, 
RF_NAMLEN
);

76  (*
≈å
++ = *
«me
++Ë!
NULLCH
 ) {

79 
msg
.
rf_mode
 = 
	`ht⁄l
(
rÂå
->
rfmode
);

83 
ªtvÆ
 = 
	`rfscomm
((
rf_msg_hdr
 *)&
msg
,

84 (
rf_msg_‹eq
),

85 (
rf_msg_hdr
 *)&
ª•
,

86 (
rf_msg_‹es
) );

90 i‡(
ªtvÆ
 =
SYSERR
) {

91 
	`sig«l
(
Rf_d©a
.
rf_muãx
);

92  
SYSERR
;

93 } i‡(
ªtvÆ
 =
TIMEOUT
) {

94 
	`k¥ötf
("Timeout duringÑemote file open\n\r");

95 
	`sig«l
(
Rf_d©a
.
rf_muãx
);

96  
SYSERR
;

97 } i‡(
	`¡ohs
(
ª•
.
rf_°©us
) != 0) {

98 
	`sig«l
(
Rf_d©a
.
rf_muãx
);

99  
SYSERR
;

104 
rÂå
->
rÂos
 = 0;

108 
rÂå
->
rf°©e
 = 
RF_USED
;

112 
	`sig«l
(
Rf_d©a
.
rf_muãx
);

113  
rÂå
->
rfdev
;

114 
	}
}

	@device/tty/ttycontrol.c

3 
	~<xöu.h
>

9 
devˇŒ
 
	$âyc⁄åﬁ
(

10 
díåy
 *
dev±r
,

11 
öt32
 
func
,

12 
öt32
 
¨g1
,

13 
öt32
 
¨g2


16 
âycblk
 *
ty±r
;

17 
ch
;

19 
ty±r
 = &
âyèb
[
dev±r
->
dvmö‹
];

23  
func
 ) {

25 
TC_NEXTC
:

26 
	`waô
(
ty±r
->
tyi£m
);

27 
ch
 = *
ty±r
->
tyôaû
;

28 
	`sig«l
(
ty±r
->
tyi£m
);

29  (
devˇŒ
)
ch
;

31 
TC_MODER
:

32 
ty±r
->
tyimode
 = 
TY_IMRAW
;

33  (
devˇŒ
)
OK
;

35 
TC_MODEC
:

36 
ty±r
->
tyimode
 = 
TY_IMCOOKED
;

37  (
devˇŒ
)
OK
;

39 
TC_MODEK
:

40 
ty±r
->
tyimode
 = 
TY_IMCBREAK
;

41  (
devˇŒ
)
OK
;

43 
TC_ICHARS
:

44 (
	`£mcou¡
(
ty±r
->
tyi£m
));

46 
TC_ECHO
:

47 
ty±r
->
tyõcho
 = 
TRUE
;

48  (
devˇŒ
)
OK
;

50 
TC_NOECHO
:

51 
ty±r
->
tyõcho
 = 
FALSE
;

52  (
devˇŒ
)
OK
;

55  (
devˇŒ
)
SYSERR
;

57 
	}
}

	@device/tty/ttygetc.c

3 
	~<xöu.h
>

9 
devˇŒ
 
	$âygëc
(

10 
díåy
 *
dev±r


13 
ch
;

14 
âycblk
 *
ty±r
;

16 
ty±r
 = &
âyèb
[
dev±r
->
dvmö‹
];

20 
	`waô
(
ty±r
->
tyi£m
);

21 
ch
 = *
ty±r
->
tyihód
++;

25 i‡(
ty±r
->
tyihód
 >&ty±r->
tyibuff
[
TY_IBUFLEN
]) {

26 
ty±r
->
tyihód
 =Åy±r->
tyibuff
;

31 i‡–(
ty±r
->
tyimode
 =
TY_IMCOOKED
Ë&& (ty±r->
tyeof
) &&

32 (
ch
 =
ty±r
->
tyeofch
) ) {

33  (
devˇŒ
)
EOF
;

36  (
devˇŒ
)
ch
;

37 
	}
}

	@device/tty/ttyhandle_in.c

3 
	~<xöu.h
>

5 
loˇl
 
îa£1
(
âycblk
 *, 
u¨t_c§eg
 *);

6 
loˇl
 
echoch
(, 
âycblk
 *, 
u¨t_c§eg
 *);

7 
loˇl
 
ïutc
(, 
âycblk
 *, 
u¨t_c§eg
 *);

13 
	$âyh™dÀ_ö
 (

14 
âycblk
 *
ty±r
,

15 
u¨t_c§eg
 *
c§±r


18 
ch
;

19 
öt32
 
avaû
;

21 
ch
 = 
c§±r
->
buf„r
;

25 
avaû
 = 
	`£mcou¡
(
ty±r
->
tyi£m
);

26 i‡(
avaû
 < 0) {

27 
avaû
 = 0;

32 i‡(
ty±r
->
tyimode
 =
TY_IMRAW
) {

33 i‡(
avaû
 >
TY_IBUFLEN
) {

39 *
ty±r
->
tyôaû
++ = 
ch
;

43 i‡(
ty±r
->
tyôaû
 >&ty±r->
tyibuff
[
TY_IBUFLEN
]) {

44 
ty±r
->
tyôaû
 =Åy±r->
tyibuff
;

48 
	`sig«l
(
ty±r
->
tyi£m
);

54 i‡–(
ch
 =
TY_RETURN
Ë&& 
ty±r
->
tyi¸lf
 ) {

55 
ch
 = 
TY_NEWLINE
;

60 i‡(
ty±r
->
tyoÊow
) {

61 i‡(
ch
 =
ty±r
->
tyo°¨t
) {

62 
ty±r
->
tyohñd
 = 
FALSE
;

63 
	`âykickout
(
c§±r
);

65 } i‡(
ch
 =
ty±r
->
tyo°›
) {

66 
ty±r
->
tyohñd
 = 
TRUE
;

71 
ty±r
->
tyohñd
 = 
FALSE
;

73 i‡(
ty±r
->
tyimode
 =
TY_IMCBREAK
) {

77 i‡(
avaû
 >
TY_IBUFLEN
) {

78 
	`ïutc
(
ty±r
->
tyifuŒc
,Åy±r, 
c§±r
);

80 *
ty±r
->
tyôaû
++ = 
ch
;

84 i‡(
ty±r
->
tyôaû
>=&ty±r->
tyibuff
[
TY_IBUFLEN
]) {

85 
ty±r
->
tyôaû
 =Åy±r->
tyibuff
;

87 i‡(
ty±r
->
tyõcho
) {

88 
	`echoch
(
ch
, 
ty±r
, 
c§±r
);

90 
	`sig«l
(
ty±r
->
tyi£m
);

98 i‡(
ch
 =
ty±r
->
tyikûlc
 &&Åy±r->
tyikûl
) {

99 
ty±r
->
tyôaû
 -ty±r->
tyicurs‹
;

100 i‡(
ty±r
->
tyôaû
 <Åy±r->
tyibuff
) {

101 
ty±r
->
tyôaû
 +
TY_IBUFLEN
;

103 
ty±r
->
tyicurs‹
 = 0;

104 
	`ïutc
(
TY_RETURN
, 
ty±r
, 
c§±r
);

105 
	`ïutc
(
TY_NEWLINE
, 
ty±r
, 
c§±r
);

111 i‡–((
ch
==
ty±r
->
tyõø£c
Ë|| (ch=Òy±r->
tyõø£c2
))

112 && 
ty±r
->
tyõø£
) {

113 i‡(
ty±r
->
tyicurs‹
 > 0) {

114 
ty±r
->
tyicurs‹
--;

115 
	`îa£1
(
ty±r
, 
c§±r
);

122 i‡–(
ch
 =
TY_NEWLINE
Ë|| (ch =
TY_RETURN
) ) {

123 i‡(
ty±r
->
tyõcho
) {

124 
	`echoch
(
ch
, 
ty±r
, 
c§±r
);

126 *
ty±r
->
tyôaû
++ = 
ch
;

127 i‡(
ty±r
->
tyôaû
>=&ty±r->
tyibuff
[
TY_IBUFLEN
]) {

128 
ty±r
->
tyôaû
 =Åy±r->
tyibuff
;

131 
	`sig« 
(
ty±r
->
tyi£m
,Åy±r->
tyicurs‹
 + 1);

132 
ty±r
->
tyicurs‹
 = 0;

139 
avaû
 = 
	`£mcou¡
(
ty±r
->
tyi£m
);

140 i‡(
avaû
 < 0) {

141 
avaû
 = 0;

143 i‡((
avaû
 + 
ty±r
->
tyicurs‹
Ë>
TY_IBUFLEN
-1) {

144 
	`ïutc
(
ty±r
->
tyifuŒc
,Åy±r, 
c§±r
);

151 i‡(
ch
 =
ty±r
->
tyeofch
 &&Åy±r->
tyeof
) {

152 i‡(
ty±r
->
tyõcho
) {

153 
	`echoch
(
ch
, 
ty±r
, 
c§±r
);

155 i‡(
ty±r
->
tyicurs‹
 != 0) {

158 *
ty±r
->
tyôaû
++ = 
ch
;

159 
	`sig«l
(
ty±r
->
tyi£m
);

166 i‡(
ty±r
->
tyõcho
) {

167 
	`echoch
(
ch
, 
ty±r
, 
c§±r
);

172 
ty±r
->
tyicurs‹
++;

173 *
ty±r
->
tyôaû
++ = 
ch
;

177 i‡(
ty±r
->
tyôaû
 >&ty±r->
tyibuff
[
TY_IBUFLEN
]) {

178 
ty±r
->
tyôaû
 =Åy±r->
tyibuff
;

182 
	}
}

188 
loˇl
 
	$îa£1
(

189 
âycblk
 *
ty±r
,

190 
u¨t_c§eg
 *
c§±r


193 
ch
;

195 i‡–(--
ty±r
->
tyôaû
Ë<Åy±r->
tyibuff
) {

196 
ty±r
->
tyôaû
 +
TY_IBUFLEN
;

201 
ch
 = *
ty±r
->
tyôaû
;

202 i‡(
ty±r
->
tyõcho
) {

203 i‡(
ch
 < 
TY_BLANK
 || ch == 0177) {

204 i‡(
ty±r
->
tyevis
) {

205 
	`ïutc
(
TY_BACKSP
, 
ty±r
, 
c§±r
);

206 i‡(
ty±r
->
tyõback
) {

207 
	`ïutc
(
TY_BLANK
, 
ty±r
, 
c§±r
);

208 
	`ïutc
(
TY_BACKSP
, 
ty±r
, 
c§±r
);

211 
	`ïutc
(
TY_BACKSP
, 
ty±r
, 
c§±r
);

212 i‡(
ty±r
->
tyõback
) {

213 
	`ïutc
(
TY_BLANK
, 
ty±r
, 
c§±r
);

214 
	`ïutc
(
TY_BACKSP
, 
ty±r
, 
c§±r
);

217 
	`ïutc
(
TY_BACKSP
, 
ty±r
, 
c§±r
);

218 i‡(
ty±r
->
tyõback
) {

219 
	`ïutc
(
TY_BLANK
, 
ty±r
, 
c§±r
);

220 
	`ïutc
(
TY_BACKSP
, 
ty±r
, 
c§±r
);

225 
	}
}

231 
loˇl
 
	$echoch
(

232 
ch
,

233 
âycblk
 *
ty±r
,

234 
u¨t_c§eg
 *
c§±r


237 i‡((
ch
==
TY_NEWLINE
 || ch==
TY_RETURN
Ë&& 
ty±r
->
tye¸lf
) {

238 
	`ïutc
(
TY_RETURN
, 
ty±r
, 
c§±r
);

239 
	`ïutc
(
TY_NEWLINE
, 
ty±r
, 
c§±r
);

240 } i‡–(
ch
<
TY_BLANK
||ch==0177Ë&& 
ty±r
->
tyevis
) {

241 
	`ïutc
(
TY_UPARROW
, 
ty±r
, 
c§±r
);

242 
	`ïutc
(
ch
+0100, 
ty±r
, 
c§±r
);

244 
	`ïutc
(
ch
, 
ty±r
, 
c§±r
);

246 
	}
}

252 
loˇl
 
	$ïutc
(

253 
ch
,

254 
âycblk
 *
ty±r
,

255 
u¨t_c§eg
 *
c§±r


258 *
ty±r
->
tyëaû
++ = 
ch
;

262 i‡(
ty±r
->
tyëaû
 >&ty±r->
tyebuff
[
TY_EBUFLEN
]) {

263 
ty±r
->
tyëaû
 =Åy±r->
tyebuff
;

265 
	`âykickout
(
c§±r
);

267 
	}
}

	@device/tty/ttyhandle_out.c

3 
	~<xöu.h
>

10 
	$âyh™dÀ_out
(

11 
âycblk
 *
ty±r
,

12 
u¨t_c§eg
 *
c§±r


16 
öt32
 
och¨s
;

18 
öt32
 
avaû
;

19 
öt32
 
u•a˚
;

21 
byã
 
õr
 = 0;

25 i‡(
ty±r
->
tyohñd
) {

31 i‡–(
ty±r
->
tyehód
 =ty±r->
tyëaû
) &&

32 (
	`£mcou¡
(
ty±r
->
tyo£m
Ë>
TY_OBUFLEN
) ) {

33 
õr
 = 
c§±r
->ier;

34 
c§±r
->
õr
 = iî & ~
UART_IER_ETBEI
;

40 
u•a˚
 = 
UART_FIFO_SIZE
;

45  (
u•a˚
>0Ë&& 
ty±r
->
tyehód
 !ty±r->
tyëaû
) {

46 
c§±r
->
buf„r
 = *
ty±r
->
tyehód
++;

47 i‡(
ty±r
->
tyehód
 >&ty±r->
tyebuff
[
TY_EBUFLEN
]) {

48 
ty±r
->
tyehód
 =Åy±r->
tyebuff
;

50 
u•a˚
--;

56 
och¨s
 = 0;

57 
avaû
 = 
TY_OBUFLEN
 - 
	`£mcou¡
(
ty±r
->
tyo£m
);

58  (
u•a˚
>0Ë&& (
avaû
 > 0) ) {

59 
c§±r
->
buf„r
 = *
ty±r
->
tyohód
++;

60 i‡(
ty±r
->
tyohód
 >&ty±r->
tyobuff
[
TY_OBUFLEN
]) {

61 
ty±r
->
tyohód
 =Åy±r->
tyobuff
;

63 
avaû
--;

64 
u•a˚
--;

65 
och¨s
++;

67 i‡(
och¨s
 > 0) {

68 
	`sig« 
(
ty±r
->
tyo£m
, 
och¨s
);

71 
	}
}

	@device/tty/ttyhandler.c

3 
	~<xöu.h
>

9 
	$âyh™dÀr
(

10 
öt32
 
¨g


13 
díåy
 *
dev±r
;

14 
âycblk
 *
ty±r
;

15 
u¨t_c§eg
 *
c§±r
;

16 
byã
 
iú
 = 0;

21 
dev±r
 = (
díåy
 *Ë
¨g
;

22 
c§±r
 = (
u¨t_c§eg
 *Ë
dev±r
->
dvc§
;

26 
ty±r
 = &
âyèb
[ 
dev±r
->
dvmö‹
 ];

31 
iú
 = 
c§±r
->iir;

32 i‡(
iú
 & 
UART_IIR_IRQ
) {

43 
iú
 &
UART_IIR_IDMASK
;

44 
iú
) {

48 
UART_IIR_RLSI
:

53 
UART_IIR_RDA
:

54 
UART_IIR_RTO
:

56 
	`ªsched_˙é
(
DEFER_START
);

60  (
c§±r
->
l§
 & 
UART_LSR_DR
) != 0) {

61 
	`âyh™dÀ_ö
(
ty±r
, 
c§±r
);

64 
	`ªsched_˙é
(
DEFER_STOP
);

70 
UART_IIR_THRE
:

71 
	`âyh™dÀ_out
(
ty±r
, 
c§±r
);

76 
UART_IIR_MSC
:

79 
	}
}

	@device/tty/ttyinit.c

3 
	~<xöu.h
>

5 
âycblk
 
	gâyèb
[
Nây
];

11 
devˇŒ
 
	$âyöô
(

12 
díåy
 *
dev±r


15 
âycblk
 *
ty±r
;

16 
u¨t_c§eg
 *
u±r
;

17 
uöt32
 
pcidev
;

19 
ty±r
 = &
âyèb
[ 
dev±r
->
dvmö‹
 ];

23 
ty±r
->
tyihód
 =Åy±r->
tyôaû
 =

24 &
ty±r
->
tyibuff
[0];

25 
ty±r
->
tyi£m
 = 
	`£m¸óã
(0);

26 
ty±r
->
tyohód
 =Åy±r->
tyŸaû
 =

27 &
ty±r
->
tyobuff
[0];

28 
ty±r
->
tyo£m
 = 
	`£m¸óã
(
TY_OBUFLEN
);

29 
ty±r
->
tyehód
 =Åy±r->
tyëaû
 =

30 &
ty±r
->
tyebuff
[0];

31 
ty±r
->
tyimode
 = 
TY_IMCOOKED
;

32 
ty±r
->
tyõcho
 = 
TRUE
;

33 
ty±r
->
tyõback
 = 
TRUE
;

34 
ty±r
->
tyevis
 = 
TRUE
;

35 
ty±r
->
tye¸lf
 = 
TRUE
;

36 
ty±r
->
tyi¸lf
 = 
TRUE
;

37 
ty±r
->
tyõø£
 = 
TRUE
;

38 
ty±r
->
tyõø£c
 = 
TY_BACKSP
;

39 
ty±r
->
tyõø£c2

TY_BACKSP2
;

40 
ty±r
->
tyeof
 = 
TRUE
;

41 
ty±r
->
tyeofch
 = 
TY_EOFCH
;

42 
ty±r
->
tyikûl
 = 
TRUE
;

43 
ty±r
->
tyikûlc
 = 
TY_KILLCH
;

44 
ty±r
->
tyicurs‹
 = 0;

45 
ty±r
->
tyoÊow
 = 
TRUE
;

46 
ty±r
->
tyohñd
 = 
FALSE
;

47 
ty±r
->
tyo°›
 = 
TY_STOPCH
;

48 
ty±r
->
tyo°¨t
 = 
TY_STRTCH
;

49 
ty±r
->
tyo¸lf
 = 
TRUE
;

50 
ty±r
->
tyifuŒc
 = 
TY_FULLCH
;

55 
pcidev
 = 
	`föd_pci_devi˚
(
INTEL_QUARK_UART_PCI_DID
,

56 
INTEL_QUARK_UART_PCI_VID
,

61 
u±r
 = (
u¨t_c§eg
 *)
dev±r
->
dvc§
;

64 
u±r
->
l¸
 = 
UART_LCR_DLAB
;

65 
u±r
->
dlm
 = 0x00;

66 
u±r
->
dŒ
 = 0x18;

68 
u±r
->
l¸
 = 
UART_LCR_8N1
;

69 
u±r
->
f¸
 = 0x00;

73 
	`pci_£t_ivec
–
pcidev
, 
dev±r
->
dvúq
, dev±r->
dvöå
,

74 (
öt32
)
dev±r
 );

79 
u±r
->
f¸
 = 
UART_FCR_EFIFO
 | 
UART_FCR_RRESET
 |

80 
UART_FCR_TRESET
 | 
UART_FCR_TRIG2
;

84 
	`âykickout
(
u±r
);

85  
OK
;

86 
	}
}

	@device/tty/ttykickout.c

3 
	~<xöu.h
>

10 
	$âykickout
(

11 
u¨t_c§eg
 *
c§±r


16 
c§±r
->
õr
 = 
UART_IER_ERBFI
 | 
UART_IER_ETBEI
;

19 
	}
}

	@device/tty/ttyputc.c

3 
	~<xöu.h
>

9 
devˇŒ
 
	$âyputc
(

10 
díåy
 *
dev±r
,

11 
ch


14 
âycblk
 *
ty±r
;

16 
ty±r
 = &
âyèb
[
dev±r
->
dvmö‹
];

20 i‡–
ch
==
TY_NEWLINE
 && 
ty±r
->
tyo¸lf
 ) {

21 
	`âyputc
(
dev±r
, 
TY_RETURN
);

24 
	`waô
(
ty±r
->
tyo£m
);

25 *
ty±r
->
tyŸaû
++ = 
ch
;

29 i‡(
ty±r
->
tyŸaû
 >&ty±r->
tyobuff
[
TY_OBUFLEN
]) {

30 
ty±r
->
tyŸaû
 =Åy±r->
tyobuff
;

35 
	`âykickout
((
u¨t_c§eg
 *)
dev±r
->
dvc§
);

37  
OK
;

38 
	}
}

	@device/tty/ttyread.c

3 
	~<xöu.h
>

9 
devˇŒ
 
	$âyªad
(

10 
díåy
 *
dev±r
,

11 *
buff
,

12 
öt32
 
cou¡


15 
âycblk
 *
ty±r
;

16 
öt32
 
avaû
;

17 
öt32
 
ƒód
;

18 
öt32
 
fú°ch
;

19 
ch
;

21 i‡(
cou¡
 < 0) {

22  
SYSERR
;

24 
ty±r
&
âyèb
[
dev±r
->
dvmö‹
];

26 i‡(
ty±r
->
tyimode
 !
TY_IMCOOKED
) {

30 i‡(
cou¡
 == 0) {

31 
avaû
 = 
	`£mcou¡
(
ty±r
->
tyi£m
);

32 i‡(
avaû
 == 0) {

35 
cou¡
 = 
avaû
;

38 
ƒód
 = 0;Çªad < 
cou¡
;Çread++) {

39 *
buff
++ = (Ë
	`âygëc
(
dev±r
);

41  
ƒód
;

46 
fú°ch
 = 
	`âygëc
(
dev±r
);

50 i‡(
fú°ch
 =
EOF
) {

51  
EOF
;

56 
ch
 = (Ë
fú°ch
;

57 *
buff
++ = 
ch
;

58 
ƒód
 = 1;

59  (
ƒód
 < 
cou¡
Ë&& (
ch
 !
TY_NEWLINE
) &&

60 (
ch
 !
TY_RETURN
) ) {

61 
ch
 = 
	`âygëc
(
dev±r
);

62 *
buff
++ = 
ch
;

63 
ƒód
++;

65  
ƒód
;

66 
	}
}

	@device/tty/ttywrite.c

3 
	~<xöu.h
>

9 
devˇŒ
 
	$âywrôe
(

10 
díåy
 *
dev±r
,

11 *
buff
,

12 
öt32
 
cou¡


17 i‡(
cou¡
 < 0) {

18  
SYSERR
;

19 } i‡(
cou¡
 == 0){

20  
OK
;

25 ; 
cou¡
>0 ; count--) {

26 
	`âyputc
(
dev±r
, *
buff
++);

28  
OK
;

29 
	}
}

	@include/apic.h

5 
	sœpic_c§eg
 {

6 
uöt32
 
	mªs1
[8];

7 
uöt32
 
	mœpic_id
;

8 
uöt32
 
	mªs2
[3];

9 
uöt32
 
	mœpic_vî
;

10 
uöt32
 
	mªs3
[19];

11 
uöt32
 
	mçr
;

12 
uöt32
 
	mªs4
[3];

13 
uöt32
 
	m≠r
;

14 
uöt32
 
	mªs5
[3];

15 
uöt32
 
	mµr
;

16 
uöt32
 
	mªs6
[3];

17 
uöt32
 
	meoi
;

18 
uöt32
 
	mªs7
[3];

19 
uöt32
 
	mºd
;

20 
uöt32
 
	mªs8
[3];

21 
uöt32
 
	mldr
;

22 
uöt32
 
	mªs9
[3];

23 
uöt32
 
	md‰
;

24 
uöt32
 
	mªs10
[3];

25 
uöt32
 
	msivr
;

26 
uöt32
 
	mªs11
[3];

28 
uöt32
 
	mi§
;

29 
uöt32
 
	mªs
[3];

30 } 
	mi§
[8];

32 
uöt32
 
	mtmr
;

33 
uöt32
 
	mªs
[3];

34 } 
	mtmr
[8];

36 
uöt32
 
	múr
;

37 
uöt32
 
	mªs
[3];

38 } 
	múr
[8];

41 vﬁ©ûê
œpic_c§eg
 *
œpic
;

43 
	#LAPIC_BASE_ADDR
 0xFEE00000

	)

45 
	#IOAPIC_IDX_ADDR
 0xFEC00000

	)

46 
	#IOAPIC_WIN_ADDR
 0xFEC00010

	)

	@include/arp.h

5 
	#ARP_HALEN
 6

	)

6 
	#ARP_PALEN
 4

	)

8 
	#ARP_HTYPE
 1

	)

9 
	#ARP_PTYPE
 0x0800

	)

11 
	#ARP_OP_REQ
 1

	)

12 
	#ARP_OP_RPLY
 2

	)

14 
	#ARP_SIZ
 16

	)

16 
	#ARP_RETRY
 3

	)

18 
	#ARP_TIMEOUT
 300

	)

22 
	#AR_FREE
 0

	)

23 
	#AR_PENDING
 1

	)

24 
	#AR_RESOLVED
 2

	)

26 #¥agm®
∑ck
(2)

27 
	s¨µackë
 {

28 
byã
 
	m¨p_ëhd°
[
ETH_ADDR_LEN
];

29 
byã
 
	m¨p_ëh§c
[
ETH_ADDR_LEN
];

30 
uöt16
 
	m¨p_ëhty≥
;

31 
uöt16
 
	m¨p_hty≥
;

32 
uöt16
 
	m¨p_±y≥
;

33 
byã
 
	m¨p_hÀn
;

34 
byã
 
	m¨p_∂í
;

35 
uöt16
 
	m¨p_›
;

36 
byã
 
	m¨p_¢dha
[
ARP_HALEN
];

37 
uöt32
 
	m¨p_¢d∑
;

38 
byã
 
	m¨p_èrha
[
ARP_HALEN
];

39 
uöt32
 
	m¨p_èΩa
;

41 #¥agm®
∑ck
()

43 
	s¨≥¡ry
 {

44 
öt32
 
	m¨°©e
;

45 
uöt32
 
	m¨∑ddr
;

46 
pid32
 
	m¨pid
;

47 
byã
 
	m¨haddr
[
ARP_HALEN
];

50 
¨≥¡ry
 
¨pˇche
[];

	@include/bufpool.h

3 #i‚def 
NBPOOLS


4 
	#NBPOOLS
 20

	)

7 #i‚def 
BP_MAXB


8 
	#BP_MAXB
 8192

	)

11 
	#BP_MINB
 8

	)

12 #i‚def 
BP_MAXN


13 
	#BP_MAXN
 2048

	)

16 
	sb≥¡ry
 {

17 
b≥¡ry
 *
	mb≤ext
;

18 
sid32
 
	mbp£m
;

20 
uöt32
 
	mbpsize
;

23 
b≥¡ry
 
bu·ab
[];

24 
bpid32
 
nbpoﬁs
;

	@include/clock.h

5 
	#CLOCKBASE
 0x40

	)

6 
	#CLOCK0
 
CLOCKBASE


	)

7 
	#CLKCNTL
 (
CLOCKBASE
+3Ë

	)

10 
	#CLKTICKS_PER_SEC
 1000

	)

12 
uöt32
 
˛ktime
;

13 
uöt32
 
cou¡1000
;

15 
qid16
 
¶ìpq
;

16 
uöt32
 
¥ìm±
;

	@include/ctype.h

7 
	#_U
 0x01

	)

8 
	#_L
 0x02

	)

9 
	#_N
 0x04

	)

10 
	#_S
 0x08

	)

11 
	#_P
 0x10

	)

12 
	#_C
 0x20

	)

13 
	#_X
 0x40

	)

15 c⁄° 
_˘y≥_
[];

17 
	#ißÕha
(
c
Ë((
_˘y≥_
+1)[()c]&(
_U
|
_L
))

	)

18 
	#isuµî
(
c
Ë((
_˘y≥_
+1)[()c]&
_U
)

	)

19 
	#i¶owî
(
c
Ë((
_˘y≥_
+1)[()c]&
_L
)

	)

20 
	#isdigô
(
c
Ë((
_˘y≥_
+1)[()c]&
_N
)

	)

21 
	#isxdigô
(
c
Ë((
_˘y≥_
+1)[()c]&(
_N
|
_X
))

	)

22 
	#is•a˚
(
c
Ë((
_˘y≥_
+1)[()c]&
_S
)

	)

23 
	#i•un˘
(
c
Ë((
_˘y≥_
+1)[()c]&
_P
)

	)

24 
	#iß um
(
c
Ë((
_˘y≥_
+1)[()c]&(
_U
|
_L
|
_N
))

	)

25 
	#i•röt
(
c
Ë((
_˘y≥_
+1)[()c]&(
_P
|
_U
|
_L
|
_N
|
_S
))

	)

26 
	#is˙ål
(
c
Ë((
_˘y≥_
+1)[()c]&
_C
)

	)

27 
	#ißscii
(
c
Ë(()(()(c))<=0x7F)

	)

29 
	#touµî
(
c
Ë((()(c))-'a'+'A')

	)

30 
	#tﬁowî
(
c
Ë((()(c))-'A'+'a')

	)

31 
	#tﬂscii
(
c
Ë((()(c))&0x7F)

	)

33 
	#i£of
(
c
Ë(0x04 =()c)

	)

	@include/date.h

15 
	#¡im2xtim
(
x
Ë((x)-2208988800UË

	)

16 
	#xtim2¡im
(
x
Ë((x)+2208988800UË

	)

20 
	#DATE_DST_OFF
 0

	)

21 
	#DATE_DST_ON
 1

	)

22 
	#DATE_DST_AUTO
 2

	)

26 
	sd©eöfo
 {

27 
uöt32
 
	mdt_boŸ
;

30 
boﬁ8
 
	mdt_boŸvÆid
;

31 
öt32
 
	mdt_daylight
;

33 
öt32
 
	mdt_msize
[12];

34 *
	mdt_m«m
[12];

35 *
	mdt_d«m
[7];

38 
d©eöfo
 
D©e
;

42 
	#i¶óp
(
x
Ë((x)%4==0Ë

	)

43 
	#SECPERDY
 (60*60*24Ë

	)

44 
	#SECPERHR
 (60*60Ë

	)

45 
	#SECPERMN
 (60Ë

	)

49 
	#ZONE_EST
 5

	)

50 
	#ZONE_CST
 6

	)

51 
	#ZONE_MST
 7

	)

52 
	#ZONE_PST
 8

	)

53 
	#TIMEZONE
 
ZONE_EST


	)

57 
	#utim2…im
(
x
Ë((x)-
TIMEZONE
*
SECPERHR
)

	)

58 
	#…im2utim
(
x
Ë((x)+
TIMEZONE
*
SECPERHR
)

	)

60 
	#TIMERPORT
 123

	)

61 
	#TIMELPORT
 53678

	)

63 #i‚def 
TIMESERVER


64 
	#TIMESERVER
 "128.10.19.24"

	)

67 
	#TIMETIMEOUT
 2000

	)

	@include/debug.h

3 
	#DEBUG_ASCII
 0x01

	)

4 
	#DEBUG_HEX
 0x02

	)

6 
hexdump
(*
buf„r
, 
uöt32
 
Àngth
, 
boﬁ8
 
ãxt
);

7 
debugbªak
();

8 
debugªt
();

	@include/delay.h

6 
	#DELAY
(
n
) \

8 
i
 = 0; \

10 
i
 < (
n
 * 100)) i++; \

12 

	)

16 
	#MDELAY
(
n
) \

18 
i
; \

20 
i
=
n
;i>0;i--) { \

21 
	`DELAY
(1000); \

23 }

	)

	@include/device.h

3 
	#DEVNAMLEN
 16

	)

7 
	#isbaddev
(
f
Ë–((fË< 0Ë| ((fË>
NDEVS
Ë)

	)

	@include/dhcp.h

3 
	#DHCP


	)

5 
	#DHCP_RETRY
 5

	)

7 
	#DHCP_PADDING
 0

	)

8 
	#DHCP_SUBNET_MASK
 1

	)

9 
	#DHCP_ROUTER
 3

	)

10 
	#DHCP_DNS_SERVER
 6

	)

11 
	#DHCP_DOMAIN_NAME
 15

	)

12 
	#DHCP_VENDER_OPTIONS
 43

	)

13 
	#DHCP_REQUESTED_IP
 50

	)

14 
	#DHCP_IP_ADDR_LEASE_TIME
 51

	)

15 
	#DHCP_OPTION_OVERLOAD
 52

	)

16 
	#DHCP_MESSAGE_TYPE
 53

	)

17 
	#DHCP_SERVER_ID
 54

	)

18 
	#DHCP_PARAMETER_REQUEST_LIST
 55

	)

19 
	#DHCP_MESSAGE
 56

	)

20 
	#DHCP_MAXIMUM_DHCP_MESSAGE_SIZE
 57

	)

21 
	#DHCP_RENEWAL_TIME_VALUE
 58

	)

22 
	#DHCP_REBINDING_TIME_VALUE
 59

	)

23 
	#DHCP_VENDOR_CLASS_ID
 60

	)

24 
	#DHCP_CLIENT_ID
 61

	)

25 
	#DHCP_TFTP_SERVER_NAME
 66

	)

26 
	#DHCP_BOOTFILE_NAME
 67

	)

27 
	#DHCP_CLIENT_SYS_ARCH
 93

	)

28 
	#DHCP_CLIENT_NET_ID
 94

	)

29 
	#DHCP_CLIENT_MACHINE_ID
 97

	)

30 
	#DHCP_MESSAGE_END
 255

	)

32 #¥agm®
∑ck
(2)

33 
	sdh˝msg
 {

34 
byã
 
	mdc_b›
;

35 
byã
 
	mdc_hty≥
;

36 
byã
 
	mdc_hÀn
;

37 
byã
 
	mdc_h›s
;

38 
uöt32
 
	mdc_xid
;

39 
uöt16
 
	mdc_£cs
;

40 
uöt16
 
	mdc_Êags
;

41 
uöt32
 
	mdc_cù
;

42 
uöt32
 
	mdc_yù
;

43 
uöt32
 
	mdc_sù
;

44 
uöt32
 
	mdc_gù
;

45 
byã
 
	mdc_chaddr
[16];

47 
byã
 
	mdc_boŸp
[192];

49 
byã
 
	m¢ame
[64];

50 
byã
 
	mboŸfûe
[128];

53 
uöt32
 
	mdc_cookõ
;

54 
byã
 
	mdc_›t
[1024];

58 #¥agm®
∑ck
()

	@include/dns.h

5 
	#DNSTIMEOUT
 3000

	)

6 
	#DNSRETRY
 3

	)

7 
	#DNSPORT
 53

	)

8 
	#DNSLPORT
 51525

	)

9 
	#DNSDATASIZ
 500

	)

14 
	sdn•kt
 {

15 
uöt16
 
	mid
;

17 
byã
 
	mrd
:1;

18 
byã
 
	mtc
:1;

19 
byã
 
	mØ
:1;

20 
byã
 
	m›code
:4;

21 
byã
 
	mqr
:1;

24 
byã
 
	mrcode
:4;

25 
byã
 
	mz
:3;

26 
byã
 
	mø
:1;

28 
uöt16
 
	mqucou¡
;

29 
uöt16
 
	m™cou¡
;

30 
uöt16
 
	mnscou¡
;

31 
uöt16
 
	m¨cou¡
;

32 
	md©a
[
DNSDATASIZ
];

37 
	#DNS_QT_A
 1

	)

38 
	#DNS_QT_NS
 2

	)

42 
	#DNS_QC_IN
 1

	)

46 
	sdns_q
 {

47 *
	mq«me
;

48 
uöt16
 *
	mqty≥
;

49 
uöt16
 *
	mq˛ass
;

54 
	sdns_º
 {

55 *
	m∫ame
;

56 
uöt16
 *
	mπy≥
;

57 
uöt16
 *
	mr˛ass
;

58 
uöt32
 *
	mâl
;

59 
uöt16
 *
	mrdÀn
;

60 *
	mrd©a
;

	@include/ether.h

10 
	#ETH_ADDR_LEN
 6

	)

11 
	tEaddr
[
ETH_ADDR_LEN
];

15 
	sëhîPkt
 {

16 
byã
 
	md°
[
ETH_ADDR_LEN
];

17 
byã
 
	m§c
[
ETH_ADDR_LEN
];

18 
uöt16
 
	mty≥
;

19 
byã
 
	md©a
[1];

22 
	#ETH_HDR_LEN
 14

	)

27 
	#ETH_MTU
 1500

	)

28 
	#ETH_VLAN_LEN
 4

	)

29 
	#ETH_CRC_LEN
 4

	)

32 
	#ETH_MAX_PKT_LEN
 ( 
ETH_HDR_LEN
 + 
ETH_VLAN_LEN
 + 
ETH_MTU
 )

	)

34 
	#ETH_BUF_SIZE
 1522

	)

40 
	#ETH_STATE_FREE
 0

	)

41 
	#ETH_STATE_DOWN
 1

	)

42 
	#ETH_STATE_UP
 2

	)

46 
	#ETH_CTRL_GET_MAC
 1

	)

47 
	#ETH_CTRL_ADD_MCAST
 2

	)

48 
	#ETH_CTRL_REMOVE_MCAST
 3

	)

52 
	#ETH_NUM_MCAST
 32

	)

56 
	#ETH_TYPE_3C905C
 1

	)

57 
	#ETH_TYPE_E1000E
 2

	)

58 
	#ETH_TYPE_QUARK_ETH
 3

	)

62 
	sëhcblk
 {

63 
byã
 
	m°©e
;

64 
díåy
 *
	mphy
;

65 
byã
 
	mty≥
;

69 
díåy
 *
	mdev
;

70 *
	mc§
;

71 
uöt32
 
	mpcidev
;

72 
uöt32
 
	mioba£
;

73 
uöt32
 
	mÊashba£
;

74 
uöt32
 
	mmemba£
;

76 *
	mrxRög
;

77 *
	mrxBufs
;

78 
uöt32
 
	mrxHód
;

79 
uöt32
 
	mrxTaû
;

80 
uöt32
 
	mrxRögSize
;

81 
uöt32
 
	mrxIrq
;

83 *
	mtxRög
;

84 *
	mtxBufs
;

85 
uöt32
 
	mtxHód
;

86 
uöt32
 
	mtxTaû
;

87 
uöt32
 
	mtxRögSize
;

88 
uöt32
 
	mtxIrq
;

90 
uöt8
 
	mdevAddªss
[
ETH_ADDR_LEN
];

92 
uöt8
 
	maddrLí
;

93 
uöt16
 
	mmtu
;

95 
uöt32
 
	mîr‹s
;

96 
sid32
 
	mi£m
;

97 
sid32
 
	mo£m
;

98 
uöt16
 
	mi°¨t
;

100 
öt16
 
	möPoﬁ
;

101 
öt16
 
	moutPoﬁ
;

103 
öt16
 
	m¥oms
;

105 
öt16
 
	med_mc£t
;

106 
öt16
 
	med_mcc
;

107 
Eaddr
 
	med_mˇ
[
ETH_NUM_MCAST
];

110 
ëhcblk
 
ëhîèb
[];

	@include/ethloop.h

8 #i‚de‡
_ETHLOOP_H_


9 
	#_ETHLOOP_H_


	)

12 
	#ELOOP_MTU
 1500

	)

13 
	#ELOOP_LINKHDRSIZE
 
ETH_HDR_LEN


	)

15 
	#ELOOP_BUFSIZE
 
ELOOP_MTU
 + 
ELOOP_LINKHDRSIZE


	)

16 
	#ELOOP_NBUF
 100

	)

18 
	#ELOOP_CTRL_GETHOLD
 1

	)

19 
	#ELOOP_CTRL_SETFLAG
 2

	)

20 
	#ELOOP_CTRL_CLRFLAG
 3

	)

22 
	#ELOOP_FLAG_HOLDNXT
 0x01

	)

23 
	#ELOOP_FLAG_DROPNXT
 0x04

	)

24 
	#ELOOP_FLAG_DROPALL
 0x08

	)

26 
	#ELOOP_STATE_FREE
 0

	)

27 
	#ELOOP_STATE_ALLOC
 1

	)

32 
	sëhlo›


34 
	m°©e
;

35 
díåy
 *
	mdev
;

36 
	mpoﬁid
;

37 
byã
 
	mÊags
;

40 
	mödex
;

41 
sid32
 
	m£m
;

42 
	mcou¡
;

43 *
	mbuf„r
[
ELOOP_NBUF
];

44 
	mpkéí
[
ELOOP_NBUF
];

47 
sid32
 
	mh£m
;

48 *
	mhﬁd
;

49 
	mhﬁdÀn
;

52 
uöt32
 
	mnout
;

55 
ëhlo›
 
ño›èb
[];

58 
devˇŒ
 
ëhlo›Inô
(
díåy
 *);

59 
devˇŒ
 
ëhlo›O≥n
(
díåy
 *);

60 
devˇŒ
 
ëhlo›Clo£
(
díåy
 *);

61 
devˇŒ
 
ëhlo›Ród
(
díåy
 *, *, 
uöt32
);

62 
devˇŒ
 
ëhlo›Wrôe
(
díåy
 *, *, 
uöt32
);

63 
devˇŒ
 
ëhlo›C⁄åﬁ
(
díåy
 *, , 
öt32
, int32);

	@include/file.h

5 
	#F_MODE_R
 0x01

	)

6 
	#F_MODE_W
 0x02

	)

7 
	#F_MODE_RW
 0x03

	)

8 
	#F_MODE_N
 0x04

	)

9 
	#F_MODE_O
 0x08

	)

12 
	#F_MODE_NO
 0x0C

	)

16 
	#F_CTL_DEL
 1

	)

17 
	#F_CTL_TRUNC
 2

	)

18 
	#F_CTL_MKDIR
 3

	)

19 
	#F_CTL_RMDIR
 4

	)

20 
	#F_CTL_SIZE
 5

	)

	@include/flash.h

11 #i‚de‡
_FLASH_H_


12 
	#_FLASH_H_


	)

15 
	#MAX_LIVE_BLOCKS
 8

	)

16 
	#FLASH_BLK_SIZE
 512

	)

18 
	#FLASH_BLOCK_FREE
 0

	)

19 
	#FLASH_BLOCK_CLEAN
 1

	)

20 
	#FLASH_BLOCK_DIRTY
 2

	)

23 
	#CFE_MIN_BLOCK
 0x0000

	)

24 
	#CFE_MAX_BLOCK
 0x01FF

	)

25 
	#KERNEL_MIN_BLOCK
 0x0200

	)

26 
	#KERNEL_MAX_BLOCK
 0x03FF

	)

27 
	#NVRAM_MIN_BLOCK
 0x1FC0

	)

28 
	#NVRAM_MAX_BLOCK
 0x1FFF

	)

31 
	#FLASH_BLOCK_SIZE
 0x0000

	)

32 
	#FLASH_N_BLOCKS
 0x0001

	)

33 
	#FLASH_SYNC
 0x0002

	)

36 
	#FLASH_WIDEMODE
 1

	)

37 
	#MAX_REGIONS
 8

	)

40 
	#TRX_MAGIC
 0x30524448

	)

43 
	såx_hódî


45 
uöt32
 
	mmagic
;

46 
uöt32
 
	mÀn
;

47 
uöt32
 
	m¸c
;

48 
uöt32
 
	mÊags_vîs
;

49 
uöt32
 
	moff£ts
[3];

53 
	sfûe


55 
uöt32
 
	mÀn
;

56 *
	m«me
;

57 *
	md©a
;

60 
	sÊash_ªgi⁄


62 
uöt32
 
	mnblocks
;

63 
uöt32
 
	mblock_size
;

64 
uöt32
 
	mªgi⁄_°¨t
;

65 
uöt32
 
	mªgi⁄_size
;

68 
	sÊash_block


70 
uöt32
 
	m°¨t_pos
;

71 
uöt32
 
	msize
;

72 
byã
 
	m°©e
;

73 *
	mbuf„r
;

76 
	sÊash


78 
díåy
 *
	mdevi˚
;

79 
byã
 
	mcomm™ds
;

80 
uöt32
 
	mba£
;

81 
sid32
 
	mlock
;

82 
uöt32
 
	msize
;

83 
byã
 
	mmode
;

84 
uöt16
 
	mƒegi⁄s
;

85 
Êash_ªgi⁄
 
	mªgi⁄s
[
MAX_REGIONS
];

87 
uöt32
 
	mlog_size
;

88 
uöt32
 
	m∆og_blocks
;

91 
Êash_block
 
	mîa£_blocks
[
MAX_LIVE_BLOCKS
];

92 
byã
 
	mcuº_block
;

95 
Êash_block
 
bad_block
;

102 
	#CFI_PUT_8
(
addr
,
off£t
,
cmd
) \

103 *((vﬁ©ûê*)((
addr
)+((
off£t
)<<
FLASH_WIDEMODE
)))=(
cmd
)

	)

104 
	#CFI_GET_8
(
addr
,
off£t
) \

105 *((vﬁ©ûê*)((
addr
)+((
off£t
)<<
FLASH_WIDEMODE
)))

	)

108 
	#CFI_QUERY_ADDR
 0x55

	)

109 
	#CFI_QUERY_MODE
 0x98

	)

110 
	#CFI_QUERY_EXIT
 0xFF

	)

112 
	#CFI_MANUFACTURER
 0x00

	)

113 
	#CFI_DEVICE
 0x01

	)

114 
	#CFI_SIGNATURE
 0x10

	)

115 
	#CFI_QUERY_STRING
 0x10

	)

116 
	#CFI_COMMAND_SET
 0x13

	)

117 
	#CFI_DEV_SIZE
 0x27

	)

118 
	#CFI_DEV_INTERFACE
 0x28

	)

119 
	#CFI_MAX_BUFFER
 0x2A

	)

120 
	#CFI_REGION_COUNT
 0x2C

	)

121 
	#CFI_REGION_TAB
 0x2D

	)

124 
	#FLASH_INTEL_ECS
 0x0001

	)

125 
	#FLASH_AMD_SCS
 0x0002

	)

126 
	#FLASH_INTEL_SCS
 0x0003

	)

127 
	#FLASH_AMD_ECS
 0x0004

	)

128 
	#FLASH_MTSU_SCS
 0x0100

	)

129 
	#FLASH_MTSU_ECS
 0x0101

	)

136 
	#INTEL_PUT_8
(
addr
,
byã
) \

137 *((vﬁ©ûê*)(()(
addr
)))=(
byã
)

	)

138 
	#INTEL_GET_8
(
addr
) \

139 *((vﬁ©ûê*)(()(
addr
)))

	)

142 
	#AMD_PUT_8
(
addr
,
byã
) \

143 *((vﬁ©ûê*)(()(
addr
)))=(
byã
)

	)

144 
	#AMD_GET_8
(
addr
) \

145 *((vﬁ©ûê*)(()(
addr
)))

	)

148 
	#INTEL_PUT_16
(
addr
,
w‹d
) \

149 *((vﬁ©ûê
öt16
 *)(()(
addr
)))=(
w‹d
)

	)

150 
	#INTEL_GET_16
(
addr
) \

151 *((vﬁ©ûê
öt16
 *)(()(
addr
)))

	)

154 
	#AMD_PUT_16
(
addr
,
w‹d
) \

155 *((vﬁ©ûê
öt16
 *)(()(
addr
)))=(
w‹d
)

	)

156 
	#AMD_GET_16
(
addr
) \

157 *((vﬁ©ûê
öt16
 *)(()(
addr
)))

	)

161 
	#INTEL_READ
 0xFF

	)

162 
	#INTEL_PROGRAM
 0x40

	)

163 
	#INTEL_ERASE
 0x20

	)

164 
	#INTEL_CONFIRM
 0xD0

	)

165 
	#INTEL_RESUME
 0xD0

	)

166 
	#INTEL_UNLOCK
 0xD0

	)

167 
	#INTEL_SUSPEND
 0xB0

	)

168 
	#INTEL_READ_SR
 0x70

	)

169 
	#INTEL_CLR_SR
 0x50

	)

170 
	#INTEL_READ_ID
 0x90

	)

171 
	#INTEL_BLOCKMOD
 0x60

	)

172 
	#INTEL_LOCK
 0x01

	)

173 
	#INTEL_LOCKDOWN
 0x2F

	)

176 
	#AMD_UNLOCK_CYCLE1
 0xAA

	)

177 
	#AMD_UNLOCK_CYCLE2
 0x55

	)

178 
	#AMD_ERASE_CYCLE3
 0x80

	)

179 
	#AMD_ERASE_CYCLE6
 0x30

	)

180 
	#AMD_PROGRAM_CYCLE3
 0xA0

	)

181 
	#AMD_RESET
 0xF0

	)

182 
	#AMD_READ
 0xFF

	)

183 
	#AMD_BLOCKMOD
 0x60

	)

184 
	#AMD_LOCK
 0x01

	)

185 
	#AMD_CLR_SR
 0x50

	)

188 
	#AMD_REG_CYCLE1
 0x555

	)

189 
	#AMD_REG_CYCLE2
 0x2AA

	)

190 
	#AMD_SR_WSMS
 0x001

	)

193 
	#INTEL_SR_WSMS
 7

	)

194 
	#INTEL_SR_ESS
 6

	)

195 
	#INTEL_SR_ES
 5

	)

196 
	#INTEL_SR_PS
 4

	)

197 
	#INTEL_SR_PSS
 2

	)

198 
	#INTEL_SR_BLS
 1

	)

201 
	#INTEL_ID_MFG
 0x00

	)

202 
	#INTEL_ID_DEV
 0x02

	)

203 
	#INTEL_ID_BLS
 0x04

	)

206 
	#INTEL_S_LOCK
 0x01

	)

207 
	#INTEL_H_LOCK
 0x02

	)

210 
	#AMD_S_LOCK
 0x01

	)

211 
	#AMD_H_LOCK
 0x02

	)

214 
	#FLASH_BLOCK
 0x00

	)

215 
	#FLASH_LOGBLOCK
 0x01

	)

218 
	#FLASH_STATUS
 0x0000

	)

219 
	#FLASH_MODE
 0x0001

	)

220 
	#FLASH_LOCKED
 0x0010

	)

221 
	#FLASH_LOCK
 0x0011

	)

222 
	#FLASH_UNLOCK
 0x0012

	)

223 
	#FLASH_LOCKDOWN
 0x0013

	)

224 
	#FLASH_ERASE_PREP
 0x0014

	)

225 
	#FLASH_RESET
 0x0015

	)

227 
Êash
 
Êashèb
[];

230 
devˇŒ
 
ÊashInô
(
díåy
 *);

231 
devˇŒ
 
ÊashO≥n
(
díåy
 *, 
va_li°
);

232 
devˇŒ
 
ÊashRód
(
díåy
 *, 
byã
 *, 
uöt32
);

233 
devˇŒ
 
ÊashWrôe
(
díåy
 *, 
byã
 *, 
uöt32
);

234 
devˇŒ
 
ÊashSìk
(
díåy
 *, 
uöt32
);

235 
devˇŒ
 
ÊashC⁄åﬁ
(
díåy
 *, 
uöt16
, 
öt32
, int32);

236 
devˇŒ
 
ÊashClo£
(
díåy
 *);

239 
devˇŒ
 
logiˇlRód
(
Êash
 *, 
byã
 *, 
uöt32
);

240 
devˇŒ
 
logiˇlWrôe
(
Êash
 *, 
byã
 *, 
uöt32
);

241 
Êash_block
 
logiˇlM≠
(
Êash
 *, 
uöt32
);

244 
devˇŒ
 
physiˇlRód
(
Êash
 *, 
Êash_block
 *);

245 
devˇŒ
 
physiˇlWrôe
(
Êash
 *, 
Êash_block
 *);

246 
devˇŒ
 
physiˇlEø£
(
Êash
 *, 
Êash_block
 *);

247 
devˇŒ
 
physiˇlC⁄åﬁ
(
Êash
 *, 
Êash_block
 *, 
byã
,

248 
uöt32
);

249 
devˇŒ
 
physiˇlI¡ñRód
(
Êash
 *, 
Êash_block
 *);

250 
devˇŒ
 
physiˇlI¡ñWrôe
(
Êash
 *, 
Êash_block
 *);

251 
devˇŒ
 
physiˇlI¡ñEø£
(
Êash
 *, 
Êash_block
 *);

252 
devˇŒ
 
physiˇlI¡ñC⁄åﬁ
(
Êash
 *, 
Êash_block
 *, 
byã
,

253 
uöt32
);

254 
devˇŒ
 
physiˇlAMDRód
(
Êash
 *, 
Êash_block
 *);

257 
boﬁ
 
vÆid©eTrx
(
fûe
 *);

260 
sysˇŒ
 
¥ötFûeSèts
(
fûe
 *, *, *, , );

261 
sysˇŒ
 
‰ìFûe
(
fûe
 *);

	@include/gprocess.h

4 
	#PSSCHED
 0

	)

5 
	#MFQSCHED
 1

	)

	@include/hpet.h

3 
	#HPET_GC_OE
 0x00000001

	)

4 
	#GPET_GC_LRE
 0x00000002

	)

6 
	#HPET_GIS_T0
 0x00000001

	)

8 
	#HPET_TXCC_IT
 0x00000002

	)

9 
	#HPET_TXCC_IE
 0x00000004

	)

10 
	#HPET_TXCC_TYP
 0x00000008

	)

11 
	#HPET_TXCC_TVS
 0x00000040

	)

15 
	sh≥t_c§eg
 {

16 
uöt32
 
	mgcid_l
;

17 
uöt32
 
	mgcid_u
;

18 
uöt32
 
	mªs1
[2];

19 
uöt32
 
	mgc
;

20 
uöt32
 
	mªs2
[3];

21 
uöt32
 
	mgis
;

22 
uöt32
 
	mªs3
[51];

23 
uöt32
 
	mmcv_l
;

24 
uöt32
 
	mmcv_u
;

25 
uöt32
 
	mªs4
[2];

26 
uöt32
 
	mt0cc_l
;

27 
uöt32
 
	mt0cc_u
;

28 
uöt32
 
	mt0cv_l
;

29 
uöt32
 
	mt0cv_u
;

32 vﬁ©ûê
h≥t_c§eg
 *
h≥t
;

34 
	#HPET_BASE_ADDR
 0xFED00000

	)

	@include/icmp.h

3 
	#ICMP_SLOTS
 10

	)

4 
	#ICMP_QSIZ
 8

	)

8 
	#ICMP_FREE
 0

	)

9 
	#ICMP_USED
 1

	)

10 
	#ICMP_RECV
 2

	)

12 
	#ICMP_HDR_LEN
 8

	)

16 
	#ICMP_ECHOREPLY
 0

	)

17 
	#ICMP_ECHOREQST
 8

	)

21 
	sicm≥¡ry
 {

22 
öt32
 
	mic°©e
;

23 
uöt32
 
	mi¸emù
;

24 
öt32
 
	michód
;

25 
öt32
 
	mi˘aû
;

26 
öt32
 
	miccou¡
;

27 
pid32
 
	mi˝id
;

28 
√çackë
 *
	micqueue
[
ICMP_QSIZ
];

31 
icm≥¡ry
 
icm±ab
[];

	@include/icu.h

3 
	#ICU1
 0x20

	)

4 
	#ICU2
 0xA0

	)

6 
	#OCR
 
ICU1


	)

7 
	#IMR
 (
ICU1
+1Ë

	)

9 
	#EOI
 0x20

	)

	@include/interrupt.h

5 
	#MAX_EXT_IRQS
 16

	)

16 
	#MAX_IRQ_SHARING
 1

	)

22 
	#INT_ENTRY_SIZE
 16

	)

28 
	#INT_NEXT_HAND
 8

	)

33 #i‚def 
ASM


37 
	söt_öfo
 {

38 (*
	möt_h™dÀr
Ë(
	möt32
);

39 
öt32
 
	möt_¨g
;

46 
	söt_íåy
 {

47 
öt_öfo
 
	möt_ôems
[
MAX_IRQ_SHARING
+1];

48 
öt32
 
	mnôems
;

56 
öt_íåy
 
öt_a˘i⁄s
[
MAX_EXT_IRQS
];

60 
uöt16
 
gúmask
;

	@include/ip.h

3 
	#IP_BCAST
 0xfffffff‡

	)

4 
	#IP_THIS
 0xfffffff‡

	)

5 
	#IP_ALLZEROS
 0x00000000

	)

7 
	#IP_ICMP
 1

	)

8 
	#IP_UDP
 17

	)

10 
	#IP_ASIZE
 4

	)

11 
	#IP_HDR_LEN
 20

	)

12 
	#IP_VH
 0x45

	)

14 
	#IP_OQSIZ
 8

	)

18 
	siqíåy
 {

19 
öt32
 
	miqhód
;

20 
öt32
 
	miqèû
;

21 
sid32
 
	miq£m
;

22 
√çackë
 *
	miqbuf
[
IP_OQSIZ
];

25 
iqíåy
 
ùoqueue
;

	@include/kernel.h

5 
	tbyã
;

6 
	tuöt8
;

7 
	töt32
;

8 
	töt16
;

9 
	tuöt32
;

10 
	tuöt16
;

11 
	tuöt64
;

15 
öt32
 
	tsid32
;

16 
öt16
 
	tqid16
;

17 
öt32
 
	tpid32
;

18 
öt32
 
	tdid32
;

19 
öt16
 
	t¥i16
;

20 
uöt32
 
	tumsg32
;

21 
öt32
 
	tbpid32
;

22 
byã
 
	tboﬁ8
;

23 
uöt32
 
	tötmask
;

24 
öt32
 
	tibid32
;

25 
öt32
 
	tdbid32
;

26 
öt32
 
	tuid32
;

30 
öt32
 
	tsysˇŒ
;

31 
öt32
 
	tdevˇŒ
;

32 
öt32
 
	tshñlcmd
;

33 
öt32
 
	t¥o˚ss
;

34 
	töãºu±
;

35 
öt32
 
	t°©us
;

37 
	#loˇl
 

	)

41 
	#FALSE
 0

	)

42 
	#TRUE
 1

	)

46 
	#NULL
 0

	)

47 
	#NULLCH
 '\0'

	)

48 
	#NULLSTR
 ""

	)

52 
	#OK
 ( 1Ë

	)

53 
	#SYSERR
 (-1Ë

	)

54 
	#EOF
 (-2Ë

	)

55 
	#TIMEOUT
 (-3Ë

	)

57 
qid16
 
ªadyli°
;

59 
	#MINSTK
 400

	)

61 
	#CONTEXT
 64

	)

63 
	#QUANTUM
 2

	)

67 
	#NULLSTK
 8192

	)

71 
sysˇŒ
 
k¥ötf
(*
fmt
, ...);

72 
sysˇŒ
 
kputc
(
byã
);

73 
sysˇŒ
 
kgëc
();

	@include/lfilesys.h

31 #i‚def 
NlÊ


32 
	#NlÊ
 1

	)

38 #i‚def 
LF_DISK_DEV


39 
	#LF_DISK_DEV
 
SYSERR


	)

42 
	#LF_MODE_R
 
F_MODE_R


	)

43 
	#LF_MODE_W
 
F_MODE_W


	)

44 
	#LF_MODE_RW
 
F_MODE_RW


	)

45 
	#LF_MODE_O
 
F_MODE_O


	)

46 
	#LF_MODE_N
 
F_MODE_N


	)

48 
	#LF_BLKSIZ
 512

	)

49 
	#LF_NAME_LEN
 16

	)

50 
	#LF_NUM_DIR_ENT
 20

	)

52 
	#LF_FREE
 0

	)

53 
	#LF_USED
 1

	)

55 
	#LF_INULL
 (
ibid32
Ë-1

	)

56 
	#LF_DNULL
 (
dbid32
Ë-1

	)

57 
	#LF_IBLEN
 16

	)

58 
	#LF_IDATA
 8192

	)

60 
	#LF_IMASK
 0x00001ff‡

	)

63 
	#LF_DMASK
 0x000001f‡

	)

66 
	#LF_AREA_IB
 1

	)

67 
	#LF_AREA_DIR
 0

	)

71 
	slfiblk
 {

72 
ibid32
 
	mib_√xt
;

73 
uöt32
 
	mib_off£t
;

75 
dbid32
 
	mib_dba
[
LF_IBLEN
];

80 
	#LFS_ID
 0x58696E75

	)

86 
	#ib2£˘
(
ib
Ë(((ib)/7)+
LF_AREA_IB
)

	)

91 
	#ib2di•
(
ib
Ë(((ib)%7)*(
lfiblk
))

	)

96 
	sldíåy
 {

98 
uöt32
 
	mld_size
;

99 
ibid32
 
	mld_ûi°
;

101 
	mld_«me
[
LF_NAME_LEN
];

106 
	slfdb‰ì
 {

107 
dbid32
 
	mlf_√xtdb
;

108 
	mlf_unu£d
[
LF_BLKSIZ
 - (
dbid32
)];

113 #¥agm®
∑ck
(2)

114 
	slfdú
 {

115 
uöt32
 
	mlfd_fsysid
;

116 
öt16
 
	mlfd_vîs
;

117 
öt16
 
	mlfd_subvîs
;

118 
uöt32
 
	mlfd_Ælzîos
;

119 
uöt32
 
	mlfd_Æl⁄es
;

120 
dbid32
 
	mlfd_d‰ì
;

121 
ibid32
 
	mlfd_i‰ì
;

122 
öt32
 
	mlfd_nfûes
;

123 
ldíåy
 
	mlfd_fûes
[
LF_NUM_DIR_ENT
];

124 
uöt32
 
	mlfd_ªvid
;

126 #¥agm®
∑ck
()

130 
	slfd©a
 {

131 
did32
 
	mlf_dskdev
;

132 
sid32
 
	mlf_muãx
;

134 
lfdú
 
	mlf_dú
;

135 
boﬁ8
 
	mlf_dú¥e£¡
;

137 
boﬁ8
 
	mlf_dúdúty
;

142 
	slÊcblk
 {

144 
byã
 
	mlf°©e
;

145 
did32
 
	mlfdev
;

146 
sid32
 
	mlfmuãx
;

147 
ldíåy
 *
	mlfdú±r
;

149 
öt32
 
	mlfmode
;

150 
uöt32
 
	mlÂos
;

152 
	ml‚ame
[
LF_NAME_LEN
];

153 
ibid32
 
	mlföum
;

155 
lfiblk
 
	mlfiblock
;

157 
dbid32
 
	mlfdnum
;

159 
	mlfdblock
[
LF_BLKSIZ
];

161 *
	mlfbyã
;

165 
boﬁ8
 
	mlfibdúty
;

166 
boﬁ8
 
	mlfdbdúty
;

169 
lfd©a
 
Lf_d©a
;

170 
lÊcblk
 
lÊèb
[];

174 
	#LF_CTL_DEL
 
F_CTL_DEL


	)

175 
	#LF_CTL_TRUNC
 
F_CTL_TRUNC


	)

176 
	#LF_CTL_SIZE
 
F_CTL_SIZE


	)

	@include/limits.h

8 #i‚de‡
_LIMITS_H_


9 
	#_LIMITS_H_


	)

11 
	#CHAR_BIT
 8

	)

12 
	#CHAR_MAX
 127

	)

13 
	#CHAR_MIN
 (-128Ë

	)

14 
	#SCHAR_MAX
 127

	)

15 
	#SCHAR_MIN
 (-128Ë

	)

16 
	#UCHAR_MAX
 255

	)

18 
	#INT_MAX
 2147483647

	)

19 
	#INT_MIN
 (-
INT_MAX
-1Ë

	)

20 
	#UINT_MAX
 (2U*
INT_MAX
+1Ë

	)

22 
	#LONG_MAX
 2147483647

	)

23 
	#LONG_MIN
 (-
LONG_MAX
-1Ë

	)

24 
	#ULONG_MAX
 (2UL*
LONG_MAX
+1Ë

	)

26 
	#SHRT_MAX
 32767

	)

27 
	#SHRT_MIN
 (-
SHRT_MAX
-1Ë

	)

28 
	#USHRT_MAX
 65535

	)

	@include/mark.h

3 
	#MAXMARK
 20

	)

5 
öt32
 *(
m¨ks
[]);

6 
öt32
 
nm¨ks
;

7 
sid32
 
mkmuãx
;

8 
öt32
 
	tmemm¨k
[1];

16 
	#nŸm¨ked
(
L
Ë(L[0]<0 || L[0]>=
nm¨ks
 || 
m¨ks
[L[0]]!=L)

	)

	@include/memory.h

3 
	#PAGE_SIZE
 4096

	)

9 
	#roundmb
(
x
Ë(*)–(7 + (
uöt32
)(x)Ë& (~7Ë)

	)

10 
	#åuncmb
(
x
Ë(*)–((
uöt32
)(x)Ë& (~7Ë)

	)

16 
	#‰ì°k
(
p
,
Àn
Ë
	`‰ìmem
((*)((
uöt32
)(p) \

17 - ((
uöt32
)
	`roundmb
(
Àn
)) \

18 + (
uöt32
)(uint32)), \

19 (
uöt32
)
	`roundmb
(
Àn
Ë)

	)

21 
	smemblk
 {

22 
memblk
 *
	mm√xt
;

23 
uöt32
 
	mmÀngth
;

25 
memblk
 
memli°
;

26 *
möhóp
;

27 *
maxhóp
;

32 
ãxt
;

33 
ëext
;

34 
d©a
;

35 
ed©a
;

36 
bss
;

37 
ebss
;

38 
íd
;

	@include/multiboot.h

3 
	smboŸöfo
 {

4 
uöt32
 
	mÊags
;

5 
uöt32
 
	mmem_lowî
;

6 
uöt32
 
	mmem_uµî
;

7 
uöt32
 
	mboŸ_devi˚
;

8 
uöt32
 
	mcmdlöe
;

9 
uöt32
 
	mmods_cou¡
;

10 
uöt32
 
	mmods_addr
;

11 
uöt32
 
	msyms
[4];

12 
uöt32
 
	mmm≠_Àngth
;

13 
uöt32
 
	mmm≠_addr
;

14 
uöt32
 
	mdrives_Àngth
;

15 
uöt32
 
	mdrives_addr
;

16 
uöt32
 
	mc⁄fig_èbÀ
;

17 
uöt32
 
	mboŸ_lﬂdî_«me
;

18 
uöt32
 
	m≠m_èbÀ
;

19 
uöt32
 
	mvbe_c⁄åﬁ_öfo
;

20 
uöt32
 
	mvbe_mode_öfo
;

21 
uöt16
 
	mvbe_mode
;

22 
uöt16
 
	mvbe_öãrÁ˚_£g
;

23 
uöt16
 
	mvbe_öãrÁ˚_off
;

24 
uöt32
 
	mvbe_öãrÁ˚_Àn
;

27 
	smbmªgi⁄
 {

28 
uöt32
 
	msize
;

29 
uöt64
 
	mba£_addr
;

30 
uöt64
 
	mÀngth
;

31 
uöt32
 
	mty≥
;

35 
	#MULTIBOOT_HEADER_MAGIC
 0x1BADB002

	)

38 
	#MULTIBOOT_HEADER_FLAGS
 0x00010003

	)

41 
	#MULTIBOOT_SIGNATURE
 0x2BADB002

	)

44 
	#MULTIBOOT_BOOFINFO_MEM
 0x00000001

	)

47 
	#MULTIBOOT_BOOTINFO_BOOTDEV
 0x00000002

	)

50 
	#MULTIBOOT_BOOTINFO_CMDLINE
 0x00000004

	)

53 
	#MULTIBOOT_BOOTINFO_MODS
 0x00000008

	)

56 
	#MULTIBOOT_BOOTINFO_MMAP
 0x00000040

	)

59 
	#MULTIBOOT_MMAP_TYPE_USABLE
 0x00000001

	)

	@include/name.h

5 
	#NM_PRELEN
 64

	)

6 
	#NM_REPLLEN
 96

	)

7 
	#NM_MAXLEN
 256

	)

8 
	#NNAMES
 40

	)

12 
	snmíåy
 {

13 
	m≈ªfix
[
NM_PRELEN
];

14 
	mƒïœ˚
[
NM_REPLLEN
];

15 
did32
 
	mndevi˚
;

18 
nmíåy
 
«mëab
[];

19 
öt32
 
¬ames
;

	@include/net.h

3 
	#NETSTK
 8192

	)

4 
	#NETPRIO
 500

	)

5 
	#NETBOOTFILE
 128

	)

9 
	#ETH_ARP
 0x0806

	)

10 
	#ETH_IP
 0x0800

	)

11 
	#ETH_IPv6
 0x86DD

	)

15 #¥agm®
∑ck
(2)

16 
	s√çackë
 {

17 
byã
 
	m√t_ëhd°
[
ETH_ADDR_LEN
];

18 
byã
 
	m√t_ëh§c
[
ETH_ADDR_LEN
];

19 
uöt16
 
	m√t_ëhty≥
;

20 
byã
 
	m√t_ùvh
;

21 
byã
 
	m√t_ùtos
;

22 
uöt16
 
	m√t_ùÀn
;

23 
uöt16
 
	m√t_ùid
;

24 
uöt16
 
	m√t_ù‰ag
;

25 
byã
 
	m√t_ùâl
;

26 
byã
 
	m√t_ù¥Ÿo
;

27 
uöt16
 
	m√t_ùcksum
;

28 
uöt32
 
	m√t_ù§c
;

29 
uöt32
 
	m√t_ùd°
;

32 
uöt16
 
	m√t_udp•‹t
;

33 
uöt16
 
	m√t_udpdp‹t
;

34 
uöt16
 
	m√t_ud∂í
;

35 
uöt16
 
	m√t_udpcksum
;

36 
byã
 
	m√t_udpd©a
[1500-28];

39 
byã
 
	m√t_i˘y≥
;

40 
byã
 
	m√t_iccode
;

41 
uöt16
 
	m√t_iccksum
;

42 
uöt16
 
	m√t_icidít
;

43 
uöt16
 
	m√t_ic£q
;

44 
byã
 
	m√t_icd©a
[1500-28];

48 #¥agm®
∑ck
()

50 
	#PACKLEN
 (
√çackë
)

	)

52 
bpid32
 
√tbuÂoﬁ
;

54 
	s√tw‹k
 {

55 
uöt32
 
	mùuˇ°
;

56 
uöt32
 
	mùbˇ°
;

57 
uöt32
 
	mùmask
;

58 
uöt32
 
	mù¥efix
;

59 
uöt32
 
	mùrouãr
;

60 
uöt32
 
	mboŸ£rvî
;

61 
uöt32
 
	mdns£rvî
;

62 
uöt32
 
	m¡p£rvî
;

63 
boﬁ8
 
	mùvÆid
;

64 
byã
 
	mëhuˇ°
[
ETH_ADDR_LEN
];

65 
byã
 
	mëhbˇ°
[
ETH_ADDR_LEN
];

66 
	mboŸfûe
[
NETBOOTFILE
];

69 
√tw‹k
 
NëD©a
;

	@include/pci.h

6 
	#PCI_MAX_BUSES
 256

	)

7 
	#PCI_DEVICES_PER_BUS
 32

	)

8 
	#PCI_FUNCTIONS_PER_DEVICE
 8

	)

9 
	#PCI_BUS_MASK
 (
PCI_MAX_BUSES
 - 1)

	)

10 
	#PCI_DEV_MASK
 (
PCI_DEVICES_PER_BUS
 - 1)

	)

11 
	#PCI_FUNC_MASK
 (
PCI_FUNCTIONS_PER_DEVICE
 - 1)

	)

12 
	#PCIE_BYTES_PER_FUNCTION
 0x1000

	)

13 
	#PCIE_BYTES_PER_DEVICE
 (
PCIE_BYTES_PER_FUNCTION
 * \

14 
PCI_FUNCTIONS_PER_DEVICE
)

	)

15 
	#PCIE_BYTES_PER_BUS
 (
PCIE_BYTES_PER_DEVICE
 * \

16 
PCI_DEVICES_PER_BUS
)

	)

18 
	#PCI_BARS_PER_HEADER
 6

	)

20 
	#PCI_HEADER_TYPE0_SIZE
 0x40

	)

21 
	#PCI_HDR_TYPE_MULTIFCN
 (1 << 7)

	)

23 
	#PCI_BUS_SHIFT
 16

	)

24 
	#PCI_DEV_SHIFT
 3

	)

27 
	#PCI_BAR_REGION_TYPE_IO_MASK
 1

	)

28 
	#PCI_BAR_LOCATABLE_1MB_MASK
 2

	)

29 
	#PCI_BAR_LOCATABLE_64B_MASK
 4

	)

30 
	#PCI_BAR_LOCATABLE_PREFETCH
 8

	)

31 
	#PCI_BAR_BASE_ADDRESS_MASK
 0xfffffff0

	)

33 #i‚de‡
off£tof


34 
	#off£tof
(
ty≥
, 
membî
Ë(()(()&(—y≥ *)0)->membî))

	)

39 
__©åibuã__
 ((
__∑cked__
)Ë
	gpci_c⁄fig_hódî
 {

41 
	gvíd‹ID
;

42 
	gdevi˚ID
;

43 
	gcomm™d
;

44 
	g°©us
;

45 
	gªvID
;

46 
	g¥ogIF
;

47 
	gsubCœss
;

48 
	g˛assCode
;

49 
	g˛Size
;

50 
	gœãncyTimî
;

51 
	ghódîTy≥
;

52 
	gBIST
;

53 
	gb¨s
[
PCI_BARS_PER_HEADER
];

54 
	gˇrdbusCISPå
;

55 
	gsubsy°emVíd‹ID
;

56 
	gsubsy°emID
;

57 
	gex∑nsi⁄ROMAddr
;

58 
	gˇ∑bûôõsPå
;

59 
	gª£rved0
;

60 
	gª£rved1
;

61 
	gª£rved2
;

62 
	gª£rved3
;

63 
	göãºu±Löe
;

64 
	göãºu±Pö
;

65 
	gmöGø¡
;

66 
	gmaxL©ícy
;

69 
pci_öô
();

70 
föd_pci_devi˚
(
öt32
, int32, int32);

71 
ëh_pd
* 
ëh_txrög
;

72 
ëh_pd
* 
ëh_rxrög
;

74 
pci_ªad_c⁄fig_byã
(
uöt32
, , *);

75 
pci_ªad_c⁄fig_w‹d
(
uöt32
, , 
uöt16
 *);

76 
pci_ªad_c⁄fig_dw‹d
(
uöt32
, , uint32 *);

77 
pci_wrôe_c⁄fig_byã
(
uöt32
, , );

78 
pci_wrôe_c⁄fig_w‹d
(
uöt32
, , 
uöt16
);

79 
pci_wrôe_c⁄fig_dw‹d
(
uöt32
, , uint32);

80 
pci_gë_dev_mmio_ba£_addr
(
uöt32
, , **);

81 
öt32
 
pci_£t_ivec
(
uöt32
, int32, *, int32);

	@include/ports.h

3 
	#NPORTS
 30

	)

4 
	#PT_MSGS
 100

	)

5 
	#PT_FREE
 1

	)

6 
	#PT_LIMBO
 2

	)

7 
	#PT_ALLOC
 3

	)

9 
	s±node
 {

10 
uöt32
 
	m±msg
;

11 
±node
 *
	m±√xt
;

14 
	s±íåy
 {

15 
sid32
 
	m±s£m
;

16 
sid32
 
	m±r£m
;

17 
uöt16
 
	m±°©e
;

18 
uöt16
 
	m±max˙t
;

19 
öt32
 
	m±£q
;

20 
±node
 *
	m±hód
;

21 
±node
 *
	m±èû
;

24 
±node
 *
±‰ì
;

25 
±íåy
 
p‹âab
[];

26 
öt32
 
±√xtid
;

29 
	#isbadp‹t
(
p‹tid
Ë–’‹tid)<0 || (p‹tid)>=
NPORTS
 )

	)

	@include/process.h

5 #i‚de‡
NPROC


6 
	#NPROC
 8

	)

11 
	#PR_FREE
 0

	)

12 
	#PR_CURR
 1

	)

13 
	#PR_READY
 2

	)

14 
	#PR_RECV
 3

	)

15 
	#PR_SLEEP
 4

	)

16 
	#PR_SUSP
 5

	)

17 
	#PR_WAIT
 6

	)

18 
	#PR_RECTIM
 7

	)

22 
	#PNMLEN
 16

	)

23 
	#NULLPROC
 0

	)

27 
	#INITSTK
 65536

	)

28 
	#INITPRIO
 20

	)

29 
	#INITRET
 
u£ºë


	)

33 
	#isbadpid
(
x
Ë–((
pid32
)(x) < 0) || \

34 ((
pid32
)(
x
Ë>
NPROC
) || \

35 (
¥o˘ab
[(
x
)].
¥°©e
 =
PR_FREE
))

	)

39 
	#NDESC
 5

	)

43 
	s¥o˚¡
 {

44 
uöt16
 
	m¥°©e
;

45 
¥i16
 
	m¥¥io
;

46 *
	m¥°k±r
;

47 *
	m¥°kba£
;

48 
uöt32
 
	m¥°kÀn
;

49 
	m¥«me
[
PNMLEN
];

50 
sid32
 
	m¥£m
;

51 
pid32
 
	m¥∑ª¡
;

52 
umsg32
 
	m¥msg
;

53 
boﬁ8
 
	m¥hasmsg
;

54 
öt16
 
	m¥desc
[
NDESC
];

56 
	mgroup
;

60 
	#STACKMAGIC
 0x0A0AAAA9

	)

62 
¥o˚¡
 
¥o˘ab
[];

63 
öt32
 
¥cou¡
;

64 
pid32
 
cuºpid
;

	@include/prototypes.h

2 
°©us
 
add¨gs
(
pid32
, 
öt32
, int32[], int32,*, *);

5 
¨p_öô
();

6 
°©us
 
¨p_ªsﬁve
(
uöt32
, 
byã
[]);

7 
¨p_ö
(
¨µackë
 *);

8 
öt32
 
¨p_Æloc
();

9 
¨p_¡oh
(
¨µackë
 *);

10 
¨p_ht⁄
(
¨µackë
 *);

13 
°©us
 
ascd©e
(
uöt32
, *);

16 
°©us
 
buföô
();

19 
¥i16
 
ch¥io
(
pid32
,Öri16);

22 
uöt32
 
˛kcou¡
();

25 
öãºu±
 
˛kh™dÀr
(
öt32
);

28 
˛köô
();

31 
˛kdi•
();

34 
sysˇŒ
 
˛o£
(
did32
);

37 
sysˇŒ
 
c⁄åﬁ
(
did32
, 
öt32
, int32, int32);

40 
pid32
 
¸óã
(*, 
uöt32
, , 
¥i16
, *, uint32, ...);

43 
˘xsw
(*, *);

46 
uöt32
 
gëloˇlù
();

49 
uöt32
 
dn¶ookup
(*);

52 
uöt32
 
dŸ2ù
(*, uint32 *);

55 
öt32
 
ëhöô
(
díåy
 *);

58 
öãºu±
 
ëhh™dÀr
(
öt32
);

61 
devˇŒ
 
ëhc⁄åﬁ
(
díåy
 *, 
öt32
, int32, int32);

64 
ëhdi•©ch
();

67 
öt32
 
ëhmˇ°_add
(
ëhcblk
 *, 
byã
[]);

68 
öt32
 
ëhmˇ°_ªmove
(
ëhcblk
 *, 
byã
[]);

71 
devˇŒ
 
ëhªad
(
díåy
 *, *, 
öt32
);

74 
devˇŒ
 
ëhwrôe
(
díåy
 *, *
buf
, 
öt32
);

77 
exô
();

80 
c⁄sﬁe_öô
();

83 
ªmove_úm_¥Ÿe˘i⁄s
();

86 
öt32
 
öôevec
();

87 
öt32
 
£t_evec
(
uöt32
, uint32);

88 
öt32
 
£t_ivec
(
uöt32
, *, int32);

89 
öt32
 
iﬂpic_úq2vec
(int32, int32);

90 
å≠
(
öt32
, *);

93 
ex˚±i⁄
(
öt32
, int32*);

96 
sysˇŒ
 
‰ìbuf
(*);

99 
sysˇŒ
 
‰ìmem
(*, 
uöt32
);

102 *
gëbuf
(
bpid32
);

105 
sysˇŒ
 
gëc
(
did32
);

108 
pid32
 
gëfú°
(
qid16
);

109 
pid32
 
gëœ°
(
qid16
);

110 
pid32
 
gëôem
(pid32);

113 *
gëmem
(
uöt32
);

116 
pid32
 
gëpid
();

119 
sysˇŒ
 
gë¥io
(
pid32
);

122 *
gë°k
(
uöt32
);

125 
uöt64
 
gëticks
();

128 
°©us
 
gëtime
(
uöt32
 *);

131 
°©us
 
gëutime
(
uöt32
 *);

134 
hÆt
();

137 
icmp_öô
();

138 
icmp_ö
(
√çackë
 *);

139 
öt32
 
icmp_ªgi°î
(
uöt32
);

140 
öt32
 
icmp_ªcv
(öt32, *, i¡32, 
uöt32
);

141 
°©us
 
icmp_£nd
(
uöt32
, 
uöt16
, uöt16, uöt16, *, 
öt32
);

142 
√çackë
 *
icmp_mkpkt
(
uöt32
, 
uöt16
, uint16, uint16,

143 *, 
öt32
);

144 
°©us
 
icmp_ªÀa£
(
öt32
);

145 
uöt16
 
icmp_cksum
(*, 
öt32
);

146 
icmp_ht⁄
(
√çackë
 *);

147 
icmp_¡oh
(
√çackë
 *);

150 
sysˇŒ
 
öô
(
did32
);

153 
öt32
 
sizmem
();

156 
°©us
 
ö£π
(
pid32
, 
qid16
, 
öt32
);

159 
°©us
 
ö£πd
(
pid32
, 
qid16
, 
öt32
);

162 
uöt16
 
gëúmask
();

165 
ötmask
 
dißbÀ
();

166 
íabÀ
();

169 
devˇŒ
 
i€º
();

172 
devˇŒ
 
i⁄uŒ
();

175 
ù_ö
(
√çackë
 *);

176 
°©us
 
ù_£nd
(
√çackë
 *);

177 
ù_loˇl
(
√çackë
 *);

178 
°©us
 
ù_out
(
√çackë
 *);

179 
öt32
 
ù_rouã
(
uöt32
);

180 
uöt16
 
ùcksum
(
√çackë
 *);

181 
ù_¡oh
(
√çackë
 *);

182 
ù_ht⁄
(
√çackë
 *);

183 
¥o˚ss
 
ùout
();

184 
°©us
 
ù_íqueue
(
√çackë
 *);

187 
√t_öô
();

188 
¥o˚ss
 
√tö
();

189 
¥o˚ss
 
√tout
();

190 
¥o˚ss
 
øwö
();

191 
ëh_ht⁄
(
√çackë
 *);

192 
ëh_¡oh
(
√çackë
 *);

193 
uöt16
 
gëp‹t
();

196 
sysˇŒ
 
kûl
(
pid32
);

199 
öt32
 
Àx™
(*, int32, *, int32 *, int32 [], int32 []);

202 
lfib˛ór
(
lfiblk
 *, 
öt32
);

205 
lfibgë
(
did32
, 
ibid32
, 
lfiblk
 *);

208 
°©us
 
lfibput
(
did32
, 
ibid32
, 
lfiblk
 *);

211 
°©us
 
lfdb‰ì
(
did32
, 
dbid32
);

214 
dbid32
 
lfdbÆloc
(
lfdb‰ì
 *);

217 
°©us
 
lfÊush
(
lÊcblk
 *);

220 
öt32
 
lfgëmode
(*);

223 
ibid32
 
lfibÆloc
();

226 
devˇŒ
 
lÊ˛o£
(
díåy
 *);

229 
devˇŒ
 
lÊc⁄åﬁ
(
díåy
 *, 
öt32
, int32, int32);

232 
devˇŒ
 
lÊgëc
(
díåy
 *);

235 
devˇŒ
 
lÊöô
(
díåy
 *);

238 
devˇŒ
 
lÊputc
(
díåy
 *, );

241 
devˇŒ
 
lÊªad
(
díåy
 *, *, 
öt32
);

244 
devˇŒ
 
lÊ£ek
(
díåy
 *, 
uöt32
);

247 
devˇŒ
 
lÊwrôe
(
díåy
 *, *, 
öt32
);

250 
°©us
 
lfscheck
(
lfdú
 *);

253 
°©us
 
lfs¸óã
(
did32
, 
ibid32
, 
uöt32
);

256 
devˇŒ
 
lfsöô
(
díåy
 *);

259 
devˇŒ
 
lfs›í
(
díåy
 *, *, *);

262 
°©us
 
lf£tup
(
lÊcblk
 *);

265 
°©us
 
l·runˇã
(
lÊcblk
 *);

268 
devˇŒ
 
Õgëc
(
díåy
 *);

271 
devˇŒ
 
Õöô
(
díåy
 *);

274 
devˇŒ
 
Õ›í
(
díåy
 *, *, *);

277 
devˇŒ
 
Õputc
(
díåy
 *, );

280 
devˇŒ
 
Õªad
(
díåy
 *, *, 
öt32
);

283 
devˇŒ
 
Õwrôe
(
díåy
 *, *, 
öt32
);

286 
m¨köô
();

287 
°©us
 
m¨k
(
öt32
 *);

290 *
mem˝y
(*, c⁄° *, 
öt32
);

293 
öt32
 *
memcmp
(*, const *, int32);

296 *
mem£t
(*, c⁄° , 
öt32
);

299 
bpid32
 
mkbuÂoﬁ
(
öt32
, int32);

302 
sysˇŒ
 
mou¡
(*, *, 
did32
);

303 
öt32
 
«mÀn
(*, int32);

306 
°©us
 
«möô
();

309 
devˇŒ
 
«mm≠
(*, [], 
did32
);

310 
did32
 
«mª∂
(*, []);

311 
°©us
 
«m˝y
(*, *, 
öt32
);

314 
devˇŒ
 
«m›í
(
díåy
 *, *, *);

317 
qid16
 
√wqueue
();

320 
sysˇŒ
 
›í
(
did32
, *, *);

323 
∑nic
(*);

326 
öt32
 
pci_öô
();

329 
pdump
(
√çackë
 *);

330 
pdumph
(
√çackë
 *);

333 
∂©öô
();

336 
_±˛ór
(
±íåy
 *, 
uöt16
, 
	$öt32
 (*)(
öt32
));

339 
öt32
 
	`±cou¡
(int32);

342 
sysˇŒ
 
	`±¸óã
(
öt32
);

345 
sysˇŒ
 
	`±dñëe
(
öt32
, 
	$öt32
 (*)(
öt32
));

348 
sysˇŒ
 
	`±öô
(
öt32
);

351 
uöt32
 
	`±ªcv
(
öt32
);

354 
sysˇŒ
 
	`±ª£t
(
öt32
, 
	$öt32
 (*)(
öt32
));

357 
sysˇŒ
 
	`±£nd
(
öt32
, 
umsg32
);

360 
sysˇŒ
 
	`putc
(
did32
, );

363 
öt32
 
	`qu¨k_úq_routög
();

366 
pid32
 
	`íqueue
’id32, 
qid16
);

367 
pid32
 
	`dequeue
(
qid16
);

370 
devˇŒ
 
	`øm˛o£
(
díåy
 *);

373 
devˇŒ
 
	`ømöô
(
díåy
 *);

377 
devˇŒ
 
	`øm›í
(
díåy
 *, *, *);

380 
devˇŒ
 
	`ømªad
(
díåy
 *, *, 
öt32
);

383 
devˇŒ
 
	`ømwrôe
(
díåy
 *, *, 
öt32
);

386 
devˇŒ
 
	`rds˛o£
(
díåy
 *);

389 
devˇŒ
 
	`rdsc⁄åﬁ
(
díåy
 *, 
öt32
, int32, int32);

392 
devˇŒ
 
	`rdsöô
(
díåy
 *);

395 
devˇŒ
 
	`rds›í
(
díåy
 *, *, *);

398 
devˇŒ
 
	`rd§ód
(
díåy
 *, *, 
öt32
);

401 
devˇŒ
 
	`rdswrôe
(
díåy
 *, *, 
öt32
);

404 
rdbuff
 * 
	`rdsbuÁŒoc
(
rdscblk
 *);

407 
°©us
 
	`rdscomm
(
rd_msg_hdr
 *, 
öt32
, rd_msg_hdr *,

408 
öt32
, 
rdscblk
 *);

411 
	`rd•ro˚ss
(
rdscblk
 *);

414 
devˇŒ
 
	`sdmc˛o£
(
díåy
 *);

417 
devˇŒ
 
	`sdmcöô
(
díåy
 *);

420 
devˇŒ
 
	`sdmc›í
(
díåy
 *, *, *);

423 
devˇŒ
 
	`sdm¸ód
(
díåy
 *, *, 
öt32
);

426 
devˇŒ
 
	`sdmcwrôe
(
díåy
 *, *, 
öt32
);

429 
öãºu±
 
	`sdmcdi•©ch
();

432 
sysˇŒ
 
	`ªad
(
did32
, *, 
uöt32
);

435 
°©us
 
	`ªady
(
pid32
);

438 
umsg32
 
	`ª˚ive
();

441 
umsg32
 
	`ªcv˛r
();

444 
umsg32
 
	`ªcvtime
(
öt32
);

447 
	`ªsched
();

448 
°©us
 
	`ªsched_˙é
(
öt32
);

451 
	`ª°‹e
(
ötmask
);

454 
¥i16
 
	`ªsume
(
pid32
);

457 
öt32
 
	`rfsgëmode
(* );

460 
devˇŒ
 
	`rÊ˛o£
(
díåy
 *);

463 
devˇŒ
 
	`rfsc⁄åﬁ
(
díåy
 *, 
öt32
, int32, int32);

466 
devˇŒ
 
	`rÊgëc
(
díåy
 *);

469 
devˇŒ
 
	`rÊöô
(
díåy
 *);

472 
devˇŒ
 
	`rÊputc
(
díåy
 *, );

475 
devˇŒ
 
	`rÊªad
(
díåy
 *, *, 
öt32
 );

478 
devˇŒ
 
	`rÊ£ek
(
díåy
 *, 
uöt32
 );

481 
devˇŒ
 
	`rÊwrôe
(
díåy
 *, *, 
öt32
 );

484 
°©us
 
	`rf¢dmsg
(
uöt16
, *);

487 
devˇŒ
 
	`rfsöô
(
díåy
 *);

490 
devˇŒ
 
	`rfs›í
(
díåy
 *
dev±r
, *, *);

493 
öt32
 
	`rfscomm
(
rf_msg_hdr
 *, int32,

494 
rf_msg_hdr
 *, 
öt32
);

497 
°©us
 
	`rdscomm
(
rd_msg_hdr
 *, 
öt32
, rd_msg_hdr *,

498 
öt32
, 
rdscblk
 *);

501 
	`rd•ro˚ss
(
rdscblk
 *);

504 
sysˇŒ
 
	`£ek
(
did32
, 
uöt32
);

507 
sysˇŒ
 
	`£mcou¡
(
sid32
);

510 
sid32
 
	`£m¸óã
(
öt32
);

513 
sysˇŒ
 
	`£mdñëe
(
sid32
);

516 
sysˇŒ
 
	`£mª£t
(
sid32
, 
öt32
);

519 
sysˇŒ
 
	`£nd
(
pid32
, 
umsg32
);

522 
¥o˚ss
 
	`shñl
(
did32
);

525 
sysˇŒ
 
	`sig«l
(
sid32
);

528 
sysˇŒ
 
	`sig« 
(
sid32
, 
öt32
);

531 
sysˇŒ
 
	`¶ìpms
(
öt32
);

532 
sysˇŒ
 
	`¶ìp
(
öt32
);

535 
öt32
 
	`öb
(int32);

536 
öt32
 
	`öw
(int32);

537 
öt32
 
	`öl
(int32);

538 
öt32
 
	`outb
(int32, int32);

539 
öt32
 
	`outw
(int32, int32);

540 
öt32
 
	`oué
(int32, int32);

541 
öt32
 
	`ösw
(int32, int32 ,int32);

542 
öt32
 
	`outsw
(int32, int32, int32);

543 
öt32
 
	`lidt
();

544 
öt32
 
	`˝uid
();

547 
sysˇŒ
 
	`su•íd
(
pid32
);

550 
devˇŒ
 
	`âyc⁄åﬁ
(
díåy
 *, 
öt32
, int32, int32);

553 
öãºu±
 
	`âydi•©ch
();

556 
devˇŒ
 
	`âygëc
(
díåy
 *);

559 
	`âyh™dÀ_ö
(
âycblk
 *, 
u¨t_c§eg
 *);

562 
	`âyh™dÀ_out
(
âycblk
 *, 
u¨t_c§eg
 *);

565 
	`âyh™dÀr
(
öt32
);

568 
devˇŒ
 
	`âyöô
(
díåy
 *);

571 
	`âykickout
(
u¨t_c§eg
 *);

574 
devˇŒ
 
	`âyputc
(
díåy
 *, );

577 
devˇŒ
 
	`âyªad
(
díåy
 *, *, 
öt32
);

580 
devˇŒ
 
	`âywrôe
(
díåy
 *, *, 
öt32
);

584 
	`udp_öô
();

585 
	`udp_ö
(
√çackë
 *);

586 
uid32
 
	`udp_ªgi°î
(
uöt32
, 
uöt16
, uint16);

587 
öt32
 
	`udp_ªcv
(
uid32
, *, i¡32, 
uöt32
);

588 
öt32
 
	`udp_ªcvaddr
(
uid32
, 
uöt32
 *, 
uöt16
 *, *,

589 
öt32
, 
uöt32
);

590 
°©us
 
	`udp_£nd
(
uid32
, *, 
öt32
);

591 
°©us
 
	`udp_£ndto
(
uid32
, 
uöt32
, 
uöt16
, *, 
öt32
);

592 
°©us
 
	`udp_ªÀa£
(
uid32
);

593 
	`udp_¡oh
(
√çackë
 *);

594 
	`udp_ht⁄
(
√çackë
 *);

598 
sysˇŒ
 
	`un¶ìp
(
pid32
);

601 
	`u£ºë
();

604 
sysˇŒ
 
	`waô
(
sid32
);

607 
	`wakeup
();

610 
sysˇŒ
 
	`wrôe
(
did32
, *, 
uöt32
);

613 
	`xd⁄e
();

616 
sysˇŒ
 
	`yõld
();

619 
sysˇŒ
 
	`hñlo
();

622 
sysˇŒ
 
	`chg¥io
(, 
¥i16
);

625 
	#ht⁄s
(
x
Ë((0xf‡& ((x)>>8)Ë| ((0xf‡& (x)Ë<< 8))

	)

626 
	#ht⁄l
(
x
) ((((x)>>24) & 0x000000ff) | (((x)>> 8) & 0x0000ff00) | \

627 (((
x
)<<8Ë& 0x00ff0000Ë| (((x)<<24Ë& 0xff000000))

	)

628 
	#¡ohs
(
x
Ë((0xf‡& ((x)>>8)Ë| ( (0xf‡& (x)Ë<< 8))

	)

629 
	#¡ohl
(
x
) ((((x)>>24) & 0x000000ff) | (((x)>> 8) & 0x0000ff00) | \

630 (((
x
)<<8Ë& 0x00ff0000Ë| (((x)<<24Ë& 0xff000000))

	)

	@include/pxe.h

4 
	#SYSID_ENTRY_POINT_SADDR
 0x000E0000

	)

5 
	#SYSID_ENTRY_POINT_EADDR
 0x000FFFFF

	)

7 
	#SYSID_ENTRY_POINT_HDR
 "_SYSID_"

	)

8 
	#SYSID_ENTRY_UUID_HDR
 "_UUID_"

	)

10 #¥agm®
∑ck
(1)

11 
	ssysid_bios_°ru˘


13 
byã
 
	mhódî
[6];

14 
byã
 
	mchecksum
;

15 
uöt16
 
	mÀn
;

17 #¥agm®
∑ck
()

19 #¥agm®
∑ck
(1)

20 
	ssysid_íåy_poöt


22 
byã
 
	mhódî
[7];

23 
byã
 
	mchecksum
;

24 
uöt16
 
	mÀn
;

25 
uöt32
 
	mbios_°ru˘uª_addr
;

26 
uöt16
 
	mbios_°ru˘_cou¡
;

27 
byã
 
	msysid_bios_ªvisi⁄
;

29 #¥agm®
∑ck
()

31 
sysid_íåy_poöt
* 
gë_sysid_íåy_poöt
();

32 * 
gë_uuid
(
uöt16
* 
uuid_Àn
);

39 
	#PXE_CLIENT_STRING
 "PXEClõ¡:Arch:00000:UNDI:002001"

	)

40 
	#PXE_CLIENT_STRING_LEN
 32

	)

42 
öt32
 
buûd_dh˝_discovî_pxe
(
dh˝msg
* 
dmsg
);

43 
öt32
 
buûd_dh˝_ªque°_pxe
(
dh˝msg
* 
dmsg
, c⁄° dh˝msg* 
dmsg_of„r
);

	@include/quark_eth.h

5 
	#INTEL_ETH_QUARK_PCI_DID
 0x0937

	)

6 
	#INTEL_ETH_QUARK_PCI_VID
 0x8086

	)

8 
	sëh_q_c§eg
 {

9 
uöt32
 
	mmac¸
;

10 
uöt32
 
	mmacff
;

11 
uöt32
 
	mhthr
;

12 
uöt32
 
	mhér
;

13 
uöt32
 
	mgmiür
;

14 
uöt32
 
	mgmiidr
;

15 
uöt32
 
	mf¸
;

16 
uöt32
 
	mvœ¡ag
;

17 
uöt32
 
	mvîsi⁄
;

18 
uöt32
 
	mdebug
;

19 
uöt32
 
	mªs1
[4];

20 
uöt32
 
	mú
;

21 
uöt32
 
	mimr
;

22 
uöt32
 
	mmaˇddr0h
;

23 
uöt32
 
	mmaˇddr0l
;

24 
uöt32
 
	mªs2
[46];

25 
uöt32
 
	mmmc¸
;

26 
uöt32
 
	mmm¸vcú
;

27 
uöt32
 
	mmm˘xú
;

28 
uöt32
 
	mªs3
[957];

29 
uöt32
 
	mbmr
;

30 
uöt32
 
	mçdr
;

31 
uöt32
 
	mΩdr
;

32 
uöt32
 
	mrdœ
;

33 
uöt32
 
	mtdœ
;

34 
uöt32
 
	m§
;

35 
uöt32
 
	momr
;

36 
uöt32
 
	mõr
;

43 
	#ETH_QUARK_MACCR_PE2K
 0x08000000

	)

44 
	#ETH_QUARK_MACCR_WD
 0x00800000

	)

45 
	#ETH_QUARK_MACCR_JD
 0x00400000

	)

46 
	#ETH_QUARK_MACCR_JE
 0x00100000

	)

49 
	#ETH_QUARK_MACCR_IFG96
 0x00000000

	)

50 
	#ETH_QUARK_MACCR_IFG88
 0x00020000

	)

51 
	#ETH_QUARK_MACCR_IFG80
 0x00040000

	)

52 
	#ETH_QUARK_MACCR_IFG40
 0x000E0000

	)

53 
	#ETH_QUARK_MACCR_IFG64
 0x00080000

	)

55 
	#ETH_QUARK_MACCR_DCRS
 0x00010000

	)

56 
	#ETH_QUARK_MACCR_RMIISPD10
 0x00000000

	)

57 
	#ETH_QUARK_MACCR_RMIISPD100
 0x00004000

	)

58 
	#ETH_QUARK_MACCR_DO
 0x00002000

	)

59 
	#ETH_QUARK_MACCR_LM
 0x00001000

	)

60 
	#ETH_QUARK_MACCR_DM
 0x00000800

	)

61 
	#ETH_QUARK_MACCR_IPC
 0x00000400

	)

62 
	#ETH_QUARK_MACCR_DR
 0x00000200

	)

63 
	#ETH_QUARK_MACCR_ACS
 0x00000080

	)

64 
	#ETH_QUARK_MACCR_DC
 0x00000010

	)

65 
	#ETH_QUARK_MACCR_TE
 0x00000008

	)

66 
	#ETH_QUARK_MACCR_RE
 0x00000004

	)

67 
	#ETH_QUARK_MACCR_PRELEN7
 0x00000000

	)

68 
	#ETH_QUARK_MACCR_PRELEN5
 0x00000001

	)

69 
	#ETH_QUARK_MACCR_PRELEN3
 0x00000002

	)

71 
	#ETH_QUARK_MMC_CNTFREEZ
 0x00000008

	)

72 
	#ETH_QUARK_MMC_CNTRST
 0x00000001

	)

75 
	#ETH_QUARK_GMIIAR_PAMASK
 0x0000F800

	)

76 
	#ETH_QUARK_GMIIAR_GRMASK
 0x000007C0

	)

77 
	#ETH_QUARK_GMIIAR_CR
 0x00000004

	)

79 
	#ETH_QUARK_GMIIAR_GW
 0x00000002

	)

80 
	#ETH_QUARK_GMIIAR_GB
 0x00000001

	)

83 
	#ETH_QUARK_BMR_SWR
 0x00000001

	)

84 
	#ETH_QUARK_BMR_DA
 0x00000002

	)

85 
	#ETH_QUARK_BMR_DSL_MASK
 0x0000007C

	)

86 
	#ETH_QUARK_BMR_ATDC
 0x00000080

	)

87 
	#ETH_QUARK_BMR_PBL_MASK
 0x00003F00

	)

88 
	#ETH_QUARK_BMR_PBL1
 0x00000100

	)

89 
	#ETH_QUARK_BMR_PBL2
 0x00000200

	)

90 
	#ETH_QUARK_BMR_PBL4
 0x00000400

	)

91 
	#ETH_QUARK_BMR_PBL8
 0x00000800

	)

92 
	#ETH_QUARK_BMR_PBL16
 0x00001000

	)

93 
	#ETH_QUARK_BMR_PBL32
 0x00002000

	)

94 
	#ETH_QUARK_BMR_FB
 0x00010000

	)

95 
	#ETH_QUARK_BMR_MB
 0x04000000

	)

96 
	#ETH_QUARK_BMR_RIX
 0x80000000

	)

99 
	#ETH_QUARK_SR_MMCI
 0x08000000

	)

100 
	#ETH_QUARK_SR_TS_SUSP
 0x00600000

	)

101 
	#ETH_QUARK_SR_NIS
 0x00010000

	)

102 
	#ETH_QUARK_SR_AIS
 0x00008000

	)

103 
	#ETH_QUARK_SR_RI
 0x00000040

	)

104 
	#ETH_QUARK_SR_TI
 0x00000001

	)

107 
	#ETH_QUARK_OMR_TSF
 0x00200000

	)

108 
	#ETH_QUARK_OMR_ST
 0x00002000

	)

109 
	#ETH_QUARK_OMR_OSF
 0x00000004

	)

110 
	#ETH_QUARK_OMR_SR
 0x00000002

	)

113 
	#ETH_QUARK_IER_NIE
 0x00010000

	)

114 
	#ETH_QUARK_IER_AIE
 0x00008000

	)

115 
	#ETH_QUARK_IER_RIE
 0x00000040

	)

116 
	#ETH_QUARK_IER_TIE
 0x00000001

	)

120 
	sëh_q_tx_desc
 {

121 
uöt32
 
	m˘æ°©
;

122 
uöt16
 
	mbuf1size
;

123 
uöt16
 
	mbuf2size
;

124 
uöt32
 
	mbuf„r1
;

125 
uöt32
 
	mbuf„r2
;

128 
	#ETH_QUARK_TDCS_OWN
 0x80000000

	)

129 
	#ETH_QUARK_TDCS_IC
 0x40000000

	)

130 
	#ETH_QUARK_TDCS_LS
 0x20000000

	)

131 
	#ETH_QUARK_TDCS_FS
 0x10000000

	)

132 
	#ETH_QUARK_TDCS_TER
 0x00200000

	)

133 
	#ETH_QUARK_TDCS_ES
 0x00008000

	)

137 
	sëh_q_rx_desc
 {

138 
uöt32
 
	m°©us
;

139 
uöt16
 
	mbuf1size
;

140 
uöt16
 
	mbuf2size
;

141 
uöt32
 
	mbuf„r1
;

142 
uöt32
 
	mbuf„r2
;

144 
	#rd˘l1
 
buf1size


	)

145 
	#rd˘l2
 
buf2size


	)

147 
	#ETH_QUARK_RDST_OWN
 0x80000000

	)

148 
	#ETH_QUARK_RDST_ES
 0x00008000

	)

149 
	#ETH_QUARK_RDST_FS
 0x00000200

	)

150 
	#ETH_QUARK_RDST_LS
 0x00000100

	)

151 
	#ETH_QUARK_RDST_FTETH
 0x00000020

	)

153 
	#ETH_QUARK_RDCTL1_DIC
 0x8000

	)

154 
	#ETH_QUARK_RDCTL1_RER
 0x8000

	)

156 
	#ETH_QUARK_RX_RING_SIZE
 32

	)

157 
	#ETH_QUARK_TX_RING_SIZE
 16

	)

159 
	#ETH_QUARK_INIT_DELAY
 500000

	)

160 
	#ETH_QUARK_MAX_RETRIES
 3

	)

	@include/quark_irq.h

1 
	#INTEL_QUARK_LEGBR_PCI_DID
 0x095E

	)

2 
	#INTEL_QUARK_LEGBR_PCI_VID
 0x8086

	)

4 
	#PABCDRC_OFFSET
 0x60

	)

5 
	#PEFGHRC_OFFSET
 0x64

	)

7 
	#PABCDRC_VALUE
 0x08080808

	)

8 
	#PEFGHRC_VALUE
 0x08080808

	)

10 
	#RCBA_OFFSET
 0xF0

	)

11 
	#RCBA_MASK
 0xffffc000

	)

14 
	#IRQAGENT0_OFFSET
 0x3140

	)

15 
	#IRQAGENT1_OFFSET
 0x3142

	)

16 
	#IRQAGENT2_OFFSET
 0x3144

	)

17 
	#IRQAGENT3_OFFSET
 0x3146

	)

19 
	#IRQAGENT0_VALUE
 0x0000

	)

20 
	#IRQAGENT1_VALUE
 0x3210

	)

21 
	#IRQAGENT2_VALUE
 0x0001

	)

22 
	#IRQAGENT3_VALUE
 0x7654

	)

	@include/quark_pdat.h

4 
	#QUARK_PDAT_MAGIC
 "PDAT"

	)

5 
	#QUARK_PDAT_MEMORY_LOC
 0xFFF10000

	)

8 
	#QUARK_PLAT_TYPE_ID
 1

	)

9 
	#QUARK_MAC1_ID
 3

	)

10 
	#QUARK_MAC2_ID
 4

	)

11 
	#QUARK_MRCPARAMS_ID
 6

	)

14 
	#QUARK_PLAT_TYPE_DESC
 "Pœtf‹mID"

	)

15 
	#QUARK_MRCPARAMS_DESC
 "MrcP¨ams"

	)

16 
	#QUARK_MAC1_DESC
 "1° MAC"

	)

17 
	#QUARK_MAC2_DESC
 "2nd MAC"

	)

19 #¥agm®
∑ck
(2)

20 
	squ¨k_pd©_hódî
 {

21 
	mqu¨k_pd©_magic
[4];

22 
uöt32
 
	mqu¨k_pd©_Àn
;

23 
uöt32
 
	mqu¨k_pd©_¸c
;

27 #¥agm®
∑ck
()

29 #¥agm®
∑ck
(2)

30 
	squ¨k_pd©_íåy
 {

31 
uöt16
 
	mpd©_íåy_id
;

32 
uöt16
 
	mpd©_íåy_Àn
;

33 
	mpd©_íåy_desc
[10];

34 
uöt16
 
	mpd©_íåy_vî
;

38 #¥agm®
∑ck
()

40 
gë_qu¨k_pd©_íåy_d©a_by_id
(
uöt16
 
ty≥_id
, * 
buf
, 
uöt32
 
size
);

41 
gë_qu¨k_pd©_íåy_d©a_by_desc
(c⁄° * 
íåy_desc
, * 
buf
, 
uöt32
 
size
);

	@include/queue.h

7 #i‚de‡
NQENT


8 
	#NQENT
 (
NPROC
 + 4 + 
NSEM
 + NSEM)

	)

11 
	#EMPTY
 (-1Ë

	)

12 
	#MAXKEY
 0x7FFFFFFF

	)

13 
	#MINKEY
 0x80000000

	)

15 
	sqíåy
 {

16 
öt32
 
	mqkey
;

17 
qid16
 
	mq√xt
;

18 
qid16
 
	mq¥ev
;

21 
qíåy
 
queuëab
[];

25 
	#queuehód
(
q
Ë(q)

	)

26 
	#queuëaû
(
q
Ë((qË+ 1)

	)

27 
	#fú°id
(
q
Ë(
queuëab
[
	`queuehód
(q)].
q√xt
)

	)

28 
	#œ°id
(
q
Ë(
queuëab
[
	`queuëaû
(q)].
q¥ev
)

	)

29 
	#i£m±y
(
q
Ë(
	`fú°id
(qË>
NPROC
)

	)

30 
	#n⁄em±y
(
q
Ë(
	`fú°id
(qË< 
NPROC
)

	)

31 
	#fú°key
(
q
Ë(
queuëab
[
	`fú°id
(q)].
qkey
)

	)

32 
	#œ°key
(
q
Ë(
queuëab
[ 
	`œ°id
(q)].
qkey
)

	)

36 
	#isbadqid
(
x
Ë(((
öt32
)(xË< 
NPROC
Ë|| (öt32)(xË>
NQENT
-1)

	)

	@include/ramdisk.h

5 
	#RM_BLKSIZ
 512

	)

6 
	#RM_BLKS
 200

	)

8 
	sømdisk
 {

9 
	mdisk
[
RM_BLKSIZ
 * 
RM_BLKS
];

12 
ømdisk
 
Ram
;

	@include/rdisksys.h

3 #i‚def 
Nrds


4 
	#Nrds
 1

	)

9 
	#RD_BLKSIZ
 512

	)

13 #i‚def 
RD_SERVER_IP


14 
	#RD_SERVER_IP
 "255.255.255.255"

	)

17 #i‚def 
RD_SERVER_PORT


18 
	#RD_SERVER_PORT
 33124

	)

21 #i‚def 
RD_LOC_PORT


22 
	#RD_LOC_PORT
 33124

	)

29 
	#RD_IDLEN
 64

	)

30 
	#RD_BUFFS
 64

	)

31 
	#RD_STACK
 16384

	)

32 
	#RD_PRIO
 200

	)

36 
	#RD_FREE
 0

	)

37 
	#RD_OPEN
 1

	)

38 
	#RD_PEND
 2

	)

42 
	#RD_OP_READ
 1

	)

43 
	#RD_OP_WRITE
 2

	)

44 
	#RD_OP_SYNC
 3

	)

48 
	#RD_VALID
 0

	)

49 
	#RD_INVALID
 1

	)

55 
	srdbuff
 {

56 
rdbuff
 *
	mrd_√xt
;

57 
rdbuff
 *
	mrd_¥ev
;

58 
öt32
 
	mrd_›
;

59 
öt32
 
	mrd_ªf˙t
;

61 
uöt32
 
	mrd_blknum
;

62 
öt32
 
	mrd_°©us
;

63 
pid32
 
	mrd_pid
;

65 
	mrd_block
[
RD_BLKSIZ
];

68 
	srdscblk
 {

69 
öt32
 
	mrd_°©e
;

70 
	mrd_id
[
RD_IDLEN
];

71 
öt32
 
	mrd_£q
;

73 
rdbuff
 *
	mrd_rh√xt
;

74 
rdbuff
 *
	mrd_rh¥ev
;

75 
rdbuff
 *
	mrd_π√xt
;

76 
rdbuff
 *
	mrd_π¥ev
;

80 
rdbuff
 *
	mrd_ch√xt
;

81 
rdbuff
 *
	mrd_ch¥ev
;

82 
rdbuff
 *
	mrd_˘√xt
;

83 
rdbuff
 *
	mrd_˘¥ev
;

87 
rdbuff
 *
	mrd_‰ì
;

89 
pid32
 
	mrd_com¥oc
;

90 
boﬁ8
 
	mrd_comruns
;

91 
sid32
 
	mrd_avaû£m
;

92 
sid32
 
	mrd_ªq£m
;

93 
uöt32
 
	mrd_£r_ù
;

94 
uöt16
 
	mrd_£r_p‹t
;

95 
uöt16
 
	mrd_loc_p‹t
;

96 
boﬁ8
 
	mrd_ªgi°îed
;

97 
öt32
 
	mrd_udp¶Ÿ
;

101 
rdscblk
 
rd°ab
[];

105 
	#RD_RETRIES
 3

	)

106 
	#RD_TIMEOUT
 2000

	)

110 
	#RDS_CTL_DEL
 1

	)

111 
	#RDS_CTL_SYNC
 2

	)

118 
	#RD_MSG_RESPONSE
 0x0100

	)

120 
	#RD_MSG_RREQ
 0x0010

	)

121 
	#RD_MSG_RRES
 (
RD_MSG_RREQ
 | 
RD_MSG_RESPONSE
)

	)

123 
	#RD_MSG_WREQ
 0x0020

	)

124 
	#RD_MSG_WRES
 (
RD_MSG_WREQ
 | 
RD_MSG_RESPONSE
)

	)

126 
	#RD_MSG_OREQ
 0x0030

	)

127 
	#RD_MSG_ORES
 (
RD_MSG_OREQ
 | 
RD_MSG_RESPONSE
)

	)

129 
	#RD_MSG_CREQ
 0x0040

	)

130 
	#RD_MSG_CRES
 (
RD_MSG_CREQ
 | 
RD_MSG_RESPONSE
)

	)

132 
	#RD_MSG_DREQ
 0x0050

	)

133 
	#RD_MSG_DRES
 (
RD_MSG_DREQ
 | 
RD_MSG_RESPONSE
)

	)

135 
	#RD_MIN_REQ
 
RD_MSG_RREQ


	)

136 
	#RD_MAX_REQ
 
RD_MSG_DREQ


	)

140 
	#RD_MSG_HDR
 \

141 
uöt16
 
rd_ty≥
; \

142 
uöt16
 
rd_°©us
; \

143 
uöt32
 
rd_£q
; \

144 
rd_id
[
RD_IDLEN
];

	)

150 #¥agm®
∑ck
(2)

151 
	srd_msg_hdr
 {

152 
	mRD_MSG_HDR


154 #¥agm®
∑ck
()

159 #¥agm®
∑ck
(2)

160 
	srd_msg_ºeq
 {

161 
RD_MSG_HDR


162 
uöt32
 
	mrd_blk
;

164 #¥agm®
∑ck
()

166 #¥agm®
∑ck
(2)

167 
	srd_msg_ºes
 {

168 
RD_MSG_HDR


169 
uöt32
 
	mrd_blk
;

170 
	mrd_d©a
[
RD_BLKSIZ
];

172 #¥agm®
∑ck
()

177 #¥agm®
∑ck
(2)

178 
	srd_msg_wªq
 {

179 
RD_MSG_HDR


180 
uöt32
 
	mrd_blk
;

181 
	mrd_d©a
[
RD_BLKSIZ
];

183 #¥agm®
∑ck
()

185 #¥agm®
∑ck
(2)

186 
	srd_msg_wªs
 {

187 
RD_MSG_HDR


188 
uöt32
 
	mrd_blk
;

190 #¥agm®
∑ck
()

195 #¥agm®
∑ck
(2)

196 
	srd_msg_‹eq
 {

197 
	mRD_MSG_HDR


199 #¥agm®
∑ck
()

201 #¥agm®
∑ck
(2)

202 
	srd_msg_‹es
 {

203 
	mRD_MSG_HDR


205 #¥agm®
∑ck
()

210 #¥agm®
∑ck
(2)

211 
	srd_msg_¸eq
 {

212 
	mRD_MSG_HDR


214 #¥agm®
∑ck
()

216 #¥agm®
∑ck
(2)

217 
	srd_msg_¸es
 {

218 
	mRD_MSG_HDR


220 #¥agm®
∑ck
()

225 #¥agm®
∑ck
(2)

226 
	srd_msg_dªq
 {

227 
	mRD_MSG_HDR


229 #¥agm®
∑ck
()

231 #¥agm®
∑ck
(2)

232 
	srd_msg_dªs
 {

233 
	mRD_MSG_HDR


235 #¥agm®
∑ck
()

	@include/resched.h

5 
	#DEFER_START
 1

	)

6 
	#DEFER_STOP
 2

	)

10 
	sde„r
 {

11 
öt32
 
	mnde„rs
;

12 
boﬁ8
 
	m©ãm±
;

16 
de„r
 
De„r
;

	@include/rfilesys.h

3 #i‚def 
NrÊ


4 
	#NrÊ
 10

	)

9 
	#RF_NAMLEN
 128

	)

10 
	#RF_DATALEN
 1024

	)

11 
	#RF_MODE_R
 
F_MODE_R


	)

12 
	#RF_MODE_W
 
F_MODE_W


	)

13 
	#RF_MODE_RW
 
F_MODE_RW


	)

14 
	#RF_MODE_N
 
F_MODE_N


	)

15 
	#RF_MODE_O
 
F_MODE_O


	)

16 
	#RF_MODE_NO
 
F_MODE_NO


	)

20 #i‚def 
RF_SERVER_IP


21 
	#RF_SERVER_IP
 "128.10.3.51"

	)

24 #i‚def 
RF_SERVER_PORT


25 
	#RF_SERVER_PORT
 0

	)

28 #i‚def 
RF_LOC_PORT


29 
	#RF_LOC_PORT
 33123

	)

32 
	srfd©a
 {

33 
öt32
 
	mrf_£q
;

34 
uöt32
 
	mrf_£r_ù
;

35 
uöt16
 
	mrf_£r_p‹t
;

36 
uöt16
 
	mrf_loc_p‹t
;

37 
öt32
 
	mrf_udp_¶Ÿ
;

38 
sid32
 
	mrf_muãx
;

39 
boﬁ8
 
	mrf_ªgi°îed
;

42 
rfd©a
 
Rf_d©a
;

46 
	#RF_FREE
 0

	)

47 
	#RF_USED
 1

	)

49 
	srÊcblk
 {

50 
öt32
 
	mrf°©e
;

51 
öt32
 
	mrfdev
;

52 
	mr‚ame
[
RF_NAMLEN
];

53 
uöt32
 
	mrÂos
;

54 
uöt32
 
	mrfmode
;

58 
rÊcblk
 
rÊèb
[];

62 
	#RF_RETRIES
 3

	)

63 
	#RF_TIMEOUT
 3000

	)

67 
	#RFS_CTL_DEL
 
F_CTL_DEL


	)

68 
	#RFS_CTL_TRUNC
 
F_CTL_TRUNC


	)

69 
	#RFS_CTL_MKDIR
 
F_CTL_MKDIR


	)

70 
	#RFS_CTL_RMDIR
 
F_CTL_RMDIR


	)

71 
	#RFS_CTL_SIZE
 
F_CTL_SIZE


	)

81 
	#RF_MSG_RESPONSE
 0x0100

	)

83 
	#RF_MSG_RREQ
 0x0001

	)

84 
	#RF_MSG_RRES
 (
RF_MSG_RREQ
 | 
RF_MSG_RESPONSE
)

	)

86 
	#RF_MSG_WREQ
 0x0002

	)

87 
	#RF_MSG_WRES
 (
RF_MSG_WREQ
 | 
RF_MSG_RESPONSE
)

	)

89 
	#RF_MSG_OREQ
 0x0003

	)

90 
	#RF_MSG_ORES
 (
RF_MSG_OREQ
 | 
RF_MSG_RESPONSE
)

	)

92 
	#RF_MSG_DREQ
 0x0004

	)

93 
	#RF_MSG_DRES
 (
RF_MSG_DREQ
 | 
RF_MSG_RESPONSE
)

	)

95 
	#RF_MSG_TREQ
 0x0005

	)

96 
	#RF_MSG_TRES
 (
RF_MSG_TREQ
 | 
RF_MSG_RESPONSE
)

	)

98 
	#RF_MSG_SREQ
 0x0006

	)

99 
	#RF_MSG_SRES
 (
RF_MSG_SREQ
 | 
RF_MSG_RESPONSE
)

	)

101 
	#RF_MSG_MREQ
 0x0007

	)

102 
	#RF_MSG_MRES
 (
RF_MSG_MREQ
 | 
RF_MSG_RESPONSE
)

	)

104 
	#RF_MSG_XREQ
 0x0008

	)

105 
	#RF_MSG_XRES
 (
RF_MSG_XREQ
 | 
RF_MSG_RESPONSE
)

	)

107 
	#RF_MSG_CREQ
 0x0009

	)

108 
	#RF_MSG_CRES
 (
RF_MSG_CREQ
 | 
RF_MSG_RESPONSE
)

	)

110 
	#RF_MIN_REQ
 
RF_MSG_RREQ


	)

111 
	#RF_MAX_REQ
 
RF_MSG_CREQ


	)

115 
	#RF_MSG_HDR
 \

116 
uöt16
 
rf_ty≥
; \

117 
uöt16
 
rf_°©us
; \

118 
uöt32
 
rf_£q
; \

119 
rf_«me
[
RF_NAMLEN
];

	)

129 #¥agm®
∑ck
(2)

130 
	srf_msg_hdr
 {

131 
	mRF_MSG_HDR


133 #¥agm®
∑ck
()

141 #¥agm®
∑ck
(2)

142 
	srf_msg_ºeq
 {

143 
RF_MSG_HDR


144 
uöt32
 
	mrf_pos
;

145 
uöt32
 
	mrf_Àn
;

148 #¥agm®
∑ck
()

150 #¥agm®
∑ck
(2)

151 
	srf_msg_ºes
 {

152 
RF_MSG_HDR


153 
uöt32
 
	mrf_pos
;

154 
uöt32
 
	mrf_Àn
;

156 
	mrf_d©a
[
RF_DATALEN
];

159 #¥agm®
∑ck
()

167 #¥agm®
∑ck
(2)

168 
	srf_msg_wªq
 {

169 
RF_MSG_HDR


170 
uöt32
 
	mrf_pos
;

171 
uöt32
 
	mrf_Àn
;

173 
	mrf_d©a
[
RF_DATALEN
];

176 #¥agm®
∑ck
()

178 #¥agm®
∑ck
(2)

179 
	srf_msg_wªs
 {

180 
RF_MSG_HDR


181 
uöt32
 
	mrf_pos
;

182 
uöt32
 
	mrf_Àn
;

184 #¥agm®
∑ck
()

192 #¥agm®
∑ck
(2)

193 
	srf_msg_‹eq
 {

194 
RF_MSG_HDR


195 
öt32
 
	mrf_mode
;

197 #¥agm®
∑ck
()

199 #¥agm®
∑ck
(2)

200 
	srf_msg_‹es
 {

201 
RF_MSG_HDR


202 
öt32
 
	mrf_mode
;

204 #¥agm®
∑ck
()

212 #¥agm®
∑ck
(2)

213 
	srf_msg_¸eq
 {

214 
	mRF_MSG_HDR


216 #¥agm®
∑ck
()

218 #¥agm®
∑ck
(2)

219 
	srf_msg_¸es
 {

220 
	mRF_MSG_HDR


222 #¥agm®
∑ck
()

230 #¥agm®
∑ck
(2)

231 
	srf_msg_§eq
 {

232 
	mRF_MSG_HDR


234 #¥agm®
∑ck
()

236 #¥agm®
∑ck
(2)

237 
	srf_msg_§es
 {

238 
RF_MSG_HDR


239 
uöt32
 
	mrf_size
;

241 #¥agm®
∑ck
()

249 #¥agm®
∑ck
(2)

250 
	srf_msg_dªq
 {

251 
	mRF_MSG_HDR


253 #¥agm®
∑ck
()

255 #¥agm®
∑ck
(2)

256 
	srf_msg_dªs
 {

257 
	mRF_MSG_HDR


259 #¥agm®
∑ck
()

267 #¥agm®
∑ck
(2)

268 
	srf_msg_åeq
 {

269 
	mRF_MSG_HDR


271 #¥agm®
∑ck
()

273 #¥agm®
∑ck
(2)

274 
	srf_msg_åes
 {

275 
	mRF_MSG_HDR


277 #¥agm®
∑ck
()

285 #¥agm®
∑ck
(2)

286 
	srf_msg_mªq
 {

287 
	mRF_MSG_HDR


289 #¥agm®
∑ck
()

291 #¥agm®
∑ck
(2)

292 
	srf_msg_mªs
 {

293 
	mRF_MSG_HDR


295 #¥agm®
∑ck
()

303 #¥agm®
∑ck
(2)

304 
	srf_msg_xªq
 {

305 
	mRF_MSG_HDR


307 #¥agm®
∑ck
()

309 #¥agm®
∑ck
(2)

310 
	srf_msg_xªs
 {

311 
	mRF_MSG_HDR


313 #¥agm®
∑ck
()

321 
	#RF_DIRENT_FILE
 1

	)

322 
	#RF_DIRENT_DIR
 2

	)

324 #¥agm®
∑ck
(2)

325 
	srfdúít
 {

326 
byã
 
	md_ty≥
;

327 
	md_«me
[256];

329 #¥agm®
∑ck
()

	@include/sdmc.h

1 
	#INTEL_QUARK_SDIO_PCI_DID
 0x08A7

	)

2 
	#INTEL_QUARK_SDIO_PCI_VID
 0x8086

	)

4 #i‚def 
Nsdmc


5 
	#Nsdmc
 1

	)

8 
	ssdmcblk
 {

9 
sid32
 
	mcmd_£m
;

10 
sid32
 
	mtx_£m
;

11 
uöt32
 
	mrˇ
;

12 
	mcid
[16];

13 
uöt8
 
	mcmd8
 :1;

14 
uöt8
 
	msdio
 :1;

15 
uöt8
 
	mrsvd
 :6;

17 
sdmcblk
 
sdm˘ab
[];

19 #¥agm®
∑ck
(1)

20 
	ssdmc_c§eg
 {

21 
uöt32
 
	msys_adr
;

22 
uöt16
 
	mblk_size
;

23 
uöt16
 
	mblk_cou¡
;

24 
uöt32
 
	m¨gumít
;

25 
uöt16
 
	mtx_mode
;

26 
uöt16
 
	mcmd
;

27 
uöt32
 
	mª•⁄£0
;

28 
uöt32
 
	mª•⁄£2
;

29 
uöt32
 
	mª•⁄£4
;

30 
uöt32
 
	mª•⁄£6
;

31 
uöt32
 
	mbuf_d©a_p‹t
;

32 
uöt32
 
	m¥e_°©e
;

33 
uöt8
 
	mho°_˘l
;

34 
uöt8
 
	mpwr_˘l
;

35 
uöt8
 
	mblk_g≠_˘l
;

36 
uöt8
 
	mwakeup_˘l
;

37 
uöt16
 
	m˛k_˘l
;

38 
uöt8
 
	mtimeout_˘l
;

39 
uöt8
 
	msw_r°
;

40 
uöt16
 
	mnml_öt_°©us
;

41 
uöt16
 
	mîr_öt_°©us
;

42 
uöt16
 
	mƒm_öt_°©us_í
;

43 
uöt16
 
	mîr_öt_°©_í
;

44 
uöt16
 
	mƒm_öt_sig_í
;

45 
uöt16
 
	mîr_öt_sig_í
;

46 
uöt16
 
	mcmd12_îr_°©
;

47 
uöt16
 
	mho°_˘æ_2
;

48 
uöt32
 
	mˇ∑bûôõs
;

49 
uöt32
 
	mˇ∑bûôõs_2
;

50 
uöt32
 
	mmax_cur_ˇp
;

51 
byã
 
	mrsvd1
[4];

52 
uöt16
 
	mf‹˚_evít_cmd12_îr_°©
;

53 
uöt16
 
	mf‹˚_evít_îr_öt_°©
;

54 
uöt8
 
	madma_îr_°©
;

55 
byã
 
	mrsvd2
[3];

56 
uöt32
 
	madma_sys_addr
;

57 
byã
 
	mrsvd3
[4];

58 
uöt16
 
	m¥e£t_vÆue_0
;

59 
uöt16
 
	m¥e£t_vÆue_1
;

60 
uöt16
 
	m¥e£t_vÆue_2
;

61 
uöt16
 
	m¥e£t_vÆue_3
;

62 
uöt16
 
	m¥e£t_vÆue_4
;

63 
uöt16
 
	m¥e£t_vÆue_5
;

64 
uöt16
 
	m¥e£t_vÆue_6
;

65 
uöt16
 
	m¥e£t_vÆue_7
;

66 
uöt32
 
	mboŸ_timeout_˘æ
;

67 
uöt8
 
	mdebug_£l
;

68 
byã
 
	mrsvd4
[107];

69 
uöt32
 
	msh¨ed_bus
;

70 
byã
 
	mrsvd5
[12];

71 
uöt8
 
	m•i_öt_sup
;

72 
byã
 
	mrsvd6
[11];

73 
uöt16
 
	m¶Ÿ_öt_°©
;

74 
uöt16
 
	mho°_˘æ_vî
;

76 #¥agm®
∑ck
()

78 
	ssdmc_cmd
 {

79 
uöt16
 
	mª•_ty≥_£l
 :2;

80 
uöt16
 
	mcmd_¸c_chk_í
 :1;

81 
uöt16
 
	mcmd_ödex_chk_í
:1;

82 
uöt16
 
	md©_¥_£l
 :2;

83 
uöt16
 
	mcmd_ty≥
 :2;

84 
uöt16
 
	mcmd_ödex
 :6;

85 
uöt16
 
	mrsvd
 :2;

88 
	ssdmc_ˇ∑bûôõs
 {

89 
uöt32
 
	mtimeout_˛ock_‰equícy
 :6;

90 
uöt32
 
	mrsvd6
 :1;

91 
uöt32
 
	mtimeout_˛ock_unô
 :1;

92 
uöt32
 
	mba£_˛ock_‰equícy_sd_˛k
:8;

93 
uöt32
 
	mmax_block_Àngth
 :2;

94 
uöt32
 
	mexãnded_medü_bus_suµ‹t
:1;

95 
uöt32
 
	madma2_suµ‹t
 :1;

96 
uöt32
 
	mrsvd5
 :1;

97 
uöt32
 
	mhigh_•ìd_suµ‹t
 :1;

98 
uöt32
 
	msdma_suµ‹t
 :1;

99 
uöt32
 
	msu•íd_ªsume_suµ‹t
 :1;

100 
uöt32
 
	mvﬁt_suµ‹t_3p3v
 :1;

101 
uöt32
 
	mvﬁt_suµ‹t_3p0v
 :1;

102 
uöt32
 
	mvﬁt_suµ‹t_1p8v
 :1;

103 
uöt32
 
	mrsvd4
 :1;

104 
uöt32
 
	msys_bus_suµ‹t_64b
 :1;

105 
uöt32
 
	masync_öt_suµ‹t
 :1;

106 
uöt32
 
	m¶Ÿ_ty≥
 :2;

112 
	#SDMC_HOST_CTL_LED_CTL
 0x0001

	)

113 
	#SDMC_HOST_DAT_TX_4BIT
 0x0002

	)

114 
	#SDMC_HOST_HS_EN
 0x0004

	)

115 
	#SDMC_HOST_ADMA_32
 0x0010

	)

116 
	#SDMC_HOST_ADMA_64
 0x0018

	)

117 
	#SDMC_HOST_CARD_DET_TST
 0x0040

	)

118 
	#SDMC_HOST_CARD_DET_SIG
 0x0080

	)

121 
	#SDMC_CMD_COMP_STAT_EN
 0x0001

	)

122 
	#SDMC_TX_COMP_STAT_EN
 0x0002

	)

123 
	#SDMC_BLK_GAP_EVENT_STAT_EN
 0x0004

	)

124 
	#SDMC_DMA_INT_STAT_EN
 0x0008

	)

125 
	#SDMC_BUF_WR_RDY_STAT_EN
 0x0010

	)

126 
	#SDMC_BUF_RD_RDY_STAT_EN
 0x0020

	)

127 
	#SDMC_CRD_INS_STAT_EN
 0x0040

	)

128 
	#SDMC_CRD_RMV_STAT_EN
 0x0080

	)

129 
	#SDMC_CRD_INT_STAT_EN
 0x0100

	)

130 
	#SDMC_INT_A_STAT_EN
 0x0200

	)

131 
	#SDMC_INT_B_STAT_EN
 0x0400

	)

132 
	#SDMC_INT_C_STAT_EN
 0x0800

	)

133 
	#SDMC_RE_TUNE_STAT_EN
 0x1000

	)

134 
	#SDMC_NML_INT_ALL_STAT_EN
 0x1FFF

	)

137 
	#SDMC_CMD_COMP_SIG_EN
 0x0001

	)

138 
	#SDMC_TX_COMP_SIG_EN
 0x0002

	)

139 
	#SDMC_BLK_GAP_EVENT_SIG_EN
 0x0004

	)

140 
	#SDMC_DMA_INT_SIG_EN
 0x0008

	)

141 
	#SDMC_BUF_WR_RDY_SIG_EN
 0x0010

	)

142 
	#SDMC_BUF_RD_RDY_SIG_EN
 0x0020

	)

143 
	#SDMC_CRD_INS_SIG_EN
 0x0040

	)

144 
	#SDMC_CRD_RMV_SIG_EN
 0x0080

	)

145 
	#SDMC_CRD_INT_SIG_EN
 0x0100

	)

146 
	#SDMC_INT_A_SIG_EN
 0x0200

	)

147 
	#SDMC_INT_B_SIG_EN
 0x0400

	)

148 
	#SDMC_INT_C_SIG_EN
 0x0800

	)

149 
	#SDMC_RE_TUNE_SIG_EN
 0x1000

	)

150 
	#SDMC_NML_INT_ALL_SIG_EN
 0x1FFF

	)

153 
	#SDMC_NML_INT_CMD_COMP
 0x0001

	)

154 
	#SDMC_NML_INT_TX_COMP
 0x0002

	)

155 
	#SDMC_NML_INT_BLK_GAP_EVENT
 0x0004

	)

156 
	#SDMC_NML_INT_DMA_INT
 0x0008

	)

157 
	#SDMC_NML_INT_BUF_WR_RDY
 0x0010

	)

158 
	#SDMC_NML_INT_BUF_RD_RDY
 0x0020

	)

159 
	#SDMC_NML_INT_CRD_INS
 0x0040

	)

160 
	#SDMC_NML_INT_CRD_RM
 0x0080

	)

161 
	#SDMC_NML_INT_CRD_INT
 0x0100

	)

162 
	#SDMC_NML_INT_INT_A
 0x0200

	)

163 
	#SDMC_NML_INT_INT_B
 0x0400

	)

164 
	#SDMC_NML_INT_INT_C
 0x0800

	)

165 
	#SDMC_NML_INT_RE_TUNE
 0x1000

	)

166 
	#SDMC_NML_INT_BOOT_CK_RCV
 0x2000

	)

167 
	#SDMC_NML_INT_BOOT_TER_INT
 0x4000

	)

168 
	#SDMC_NML_INT_ERR_INT
 0x8000

	)

171 
	#SDMC_ERR_INT_CMD_TIMEOUT_ERR_STAT_EN
 0x0001

	)

172 
	#SDMC_ERR_INT_CMD_CRC_ERR_STAT_EN
 0x0002

	)

173 
	#SDMC_ERR_INT_CMD_END_BIT_ERR_STAT_EN
 0x0004

	)

174 
	#SDMC_ERR_INT_CMD_IND_ERR_STAT_EN
 0x0008

	)

175 
	#SDMC_ERR_INT_DATA_TIMEOUT_ERR_STAT_EN
 0x0010

	)

176 
	#SDMC_ERR_INT_DATA_CRC_ERR_STAT_EN
 0x0020

	)

177 
	#SDMC_ERR_INT_DATA_END_BIT_ERR_STAT_EN
 0x0040

	)

178 
	#SDMC_ERR_INT_CUR_LIMIT_ERR_STAT_EN
 0x0080

	)

179 
	#SDMC_ERR_INT_CMD12_ERR_STAT_EN
 0x0100

	)

180 
	#SDMC_ERR_INT_ADMA_ERR_STAT_EN
 0x0200

	)

181 
	#SDMC_ERR_INT_TUNE_ERR_STAT_EN
 0x0400

	)

182 
	#SDMC_ERR_INT_TGT_RSP_ERR_EN
 0x1000

	)

183 
	#SDMC_ERR_INT_CEATA_ERR_EN
 0x2000

	)

184 
	#SDMC_ERR_INT_ALL_STAT_EN
 0x3FFF

	)

187 
	#SDMC_ERR_INT_CMD_TIMEOUT_ERR_SIG_EN
 0x0001

	)

188 
	#SDMC_ERR_INT_CMD_CRC_ERR_SIG_EN
 0x0002

	)

189 
	#SDMC_ERR_INT_CMD_END_BIT_ERR_SIG_EN
 0x0004

	)

190 
	#SDMC_ERR_INT_CMD_IND_ERR_SIG_EN
 0x0008

	)

191 
	#SDMC_ERR_INT_DATA_TIMEOUT_ERR_SIG_EN
 0x0010

	)

192 
	#SDMC_ERR_INT_DATA_CRC_ERR_SIG_EN
 0x0020

	)

193 
	#SDMC_ERR_INT_DATA_END_BIT_ERR_SIG_EN
 0x0040

	)

194 
	#SDMC_ERR_INT_CUR_LIMIT_ERR_SIG_EN
 0x0080

	)

195 
	#SDMC_ERR_INT_CMD12_ERR_SIG_EN
 0x0100

	)

196 
	#SDMC_ERR_INT_ADMA_ERR_SIG_EN
 0x0200

	)

197 
	#SDMC_ERR_INT_TUNE_ERR_SIG_EN
 0x0400

	)

198 
	#SDMC_ERR_INT_TGT_RSP_ERR_SIG_EN
 0x1000

	)

199 
	#SDMC_ERR_INT_CEATA_ERR_SIG_EN
 0x2000

	)

200 
	#SDMC_ERR_INT_ALL_SIG_EN
 0x3FFF

	)

203 
	#SDMC_ERR_INT_CMD_TIMEOUT_ERR
 0x0001

	)

204 
	#SDMC_ERR_INT_CMD_CRC_ERR
 0x0002

	)

205 
	#SDMC_ERR_INT_CMD_END_BIT_ERR
 0x0004

	)

206 
	#SDMC_ERR_INT_CMD_INDEX_ERR
 0x0008

	)

207 
	#SDMC_ERR_INT_DATA_TIMEOUT_ERR
 0x0010

	)

208 
	#SDMC_ERR_INT_DATA_CRC_ERR
 0x0020

	)

209 
	#SDMC_ERR_INT_DATA_END_BIT_ERR
 0x0040

	)

210 
	#SDMC_ERR_INT_CUR_LIMIT_ERR
 0x0080

	)

211 
	#SDMC_ERR_INT_CMD12_ERR
 0x0100

	)

212 
	#SDMC_ERR_INT_ADMA_ERR
 0x0200

	)

213 
	#SDMC_ERR_INT_TUNE_ERR
 0x0400

	)

214 
	#SDMC_ERR_INT_TGT_RSP_ERR
 0x1000

	)

215 
	#SDMC_ERR_INT_CEATA_ERR
 0x2000

	)

218 
	#SDMC_SW_RST_ALL
 0x01

	)

219 
	#SDMC_SW_RST_CMD_LN
 0x02

	)

220 
	#SDMC_SW_RST_DAT_LN
 0x04

	)

223 
	#SDMC_CAP_VOLT_SUPPORT_3P3V
 0x01000000

	)

224 
	#SDMC_CAP_VOLT_SUPPORT_3P0V
 0x02000000

	)

225 
	#SDMC_CAP_VOLT_SUPPORT_1P8V
 0x04000000

	)

228 
	#SDMC_PRE_STATE_CMD_INHIBIT_CMD
 0x00000001

	)

229 
	#SDMC_PRE_STATE_CMD_INHIBIT_DAT
 0x00000002

	)

230 
	#SDMC_PRE_STATE_CRD_INS
 0x00010000

	)

231 
	#SDMC_PRE_STATE_DATA_LN_SIG_LVL
 0x00F00000

	)

234 
	#SDMC_CLK_CTL_INT_CLK_EN
 0x0001

	)

235 
	#SDMC_CLK_CTL_INT_CLK_STABLE
 0x0002

	)

236 
	#SDMC_CLK_CTL_SD_CLK_EN
 0x0004

	)

237 
	#SDMC_CLK_CTL_CLK_GEN_SEL
 0x0020

	)

238 
	#SDMC_CLK_CTL_SD_FREQ_HIGH_MASK
 0x00FF

	)

241 
	#SDMC_TMR_CTL_HIGH
 0x0E

	)

244 
	#SDMC_PWR_CTL_SD_BUS_PWR
 0x01

	)

245 
	#SDMC_PWR_CTL_HW_RST
 0x10

	)

246 
	#SDMC_PWR_CTL_SD_BUS_VOL_SEL_CLR
 0xF1

	)

247 
	#SDMC_PWR_CTL_SD_BUS_VOL_SEL_3P3V
 0x0E

	)

248 
	#SDMC_PWR_CTL_SD_BUS_VOL_SEL_3P0V
 0x0C

	)

249 
	#SDMC_PWR_CTL_SD_BUS_VOL_SEL_1P8V
 0x0A

	)

252 
	#SDMC_TXM_DMA_EN
 0x0001

	)

253 
	#SDMC_TXM_BLK_CNT_EN
 0x0002

	)

254 
	#SDMC_TXM_AUTO_CMD12_EN
 0x0004

	)

255 
	#SDMC_TXM_DAT_TX_RD
 0x0010

	)

256 
	#SDMC_TXM_MB_SEL
 0x0020

	)

259 
	#SDMC_R1_AKE_SEQ_ERROR
 0x00000008

	)

260 
	#SDMC_R1_APP_CMD
 0x00000020

	)

261 
	#SDMC_R1_READY_FOR_DATA
 0x00000100

	)

262 
	#SDMC_R1_CURRENT_STATE
 0x00001E00

	)

263 
	#SDMC_R1_ERASE_RESET
 0x00002000

	)

264 
	#SDMC_R1_CARD_ECC_DISABLED
 0x00004000

	)

265 
	#SDMC_R1_WP_ERASE_SKIP
 0x00008000

	)

266 
	#SDMC_R1_CSD_OVERWRITE
 0x00010000

	)

267 
	#SDMC_R1_ERROR
 0x00080000

	)

268 
	#SDMC_R1_CC_ERROR
 0x00100000

	)

269 
	#SDMC_R1_CARD_ECC_FAILED
 0x00200000

	)

270 
	#SDMC_R1_ILLEGAL_COMMAND
 0x00400000

	)

271 
	#SDMC_R1_COM_CRC_ERROR
 0x00800000

	)

272 
	#SDMC_R1_LOCK_UNLOCK_FAILED
 0x01000000

	)

273 
	#SDMC_R1_CARD_IS_LOCKED
 0x02000000

	)

274 
	#SDMC_R1_WP_VIOLATION
 0x04000000

	)

275 
	#SDMC_R1_ERASE_PARAM
 0x08000000

	)

276 
	#SDMC_R1_ERASE_SEQ_ERROR
 0x10000000

	)

277 
	#SDMC_R1_BLOCK_LEN_ERROR
 0x20000000

	)

278 
	#SDMC_R1_ADDRESS_ERROR
 0x40000000

	)

279 
	#SDMC_R1_OUT_OF_RANGE
 0x80000000

	)

280 
	#SDMC_R1_ANY_ERROR
 0xFDF90008

	)

283 
	#SDMC_R1_IDLE_STATE
 0x00000000

	)

284 
	#SDMC_R1_READY_STATE
 0x00000200

	)

285 
	#SDMC_R1_IDENT_STATE
 0x00000400

	)

286 
	#SMDC_R1_STBY_STATE
 0x00000600

	)

287 
	#SDMC_R1_TRAN_STATE
 0x00000800

	)

288 
	#SDMC_R1_DATA_STATE
 0x00000A00

	)

289 
	#SDMC_R1_RCV_STATE
 0x00000C00

	)

290 
	#SDMC_R1_PRG_STATE
 0x00000E00

	)

291 
	#SMDC_R1_DIS_STATE
 0x00001000

	)

294 
	#SDMC_R3_2P7_2P8
 0x00008000

	)

295 
	#SDMC_R3_2P8_2P9
 0x00010000

	)

296 
	#SDMC_R3_2P9_3P0
 0x00020000

	)

297 
	#SDMC_R3_3P0_3P1
 0x00040000

	)

298 
	#SDMC_R3_3P1_3P2
 0x00080000

	)

299 
	#SDMC_R3_3P2_3P3
 0x00100000

	)

300 
	#SDMC_R3_3P3_3P4
 0x00200000

	)

301 
	#SDMC_R3_3P4_3P5
 0x00400000

	)

302 
	#SDMC_R3_3P5_3P6
 0x00800000

	)

303 
	#SDMC_R3_S18A
 0x01000000

	)

304 
	#SDMC_R3_UHS_II_STS
 0x20000000

	)

305 
	#SDMC_R3_CCS
 0x40000000

	)

306 
	#SDMC_R3_BUSY
 0x80000000

	)

309 
	#SDMC_R6_RCA_MASK
 0xFFFF0000

	)

310 
	#SDMC_R6_AKE_SEQ_ERROR
 0x00000008

	)

311 
	#SDMC_R6_APP_CMD
 0x00000020

	)

312 
	#SDMC_R6_READY_FOR_DATA
 0x00000100

	)

313 
	#SDMC_R6_CURRENT_STATE
 0x00001E00

	)

314 
	#SDMC_R6_ERROR
 0x00002000

	)

315 
	#SDMC_R6_ILLEGAL_COMMAND
 0x00004000

	)

316 
	#SDMC_R6_COM_CRC_ERROR
 0x00008000

	)

319 
	#SDMC_OCR_MASK
 0x00FFFF00

	)

320 
	#SDMC_ACMD41_S18R
 0x01000000

	)

321 
	#SDMC_ACMD41_XPC
 0x10000000

	)

322 
	#SDMC_ACMD41_HCS
 0x40000000

	)

325 
	#SDMC_CMD_TYPE_NML
 0x0000

	)

326 
	#SDMC_CMD_TYPE_SUS
 0x0040

	)

327 
	#SDMC_CMD_TYPE_RSM
 0x0080

	)

328 
	#SDMC_CMD_TYPE_ABT
 0x00C0

	)

329 
	#SDMC_CMD_DAT_PRES
 0x0020

	)

330 
	#SDMC_CMD_CMD_IDX_EN
 0x0010

	)

331 
	#SDMC_CMD_CMD_CRC_EN
 0x0008

	)

332 
	#SDMC_CMD_CMD_RSP_LG
 0x0001

	)

333 
	#SDMC_CMD_CMD_RSP_ST
 0x0002

	)

334 
	#SDMC_CMD_CMD_RSP_ST_BSY
 0x0003

	)

337 
	#SDMC_CMD_NO_RESP
 (0x0000)

	)

338 
	#SDMC_CMD_R1
 (
SDMC_CMD_CMD_RSP_ST
 | 
SDMC_CMD_CMD_IDX_EN
 | 
SDMC_CMD_CMD_CRC_EN
)

	)

339 
	#SDMC_CMD_R1b
 (
SDMC_CMD_CMD_RSP_ST_BSY
 | 
SDMC_CMD_CMD_IDX_EN
 | 
SDMC_CMD_CMD_CRC_EN
)

	)

340 
	#SDMC_CMD_R2
 (
SDMC_CMD_CMD_RSP_LG
 | 
SDMC_CMD_CMD_CRC_EN
)

	)

341 
	#SDMC_CMD_R3
 (
SDMC_CMD_CMD_RSP_ST
)

	)

342 
	#SDMC_CMD_R4
 (
SDMC_CMD_CMD_RSP_ST
)

	)

343 
	#SDMC_CMD_R5
 (
SDMC_CMD_CMD_RSP_ST
 | 
SDMC_CMD_CMD_IDX_EN
 | 
SDMC_CMD_CMD_CRC_EN
)

	)

344 
	#SDMC_CMD_R5b
 (
SDMC_CMD_CMD_RSP_ST_BSY
 | 
SDMC_CMD_CMD_IDX_EN
 | 
SDMC_CMD_CMD_CRC_EN
)

	)

345 
	#SDMC_CMD_R6
 (
SDMC_CMD_CMD_RSP_ST
 | 
SDMC_CMD_CMD_IDX_EN
 | 
SDMC_CMD_CMD_CRC_EN
)

	)

346 
	#SDMC_CMD_R7
 (
SDMC_CMD_CMD_RSP_ST
 | 
SDMC_CMD_CMD_IDX_EN
 | 
SDMC_CMD_CMD_CRC_EN
)

	)

349 
	#SDMC_CMD0
 0x0000 | (
SDMC_CMD_NO_RESP
Ë

	)

350 
	#SDMC_CMD2
 0x0200 | (
SDMC_CMD_R2
Ë

	)

351 
	#SDMC_CMD3
 0x0300 | (
SDMC_CMD_R6
Ë

	)

352 
	#SDMC_CMD7
 0x0700 | (
SDMC_CMD_R1b
Ë

	)

353 
	#SDMC_CMD8
 0x0800 | (
SDMC_CMD_R7
Ë

	)

354 
	#SDMC_CMD9
 0x0900 | (
SDMC_CMD_R2
Ë

	)

355 
	#SDMC_CMD10
 0x0A00 | (
SDMC_CMD_R2
Ë

	)

356 
	#SDMC_CMD12
 0x0C00 | (
SDMC_CMD_R1b
Ë

	)

357 
	#SDMC_ABT
 0x0C00 | (
SDMC_CMD_TYPE_ABT
Ë

	)

358 
	#SDMC_CMD13
 0x0D00 | (
SDMC_CMD_R1
Ë

	)

359 
	#SDMC_CMD16
 0x1000 | (
SDMC_CMD_R1
Ë

	)

360 
	#SDMC_CMD17
 0x1100 | (
SDMC_CMD_R1
 | 
SDMC_CMD_DAT_PRES
Ë

	)

361 
	#SDMC_CMD55
 0x3700 | (
SDMC_CMD_R1
Ë

	)

362 
	#SDMC_ACMD6
 0x0600 | (
SDMC_CMD_R1
Ë

	)

363 
	#SDMC_ACMD41
 0x2900 | (
SDMC_CMD_R3
Ë

	)

364 
	#SDMC_ACMD51
 0x3300 | (
SDMC_CMD_R1
 | 
SDMC_CMD_DAT_PRES
 )

	)

366 
	#SDMC_CMD_DELAY
 100000

	)

368 
	#SDMC_BLK_SIZE
 512

	)

370 
	#SDMC_RC_OK
 (0)

	)

371 
	#SDMC_RC_RECOVERABLE_ERR
 (-1)

	)

372 
	#SDMC_RC_NON_RECOVERABLE_ERROR
 (-2)

	)

374 
	#SDMC_CMD_NO_FLAGS
 0x00

	)

375 
	#SDMC_CMD_NO_ERR_RCVY
 0x01

	)

376 
	#SDMC_CMD_DAT_TRNS
 0x02

	)

378 
devˇŒ
 
sdmc_issue_cmd_sync
 (vﬁ©ûê
sdmc_c§eg
 *
c§±r
, 
uöt16
 
cmd_vÆue
, 
uöt32
 
¨g_vÆue
, uöt16* 
îr‹_°s
, 
uöt8
 
Êags
);

379 
devˇŒ
 
sdmc_issue_cmd_async
 (vﬁ©ûê
sdmc_c§eg
 *
c§±r
, 
uöt16
 
cmd_vÆue
, 
uöt32
 
¨g_vÆue
);

380 
devˇŒ
 
sdmc_föÆize_cmd_async
 (vﬁ©ûê
sdmc_c§eg
 *
c§±r
, 
uöt16
* 
îr‹_°s
);

	@include/semaphore.h

3 #i‚def 
NSEM


4 
	#NSEM
 120

	)

9 
	#S_FREE
 0

	)

10 
	#S_USED
 1

	)

13 
	s£¡ry
 {

14 
byã
 
	ms°©e
;

15 
öt32
 
	mscou¡
;

16 
qid16
 
	msqueue
;

20 
£¡ry
 
£mèb
[];

22 
	#isbad£m
(
s
Ë((
öt32
)(sË< 0 || (sË>
NSEM
)

	)

	@include/shell.h

5 
	#SHELL_BUFLEN
 
TY_IBUFLEN
+1

	)

6 
	#SHELL_MAXTOK
 32

	)

7 
	#SHELL_CMDSTK
 8192

	)

9 
	#SHELL_ARGLEN
 (
SHELL_BUFLEN
+
SHELL_MAXTOK
Ë

	)

10 
	#SHELL_CMDPRIO
 20

	)

16 
	#SHELL_BAN0
 "\033[31;1m"

	)

17 
	#SHELL_BAN1
 "------------------------------------------"

	)

18 
	#SHELL_BAN2
 " __ __ _____ _ _ _ _ "

	)

19 
	#SHELL_BAN3
 " \\ \\ / / |__ __| | \\ | | | | | | "

	)

20 
	#SHELL_BAN4
 " \\ \\/ / | | | \\| | | | | | "

	)

21 
	#SHELL_BAN5
 " / /\\ \\ _| |_ | \\ | | | | | "

	)

22 
	#SHELL_BAN6
 " / / \\ \\ | | | | \\ | \\ -- / "

	)

23 
	#SHELL_BAN7
 " -- -- ----- - - ---- "

	)

24 
	#SHELL_BAN8
 "------------------------------------------"

	)

25 
	#SHELL_BAN9
 "\033[0m\n"

	)

29 
	#SHELL_PROMPT
 "xsh $ "

	)

30 
	#SHELL_STRTMSG
 "WñcomêtÿXöu!\n"

	)

31 
	#SHELL_EXITMSG
 "Shñ»˛o£d\n"

	)

32 
	#SHELL_SYNERRMSG
 "Sy¡axÉº‹\n"

	)

33 
	#SHELL_CREATMSG
 "C™nŸ cª©ê¥o˚ss\n"

	)

34 
	#SHELL_INERRMSG
 "C™nŸ o≥¿fûê%†f‹ i≈ut\n"

	)

35 
	#SHELL_OUTERRMSG
 "C™nŸ o≥¿fûê%†f‹ ouçut\n"

	)

37 
	#SHELL_BGERRMSG
 "C™nŸÑedúe˘ I/O o∏backgroundá buûtö\n"

	)

41 
	#SH_NEWLINE
 '\n'

	)

42 
	#SH_EOF
 '\04'

	)

43 
	#SH_AMPER
 '&'

	)

44 
	#SH_BLANK
 ' '

	)

45 
	#SH_TAB
 '\t'

	)

46 
	#SH_SQUOTE
 '\''

	)

47 
	#SH_DQUOTE
 '"'

	)

48 
	#SH_LESS
 '<'

	)

49 
	#SH_GREATER
 '>'

	)

53 
	#SH_TOK_AMPER
 0

	)

54 
	#SH_TOK_LESS
 1

	)

55 
	#SH_TOK_GREATER
 2

	)

56 
	#SH_TOK_OTHER
 3

	)

62 
	#SHELL_OK
 0

	)

63 
	#SHELL_ERROR
 1

	)

64 
	#SHELL_EXIT
 -3

	)

68 
	scmdít
 {

69 *
	m˙ame
;

70 
boﬁ8
 
	mcbuûtö
;

71 
öt32
 (*
cfunc
)(
	möt32
,*[]);

74 
uöt32
 
ncmd
;

75 c⁄° 
cmdít
 
cmdèb
[];

	@include/shprototypes.h

2 
shñlcmd
 
xsh_¨gecho
 (
öt32
, *[]);

5 
shñlcmd
 
xsh_¨p
 (
öt32
, *[]);

8 
shñlcmd
 
xsh_bögid
 (
öt32
, *[]);

11 
shñlcmd
 
xsh_ˇt
 (
öt32
, *[]);

14 
shñlcmd
 
xsh_˛ór
 (
öt32
, *[]);

17 
shñlcmd
 
xsh_d©e
 (
öt32
, *[]);

20 
shñlcmd
 
xsh_devdump
 (
öt32
, *[]);

23 
shñlcmd
 
xsh_echo
 (
öt32
, *[]);

26 
shñlcmd
 
xsh_ëh°©
 (
öt32
, *[]);

29 
shñlcmd
 
xsh_exô
 (
öt32
, *[]);

32 
shñlcmd
 
xsh_hñp
 (
öt32
, *[]);

35 
shñlcmd
 
xsh_kûl
 (
öt32
, *[]);

38 
shñlcmd
 
xsh_Àd
 (
öt32
, *[]);

41 
shñlcmd
 
xsh_memdump
 (
öt32
, *[]);

44 
shñlcmd
 
xsh_mem°©
 (
öt32
, *[]);

47 
shñlcmd
 
xsh_√töfo
 (
öt32
, *[]);

50 
shñlcmd
 
xsh_nvøm
 (
öt32
, *[]);

53 
shñlcmd
 
xsh_pög
 (
öt32
, *[]);

56 
shñlcmd
 
xsh_ps
 (
öt32
, *[]);

59 
shñlcmd
 
xsh_¶ìp
 (
öt32
, *[]);

62 
shñlcmd
 
xsh_udpdump
 (
öt32
, *[]);

65 
shñlcmd
 
xsh_ud≥cho
 (
öt32
, *[]);

68 
shñlcmd
 
xsh_ud≥£rvî
 (
öt32
, *[]);

71 
shñlcmd
 
xsh_u±ime
 (
öt32
, *[]);

74 
shñlcmd
 
xsh_hñp
 (
öt32
, *[]);

77 
shñlcmd
 
xsh_hñlo
 ();

80 
shñlcmd
 
xsh_œyout
 ();

	@include/stdarg.h

10 
__buûtö_va_li°
 
	tva_li°
;

12 
	#va_c›y
(
d°
, 
§c
Ë
	`__buûtö_va_c›y
(d°, src)

	)

13 
	#va_°¨t
(
œ°
, 
va
Ë
	`__buûtö_va_°¨t
÷a°, va)

	)

14 
	#va_¨g
(
va
, 
ty≥
Ë
	`__buûtö_va_¨g
(va,Åy≥)

	)

15 
	#va_íd
(
va
Ë
	`__buûtö_va_íd
(va)

	)

	@include/stddef.h

6 
	texch™dÀr
;

7 
	tmesßge
;

	@include/stdio.h

6 
öt32
 
_dosˇn
(*,öt32 *, 
	$öt32
 (*)(),

7 
	$öt32
 (*)(), 
öt32
, int32);

8 
öt32
 
	`ssˇnf
(*, *, int32);

9 
öt32
 
	`fsˇnf
(int32, *, int32);

10 
	#sˇnf
(
fmt
, 
¨gs
Ë
	`fsˇnf
(
CONSOLE
, fmt,árgs)

	)

15 
	#°dö
 ((
¥o˘ab
[
cuºpid
]).
¥desc
[0])

	)

16 
	#°dout
 ((
¥o˘ab
[
cuºpid
]).
¥desc
[1])

	)

17 
	#°dîr
 ((
¥o˘ab
[
cuºpid
]).
¥desc
[2])

	)

22 
öt32
 
	`Ârötf
(, *, ...);

23 
öt32
 
	`¥ötf
(const *, ...);

24 
öt32
 
	`•rötf
(*, *, ...);

29 
öt32
 
	`fgëc
();

30 *
	`fgës
(*, 
öt32
, int32);

31 
öt32
 
	`Âutc
(int32, int32);

32 
öt32
 
	`Âuts
(*, int32);

33 
öt32
 
	`putch¨
(öt32 
c
);

34 
öt32
 
	`gëch¨
();

	@include/stdlib.h

8 
	#RAND_MAX
 2147483646

	)

10 
abs
();

11 
œbs
();

12 
©oi
(*);

13 
©ﬁ
(*);

14 
bzîo
(*, );

15 
qs‹t
(*, , , (*)());

16 
	`ønd
();

17 
	`§™d
();

18 *
	`mÆloc
(
nbyãs
);

19 
	`‰ì
(*
pmem
);

	@include/string.h

3 *
°∫˝y
(*, c⁄° *, 
öt32
);

4 *
°∫ˇt
(*, c⁄° *, 
öt32
);

5 
öt32
 
°∫cmp
(const *, const *, int32);

6 *
°rchr
(c⁄° *, 
öt32
);

7 *
°ºchr
(c⁄° *, 
öt32
);

8 *
°r°r
(const *, const *);

9 
öt32
 
°∫Àn
(c⁄° *, 
uöt32
);

10 
°æí
(*
°r
);

	@include/testsuite.h

3 
¥o˚ss
 
ã°_add¨gs
(
boﬁ8
);

4 
¥o˚ss
 
ã°_big¨gs
(
boﬁ8
);

5 
¥o˚ss
 
ã°_scheduÀ
(
boﬁ8
 
vîbo£
);

6 
¥o˚ss
 
ã°_¥ìm±
(
boﬁ8
 
vîbo£
);

7 
¥o˚ss
 
ã°_ªcursi⁄
(
boﬁ8
 
vîbo£
);

8 
¥o˚ss
 
ã°_£m≠h‹e
(
boﬁ8
 
vîbo£
);

9 
¥o˚ss
 
ã°_£m≠h‹e2
(
boﬁ8
 
vîbo£
);

10 
¥o˚ss
 
ã°_£m≠h‹e3
(
boﬁ8
 
vîbo£
);

11 
¥o˚ss
 
ã°_£m≠h‹e4
(
boﬁ8
 
vîbo£
);

12 
¥o˚ss
 
ã°_£m≠h‹e5
(
boﬁ8
 
vîbo£
);

13 
¥o˚ss
 
ã°_libStdio
(
boﬁ8
 
vîbo£
);

15 
ã°Pass
(
boﬁ8
, const *);

16 
ã°Faû
(
boﬁ8
, const *);

17 
ã°Skù
(
boﬁ8
, const *);

18 
ã°Pröt
(
boﬁ8
, const *);

24 
	#Áûif
(
c⁄d
, 
Áûmsg
) \

25 i‡–
c⁄d
 ) { 
	`ã°Faû
(
vîbo£
, 
Áûmsg
); 
∑s£d
 = 
FALSE
; } \

26 { 
	`ã°Pass
(
vîbo£
, ""); }

	)

30 
	sã°ˇ£
 {

31 *
	m«me
;

32 
¥o˚ss
 (*
ã°
Ë(
	mboﬁ8
);

35 
¡e°s
;

36 
ã°ˇ£
 
ã°èb
[];

38 
	#TESTSTK
 8192

	)

	@include/tftp.h

4 
	#TFTP_RRQ
 1

	)

5 
	#TFTP_WRQ
 2

	)

6 
	#TFTP_DATA
 3

	)

7 
	#TFTP_ACK
 4

	)

8 
	#TFTP_ERROR
 5

	)

11 
	#TFTP_ERROR_NOT_DEFINED
 0

	)

12 
	#TFTP_ERROR_FILE_NOT_FOUND
 1

	)

13 
	#TFTP_ERROR_ACCESS_VIOLATION
 2

	)

14 
	#TFTP_ERROR_DISK_FULL
 3

	)

15 
	#TFTP_ERROR_ILLEGAL_OP
 4

	)

16 
	#TFTP_ERROR_UNKNOWN_TRANSFER_ID
 5

	)

17 
	#TFTP_ERROR_FILE_EXISTS
 6

	)

18 
	#TFTP_ERROR_NO_SUCH_USER
 7

	)

20 
	#TFTP_PORT
 69

	)

21 
	#TFTP_MAXNAM
 64

	)

22 
	#TFTP_MAXDATA
 512

	)

23 
	#TFTP_MAXRETRIES
 3

	)

24 
	#TFTP_WAIT
 5000

	)

26 
	#TFTP_FUNC_MAGIC
 0xFFFFFF00

	)

32 #¥agm®
∑ck
(1)

33 
	st·p_msg
 {

34 
uöt16
 
	mtf_›code
;

40 
	mtf_fûemode
[
TFTP_MAXNAM
+10];

46 
uöt16
 
	mtf_dblk
;

47 
	mtf_d©a
[
TFTP_MAXDATA
];

53 
uöt16
 
	mtf_ablk
;

59 
uöt16
 
	mtf_îcode
;

60 
	mtf_îmsg
[
TFTP_MAXDATA
];

64 #¥agm®
∑ck
()

66 
°©us
 
t·pgë
(
uöt32
, const *, *, uint32);

	@include/tty.h

3 
	#TY_OBMINSP
 20

	)

5 
	#TY_EBUFLEN
 20

	)

9 #i‚def 
Nây


10 
	#Nây
 1

	)

12 #i‚def 
TY_IBUFLEN


13 
	#TY_IBUFLEN
 128

	)

15 #i‚def 
TY_OBUFLEN


16 
	#TY_OBUFLEN
 64

	)

21 
	#TY_IMRAW
 'R'

	)

22 
	#TY_IMCOOKED
 'C'

	)

23 
	#TY_IMCBREAK
 'K'

	)

24 
	#TY_OMRAW
 'R'

	)

26 
	sâycblk
 {

27 *
	mtyihód
;

28 *
	mtyôaû
;

29 
	mtyibuff
[
TY_IBUFLEN
];

30 
sid32
 
	mtyi£m
;

31 *
	mtyohód
;

32 *
	mtyŸaû
;

33 
	mtyobuff
[
TY_OBUFLEN
];

34 
sid32
 
	mtyo£m
;

35 *
	mtyehód
;

36 *
	mtyëaû
;

37 
	mtyebuff
[
TY_EBUFLEN
];

38 
	mtyimode
;

39 
boﬁ8
 
	mtyõcho
;

40 
boﬁ8
 
	mtyõback
;

41 
boﬁ8
 
	mtyevis
;

42 
boﬁ8
 
	mtye¸lf
;

43 
boﬁ8
 
	mtyi¸lf
;

44 
boﬁ8
 
	mtyõø£
;

45 
	mtyõø£c
;

46 
	mtyõø£c2
;

47 
boﬁ8
 
	mtyeof
;

48 
	mtyeofch
;

49 
boﬁ8
 
	mtyikûl
;

50 
	mtyikûlc
;

51 
öt32
 
	mtyicurs‹
;

52 
boﬁ8
 
	mtyoÊow
;

53 
boﬁ8
 
	mtyohñd
;

54 
	mtyo°›
;

55 
	mtyo°¨t
;

56 
boﬁ8
 
	mtyo¸lf
;

57 
	mtyifuŒc
;

59 
âycblk
 
âyèb
[];

63 
	#TY_BACKSP
 '\b'

	)

64 
	#TY_BACKSP2
 '\177'

	)

65 
	#TY_BELL
 '\07'

	)

66 
	#TY_EOFCH
 '\04'

	)

67 
	#TY_BLANK
 ' '

	)

68 
	#TY_NEWLINE
 '\n'

	)

69 
	#TY_RETURN
 '\r'

	)

70 
	#TY_STOPCH
 '\023'

	)

71 
	#TY_STRTCH
 '\021'

	)

72 
	#TY_KILLCH
 '\025'

	)

73 
	#TY_UPARROW
 '^'

	)

74 
	#TY_FULLCH
 
TY_BELL


	)

78 
	#TC_NEXTC
 3

	)

79 
	#TC_MODER
 4

	)

80 
	#TC_MODEC
 5

	)

81 
	#TC_MODEK
 6

	)

82 
	#TC_ICHARS
 8

	)

83 
	#TC_ECHO
 9

	)

84 
	#TC_NOECHO
 10

	)

	@include/uart.h

3 
	#UART_BAUD
 115200

	)

4 
	#UART_OUT_IDLE
 0x0016

	)

5 
	#UART_FIFO_SIZE
 16

	)

7 
	#INTEL_QUARK_UART_PCI_DID
 0x0936

	)

8 
	#INTEL_QUARK_UART_PCI_VID
 0x8086

	)

14 
	su¨t_c§eg


16 vﬁ©ûê
uöt32
 
	mbuf„r
;

18 vﬁ©ûê
uöt32
 
	mõr
;

19 vﬁ©ûê
uöt32
 
	miú
;

21 vﬁ©ûê
uöt32
 
	ml¸
;

22 vﬁ©ûê
uöt32
 
	mm¸
;

23 vﬁ©ûê
uöt32
 
	ml§
;

24 vﬁ©ûê
uöt32
 
	mm§
;

25 vﬁ©ûê
uöt32
 
	ms¸
;

30 
	#rbr
 
buf„r


	)

31 
	#thr
 
buf„r


	)

32 
	#f¸
 
iú


	)

33 
	#dŒ
 
buf„r


	)

34 
	#dlm
 
õr


	)

40 
	#UART_DLL
 0x00

	)

42 
	#UART_DLM
 0x01

	)

47 
	#UART_LCR_DLAB
 0x80

	)

48 
	#UART_LCR_8N1
 0x03

	)

52 
	#UART_IER_ERBFI
 0x01

	)

53 
	#UART_IER_ETBEI
 0x02

	)

54 
	#UART_IER_ELSI
 0x04

	)

55 
	#UART_IER_EMSI
 0x08

	)

59 
	#UART_IIR_IRQ
 0x01

	)

60 
	#UART_IIR_IDMASK
 0x0E

	)

61 
	#UART_IIR_MSC
 0x00

	)

62 
	#UART_IIR_THRE
 0x02

	)

63 
	#UART_IIR_RDA
 0x04

	)

64 
	#UART_IIR_RLSI
 0x06

	)

65 
	#UART_IIR_RTO
 0x0C

	)

69 
	#UART_FCR_EFIFO
 0x01

	)

70 
	#UART_FCR_RRESET
 0x02

	)

71 
	#UART_FCR_TRESET
 0x04

	)

72 
	#UART_FCR_TRIG0
 0x00

	)

73 
	#UART_FCR_TRIG1
 0x40

	)

74 
	#UART_FCR_TRIG2
 0x80

	)

75 
	#UART_FCR_TRIG3
 0xC0

	)

79 
	#UART_MCR_OUT2
 0x08

	)

80 
	#UART_MCR_RTS
 0x02

	)

81 
	#UART_MCR_DTR
 0x01

	)

82 
	#UART_MCR_LOOP
 0x10

	)

86 
	#UART_LSR_DR
 0x01

	)

87 
	#UART_LSR_BI
 0x10

	)

88 
	#UART_LSR_THRE
 0x20

	)

89 
	#UART_LSR_TEMT
 0x40

	)

	@include/udp.h

3 
	#UDP_SLOTS
 6

	)

4 
	#UDP_QSIZ
 8

	)

6 
	#UDP_DHCP_CPORT
 68

	)

7 
	#UDP_DHCP_SPORT
 67

	)

11 
	#UDP_FREE
 0

	)

12 
	#UDP_USED
 1

	)

13 
	#UDP_RECV
 2

	)

15 
	#UDP_ANYIF
 -2

	)

18 
	#UDP_HDR_LEN
 8

	)

20 
	sud≥¡ry
 {

21 
öt32
 
	mud°©e
;

22 
uöt32
 
	mudªmù
;

24 
uöt16
 
	mudªmp‹t
;

25 
uöt16
 
	mudlo˝‹t
;

26 
öt32
 
	mudhód
;

27 
öt32
 
	mudèû
;

28 
öt32
 
	mudcou¡
;

29 
pid32
 
	mudpid
;

30 
√çackë
 *
	mudqueue
[
UDP_QSIZ
];

33 
ud≥¡ry
 
ud±ab
[];

	@include/xinu.h

3 
	~<kî√l.h
>

4 
	~<c⁄f.h
>

5 
	~<¥o˚ss.h
>

6 
	~<g¥o˚ss.h
>

7 
	~<queue.h
>

8 
	~<ªsched.h
>

9 
	~<m¨k.h
>

10 
	~<£m≠h‹e.h
>

11 
	~<mem‹y.h
>

12 
	~<buÂoﬁ.h
>

13 
	~<h≥t.h
>

14 
	~<˛ock.h
>

15 
	~<p‹ts.h
>

16 
	~<u¨t.h
>

17 
	~<ây.h
>

18 
	~<devi˚.h
>

19 
	~<öãºu±.h
>

20 
	~<≠ic.h
>

21 
	~<fûe.h
>

22 
	~<rfûesys.h
>

23 
	~<rdisksys.h
>

24 
	~<lfûesys.h
>

25 
	~<ëhî.h
>

26 
	~<√t.h
>

27 
	~<ù.h
>

28 
	~<¨p.h
>

29 
	~<udp.h
>

30 
	~<dh˝.h
>

31 
	~<icmp.h
>

32 
	~<t·p.h
>

33 
	~<«me.h
>

34 
	~<shñl.h
>

35 
	~<d©e.h
>

36 
	~<¥ŸŸy≥s.h
>

37 
	~<dñay.h
>

38 
	~<pci.h
>

39 
	~<qu¨k_ëh.h
>

40 
	~<qu¨k_pd©.h
>

41 
	~<qu¨k_úq.h
>

42 
	~<mu…iboŸ.h
>

43 
	~<°dio.h
>

44 
	~<°rög.h
>

46 
	#XTEST
 1

	)

47 
	#XDEBUG
 0

	)

50 #i‡
XTEST


51 
	#XTEST_KPRINTF
(...Ë
	`k¥ötf
(
__VA_ARGS__
)

	)

53 
	#XTEST_KPRINTF
(...)

	)

56 #i‡
XDEBUG


57 
	#XDEBUG_KPRINTF
(...Ë
	`k¥ötf
(
__VA_ARGS__
)

	)

59 
	#XDEBUG_KPRINTF
(...)

	)

	@lib/abs.c

7 
	$abs
(

8 
¨g


11 i‡(
¨g
 < 0)

12 
¨g
 = -arg;

13  (
¨g
);

14 
	}
}

	@lib/atoi.c

7 
	$©oi
(

8 *
p


11 
n
 = 0, 
f
 = 0;

13 ;; 
p
++)

15 *
p
)

21 
f
++;

23 
p
++;

28 *
p
 >= '0' && *p <= '9')

30 
n
 =Ç * 10 + *
p
++ - '0';

33  (
f
 ? -
n
 :Ç);

34 
	}
}

	@lib/atol.c

7 
	$©ﬁ
(

8 *
p


11 
n
;

12 
f
;

14 
n
 = 0;

15 
f
 = 0;

16 ;; 
p
++)

18 *
p
)

24 
f
++;

26 
p
++;

30 *
p
 >= '0' && *p <= '9')

32 
n
 =Ç * 10 + *
p
++ - '0';

34  (
f
 ? -
n
 :Ç);

35 
	}
}

	@lib/bzero.c

7 
	$bzîo
(

8 *
p
,

9 
Àn


12 
n
;

13 *
pch
 = (*)
p
;

15 i‡((
n
 = 
Àn
) <= 0)

21 *
pch
++ = 0;

23 --
n
);

24 
	}
}

	@lib/ctype_.c

3 
	~<˘y≥.h
>

9 c⁄° 
	g_˘y≥_
[] = {

11 
_C
, _C, _C, _C, _C, _C, _C, _C,

12 
_C
, 
_S
, _S, _S, _S, _S, _C, _C,

13 
_C
, _C, _C, _C, _C, _C, _C, _C,

14 
_C
, _C, _C, _C, _C, _C, _C, _C,

15 
_S
, 
_P
, _P, _P, _P, _P, _P, _P,

16 
_P
, _P, _P, _P, _P, _P, _P, _P,

17 
_N
, _N, _N, _N, _N, _N, _N, _N,

18 
_N
, _N, 
_P
, _P, _P, _P, _P, _P,

19 
_P
, 
_U
 | 
_X
, _U | _X, _U | _X, _U | _X, _U | _X, _U | _X,

20 
_U
,

21 
_U
, _U, _U, _U, _U, _U, _U, _U,

22 
_U
, _U, _U, _U, _U, _U, _U, _U,

23 
_U
, _U, _U, 
_P
, _P, _P, _P, _P,

24 
_P
, 
_L
 | 
_X
, _L | _X, _L | _X, _L | _X, _L | _X, _L | _X,

25 
_L
,

26 
_L
, _L, _L, _L, _L, _L, _L, _L,

27 
_L
, _L, _L, _L, _L, _L, _L, _L,

28 
_L
, _L, _L, 
_P
, _P, _P, _P, 
_C


	@lib/doprnt.c

3 
	~<°d¨g.h
>

5 
	#MAXSTR
 80

	)

6 
	#NULL
 0

	)

7 
	#PRECISION
 6

	)

9 
_¥é10
(
num
, *
°r
);

10 
_¥é8
(
num
, *
°r
);

11 
_¥tX16
(
num
, *
°r
);

12 
_¥é16
(
num
, *
°r
);

13 
_¥é2
(
num
, *
°r
);

14 
_¥tdbl
(
num
, 
¥ecisi⁄
, *
°r
);

22 
	$_d›∫t
(

23 *
fmt
,

24 
va_li°
 
≠
,

25 (*
func
)()

28 
c
;

29 
i
;

30 
f
;

31 *
°r
;

32 
°rög
[20];

35 
Àngth
;

36 
fûl
;

37 
À·ju°
;

38 
fmax
, 
fmö
;

39 
Àadög
;

40 
sign
;

41 
digô1
;

42 
œrg
;

43 
d¨g
;

48 (
c
 = *
fmt
++) != '%')

50 i‡(
c
 == '\0')

54 (*
func
Ë(
c
);

57 i‡(*
fmt
 == '%')

59 (*
func
Ë(*
fmt
++);

63 i‡((
À·ju°
 = ((*
fmt
 == '-')) ? 1 : 0))

65 
fmt
++;

68 
fûl
 = (*
fmt
 == '0') ? *fmt++ : ' ';

71 
fmö
 = 0;

72 i‡(*
fmt
 == '*')

74 
fmö
 = 
	`va_¨g
(
≠
, );

76 ++
fmt
;

80 '0' <*
fmt
 && *fmt <= '9')

82 
fmö
 = fmö * 10 + *
fmt
++ - '0';

86 
fmax
 = 0;

87 i‡(*
fmt
 == '.')

89 i‡(*(++
fmt
) == '*')

91 
fmax
 = 
	`va_¨g
(
≠
, );

92 ++
fmt
;

96 '0' <*
fmt
 && *fmt <= '9')

98 
fmax
 = fmax * 10 + *
fmt
++ - '0';

103 
°r
 = 
°rög
;

104 i‡((
f
 = *
fmt
++) == '\0')

106 (*
func
) ('%');

109 
sign
 = '\0';

111 
f
)

114 
°rög
[0] = 
	`va_¨g
(
≠
, );

115 
°rög
[1] = '\0';

116 
fmax
 = 0;

117 
fûl
 = ' ';

121 
°r
 = 
	`va_¨g
(
≠
, *);

123 i‡(
NULL
 =
°r
)

125 
°r
 = "(null)";

127 
fûl
 = ' ';

131 
œrg
 = 
	`va_¨g
(
≠
, );

133 i‡(
œrg
 < 0)

135 
sign
 = '-';

137 
	`_¥é10
(
œrg
, 
°r
);

141 
d¨g
 = 
	`va_¨g
(
≠
, );

143 i‡(
d¨g
 < 0)

145 
sign
 = '-';

147 
	`_¥tdbl
(
d¨g
, 
PRECISION
, 
°r
);

151 
digô1
 = '\0';

156 
œrg
 = 
	`va_¨g
(
≠
, );

158 
œrg
 < 0)

160 
œrg
 -= 1000000000L;

161 ++
digô1
;

163 
	`_¥é10
(
œrg
, 
°r
);

164 
°r
[0] +
digô1
;

165 
fmax
 = 0;

169 
œrg
 = 
	`va_¨g
(
≠
, );

171 
	`_¥é8
(
œrg
, 
°r
);

172 
fmax
 = 0;

176 
œrg
 = 
	`va_¨g
(
≠
, );

178 
	`_¥tX16
(
œrg
, 
°r
);

179 
fmax
 = 0;

183 
œrg
 = 
	`va_¨g
(
≠
, );

185 
	`_¥é16
(
œrg
, 
°r
);

186 
fmax
 = 0;

190 
œrg
 = 
	`va_¨g
(
≠
, );

192 
	`_¥tX16
(
œrg
, 
°r
);

194 
œrg
 = 
	`va_¨g
(
≠
, );

196 
	`_¥tX16
(
œrg
, 
°r
 + 8);

198 
fmax
 = 0;

202 
œrg
 = 
	`va_¨g
(
≠
, );

204 
	`_¥é16
(
œrg
, 
°r
);

206 
œrg
 = 
	`va_¨g
(
≠
, );

208 
	`_¥é16
(
œrg
, 
°r
 + 8);

210 
fmax
 = 0;

214 
œrg
 = 
	`va_¨g
(
≠
, );

216 
	`_¥é2
(
œrg
, 
°r
);

217 
fmax
 = 0;

221 (*
func
Ë(
f
);

224 
Àngth
 = 0; 
°r
[length] != '\0';Üength++)

227 i‡(
fmö
 > 
MAXSTR
 || fmin < 0)

229 
fmö
 = 0;

231 i‡(
fmax
 > 
MAXSTR
 || fmax < 0)

233 
fmax
 = 0;

235 
Àadög
 = 0;

236 i‡(
fmax
 !0 || 
fmö
 != 0)

238 i‡(
fmax
 != 0)

240 i‡(
Àngth
 > 
fmax
)

242 
Àngth
 = 
fmax
;

245 i‡(
fmö
 != 0)

247 
Àadög
 = 
fmö
 - 
Àngth
;

249 i‡(
sign
 == '-')

251 --
Àadög
;

254 i‡(
sign
 ='-' && 
fûl
 == '0')

256 (*
func
Ë(
sign
);

258 i‡(
À·ju°
 == 0)

260 
i
 = 0; i < 
Àadög
; i++)

262 (*
func
Ë(
fûl
);

265 i‡(
sign
 ='-' && 
fûl
 == ' ')

267 (*
func
Ë(
sign
);

269 
i
 = 0; i < 
Àngth
; i++)

271 (*
func
Ë(
°r
[
i
]);

273 i‡(
À·ju°
 != 0)

275 
i
 = 0; i < 
Àadög
; i++)

276 (*
func
Ë(
fûl
);

280 
	}
}

286 
	$_¥é10
(

287 
num
,

288 *
°r


291 
i
;

292 
ãmp
[11];

294 
ãmp
[0] = '\0';

295 
ãmp
[1] = ((
num
<0) ? -(num%10) : (num%10)) + '0';

296 
num
 /= (num<0) ? -10 : 10;

297 
i
 = 2; i <= 10; i++) {

298 
ãmp
[
i
] = 
num
 % 10 + '0';

299 
num
 /= 10;

301 
i
 = 10; 
ãmp
[i] == '0'; i--);

302 i‡(
i
 == 0)

303 
i
++;

304 
i
 >= 0)

305 *
°r
++ = 
ãmp
[
i
--];

306 
	}
}

312 
	$_¥é8
(

313 
num
,

314 *
°r


317 
i
;

318 
ãmp
[12];

320 
ãmp
[0] = '\0';

321 
i
 = 1; i <= 11; i++)

323 
ãmp
[
i
] = (
num
 & 07) + '0';

324 
num
 =Çum >> 3;

326 
ãmp
[11] &= '3';

327 
i
 = 11; 
ãmp
[i] == '0'; i--);

328 i‡(
i
 == 0)

329 
i
++;

330 
i
 >= 0)

331 *
°r
++ = 
ãmp
[
i
--];

332 
	}
}

338 
	$_¥é16
(

339 
num
,

340 *
°r


343 
i
;

344 
ãmp
[9];

346 
ãmp
[0] = '\0';

347 
i
 = 1; i <= 8; i++)

349 
ãmp
[
i
] = "0123456789abcdef"[
num
 & 0x0F];

350 
num
 =Çum >> 4;

352 
i
 = 8; 
ãmp
[i] == '0'; i--);

353 i‡(
i
 == 0)

354 
i
++;

355 
i
 >= 0)

356 *
°r
++ = 
ãmp
[
i
--];

357 
	}
}

363 
	$_¥tX16
(

364 
num
,

365 *
°r


368 
i
;

369 
ãmp
[9];

371 
ãmp
[0] = '\0';

372 
i
 = 1; i <= 8; i++)

374 
ãmp
[
i
] = "0123456789ABCDEF"[
num
 & 0x0F];

375 
num
 =Çum >> 4;

377 
i
 = 8; 
ãmp
[i] == '0'; i--);

378 i‡(
i
 == 0)

379 
i
++;

380 
i
 >= 0)

381 *
°r
++ = 
ãmp
[
i
--];

382 
	}
}

388 
	$_¥é2
(

389 
num
,

390 *
°r


393 
i
;

394 
ãmp
[35];

396 
ãmp
[0] = '\0';

397 
i
 = 1; i <= 32; i++)

399 
ãmp
[
i
] = ((
num
 % 2) == 0) ? '0' : '1';

400 
num
 =Çum >> 1;

402 
i
 = 32; 
ãmp
[i] == '0'; i--);

403 i‡(
i
 == 0)

404 
i
++;

405 
i
 >= 0)

406 *
°r
++ = 
ãmp
[
i
--];

407 
	}
}

413 
	$_¥tdbl
(

414 
num
,

415 
¥ecisi⁄
,

416 *
°r


419 
i
,
mp
;

420 
w
,
p
;

422 
i
 = 0, 
mp
 = 1; i < 
¥ecisi⁄
; i++, mp *= 10);

424 
num
 = ((num<0) ? -(num) : (num));

425 
w
 = ()(
num
);

426 
p
 = ()(
num
 * 
mp
Ë- ()(
w
 * mp);

428 
	`_¥é10
(
w
, 
°r
);

429 *
°r
 != '\0') { str++; }

430 *
°r
++ = '.';

431 
	`_¥é10
(
p
, 
°r
);

432 
	}
}

	@lib/doscan.c

5 
	~<˘y≥.h
>

7 
	#EOF
 (-2)

	)

8 
	#NULL
 0

	)

10 
	#SPC
 01

	)

11 
	#STP
 02

	)

13 
	#SHORT
 0

	)

14 
	#REGULAR
 1

	)

15 
	#LONG
 2

	)

17 
_önum
(**, , , , (*
gëc
) (, ),

18 (*
ungëc
) (, ), , , *);

19 
	`_ö°r
(*, , , (*
gëc
) (, ),

20 (*
ungëc
) (, ), , , *);

21 *
	`_gëc˛
(*);

23 
_s˘ab
[128] = {

25 0, 
SPC
, SPC, 0, 0, 0, 0, 0,

28 
SPC
, 0, 0, 0, 0, 0, 0, 0,

32 
	}
};

38 
	$_dosˇn
(

39 *
fmt
,

40 **
¨gp
,

41 (*
gëch
)(, ),

42 (*
ungëch
)(, ),

43 
¨g1
,

44 
¨g2


47 
ch
;

48 
nm©ch
, 
Àn
, 
ch1
;

49 **
±r
, 
fûìnded
, 
size
;

51 
nm©ch
 = 0;

52 
fûìnded
 = 0;

55 
ch
 = *
fmt
++)

58  (
nm©ch
);

60 i‡((
ch
 = *
fmt
++) == '%')

62 
def
;

64 
±r
 = 0;

65 i‡(
ch
 != '*')

67 
±r
 = 
¨gp
++;

71 
ch
 = *
fmt
++;

73 
Àn
 = 0;

74 
size
 = 
REGULAR
;

75 
	`isdigô
(
ch
))

77 
Àn
 =Üí * 10 + 
ch
 - '0';

78 
ch
 = *
fmt
++;

80 i‡(
Àn
 == 0)

82 
Àn
 = 30000;

84 i‡(
ch
 == 'l')

86 
ch
 = *
fmt
++;

87 
size
 = 
LONG
;

89 i‡(
ch
 == 'h')

91 
size
 = 
SHORT
;

92 
ch
 = *
fmt
++;

94 i‡(
ch
 == '[')

96 
fmt
 = 
	`_gëc˛
(fmt);

98 i‡(
	`isuµî
(
ch
))

100 
ch
 = 
	`tﬁowî
(ch);

101 
size
 = 
LONG
;

103 i‡(
ch
 == '\0')

107 i‡(
_önum


108 (
±r
, 
ch
, 
Àn
, 
size
,

109 
gëch
, 
ungëch
, 
¨g1
, 
¨g2
, &
fûìnded
Ë&& 
±r
)

111 
nm©ch
++;

113 i‡(
fûìnded
)

115  (
nm©ch
 ?Çmatch : -1);

122 (
ch1
 =

123 (*
gëch
Ë(
¨g1
,

124 
¨g2
)Ë=' ' || 
ch1
 == '\t' || ch1 == '\n')

127 i‡(
ch1
 !
EOF
)

129 (*
ungëch
Ë(
¨g1
, 
¨g2
);

134 
def
:

135 
ch1
 = (*
gëch
Ë(
¨g1
, 
¨g2
);

136 i‡(
ch1
 !
ch
)

138 i‡(
ch1
 =
EOF
)

142 (*
ungëch
Ë(
¨g1
, 
¨g2
);

143  
nm©ch
;

147 
	}
}

153 
	$_önum
(

154 **
±r
,

155 
ty≥
,

156 
Àn
,

157 
size
,

158 (*
gëch
)(, ),

159 (*
ungëch
)(, ),

160 
¨g1
,

161 
¨g2
,

162 *
eoÂå


165 
	`©of
(*
p
);

166 *
≈
;

167 
numbuf
[64];

168 
c
, 
ba£
;

169 
√gÊg
, 
c1
, 
ndigô
;

170 
lcvÆ
;

172 i‡(
ty≥
 == 'c' ||Åype == 's' ||Åype == '[')

174  (
_ö°r


175 (
±r
 ? *(**Ìå : (*)
NULL
, 
ty≥
, 
Àn
, 
gëch
,

176 
ungëch
, 
¨g1
, 
¨g2
, 
eoÂå
));

178 
lcvÆ
 = 0;

179 
ndigô
 = 0;

180 
ba£
 = 10;

181 i‡(
ty≥
 == 'o')

183 
ba£
 = 8;

185 i‡(
ty≥
 == 'x')

187 
ba£
 = 16;

189 
≈
 = 
numbuf
;

190 
√gÊg
 = 0;

191 (
c
 = (*
gëch
Ë(
¨g1
, 
¨g2
)) == ' ' || c == '\t' || c == '\n')

194 i‡(
c
 == '-')

196 
√gÊg
++;

197 *
≈
++ = 
c
;

198 
c
 = (*
gëch
Ë(
¨g1
, 
¨g2
);

199 
Àn
--;

201 i‡(
c
 == '+')

203 
Àn
--;

204 
c
 = (*
gëch
Ë(
¨g1
, 
¨g2
);

207 ; --
Àn
 >0; *
≈
++ = 
c
, c = (*
gëch
Ë(
¨g1
, 
¨g2
))

209 i‡(((
	`isdigô
(
c
)Ë|| 
ba£
 == 16)

210 && (('a' <
c
 && c <= 'f') || ('A' <= c && c <= 'F')))

212 
ndigô
++;

213 i‡(
ba£
 == 8)

215 
lcvÆ
 <<= 3;

217 i‡(
ba£
 == 10)

219 
lcvÆ
 = ((lcval << 2) +Ücval) << 1;

223 
lcvÆ
 <<= 4;

225 
c1
 = 
c
;

226 i‡('0' <
c
 && c <= '9')

228 
c
 -= '0';

230 i‡('a' <
c
 && c <= 'f')

232 
c
 -= 'a' - 10;

236 
c
 -= 'A' - 10;

238 
lcvÆ
 +
c
;

239 
c
 = 
c1
;

247 i‡(
√gÊg
)

249 
lcvÆ
 = -lcval;

251 i‡(
c
 !
EOF
)

253 (*
ungëch
Ë(
¨g1
, 
¨g2
);

254 *
eoÂå
 = 0;

258 *
eoÂå
 = 1;

260 i‡(
±r
 =
NULL
 || 
≈
 =
numbuf
)

264 *
≈
++ = 0;

265 
size
)

267 
SHORT
:

268 **(**)
±r
 = 
lcvÆ
;

271 
REGULAR
:

272 **(**)
±r
 = 
lcvÆ
;

275 
LONG
:

276 **(**)
±r
 = 
lcvÆ
;

280 
	}
}

286 
	$_ö°r
(

287 *
±r
,

288 
ty≥
,

289 
Àn
,

290 (*
gëch
)(, ),

291 (*
ungëch
)(, ),

292 
¨g1
,

293 
¨g2
,

294 *
eoÂå


297 
ch
;

298 *
›å
;

299 
ign°p
;

301 *
eoÂå
 = 0;

302 
›å
 = 
±r
;

303 i‡(
ty≥
 ='c' && 
Àn
 == 30000)

305 
Àn
 = 1;

307 
ign°p
 = 0;

308 i‡(
ty≥
 == 's')

310 
ign°p
 = 
SPC
;

312 
_s˘ab
[
ch
 = (*
gëch
Ë(
¨g1
, 
¨g2
)] & 
ign°p
)

314 i‡(
ch
 =
EOF
)

319 
ign°p
 = 
SPC
;

320 i‡(
ty≥
 == 'c')

322 
ign°p
 = 0;

324 i‡(
ty≥
 == '[')

326 
ign°p
 = 
STP
;

328 
ch
 !
EOF
 && (
_s˘ab
[ch] & 
ign°p
) == 0)

330 i‡(
±r
)

332 *
±r
++ = 
ch
;

334 i‡(--
Àn
 <= 0)

338 
ch
 = (*
gëch
Ë(
¨g1
, 
¨g2
);

340 i‡(
ch
 !
EOF
)

342 i‡(
Àn
 > 0)

344 (*
ungëch
Ë(
¨g1
, 
¨g2
);

346 *
eoÂå
 = 0;

350 *
eoÂå
 = 1;

352 i‡(
±r
 &&Öå !
›å
)

354 i‡(
ty≥
 != 'c')

356 *
±r
++ = '\0';

361 
	}
}

367 *
	$_gëc˛
(

368 *
s


371 
c
, 
t
;

373 
t
 = 0;

374 i‡(*
s
 == '^')

376 
t
++;

377 
s
++;

379 
c
 = 0; c < 128; c++)

381 i‡(
t
)

383 
_s˘ab
[
c
] &~
STP
;

387 
_s˘ab
[
c
] |
STP
;

390 ((
c
 = *
s
++) & 0177) != ']')

392 i‡(
t
)

394 
_s˘ab
[
c
++] |
STP
;

398 
_s˘ab
[
c
++] &~
STP
;

400 i‡(
c
 == 0)

402  (--
s
);

405  
s
;

406 
	}
}

	@lib/fdoprnt.c

3 
	~<°d¨g.h
>

5 
	#MAXSTR
 80

	)

6 
	#NULL
 0

	)

8 
_¥é10
(
num
, *
°r
);

9 
_¥é8
(
num
, *
°r
);

10 
_¥tX16
(
num
, *
°r
);

11 
_¥é16
(
num
, *
°r
);

12 
_¥é2
(
num
, *
°r
);

20 
	$_fd›∫t
(

21 *
fmt
,

22 
va_li°
 
≠
,

23 (*
func
)(, ),

24 
Árg


27 
c
;

28 
i
;

29 
f
;

30 *
°r
;

31 
°rög
[20];

34 
Àngth
;

35 
fûl
;

36 
À·ju°
;

37 
fmax
, 
fmö
;

38 
Àadög
;

39 
sign
;

40 
digô1
;

41 
œrg
;

46 (
c
 = *
fmt
++) != '%')

48 i‡(
c
 == '\0')

52 (*
func
Ë(
Árg
, 
c
);

55 i‡(*
fmt
 == '%')

57 (*
func
Ë(
Árg
, *
fmt
++);

61 i‡((
À·ju°
 = ((*
fmt
 == '-')) ? 1 : 0))

63 
fmt
++;

66 
fûl
 = (*
fmt
 == '0') ? *fmt++ : ' ';

69 
fmö
 = 0;

70 i‡(*
fmt
 == '*')

72 
fmö
 = 
	`va_¨g
(
≠
, );

74 ++
fmt
;

78 '0' <*
fmt
 && *fmt <= '9')

80 
fmö
 = fmö * 10 + *
fmt
++ - '0';

84 
fmax
 = 0;

85 i‡(*
fmt
 == '.')

87 i‡(*(++
fmt
) == '*')

89 
fmax
 = 
	`va_¨g
(
≠
, );

90 ++
fmt
;

94 '0' <*
fmt
 && *fmt <= '9')

96 
fmax
 = fmax * 10 + *
fmt
++ - '0';

101 
°r
 = 
°rög
;

102 i‡((
f
 = *
fmt
++) == '\0')

104 (*
func
Ë(
Árg
, '%');

107 
sign
 = '\0';

109 
f
)

112 
°rög
[0] = 
	`va_¨g
(
≠
, );

113 
°rög
[1] = '\0';

114 
fmax
 = 0;

115 
fûl
 = ' ';

119 
°r
 = 
	`va_¨g
(
≠
, *);

121 i‡(
NULL
 =
°r
)

123 
°r
 = "(null)";

125 
fûl
 = ' ';

129 
œrg
 = 
	`va_¨g
(
≠
, );

131 i‡(
œrg
 < 0)

133 
sign
 = '-';

134 
œrg
 = -larg;

136 
	`_¥é10
(
œrg
, 
°r
);

140 
digô1
 = '\0';

145 
œrg
 = 
	`va_¨g
(
≠
, );

147 
œrg
 < 0)

149 
œrg
 -= 1000000000L;

150 ++
digô1
;

152 
	`_¥é10
(
œrg
, 
°r
);

153 
°r
[0] +
digô1
;

154 
fmax
 = 0;

158 
œrg
 = 
	`va_¨g
(
≠
, );

160 
	`_¥é8
(
œrg
, 
°r
);

161 
fmax
 = 0;

165 
œrg
 = 
	`va_¨g
(
≠
, );

167 
	`_¥tX16
(
œrg
, 
°r
);

168 
fmax
 = 0;

172 
œrg
 = 
	`va_¨g
(
≠
, );

174 
	`_¥é16
(
œrg
, 
°r
);

175 
fmax
 = 0;

179 
œrg
 = 
	`va_¨g
(
≠
, );

181 
	`_¥é2
(
œrg
, 
°r
);

182 
fmax
 = 0;

186 (*
func
Ë(
Árg
, 
f
);

189 
Àngth
 = 0; 
°r
[length] != '\0';Üength++)

192 i‡(
fmö
 > 
MAXSTR
 || fmin < 0)

194 
fmö
 = 0;

196 i‡(
fmax
 > 
MAXSTR
 || fmax < 0)

198 
fmax
 = 0;

200 
Àadög
 = 0;

201 i‡(
fmax
 !0 || 
fmö
 != 0)

203 i‡(
fmax
 != 0)

205 i‡(
Àngth
 > 
fmax
)

207 
Àngth
 = 
fmax
;

210 i‡(
fmö
 != 0)

212 
Àadög
 = 
fmö
 - 
Àngth
;

214 i‡(
sign
 == '-')

216 --
Àadög
;

219 i‡(
sign
 ='-' && 
fûl
 == '0')

221 (*
func
Ë(
Árg
, 
sign
);

223 i‡(
À·ju°
 == 0)

225 
i
 = 0; i < 
Àadög
; i++)

227 (*
func
Ë(
Árg
, 
fûl
);

230 i‡(
sign
 ='-' && 
fûl
 == ' ')

232 (*
func
Ë(
Árg
, 
sign
);

234 
i
 = 0; i < 
Àngth
; i++)

236 (*
func
Ë(
Árg
, 
°r
[
i
]);

238 i‡(
À·ju°
 != 0)

240 
i
 = 0; i < 
Àadög
; i++)

241 (*
func
Ë(
Árg
, 
fûl
);

245 
	}
}

251 
	$_¥é10
(

252 
num
,

253 *
°r


256 
i
;

257 
ãmp
[11];

259 
ãmp
[0] = '\0';

260 
i
 = 1; i <= 10; i++)

262 
ãmp
[
i
] = 
num
 % 10 + '0';

263 
num
 /= 10;

265 
i
 = 10; 
ãmp
[i] == '0'; i--);

266 i‡(
i
 == 0)

267 
i
++;

268 
i
 >= 0)

269 *
°r
++ = 
ãmp
[
i
--];

270 
	}
}

276 
	$_¥é8
(

277 
num
,

278 *
°r


281 
i
;

282 
ãmp
[12];

284 
ãmp
[0] = '\0';

285 
i
 = 1; i <= 11; i++)

287 
ãmp
[
i
] = (
num
 & 07) + '0';

288 
num
 =Çum >> 3;

290 
ãmp
[11] &= '3';

291 
i
 = 11; 
ãmp
[i] == '0'; i--);

292 i‡(
i
 == 0)

293 
i
++;

294 
i
 >= 0)

295 *
°r
++ = 
ãmp
[
i
--];

296 
	}
}

302 
	$_¥é16
(

303 
num
,

304 *
°r


307 
i
;

308 
ãmp
[9];

310 
ãmp
[0] = '\0';

311 
i
 = 1; i <= 8; i++)

313 
ãmp
[
i
] = "0123456789abcdef"[
num
 & 0x0F];

314 
num
 =Çum >> 4;

316 
i
 = 8; 
ãmp
[i] == '0'; i--);

317 i‡(
i
 == 0)

318 
i
++;

319 
i
 >= 0)

320 *
°r
++ = 
ãmp
[
i
--];

321 
	}
}

327 
	$_¥tX16
(

328 
num
,

329 *
°r


332 
i
;

333 
ãmp
[9];

335 
ãmp
[0] = '\0';

336 
i
 = 1; i <= 8; i++)

338 
ãmp
[
i
] = "0123456789ABCDEF"[
num
 & 0x0F];

339 
num
 =Çum >> 4;

341 
i
 = 8; 
ãmp
[i] == '0'; i--);

342 i‡(
i
 == 0)

343 
i
++;

344 
i
 >= 0)

345 *
°r
++ = 
ãmp
[
i
--];

346 
	}
}

352 
	$_¥é2
(

353 
num
,

354 *
°r


357 
i
;

358 
ãmp
[35];

360 
ãmp
[0] = '\0';

361 
i
 = 1; i <= 32; i++)

363 
ãmp
[
i
] = ((
num
 % 2) == 0) ? '0' : '1';

364 
num
 =Çum >> 1;

366 
i
 = 32; 
ãmp
[i] == '0'; i--);

367 i‡(
i
 == 0)

368 
i
++;

369 
i
 >= 0)

370 *
°r
++ = 
ãmp
[
i
--];

371 
	}
}

	@lib/fgetc.c

3 
gëc
();

5 #i‚def 
EOF


6 
	#EOF
 (-2)

	)

14 
	$fgëc
(

15 
dev


18 
ªsu…
 = ()
	`gëc
(
dev
);

20 i‡(0 > 
ªsu…
)

22  
EOF
;

26  
ªsu…
;

28 
	}
}

	@lib/fgets.c

3 #i‚def 
NULL


4 
	#NULL
 0

	)

6 
gëc
();

12 *
	$fgës
(

13 *
s
,

14 
n
,

15 
dev


18 
c
 = 0;

19 *
cs
;

21 
cs
 = 
s
;

25 (--
n
 > 0Ë&& ((
c
 = 
	`gëc
(
dev
)) >= 0))

27 *
cs
++ = 
c
;

28 i‡(('\n' =
c
) || ('\r' == c))

35 i‡((
c
 < 0Ë&& (
cs
 =
s
))

37  
NULL
;

41 *
cs
++ = '\0';

42  
s
;

43 
	}
}

	@lib/fprintf.c

3 
	~<xöu.h
>

4 
	~<°d¨g.h
>

6 
_fd›∫t
(*, 
va_li°
, (*)(
did32
, ), );

14 
	$Ârötf
(

15 
dev
,

16 *
fmt
,

20 
va_li°
 
≠
;

21 
	`putc
(
did32
, );

23 
	`va_°¨t
(
≠
, 
fmt
);

24 
	`_fd›∫t
(
fmt
, 
≠
, 
putc
, 
dev
);

25 
	`va_íd
(
≠
);

28 
	}
}

	@lib/fputc.c

3 
putc
(, );

5 #i‚def 
SYSERR


6 
	#SYSERR
 (-1)

	)

8 #i‚def 
EOF


9 
	#EOF
 (-2)

	)

17 
	$Âutc
(

18 
c
,

19 
dev


22 i‡(
SYSERR
 =()
	`putc
(
dev
, 
c
))

24  
EOF
;

28  
c
;

30 
	}
}

	@lib/fputs.c

3 
putc
(, );

10 
	$Âuts
(

11 *
s
,

12 
dev


15 
r
 = 0, 
c
;

17 (
c
 = (*
s
++)))

19 
r
 = 
	`putc
(
dev
, 
c
);

21  
r
;

22 
	}
}

	@lib/fscanf.c

3 #i‚def 
EMPTY


4 
	#EMPTY
 (-1)

	)

6 #i‚def 
EOF


7 
	#EOF
 (-2)

	)

10 
gëc
();

12 
gëch
(, );

13 
ungëch
(, );

14 
_dosˇn
(*, **,

15 (*
gëc
Ë(, ), (*
ungëc
) (, ), ,

23 
	$fsˇnf
(

24 
dev
,

25 *
fmt
,

26 
¨gs


29 
buf
;

31 
buf
 = 
EMPTY
;

32  (
_dosˇn


33 (
fmt
, (**)&
¨gs
, 
gëch
, 
ungëch
, 
dev
, ()()&
buf
));

34 
	}
}

40 
	$gëch
(

41 
dev
,

42 
abuf


45 *
buf
 = (*)
abuf
;

47 i‡(*
buf
 !
EOF
 && *bu‡!
EMPTY
)

49 *
buf
 = 
	`gëc
(
dev
);

53  (*
buf
);

54 
	}
}

60 
	$ungëch
(

61 
dev
,

62 
abuf


65 *
buf
 = (*)
abuf
;

67 *
buf
 = 
EMPTY
;

68  (*
buf
);

69 
	}
}

	@lib/getchar.c

3 
	~<xöu.h
>

4 
	~<°dio.h
>

10 
	$gëch¨
(

14  
	`fgëc
(
°dö
);

15 
	}
}

	@lib/labs.c

7 
	$œbs
(

8 
¨g


11 i‡(
¨g
 < 0)

12 
¨g
 = -arg;

13  (
¨g
);

14 
	}
}

	@lib/memchr.c

	@lib/memcmp.c

9 
	$memcmp
(

10 c⁄° *
s1
,

11 c⁄° *
s2
,

12 
n


15 c⁄° *
c1
;

16 c⁄° *
c2
;

18 
c1
 = 
s1
, 
c2
 = 
s2
; 
n
 > 0;Ç--, c1++, c2++)

20 i‡(*
c1
 !*
c2
)

22  (()*
c1
Ë- (()*
c2
);

26 
	}
}

	@lib/memcpy.c

8 *
	$mem˝y
(

9 *
s
,

10 c⁄° *
˘
,

11 
n


14 if(
n
 <= 0) {

15  
s
;

18 
asm
 volatile (

24 : "S" (
˘
), "D" (
s
), "c" (
n
)

27  
s
;

28 
	}
}

	@lib/memset.c

8 *
	$mem£t
(

9 *
s
,

10 
c
,

11 
n


14 
i
;

15 *
˝
 = (*)
s
;

17 
i
 = 0; i < 
n
; i++)

19 *
˝
 = ()
c
;

20 
˝
++;

22  
s
;

23 
	}
}

	@lib/printf.c

3 
	~<xöu.h
>

4 
	~<°dio.h
>

5 
	~<°d¨g.h
>

7 
_fd›∫t
(*, 
va_li°
, (*)(
did32
, ), );

13 
	$¥ötf
(

14 c⁄° *
fmt
,

18 
va_li°
 
≠
;

19 
sysˇŒ
 
	`putc
(
did32
, );

21 
	`va_°¨t
(
≠
, 
fmt
);

22 
	`_fd›∫t
((*)
fmt
, 
≠
, 
putc
, 
°dout
);

23 
	`va_íd
(
≠
);

26 
	}
}

	@lib/putchar.c

3 
	~<xöu.h
>

4 
	~<°dio.h
>

10 
	$putch¨
(

11 
c


14  
	`Âutc
(
c
, 
°dout
);

15 
	}
}

	@lib/qsort.c

3 (*
qscmp
) (*, *);

4 
q£s
;

5 
	`qs1
(*, *);

6 
	`q£xc
(*, *);

7 
	`q°exc
(*, *, *);

13 
	$qs‹t
(

14 *
a
,

15 
n
,

16 
es
,

17 (*
fc
)(*, *)

20 
qscmp
 = 
fc
;

21 
q£s
 = 
es
;

22 
	`qs1
(
a
,á + 
n
 * 
es
);

23 
	}
}

29 
	$qs1
(

30 *
a
,

31 *
l


34 *
i
, *
j
;

35 
es
;

36 *
Õ
, *
hp
;

37 
c
;

38 
n
;

40 
es
 = 
q£s
;

42 
°¨t
:

43 i‡((
n
 = 
l
 - 
a
Ë<
es
)

47 
n
 = 
es
 * (n / (2 *És));

48 
hp
 = 
Õ
 = 
a
 + 
n
;

49 
i
 = 
a
;

50 
j
 = 
l
 - 
es
;

53 i‡(
i
 < 
Õ
)

55 i‡((
c
 = (*
qscmp
Ë(
i
, 
Õ
)) == 0)

57 
	`q£xc
(
i
, 
Õ
 -
es
);

60 i‡(
c
 < 0)

62 
i
 +
es
;

67 
lo›
:

68 i‡(
j
 > 
hp
)

70 i‡((
c
 = (*
qscmp
Ë(
hp
, 
j
)) == 0)

72 
	`q£xc
(
hp
 +
es
, 
j
);

73 
lo›
;

75 i‡(
c
 > 0)

77 i‡(
i
 =
Õ
)

79 
	`q°exc
(
i
, 
hp
 +
es
, 
j
);

80 
i
 = 
Õ
 +
es
;

81 
lo›
;

83 
	`q£xc
(
i
, 
j
);

84 
j
 -
es
;

85 
i
 +
es
;

88 
j
 -
es
;

89 
lo›
;

92 i‡(
i
 =
Õ
)

94 i‡(
Õ
 - 
a
 >
l
 - 
hp
)

96 
	`qs1
(
hp
 + 
es
, 
l
);

97 
l
 = 
Õ
;

101 
	`qs1
(
a
, 
Õ
);

102 
a
 = 
hp
 + 
es
;

104 
°¨t
;

107 
	`q°exc
(
j
, 
Õ
 -
es
, 
i
);

108 
j
 = 
hp
 -
es
;

110 
	}
}

116 
	$q£xc
(

117 *
i
,

118 *
j


121 *
ri
, *
rj
, 
c
;

122 
n
;

124 
n
 = 
q£s
;

125 
ri
 = 
i
;

126 
rj
 = 
j
;

129 
c
 = *
ri
;

130 *
ri
++ = *
rj
;

131 *
rj
++ = 
c
;

133 --
n
);

134 
	}
}

140 
	$q°exc
(

141 *
i
,

142 *
j
,

143 *
k


146 *
ri
, *
rj
, *
rk
;

147 
c
;

148 
n
;

150 
n
 = 
q£s
;

151 
ri
 = 
i
;

152 
rj
 = 
j
;

153 
rk
 = 
k
;

156 
c
 = *
ri
;

157 *
ri
++ = *
rk
;

158 *
rk
++ = *
rj
;

159 *
rj
++ = 
c
;

161 --
n
);

162 
	}
}

	@lib/rand.c

3 
	~<°dlib.h
>

5 
	gønd_£ed
 = 1;

6 
ønd_r
(*);

12 
	$ønd
()

14  
	`ønd_r
(&
ønd_£ed
);

15 
	}
}

21 
	$ønd_r
(

22 * 
£edp


25 *
£edp
 = 16807 * (*£edpË% (
RAND_MAX
 + 1);

26  ()(*
£edp
);

27 
	}
}

33 
	$§™d
(

34 
£ed


37 
ønd_£ed
 = 
£ed
;

38 
	}
}

	@lib/sprintf.c

3 
	~<°d¨g.h
>

5 
•∫tf
(, );

6 
_fd›∫t
(*, 
va_li°
, (*
func
) (, ), );

12 
	$•rötf
(

13 *
°r
,

14 *
fmt
,

18 
va_li°
 
≠
;

19 *
s
;

21 
s
 = 
°r
;

22 
	`va_°¨t
(
≠
, 
fmt
);

23 
	`_fd›∫t
(
fmt
, 
≠
, 
•∫tf
, ()&
s
);

24 
	`va_íd
(
≠
);

25 *
s
++ = '\0';

27  (()
°r
);

28 
	}
}

34 
	$•∫tf
(

35 
a˝p
,

36 
ac


39 **
˝p
 = (**)
a˝p
;

40 
c
 = ()
ac
;

42  (*(*
˝p
)++ = 
c
);

43 
	}
}

	@lib/sscanf.c

3 
	#EOF
 (-2)

	)

5 
sgëch
(, **);

6 
sungëch
(, **);

7 
_dosˇn
(*, **,

8 (*
gëc
) (, **),

9 (*
ungëc
) (, **), , );

16 
	$ssˇnf
(

17 *
°r
,

18 *
fmt
,

19 
¨gs


22 *
s
;

24 
s
 = 
°r
;

25  (
	`_dosˇn
(
fmt
, (**)&
¨gs
, 
sgëch
, 
sungëch
, 0, ()&
s
));

26 
	}
}

32 
	$sgëch
(

33 
dummy
,

34 **
˝p


37  (*(*
˝p
Ë='\0' ? 
EOF
 : *(*cpp)++);

38 
	}
}

44 
	$sungëch
(

45 
dummy
,

46 **
˝p


49  (*(*
˝p
)--);

50 
	}
}

	@lib/strchr.c

8 *
	$°rchr
(

9 c⁄° *
s
,

10 
c


13 ; *
s
 != '\0'; s++)

15 i‡(*
s
 =(c⁄° )
c
)

17  (*)
s
;

21 i‡((c⁄° )
c
 =*
s
)

23  (*)
s
;

27 
	}
}

	@lib/strcmp.c

8 
	$°rcmp
(

9 *
°r1
,

10 *
°r2


13 *
°r1
 =*
°r2
) {

14 i‡(*
°r1
 == '\0') {

17 
°r1
++;

18 
°r2
++;

20 i‡(*
°r1
 < *
°r2
) {

25 
	}
}

	@lib/strcpy.c

7 
	$°r˝y
(

8 *
èr
,

9 *
§c


12  (*
èr
++ = *
§c
++) != '\0') {

16 
	}
}

	@lib/strlen.c

8 
	$°æí
(

9 *
°r


12 
Àn
;

14 
Àn
 = 0;

16 *
°r
++ != '\0') {

17 
Àn
++;

19  
Àn
;

20 
	}
}

	@lib/strncat.c

9 *
	$°∫ˇt
(

10 *
s1
,

11 c⁄° *
s2
,

12 
n


15 *
os1
;

17 
os1
 = 
s1
;

18 *
s1
++)

20 --
s1
;

21 (*
s1
++ = *
s2
++))

22 i‡(--
n
 < 0)

24 *--
s1
 = '\0';

27  (
os1
);

28 
	}
}

	@lib/strncmp.c

8 
	$°∫cmp
(

9 *
s1
,

10 *
s2
,

11 
n


15 --
n
 >0 && *
s1
 =*
s2
++)

17 i‡(*
s1
++ == '\0')

22  (
n
 < 0 ? 0 : *
s1
 - *--
s2
);

23 
	}
}

	@lib/strncpy.c

8 *
	$°∫˝y
(

9 *
s1
,

10 c⁄° *
s2
,

11 
n


14 
i
;

15 *
os1
;

17 
os1
 = 
s1
;

18 
i
 = 0; i < 
n
; i++)

20 i‡(((*
s1
++Ë(*
s2
++)) == '\0')

22 ++
i
 < 
n
)

24 *
s1
++ = '\0';

26  
os1
;

29  
os1
;

30 
	}
}

	@lib/strnlen.c

8 
	$°∫Àn
(

9 c⁄° *
s
,

10 
Àn


13 
n
;

15 
n
 = 0;

16 *
s
++ && 
n
 < 
Àn
)

17 
n
++;

19  (
n
);

20 
	}
}

	@lib/strrchr.c

9 *
	$°ºchr
(

10 c⁄° *
s
,

11 
c


14 *
r
 = 0;

16 ; *
s
 != '\0'; s++)

18 i‡(*
s
 =(c⁄° )
c
)

20 
r
 = (*)
s
;

24 i‡((c⁄° )
c
 =*
s
)

26  (*)
s
;

29  
r
;

30 
	}
}

	@lib/strstr.c

8 *
	$°r°r
(

9 c⁄° *
cs
,

10 c⁄° *
˘


13 *
cq
;

14 *
¸
;

16 ; *
cs
 != '\0'; cs++)

18 i‡(*
cs
 =*
˘
)

20 
cq
 = (*)
cs
;

21 
¸
 = (*)
˘
;

22 (*
cq
 !'\0'Ë&& (*
¸
 != '\0'))

24 i‡(*
cq
 !*
¸
)

28 
cq
++;

29 
¸
++;

31 i‡('\0' =*
¸
)

33  (*)
cs
;

38 
	}
}

	@net/arp.c

3 
	~<xöu.h
>

5 
¨≥¡ry
 
	g¨pˇche
[
ARP_SIZ
];

11 
	$¨p_öô
()

13 
öt32
 
i
;

15 
i
=1; i<
ARP_SIZ
; i++) {

16 
¨pˇche
[
i
].
¨°©e
 = 
AR_FREE
;

18 
	}
}

24 
°©us
 
	$¨p_ªsﬁve
 (

25 
uöt32
 
nxth›
,

26 
byã
 
mac
[
ETH_ADDR_LEN
]

29 
ötmask
 
mask
;

30 
¨µackë
 
≠kt
;

31 
öt32
 
i
;

32 
öt32
 
¶Ÿ
;

33 
¨≥¡ry
 *
¨±r
;

34 
öt32
 
msg
;

38 i‡(
nxth›
 =
IP_BCAST
) {

39 
	`mem˝y
(
mac
, 
NëD©a
.
ëhbˇ°
, 
ETH_ADDR_LEN
);

40  
OK
;

45 i‡(
nxth›
 =
NëD©a
.
ùbˇ°
) {

46 
	`mem˝y
(
mac
, 
NëD©a
.
ëhbˇ°
, 
ETH_ADDR_LEN
);

47  
OK
;

52 
mask
 = 
	`dißbÀ
();

56 
i
=0; i<
ARP_SIZ
; i++) {

57 
¨±r
 = &
¨pˇche
[
i
];

58 i‡(
¨±r
->
¨°©e
 =
AR_FREE
) {

61 i‡(
¨±r
->
¨∑ddr
 =
nxth›
) {

66 i‡(
i
 < 
ARP_SIZ
) {

70 i‡(
¨±r
->
¨°©e
 =
AR_RESOLVED
) {

71 
	`mem˝y
(
mac
, 
¨±r
->
¨haddr
, 
ARP_HALEN
);

72 
	`ª°‹e
(
mask
);

73  
OK
;

79 i‡(
¨±r
->
¨°©e
 =
AR_PENDING
) {

80 
	`ª°‹e
(
mask
);

81  
SYSERR
;

88 
¶Ÿ
 = 
	`¨p_Æloc
();

89 i‡(
¶Ÿ
 =
SYSERR
) {

90 
	`ª°‹e
(
mask
);

91  
SYSERR
;

94 
¨±r
 = &
¨pˇche
[
¶Ÿ
];

95 
¨±r
->
¨°©e
 = 
AR_PENDING
;

96 
¨±r
->
¨∑ddr
 = 
nxth›
;

97 
¨±r
->
¨pid
 = 
cuºpid
;

101 
	`mem˝y
(
≠kt
.
¨p_ëhd°
, 
NëD©a
.
ëhbˇ°
, 
ETH_ADDR_LEN
);

102 
	`mem˝y
(
≠kt
.
¨p_ëh§c
, 
NëD©a
.
ëhuˇ°
, 
ETH_ADDR_LEN
);

103 
≠kt
.
¨p_ëhty≥
 = 
ETH_ARP
;

104 
≠kt
.
¨p_hty≥
 = 
ARP_HTYPE
;

105 
≠kt
.
¨p_±y≥
 = 
ARP_PTYPE
;

106 
≠kt
.
¨p_hÀn
 = 0xf‡& 
ARP_HALEN
;

107 
≠kt
.
¨p_∂í
 = 0xf‡& 
ARP_PALEN
;

108 
≠kt
.
¨p_›
 = 0xfff‡& 
ARP_OP_REQ
;

109 
	`mem˝y
(
≠kt
.
¨p_¢dha
, 
NëD©a
.
ëhuˇ°
, 
ARP_HALEN
);

110 
≠kt
.
¨p_¢d∑
 = 
NëD©a
.
ùuˇ°
;

111 
	`mem£t
(
≠kt
.
¨p_èrha
, '\0', 
ARP_HALEN
);

112 
≠kt
.
¨p_èΩa
 = 
nxth›
;

116 
	`¨p_ht⁄
(&
≠kt
);

120 
	`ëh_ht⁄
((
√çackë
 *)&
≠kt
);

124 
msg
 = 
	`ªcv˛r
();

125 
i
=0; i<
ARP_RETRY
; i++) {

126 
	`wrôe
(
ETHER0
, (*)&
≠kt
, (
¨µackë
));

127 
msg
 = 
	`ªcvtime
(
ARP_TIMEOUT
);

128 i‡(
msg
 =
TIMEOUT
) {

130 } i‡(
msg
 =
SYSERR
) {

131 
	`ª°‹e
(
mask
);

132  
SYSERR
;

140 i‡(
msg
 =
TIMEOUT
) {

141 
¨±r
->
¨°©e
 = 
AR_FREE
;

142 
	`ª°‹e
(
mask
);

143  
TIMEOUT
;

148 
	`mem˝y
(
mac
, 
¨±r
->
¨haddr
, 
ARP_HALEN
);

149 
	`ª°‹e
(
mask
);

150  
OK
;

151 
	}
}

158 
	$¨p_ö
 (

159 
¨µackë
 *
pkçå


162 
ötmask
 
mask
;

163 
¨µackë
 
≠kt
;

164 
öt32
 
¶Ÿ
;

165 
¨≥¡ry
 *
¨±r
;

166 
boﬁ8
 
found
;

171 
	`¨p_¡oh
(
pkçå
);

175 i‡–(
pkçå
->
¨p_hty≥
 !
ARP_HTYPE
) ||

176 (
pkçå
->
¨p_±y≥
 !
ARP_PTYPE
) ) {

177 
	`‰ìbuf
((*)
pkçå
);

183 
mask
 = 
	`dißbÀ
();

187 
found
 = 
FALSE
;

189 
¶Ÿ
=0; slŸ < 
ARP_SIZ
; slot++) {

190 
¨±r
 = &
¨pˇche
[
¶Ÿ
];

194 i‡(
¨±r
->
¨°©e
 =
AR_FREE
) {

200 i‡(
¨±r
->
¨∑ddr
 =
pkçå
->
¨p_¢d∑
) {

201 
found
 = 
TRUE
;

206 i‡(
found
) {

210 
	`mem˝y
(
¨±r
->
¨haddr
, 
pkçå
->
¨p_¢dha
, 
ARP_HALEN
);

214 i‡(
¨±r
->
¨°©e
 =
AR_PENDING
) {

216 
¨±r
->
¨°©e
 = 
AR_RESOLVED
;

217 
	`£nd
(
¨±r
->
¨pid
, 
OK
);

223 i‡(
pkçå
->
¨p_›
 =
ARP_OP_RPLY
) {

224 
	`‰ìbuf
((*)
pkçå
);

225 
	`ª°‹e
(
mask
);

233 i‡((!
NëD©a
.
ùvÆid
) ||

234 (
pkçå
->
¨p_èΩa
 !
NëD©a
.
ùuˇ°
)) {

235 
	`‰ìbuf
((*)
pkçå
);

236 
	`ª°‹e
(
mask
);

243 i‡(!
found
) {

244 
¶Ÿ
 = 
	`¨p_Æloc
();

245 i‡(
¶Ÿ
 =
SYSERR
) {

246 
	`k¥ötf
("ARP cache overflow on interface\n");

247 
	`‰ìbuf
((*)
pkçå
);

248 
	`ª°‹e
(
mask
);

251 
¨±r
 = &
¨pˇche
[
¶Ÿ
];

252 
¨±r
->
¨∑ddr
 = 
pkçå
->
¨p_¢d∑
;

253 
	`mem˝y
(
¨±r
->
¨haddr
, 
pkçå
->
¨p_¢dha
, 
ARP_HALEN
);

254 
¨±r
->
¨°©e
 = 
AR_RESOLVED
;

259 
	`mem˝y
(
≠kt
.
¨p_ëhd°
, 
pkçå
->
¨p_¢dha
, 
ARP_HALEN
);

260 
	`mem˝y
(
≠kt
.
¨p_ëh§c
, 
NëD©a
.
ëhuˇ°
, 
ARP_HALEN
);

261 
≠kt
.
¨p_ëhty≥

ETH_ARP
;

262 
≠kt
.
¨p_hty≥
 = 
ARP_HTYPE
;

263 
≠kt
.
¨p_±y≥
 = 
ARP_PTYPE
;

264 
≠kt
.
¨p_hÀn
 = 
ARP_HALEN
;

265 
≠kt
.
¨p_∂í
 = 
ARP_PALEN
;

266 
≠kt
.
¨p_›
 = 
ARP_OP_RPLY
;

270 
	`mem˝y
(
≠kt
.
¨p_¢dha
, 
NëD©a
.
ëhuˇ°
, 
ARP_HALEN
);

271 
≠kt
.
¨p_¢d∑
 = 
NëD©a
.
ùuˇ°
;

275 
	`mem˝y
(
≠kt
.
¨p_èrha
, 
pkçå
->
¨p_¢dha
, 
ARP_HALEN
);

276 
≠kt
.
¨p_èΩa
 = 
pkçå
->
¨p_¢d∑
;

280 
	`¨p_ht⁄
(&
≠kt
);

284 
	`ëh_ht⁄
((
√çackë
 *)&
≠kt
);

288 
	`wrôe
(
ETHER0
, (*)&
≠kt
, (
¨µackë
));

289 
	`‰ìbuf
((*)
pkçå
);

290 
	`ª°‹e
(
mask
);

292 
	}
}

298 
öt32
 
	$¨p_Æloc
 ()

300 
öt32
 
¶Ÿ
;

304 
¶Ÿ
=0; slŸ < 
ARP_SIZ
; slot++) {

305 i‡(
¨pˇche
[
¶Ÿ
].
¨°©e
 =
AR_FREE
) {

306 
	`mem£t
((*)&
¨pˇche
[
¶Ÿ
],

307 
NULLCH
, (
¨≥¡ry
));

308  
¶Ÿ
;

314 
¶Ÿ
=0; slŸ < 
ARP_SIZ
; slot++) {

315 i‡(
¨pˇche
[
¶Ÿ
].
¨°©e
 =
AR_RESOLVED
) {

316 
	`mem£t
((*)&
¨pˇche
[
¶Ÿ
],

317 
NULLCH
, (
¨≥¡ry
));

318  
¶Ÿ
;

324 
	`k¥ötf
("ARP cache sizeÉxceeded\n");

326  
SYSERR
;

327 
	}
}

333 
	$¨p_¡oh
(

334 
¨µackë
 *
pkçå


337 
pkçå
->
¨p_hty≥
 = 
	`¡ohs
(pktptr->arp_htype);

338 
pkçå
->
¨p_±y≥
 = 
	`¡ohs
(pktptr->arp_ptype);

339 
pkçå
->
¨p_›
 = 
	`¡ohs
(pktptr->arp_op);

340 
pkçå
->
¨p_¢d∑
 = 
	`¡ohl
(pktptr->arp_sndpa);

341 
pkçå
->
¨p_èΩa
 = 
	`¡ohl
(pktptr->arp_tarpa);

342 
	}
}

348 
	$¨p_ht⁄
(

349 
¨µackë
 *
pkçå


352 
pkçå
->
¨p_hty≥
 = 
	`ht⁄s
(pktptr->arp_htype);

353 
pkçå
->
¨p_±y≥
 = 
	`ht⁄s
(pktptr->arp_ptype);

354 
pkçå
->
¨p_›
 = 
	`ht⁄s
(pktptr->arp_op);

355 
pkçå
->
¨p_¢d∑
 = 
	`ht⁄l
(pktptr->arp_sndpa);

356 
pkçå
->
¨p_èΩa
 = 
	`ht⁄l
(pktptr->arp_tarpa);

357 
	}
}

	@net/arp_dump.c

3 
	~<xöu.h
>

9 
	$¨p_dump
(

10 
¨≥¡ry
 *
¨±r


13 
öt32
 
i
;

15 
	`k¥ötf
("Sèã=%d, PID=%d IP=%08x, HW=", 
¨±r
->
¨°©e
,

16 
¨±r
->
¨pid
,áΩå->
¨∑ddr
);

17 
	`k¥ötf
(" %02X", 
¨±r
->
¨haddr
[0]);

18 
i
 = 1; i < 
ARP_HALEN
; i++) {

19 
	`¥ötf
(":%02X", 
¨±r
->
¨haddr
[
i
]);

21 
	`k¥ötf
("\n");

23 
	}
}

	@net/dhcp.c

3 
	~<xöu.h
>

10 * 
	$dh˝_gë_›t_vÆ
(

11 c⁄° 
dh˝msg
* 
dmsg
,

12 
uöt32
 
dmsg_size
,

13 
uöt8
 
›ti⁄_key


16 * 
›t_tmp
;

17 * 
eom
;

19 
eom
 = (*)
dmsg
 + 
dmsg_size
 - 1;

20 
›t_tmp
 = (*)
dmsg
->
dc_›t
;

22 
›t_tmp
 < 
eom
) {

26 if((*
›t_tmp
Ë=
›ti⁄_key
) {

30  (*)(
›t_tmp
+2);

32 
›t_tmp
++;

33 
›t_tmp
 +*(
uöt8
*)opt_tmp + 1;

38  
NULL
;

39 
	}
}

45 
	$dh˝_bld_boŸp_msg
(
dh˝msg
* 
dmsg
)

47 
uöt32
 
xid
;

49 
	`mem˝y
(&
xid
, 
NëD©a
.
ëhuˇ°
, 4);

51 
	`mem£t
(
dmsg
, 0x00, (
dh˝msg
));

53 
dmsg
->
dc_b›
 = 0x01;

54 
dmsg
->
dc_hty≥
 = 0x01;

55 
dmsg
->
dc_hÀn
 = 0x06;

56 
dmsg
->
dc_h›s
 = 0x00;

57 
dmsg
->
dc_xid
 = 
	`ht⁄l
(
xid
);

58 
dmsg
->
dc_£cs
 = 0x0000;

59 
dmsg
->
dc_Êags
 = 0x0000;

60 
dmsg
->
dc_cù
 = 0x00000000;

61 
dmsg
->
dc_yù
 = 0x00000000;

62 
dmsg
->
dc_sù
 = 0x00000000;

63 
dmsg
->
dc_gù
 = 0x00000000;

64 
	`mem£t
(&
dmsg
->
dc_chaddr
,'\0',16);

65 
	`mem˝y
(&
dmsg
->
dc_chaddr
, 
NëD©a
.
ëhuˇ°
, 
ETH_ADDR_LEN
);

66 
	`mem£t
(&
dmsg
->
dc_boŸp
,'\0',192);

67 
dmsg
->
dc_cookõ
 = 
	`ht⁄l
(0x63825363);

68 
	}
}

74 
öt32
 
	$dh˝_bld_disc
(
dh˝msg
* 
dmsg
)

76 
uöt32
 
j
 = 0;

78 
	`dh˝_bld_boŸp_msg
(
dmsg
);

80 
dmsg
->
dc_›t
[
j
++] = 0xff & 53;

81 
dmsg
->
dc_›t
[
j
++] = 0xff & 1;

82 
dmsg
->
dc_›t
[
j
++] = 0xff & 1;

83 
dmsg
->
dc_›t
[
j
++] = 0xff & 0;

85 
dmsg
->
dc_›t
[
j
++] = 0xff & 55;

86 
dmsg
->
dc_›t
[
j
++] = 0xff & 2;

87 
dmsg
->
dc_›t
[
j
++] = 0xff & 1;

88 
dmsg
->
dc_›t
[
j
++] = 0xff & 3;

89 
dmsg
->
dc_›t
[
j
++] = 0xff;

91  (
uöt32
)((*)&
dmsg
->
dc_›t
[
j
] - (*)dmsg + 1);

92 
	}
}

98 
öt32
 
	$dh˝_bld_ªq
(

99 
dh˝msg
* 
dmsg
,

100 c⁄° 
dh˝msg
* 
dmsg_of„r
,

101 
uöt32
 
dsmg_of„r_size


104 
uöt32
 
j
 = 0;

105 
uöt32
* 
£rvî_ù
;

108 
	`dh˝_bld_boŸp_msg
(
dmsg
);

109 
dmsg
->
dc_sù
 = 
dmsg_of„r
->dc_sip;

110 
dmsg
->
dc_›t
[
j
++] = 0xff & 53;

111 
dmsg
->
dc_›t
[
j
++] = 0xff & 1;

112 
dmsg
->
dc_›t
[
j
++] = 0xff & 3;

113 
dmsg
->
dc_›t
[
j
++] = 0xff & 0;

115 
dmsg
->
dc_›t
[
j
++] = 0xff & 50;

116 
dmsg
->
dc_›t
[
j
++] = 0xff & 4;

117 
	`mem˝y
(((*)&
dmsg
->
dc_›t
[
j
]), &
dmsg_of„r
->
dc_yù
, 4);

118 
j
 += 4;

121 
£rvî_ù
 = (
uöt32
*)
	`dh˝_gë_›t_vÆ
(
dmsg_of„r
,

122 
dsmg_of„r_size
, 
DHCP_SERVER_ID
);

124 if(
£rvî_ù
 == 0) {

125 
	`k¥ötf
("UnableÅo get server IPádd. from DHCP Offer\n");

126  
SYSERR
;

129 
dmsg
->
dc_›t
[
j
++] = 0xff & 54;

130 
dmsg
->
dc_›t
[
j
++] = 0xff & 4;

131 
	`mem˝y
((*)&
dmsg
->
dc_›t
[
j
], 
£rvî_ù
, 4);

132 
j
 += 4;

133 
dmsg
->
dc_›t
[
j
++] = 0xff;

135  (
uöt32
)((*)&
dmsg
->
dc_›t
[
j
] - (*)dmsg + 1);

136 
	}
}

142 
uöt32
 
	$gëloˇlù
()

144 
öt32
 
¶Ÿ
;

145 
dh˝msg
 
dmsg_¢d
;

146 
dh˝msg
 
dmsg_rvc
;

148 
öt32
 
i
, 
j
;

149 
öt32
 
Àn
;

150 
öt32
 
öÀn
;

151 *
›çå
;

152 *
e›
;

153 
öt32
 
msgty≥
;

154 
uöt32
 
addrmask
;

155 
uöt32
 
rouãøddr
;

156 
uöt32
 
dnßddr
;

157 
uöt32
 
¡∑ddr
;

158 
uöt32
 
tmp
;

159 
uöt32
* 
tmp_£rvî_ù
;

161 
¶Ÿ
 = 
	`udp_ªgi°î
(0, 
UDP_DHCP_SPORT
, 
UDP_DHCP_CPORT
);

162 i‡(
¶Ÿ
 =
SYSERR
) {

163 
	`k¥ötf
("getlocalip: cannotÑegister with UDP\n");

164  
SYSERR
;

167 
Àn
 = 
	`dh˝_bld_disc
(&
dmsg_¢d
);

168 if(
Àn
 =
SYSERR
) {

169 
	`k¥ötf
("getlocalip: UnableÅo build DHCP discover\n");

170  
SYSERR
;

173 
i
 = 0; i < 
DHCP_RETRY
; i++) {

174 
	`udp_£ndto
(
¶Ÿ
, 
IP_BCAST
, 
UDP_DHCP_SPORT
,

175 (*)&
dmsg_¢d
, 
Àn
);

181 
j
=0; j<3; j++) {

182 
öÀn
 = 
	`udp_ªcv
(
¶Ÿ
, (*)&
dmsg_rvc
,

183 (
dh˝msg
), 2000);

184 i‡(
öÀn
 =
TIMEOUT
) {

186 } i‡(
öÀn
 =
SYSERR
) {

187  
SYSERR
;

192 i‡(
dmsg_rvc
.
dc_xid
 !
dmsg_¢d
.dc_xid) {

196 
e›
 = (*)&
dmsg_rvc
 + 
öÀn
 - 1;

197 
›çå
 = (*)&
dmsg_rvc
.
dc_›t
;

198 
msgty≥
 = 
addrmask
 = 
rouãøddr
 = 
dnßddr
 = 
¡∑ddr
 = 0;

200 
›çå
 < 
e›
) {

202 *
›çå
) {

204 
msgty≥
 = 0xf‡& *(
›çå
+2);

208 
	`mem˝y
((*)&
tmp
, 
›çå
+2, 4);

209 
addrmask
 = 
	`¡ohl
(
tmp
);

213 
	`mem˝y
((*)&
tmp
, 
›çå
+2, 4);

214 
rouãøddr
 = 
	`¡ohl
(
tmp
);

218 
	`mem˝y
((*)&
tmp
, 
›çå
+2, 4);

219 
dnßddr
 = 
	`¡ohl
(
tmp
);

223 
	`mem˝y
((*)&
tmp
, 
›çå
+2, 4);

224 
¡∑ddr
 = 
	`¡ohl
(
tmp
);

228 
›çå
++;

229 
›çå
 += (0xff & *optptr) + 1;

232 i‡(
msgty≥
 == 0x02) {

233 
Àn
 = 
	`dh˝_bld_ªq
(&
dmsg_¢d
, &
dmsg_rvc
, 
öÀn
);

234 if(
Àn
 =
SYSERR
) {

235 
	`k¥ötf
("getlocalip: %s\n",

237  
SYSERR
;

239 
	`udp_£ndto
(
¶Ÿ
, 
IP_BCAST
, 
UDP_DHCP_SPORT
,

240 (*)&
dmsg_¢d
, 
Àn
);

243 } i‡(
dmsg_rvc
.
dc_›t
[2] != 0x05) {

247 i‡(
addrmask
 != 0) {

248 
NëD©a
.
ùmask
 = 
addrmask
;

250 i‡(
rouãøddr
 != 0) {

251 
NëD©a
.
ùrouãr
 = 
rouãøddr
;

253 i‡(
dnßddr
 != 0) {

254 
NëD©a
.
dns£rvî
 = 
dnßddr
;

256 i‡(
¡∑ddr
 != 0) {

257 
NëD©a
.
¡p£rvî
 = 
¡∑ddr
;

260 
NëD©a
.
ùuˇ°
 = 
	`¡ohl
(
dmsg_rvc
.
dc_yù
);

261 
NëD©a
.
ù¥efix
 = NëD©a.
ùuˇ°
 & NëD©a.
ùmask
;

262 
NëD©a
.
ùbˇ°
 = NëD©a.
ù¥efix
 | ~NëD©a.
ùmask
;

263 
NëD©a
.
ùvÆid
 = 
TRUE
;

264 
	`udp_ªÀa£
(
¶Ÿ
);

267 i‡(
	`dŸ2ù
((*)
dmsg_rvc
.
¢ame
,

268 &
NëD©a
.
boŸ£rvî
Ë!
OK
) {

272 
tmp_£rvî_ù
 = (
uöt32
*)
	`dh˝_gë_›t_vÆ
(

273 &
dmsg_rvc
, 
Àn
, 
DHCP_SERVER_ID
);

274 
	`mem˝y
((*)&
tmp
, 
tmp_£rvî_ù
, 4);

275 
NëD©a
.
boŸ£rvî
 = 
	`¡ohl
(
tmp
);

277 
	`mem˝y
(
NëD©a
.
boŸfûe
, 
dmsg_rvc
.bootfile,

278 (
dmsg_rvc
.
boŸfûe
));

279  
NëD©a
.
ùuˇ°
;

283 
	`k¥ötf
("DHCP failedÅo getáÑesponse\n");

284 
	`udp_ªÀa£
(
¶Ÿ
);

285  (
uöt32
)
SYSERR
;

286 
	}
}

	@net/dhcp_dump.c

3 
	~<xöu.h
>

9 
	$dh˝_dump
(

10 
dh˝msg
* 
dmsg
,

11 
uöt32
 
dmsg_size


14 
uöt32
 
i
,
j
;

15 * 
›t_tmp
;

16 * 
eom
;

20 
	`k¥ötf
("DHCP Message Dump\n");

21 
	`k¥ötf
("OP: %d (0x%02X)\n", 
dmsg
->
dc_b›
, (
uöt8
)dmsg->dc_bop);

22 
	`k¥ötf
("HTYPE: %d (0x%02X)\n", 
dmsg
->
dc_hty≥
, (
uöt8
)dmsg->dc_htype);

23 
	`k¥ötf
("HLEN: %d (0x%02X)\n", 
dmsg
->
dc_hÀn
, (
uöt8
)dmsg->dc_hlen);

24 
	`k¥ötf
("HOPS: %d (0x%02X)\n", 
dmsg
->
dc_h›s
, (
uöt8
)dmsg->dc_hops);

25 
	`k¥ötf
("XID: %d (0x%08X)\n", 
	`¡ohl
(
dmsg
->
dc_xid
),Çtohl((
uöt32
)dmsg->dc_xid));

26 
	`k¥ötf
("SECS: %d (0x%04X)\n", 
dmsg
->
dc_£cs
, (
uöt16
)dmsg->dc_secs);

27 
	`k¥ötf
("FLAGS: %d (0x%04X)\n", 
dmsg
->
dc_Êags
, (
uöt16
)dmsg->dc_flags);

28 
	`k¥ötf
("Clõ¡ IP: %d (0x%08X)\n", 
	`¡ohl
(
dmsg
->
dc_cù
),Çtohl((
uöt32
)dmsg->dc_cip));

29 
	`k¥ötf
("You∏IP: %d (0x%08X)\n", 
	`¡ohl
(
dmsg
->
dc_yù
),Çtohl((
uöt32
)dmsg->dc_yip));

30 
	`k¥ötf
("Sîvî IP: %d (0x%08X)\n", 
	`¡ohl
(
dmsg
->
dc_sù
),Çtohl((
uöt32
)dmsg->dc_sip));

31 
	`k¥ötf
("G©eway IP: %d (0x%08X)\n", 
	`¡ohl
(
dmsg
->
dc_gù
),Çtohl((
uöt32
)dmsg->dc_gip));

32 
	`k¥ötf
("Client Hardware Address:\n ");

33 
i
 = 0; i < (
dmsg
->
dc_chaddr
); i++) {

34 
	`k¥ötf
("%02X", (
uöt8
)
dmsg
->
dc_chaddr
[
i
]);

36 
	`k¥ötf
("\n");

40 
	`k¥ötf
("BOOTP Sîvî Name: %.64s\n", 
dmsg
->
¢ame
);

41 
	`k¥ötf
("BOOTP FûêName: %.128s\n", 
dmsg
->
boŸfûe
);

42 
	`k¥ötf
("Magi¯Cookõ: %d (0x%08X)\n", 
dmsg
->
dc_cookõ
, (
uöt32
)dmsg->dc_cookie);

44 
eom
 = (*)
dmsg
 + 
dmsg_size
 - 1;

45 
›t_tmp
 = (*)
dmsg
->
dc_›t
;

49 
›t_tmp
 < 
eom
) {

51 *
›t_tmp
) {

53 
DHCP_PADDING
:

54 
DHCP_MESSAGE_END
:

55 
›t_tmp
++;

59 
DHCP_SUBNET_MASK
:

60 
	`k¥ötf
("DHCP Sub√àMask: %d (0x%08X)\n", 
	`¡ohl
(*(
uöt32
*)(
›t_tmp
+2)),Çtohl(*(uint32*)(opt_tmp+2)));

63 
DHCP_ROUTER
:

64 
j
 = *(
uöt8
*)(
›t_tmp
+1);

65 
i
 = 0; i < 
j
/4; i++) {

66 
	`k¥ötf
("DHCP Rouãr: %d (0x%08X)\n", 
	`¡ohl
(*(
uöt32
*)(
›t_tmp
+2+4*
i
)),Çtohl(*(uint32*)(opt_tmp+2+4*i)));

70 
DHCP_DNS_SERVER
:

71 
j
 = *(
uöt8
*)(
›t_tmp
+1);

72 
i
 = 0; i < 
j
/4; i++) {

73 
	`k¥ötf
("DHCP DNS Sîvî: %d (0x%08X)\n", 
	`¡ohl
(*(
uöt32
*)(
›t_tmp
+2+4*
i
)),Çtohl(*(uint32*)(opt_tmp+2+4*i)));

77 
DHCP_DOMAIN_NAME
:

78 
	`k¥ötf
("DHCP Domain Name: ");

79 
j
 = *(
uöt8
*)(
›t_tmp
+1);

80 
i
 = 0; i < 
j
; i++) {

81 
	`k¥ötf
("%c", *((*)(
›t_tmp
 + 2 + 
i
)));

83 
	`k¥ötf
("\n");

86 
DHCP_IP_ADDR_LEASE_TIME
:

87 
	`k¥ötf
("DHCP IP Ló£ Time: %d (0x%08X)\n", 
	`¡ohl
(*(
uöt32
*)(
›t_tmp
+2)),Çtohl(*(uint32*)(opt_tmp+2)));

90 
DHCP_RENEWAL_TIME_VALUE
:

91 
	`k¥ötf
("DHCP RíewÆ (T1ËTime: %d (0x%08X)\n", 
	`¡ohl
(*(
uöt32
*)(
›t_tmp
+2)),Çtohl(*(uint32*)(opt_tmp+2)));

94 
DHCP_REBINDING_TIME_VALUE
:

95 
	`k¥ötf
("DHCP Rebödög (T2ËTime: %d (0x%08X)\n", 
	`¡ohl
(*(
uöt32
*)(
›t_tmp
+2)),Çtohl(*(uint32*)(opt_tmp+2)));

98 
DHCP_MESSAGE_TYPE
:

99 
	`k¥ötf
("DHCP MesßgêTy≥: %d\n", *(
uöt8
*)(
›t_tmp
+2));

102 
DHCP_REQUESTED_IP
:

103 
	`k¥ötf
("DHCP Reque°ed IP: %d (0x%08X)\n", 
	`¡ohl
(*(
uöt32
*)(
›t_tmp
+2)),Çtohl(*(uint32*)(opt_tmp+2)));

106 
DHCP_SERVER_ID
:

107 
	`k¥ötf
("DHCP Sîvî ID: %d (0x%08X)\n", 
	`¡ohl
(*(
uöt32
*)(
›t_tmp
+2)),Çtohl(*(uint32*)(opt_tmp+2)));

110 
DHCP_VENDER_OPTIONS
:

111 
	`k¥ötf
("DHCP Vender Options List:\n");

112 
j
 = *(
uöt8
*)(
›t_tmp
+1);

113 
i
 = 0; i < 
j
; i++) {

114 
	`k¥ötf
(" %d\n", *(
uöt8
*)(
›t_tmp
+
i
+2));

118 
DHCP_PARAMETER_REQUEST_LIST
:

119 
	`k¥ötf
("DHCP Parameter List:\n");

120 
j
 = *(
uöt8
*)(
›t_tmp
+1);

121 
i
 = 0; i < 
j
; i++) {

122 
	`k¥ötf
(" %d\n", *(
uöt8
*)(
›t_tmp
+
i
+2));

126 
DHCP_VENDOR_CLASS_ID
:

127 
	`k¥ötf
("DHCP Cœs†Idítifõr: %.32s\n", (*)(
›t_tmp
+2));

131 
	`k¥ötf
("Unknow¿DHCP o±i⁄: %d\n", ()(*
›t_tmp
));

136 
›t_tmp
++;

137 
›t_tmp
 +*(
uöt8
*)opt_tmp + 1;

139 
	`k¥ötf
("\n");

140 
	}
}

	@net/dns.c

3 
	~<xöu.h
>

4 
	~<°rög.h
>

5 
	~<dns.h
>

7 
loˇl
 
uöt32
 
dns_bldq
(*, *);

8 
loˇl
 
uöt32
 
dns_gëa
(*, 
dn•kt
 *);

9 
loˇl
 
uöt32
 
dns_gë∫ame
(*, *, *);

15 
uöt32
 
	$dn¶ookup
 (

16 *
d«me


19 
dn•kt
 
qpkt
;

20 
dn•kt
 
Ωkt
;

21 
uöt32
 
nßddr
;

22 
uöt32
 
qÀn
;

23 
uid32
 
¶Ÿ
;

24 
öt32
 
æí
;

25 
uöt32
 
ùaddr
;

26 
öt32
 
ªtvÆ
;

27 
öt32
 
i
;

31 if(
d«me
 =
NULL
) {

32  (
uöt32
)
SYSERR
;

37 
ªtvÆ
 = 
	`gëloˇlù
();

38 
nßddr
 = 
NëD©a
.
dns£rvî
;

39 i‡–(
ªtvÆ
 =
SYSERR
Ë|| (
NëD©a
.
dns£rvî
 == 0) ) {

40 
	`k¥ötf
("Cannot findá DNS server\n");

41  (
uöt32
)
SYSERR
;

46 
¶Ÿ
 = 
	`udp_ªgi°î
(
nßddr
, 
DNSPORT
, 
DNSLPORT
);

47 if(
¶Ÿ
 =
SYSERR
) {

48  (
uöt32
)
SYSERR
;

53 
	`mem£t
((*)&
qpkt
, 0, (
dn•kt
));

55 
qpkt
.
id
 = 
cuºpid
;

56 
qpkt
.
rd
 = 1;

57 
qpkt
.
qucou¡
 = 
	`ht⁄s
(1);

59 
qÀn
 = 
	`dns_bldq
(
d«me
, 
qpkt
.
d©a
);

61 
ùaddr
 = (
uöt32
)
SYSERR
;

62 
i
 = 0; (
ùaddr
==(
uöt32
)
SYSERR
Ë&& (ò< 
DNSRETRY
); i++) {

66 
	`udp_£nd
(
¶Ÿ
, (*)&
qpkt
, 
qÀn
);

70 
æí
 = 
	`udp_ªcv
(
¶Ÿ
, (*)&
Ωkt
, (
dn•kt
),

71 
DNSTIMEOUT
);

72 i‡–(
æí
 =
SYSERR
Ë|| (æí =
TIMEOUT
) ) {

75 
ùaddr
 = 
	`dns_gëa
(
d«me
, &
Ωkt
);

77 
	`udp_ªÀa£
(
¶Ÿ
);

78  
	`¡ohl
(
ùaddr
);

79 
	}
}

85 
uöt32
 
	$dns_bldq
 (

86 *
d«me
,

87 *
d©a


90 
uöt32
 
qÀn
;

91 
uöt32
 
dÀn
;

92 
byã
 *
Œ±r
;

93 
öt32
 
i
;

94 
uöt16
 
tmp
;

98 
dÀn
 = 
	`°æí
(
d«me
);

102 
Œ±r
 = (
byã
*)(
d©a
++);

103 *
Œ±r
 = 0;

107 
qÀn
 = 1;

111 
i
 = 0; i < 
dÀn
; i++) {

113 if(
qÀn
 >
DNSDATASIZ
) {

114  (
uöt32
)
SYSERR
;

116 if(
d«me
[
i
] != '.') {

118 *
d©a
++ = 
d«me
[
i
];

119 *
Œ±r
 = *llptr + 1;

122 
Œ±r
 = (
byã
*)(
d©a
++);

123 *
Œ±r
 = 0;

125 
qÀn
++;

130 *
d©a
++ = 0;

131 
qÀn
++;

135 
tmp
 = 
	`ht⁄s
(
DNS_QT_A
);

136 
	`mem˝y
(
d©a
, (*)&
tmp
, 2);

137 
d©a
 += 2;

138 
qÀn
 += 2;

142 
tmp
 = 
	`ht⁄s
(
DNS_QC_IN
);

143 
	`mem˝y
(
d©a
, (*)&
tmp
, 2);

144 
qÀn
 += 2;

148  (
dn•kt
Ë- 
DNSDATASIZ
 + 
qÀn
;

149 
	}
}

155 
uöt32
 
	$dns_gëa
 (

156 *
d«me
,

157 
dn•kt
 *
Ωkt


160 
uöt16
 
qcou¡
;

161 
uöt16
 
tmp16
;

162 
uöt16
 
acou¡
;

163 
uöt32
 
ùaddr
;

164 *
d±r
;

165 
byã
 
Œí
;

166 
öt32
 
i
;

170 
	`mem˝y
((*)&
tmp16
, (*Ë&
Ωkt
->
qucou¡
, 2);

171 
qcou¡
 = 
	`¡ohs
(
tmp16
);

172 
d±r
 = 
Ωkt
->
d©a
;

176 
i
 = 0; i < 
qcou¡
; i++) {

180 
Œí
 = *((
byã
 *)
d±r
);

184 
Œí
 != 0) {

188 if(
Œí
 > 63) {

189 
d±r
 += 2;

195 
d±r
 +(
Œí
 + 1);

196 
Œí
 = *((
byã
 *)
d±r
);

201 i‡(
Œí
 == 0) {

202 
d±r
 += 1;

207 
d±r
 += (2 + 2);

212 
	`mem˝y
((*)&
tmp16
, (*)&
Ωkt
->
™cou¡
, 2);

213 
acou¡
 = 
	`¡ohs
(
tmp16
);

217 
ùaddr
 = 0;

221 
i
 = 0; i < 
acou¡
; i++) {

223 
∫ame
[1024];

224 
uöt16
 
tm±y≥
;

225 
uöt32
 
tmpù
;

226 
uöt16
 
tm∂í
;

227 
uöt32
 
«mÀn
;

233 
«mÀn
 = 
	`dns_gë∫ame
–(*)
Ωkt
, 
d±r
, 
∫ame
);

234 
d±r
 +
«mÀn
;

238 
	`mem˝y
((*)&
tm±y≥
, 
d±r
, 2);

239 if–(
	`°∫cmp
(
d«me
, 
∫ame
, 
	`°æí
(dname)) == 0) &&

240 (
	`¡ohs
(
tm±y≥
Ë=
DNS_QT_A
) ) {

244 
	`mem˝y
((*)&
tmpù
, 
d±r
+10, 4);

245 i‡((
ùaddr
 == 0) ||

246 ((
NëD©a
.
ùmask
&
	`¡ohl
(
tmpù
)) ==

247 
NëD©a
.
ù¥efix
) ) {

248 
ùaddr
 = 
tmpù
;

255 
d±r
 += 8;

259 
	`mem˝y
((*)&
tm∂í
, 
d±r
, 2);

260 
d±r
 +
	`¡ohs
(
tm∂í
) + 2;

263 i‡(
ùaddr
 != 0) {

264  
ùaddr
;

266  (
uöt32
)
SYSERR
;

268 
	}
}

274 
uöt32
 
	$dns_gë∫ame
 (

275 *
s›
,

276 *
s⁄
,

277 *
d°


280 
byã
 
Œí
;

281 
uöt16
 
tmpoff
;

282 
uöt16
 
off£t
;

283 *
ss⁄
;

284 
öt32
 
i
;

288 
ss⁄
 = 
s⁄
;

292 
Œí
 = *
s⁄
++;

296 
Œí
 != 0) {

298 if(
Œí
 <= 63) {

300 
i
 = 0; i < 
Œí
; i++) {

301 *
d°
++ = *
s⁄
++;

303 *
d°
++ = '.';

304 
Œí
 = *
s⁄
++;

307 
s⁄
--;

308 
	`mem˝y
–(*)&
tmpoff
, 
s⁄
, 2);

309 
off£t
 = 
	`¡ohs
(
tmpoff
) & 0x3fff;

310 
s⁄
 += 2;

311 
	`dns_gë∫ame
(
s›
, s›+
off£t
, 
d°
);

312  (
s⁄
-
ss⁄
);

318 
d°
--;

319 *
d°
 = 
NULLCH
;

321  (
uöt32
)(
s⁄
-
ss⁄
);

322 
	}
}

	@net/dot2ip.c

3 
	~<xöu.h
>

9 
uöt32
 
	$dŸ2ù
 (

10 *
dŸãd
,

11 
uöt32
 *
ªsu…


16 
öt32
 
£g
;

17 
öt32
 
nch
;

18 
ch
;

19 
uöt32
 
ùaddr
;

20 
öt32
 
vÆ
;

24 
ùaddr
 = 0;

25 
£g
=0 ; seg<4 ; seg++) {

26 
vÆ
 = 0;

27 
nch
=0 ;Çch<4;Çch++) {

28 
ch
 = *
dŸãd
++;

29 i‡–(
ch
==
NULLCH
) || (ch == '.') ) {

30 i‡(
nch
 == 0) {

31  
SYSERR
;

39 i‡–(
nch
>=3Ë|| (
ch
<'0') || (ch>'9') ) {

40  
SYSERR
;

42 
vÆ
 = 10*vÆ + (
ch
-'0');

45 i‡(
vÆ
 > 255) {

46  
SYSERR
;

48 
ùaddr
 = (ùadd∏<< 8Ë| 
vÆ
;

50 i‡(
ch
 =
NULLCH
) {

54 i‡–(
£g
 >4Ë|| (
ch
 !
NULLCH
) ) {

55  
SYSERR
;

57 *
ªsu…
 = 
ùaddr
;

58  
OK
;

59 
	}
}

	@net/hexdump.c

3 
	~<xöu.h
>

9 
	$hexdump
 (

10 *
p
, 
öt32
 
Àn


14 
öt32
 
i
;

15 
öt32
 
w‹d
;

17 
i
=0; i<6; i++) {

18 
	`k¥ötf
("%02x", 0xf‡& *
p
++);

20 
	`k¥ötf
(" ");

22 
i
=0; i<6; i++) {

23 
	`k¥ötf
("%02x", 0xf‡& *
p
++);

25 
	`k¥ötf
(" ");

27 
i
=0; i<2; i++) {

28 
	`k¥ötf
("%02x", 0xf‡& *
p
++);

30 
	`k¥ötf
("\t\tEnd Ethernet header\n");

32 
w‹d
=0,
i
=0; i<
Àn
; i++) {

33 i‡((
i
 % 4) == 0) {

34 
w‹d
++;

35 i‡(
w‹d
 == 6) {

36 
	`k¥ötf
("\tHV TOS LENGTH ID FRAG TTL PRO CKSUM IP_SRC IP_DST\n");

37 } i‡(
w‹d
==8) {

38 
	`k¥ötf
("\t\t\t\tSRC_PRT DEST-PORT LENGTH CKSUM\n");

39 
w‹d
 = 17;

40 } i‡((
w‹d
 % 16) ==0) {

41 
	`k¥ötf
("\n");

42 } i‡(
i
 != 0) {

43 
	`k¥ötf
(" ");

46 
	`k¥ötf
("%02x", 0xf‡& *
p
++);

48 
	`k¥ötf
("\n");

50 
	}
}

55 
	$hexadump
 (

56 *
p
, 
öt32
 
Àn


60 
öt32
 
i
;

62 
i
=0; i<6; i++) {

63 
	`k¥ötf
("%02x", 0xf‡& *
p
++);

65 
	`k¥ötf
(" ");

67 
i
=0; i<6; i++) {

68 
	`k¥ötf
("%02x", 0xf‡& *
p
++);

70 
	`k¥ötf
(" ");

72 
i
=0; i<2; i++) {

73 
	`k¥ötf
("%02x", 0xf‡& *
p
++);

75 
	`k¥ötf
("\t\tEnd Ethernet header\n");

78 
i
=0; i<2; i++) {

79 
	`k¥ötf
("%02x", 0xf‡& *
p
++);

81 
	`k¥ötf
(" ");

83 
i
=0; i<2; i++) {

84 
	`k¥ötf
("%02x", 0xf‡& *
p
++);

86 
	`k¥ötf
(" ");

87 
	`k¥ötf
("%02x ", 0xf‡& *
p
++);

88 
	`k¥ötf
("%02x ", 0xf‡& *
p
++);

90 
i
=0; i<2; i++) {

91 
	`k¥ötf
("%02x", 0xf‡& *
p
++);

93 
	`k¥ötf
(" ");

95 
	`k¥ötf
("\tHTYP PTYP HLEN PLEN OP\n");

99 
i
=0; i<6; i++) {

100 
	`k¥ötf
("%02x", 0xf‡& *
p
++);

102 
	`k¥ötf
(" ");

104 
i
=0; i<2; i++) {

105 
	`k¥ötf
("%02x", 0xf‡& *
p
++);

107 
	`k¥ötf
(" ");

109 
i
=0; i<6; i++) {

110 
	`k¥ötf
("%02x", 0xf‡& *
p
++);

112 
	`k¥ötf
(" ");

114 
i
=0; i<2; i++) {

115 
	`k¥ötf
("%02x", 0xf‡& *
p
++);

117 
	`k¥ötf
("\tSHA SPA THA TPA\n");

119 
	}
}

	@net/icmp.c

4 
	~<xöu.h
>

6 
icm≥¡ry
 
	gicm±ab
[
ICMP_SLOTS
];

12 
	$icmp_öô
() {

14 
öt32
 
i
;

16 
i
=0; i<
ICMP_SLOTS
; i++) {

17 
icm±ab
[
i
].
ic°©e
 = 
ICMP_FREE
;

20 
	}
}

26 
	$icmp_ö
(

27 
√çackë
 *
pkt


30 
ötmask
 
mask
;

31 
öt32
 
¶Ÿ
;

32 
icm≥¡ry
 *
icm±r
;

33 
√çackë
 *
ª∂ypkt
;

35 
mask
 = 
	`dißbÀ
();

39 i‡–(
pkt
->
√t_i˘y≥
 !
ICMP_ECHOREPLY
) &&

40 (
pkt
->
√t_i˘y≥
 !
ICMP_ECHOREQST
) ) {

41 
	`‰ìbuf
((*)
pkt
);

42 
	`ª°‹e
(
mask
);

48 i‡(
pkt
->
√t_i˘y≥
 =
ICMP_ECHOREQST
) {

52 
ª∂ypkt
 = 
	`icmp_mkpkt
(
pkt
->
√t_ù§c
,
ICMP_ECHOREPLY
,

53 
pkt
->
√t_icidít
,Ökt->
√t_ic£q
,

54 (*Ë&
pkt
->
√t_icd©a
,

55 
pkt
->
√t_ùÀn
-
IP_HDR_LEN
-
ICMP_HDR_LEN
);

56 i‡((
öt32
)
ª∂ypkt
 !
SYSERR
) {

57 
	`ù_íqueue
(
ª∂ypkt
);

59 
	`‰ìbuf
((*)
pkt
);

60 
	`ª°‹e
(
mask
);

66 
¶Ÿ
 = 
pkt
->
√t_icidít
;

67 i‡–(
¶Ÿ
 < 0Ë|| (¶Ÿ >
ICMP_SLOTS
) ) {

68 
	`‰ìbuf
((*)
pkt
);

69 
	`ª°‹e
(
mask
);

76 
icm±r
 = &
icm±ab
[
¶Ÿ
];

77 i‡–(
icm±r
->
ic°©e
 =
ICMP_FREE
) ||

78 (
pkt
->
√t_ù§c
 !
icm±r
->
i¸emù
) ) {

79 
	`‰ìbuf
((*)
pkt
);

80 
	`ª°‹e
(
mask
);

86 
icm±r
->
iccou¡
++;

87 
icm±r
->
icqueue
[icm±r->
i˘aû
++] = 
pkt
;

88 i‡(
icm±r
->
i˘aû
 >
ICMP_QSIZ
) {

89 
icm±r
->
i˘aû
 = 0;

91 i‡(
icm±r
->
ic°©e
 =
ICMP_RECV
) {

92 
icm±r
->
ic°©e
 = 
ICMP_USED
;

93 
	`£nd
 (
icm±r
->
i˝id
, 
OK
);

95 
	`ª°‹e
(
mask
);

97 
	}
}

103 
öt32
 
	$icmp_ªgi°î
 (

104 
uöt32
 
ªmù


107 
ötmask
 
mask
;

108 
öt32
 
i
;

109 
öt32
 
‰ì¶Ÿ
;

110 
icm≥¡ry
 *
icm±r
;

112 
mask
 = 
	`dißbÀ
();

116 
‰ì¶Ÿ
 = -1;

117 
i
=0; i<
ICMP_SLOTS
; i++) {

118 
icm±r
 = &
icm±ab
[
i
];

119 i‡(
icm±r
->
ic°©e
 =
ICMP_FREE
) {

120 i‡(
‰ì¶Ÿ
 == -1) {

121 
‰ì¶Ÿ
 = 
i
;

123 } i‡(
icm±r
->
i¸emù
 =
ªmù
) {

124 
	`ª°‹e
(
mask
);

125  
SYSERR
;

128 i‡(
‰ì¶Ÿ
 == -1) {

130 
	`ª°‹e
(
mask
);

131  
SYSERR
;

136 
icm±r
 = &
icm±ab
[
‰ì¶Ÿ
];

137 
icm±r
->
ic°©e
 = 
ICMP_USED
;

138 
icm±r
->
i¸emù
 = 
ªmù
;

139 
icm±r
->
iccou¡
 = 0;

140 
icm±r
->
ichód
 = icm±r->
i˘aû
 = 0;

141 
icm±r
->
i˝id
 = -1;

142 
	`ª°‹e
(
mask
);

143  
‰ì¶Ÿ
;

144 
	}
}

150 
öt32
 
	$icmp_ªcv
 (

151 
öt32
 
icmpid
,

152 *
buff
,

153 
öt32
 
Àn
,

154 
uöt32
 
timeout


157 
ötmask
 
mask
;

158 
icm≥¡ry
 *
icm±r
;

159 
umsg32
 
msg
;

160 
√çackë
 *
pkt
;

161 
öt32
 
d©Æí
;

162 *
icd©≠å
;

163 
öt32
 
i
;

167 i‡–(
icmpid
 < 0Ë|| (icmpid >
ICMP_SLOTS
) ) {

168  
SYSERR
;

173 
mask
 = 
	`dißbÀ
();

177 
icm±r
 = &
icm±ab
[
icmpid
];

178 i‡(
icm±r
->
ic°©e
 !
ICMP_USED
) {

179 
	`ª°‹e
(
mask
);

180  
SYSERR
;

183 i‡(
icm±r
->
iccou¡
 == 0) {

184 
icm±r
->
ic°©e
 = 
ICMP_RECV
;

185 
icm±r
->
i˝id
 = 
cuºpid
;

186 
msg
 = 
	`ªcv˛r
();

187 
msg
 = 
	`ªcvtime
(
timeout
);

188 
icm±r
->
ic°©e
 = 
ICMP_USED
;

189 i‡(
msg
 =
TIMEOUT
) {

190 
	`ª°‹e
(
mask
);

191  
TIMEOUT
;

192 } i‡(
msg
 !
OK
) {

193 
	`ª°‹e
(
mask
);

194  
SYSERR
;

200 
pkt
 = 
icm±r
->
icqueue
[icm±r->
ichód
++];

201 i‡(
icm±r
->
ichód
 >
ICMP_SLOTS
) {

202 
icm±r
->
ichód
 = 0;

204 
icm±r
->
iccou¡
--;

208 
d©Æí
 = 
pkt
->
√t_ùÀn
 - 
IP_HDR_LEN
 - 
ICMP_HDR_LEN
;

209 
icd©≠å
 = (*Ë&
pkt
->
√t_icd©a
;

210 
i
=0; i<
d©Æí
; i++) {

211 i‡(
i
 >
Àn
) {

214 *
buff
++ = *
icd©≠å
++;

216 
	`‰ìbuf
((*)
pkt
);

217 
	`ª°‹e
(
mask
);

218  
i
;

219 
	}
}

225 
°©us
 
	$icmp_£nd
 (

226 
uöt32
 
ªmù
,

227 
uöt16
 
ty≥
,

228 
uöt16
 
idít
,

229 
uöt16
 
£q
,

230 *
buf
,

231 
öt32
 
Àn


234 
ötmask
 
mask
;

235 
√çackë
 *
pkt
;

236 
öt32
 
ªtvÆ
;

238 
mask
 = 
	`dißbÀ
();

242 
pkt
 = 
	`icmp_mkpkt
(
ªmù
, 
ty≥
, 
idít
, 
£q
, 
buf
, 
Àn
);

243 i‡((
öt32
)
pkt
 =
SYSERR
) {

244  
SYSERR
;

249 
ªtvÆ
 = 
	`ù_£nd
(
pkt
);

250 
	`ª°‹e
(
mask
);

251  
ªtvÆ
;

252 
	}
}

259 
√çackë
 *
	$icmp_mkpkt
 (

260 
uöt32
 
ªmù
,

261 
uöt16
 
ty≥
,

262 
uöt16
 
idít
,

263 
uöt16
 
£q
,

264 *
buf
,

265 
öt32
 
Àn


268 
√çackë
 *
pkt
;

269 
uöt32
 
ùidít
=32767;

273 
pkt
 = (
√çackë
 *)
	`gëbuf
(
√tbuÂoﬁ
);

275 i‡((
öt32
)
pkt
 =
SYSERR
) {

276 
	`∑nic
("icmp_mkpkt: cannot getáÇetwork buffer\n");

281 
	`mem˝y
(
pkt
->
√t_ëh§c
, 
NëD©a
.
ëhuˇ°
, 
ETH_ADDR_LEN
);

282 
pkt
->
√t_ëhty≥
 = 0x800;

283 
pkt
->
√t_ùvh
 = 0x45;

284 
pkt
->
√t_ùtos
 = 0x00;

285 
pkt
->
√t_ùÀn

IP_HDR_LEN
+
ICMP_HDR_LEN
+
Àn
;

286 
pkt
->
√t_ùid
 = 
ùidít
++;

287 
pkt
->
√t_ù‰ag
 = 0x0000;

288 
pkt
->
√t_ùâl
 = 0xff;

289 
pkt
->
√t_ù¥Ÿo
 = 
IP_ICMP
;

290 
pkt
->
√t_ùcksum
 = 0x0000;

291 
pkt
->
√t_ù§c
 = 
NëD©a
.
ùuˇ°
;

292 
pkt
->
√t_ùd°
 = 
ªmù
;

295 
pkt
->
√t_i˘y≥
 = 
ty≥
;

296 
pkt
->
√t_iccode
 = 0;

297 
pkt
->
√t_iccksum
 = 0x0000;

298 
pkt
->
√t_icidít
 = 
idít
;

299 
pkt
->
√t_ic£q
 = 
£q
;

300 
	`mem˝y
(
pkt
->
√t_icd©a
, 
buf
, 
Àn
);

304  
pkt
;

305 
	}
}

312 
°©us
 
	$icmp_ªÀa£
 (

313 
öt32
 
icmpid


316 
ötmask
 
mask
;

317 
icm≥¡ry
 *
icm±r
;

318 
√çackë
 *
pkt
;

320 
mask
 = 
	`dißbÀ
();

324 i‡–(
icmpid
 < 0Ë|| (icmpid >
ICMP_SLOTS
) ) {

325 
	`ª°‹e
(
mask
);

326  
SYSERR
;

328 
icm±r
 = &
icm±ab
[
icmpid
];

329 i‡(
icm±r
->
ic°©e
 !
ICMP_USED
) {

330 
	`ª°‹e
(
mask
);

331  
SYSERR
;

336 
	`ªsched_˙é
(
DEFER_START
);

337 
icm±r
->
iccou¡
 > 0) {

338 
pkt
 = 
icm±r
->
icqueue
[icm±r->
ichód
++];

339 i‡(
icm±r
->
ichód
 >
ICMP_SLOTS
) {

340 
icm±r
->
ichód
 = 0;

343 
	`‰ìbuf
((*)
pkt
);

344 
icm±r
->
iccou¡
--;

349 
icm±r
->
ic°©e
 = 
ICMP_FREE
;

350 
	`ªsched_˙é
(
DEFER_STOP
);

351 
	`ª°‹e
(
mask
);

352  
OK
;

353 
	}
}

359 
uöt16
 
	$icmp_cksum
 (

360 *
buf
,

361 
öt32
 
buÊí


364 
öt32
 
scou¡
;

365 
uöt32
 
cksum
;

366 
uöt16
 *
•å
;

367 
uöt16
 
w‹d
;

371 
scou¡
 = 
buÊí
 >> 1;

372 
•å
 = (
uöt16
 *)
buf
;

373 
cksum
 = 0;

374 ; 
scou¡
 > 0; scount--) {

375 
w‹d
 = (
uöt32
Ë*
•å
++;

376 
cksum
 +
	`¡ohs
(
w‹d
);

381 i‡–(
buÊí
 & 0x01) !=0 ) {

382 
cksum
 +0xFFFF & ((
uöt32
Ë(*((
byã
 *Ë
•å
) << 8));

384 
cksum
 += (cksum >> 16);

385 
cksum
 = 0xffff & ~cksum;

386  (
uöt16
Ë(0xfff‡& 
cksum
);

387 
	}
}

394 
	$icmp_ht⁄
 (

395 
√çackë
 *
pkçå


398 
pkçå
->
√t_iccksum
 = 
	`ht⁄s
(pktptr->net_iccksum);

399 
pkçå
->
√t_icidít
 = 
	`ht⁄s
(pktptr->net_icident);

400 
pkçå
->
√t_ic£q
 = 
	`ht⁄s
(pktptr->net_icseq);

401 
	}
}

408 
	$icmp_¡oh
 (

409 
√çackë
 *
pkçå


412 
pkçå
->
√t_iccksum
 = 
	`¡ohs
(pktptr->net_iccksum);

413 
pkçå
->
√t_icidít
 = 
	`¡ohs
(pktptr->net_icident);

414 
pkçå
->
√t_ic£q
 = 
	`¡ohs
(pktptr->net_icseq);

415 
	}
}

	@net/ip.c

4 
	~<xöu.h
>

6 
iqíåy
 
	gùoqueue
;

13 
	$ù_ö
(

14 
√çackë
 *
pkçå


17 
öt32
 
icm∂í
;

21 i‡(
	`ùcksum
(
pkçå
) != 0) {

22 
	`k¥ötf
("IP header checksum failed\n\r");

23 
	`‰ìbuf
((*)
pkçå
);

29 
	`ù_¡oh
(
pkçå
);

33 i‡(
pkçå
->
√t_ùvh
 != 0x45) {

34 
	`k¥ötf
("IP version failed\n\r");

35 
	`‰ìbuf
((*)
pkçå
);

42 
pkçå
->
√t_ù¥Ÿo
) {

44 
IP_UDP
:

46 
	`udp_¡oh
(
pkçå
);

49 
IP_ICMP
:

50 
icm∂í
 = 
pkçå
->
√t_ùÀn
 - 
IP_HDR_LEN
;

51 i‡(
	`icmp_cksum
((*)&
pkçå
->
√t_i˘y≥
,
icm∂í
) != 0){

52 
	`‰ìbuf
((*)
pkçå
);

55 
	`icmp_¡oh
(
pkçå
);

64 i‡(
pkçå
->
√t_ùd°
 =
IP_BCAST
) {

65 
	`ù_loˇl
(
pkçå
);

72 i‡(!
NëD©a
.
ùvÆid
) {

73 i‡(
pkçå
->
√t_ù¥Ÿo
 =
IP_UDP
) {

74 
	`ù_loˇl
(
pkçå
);

77 
	`‰ìbuf
((*)
pkçå
);

84 i‡–(
pkçå
->
√t_ùd°
 =
NëD©a
.
ùuˇ°
) ||

85 (
pkçå
->
√t_ùd°
 =
NëD©a
.
ùbˇ°
) ||

86 (
pkçå
->
√t_ùd°
 =
IP_BCAST
) ) {

87 
	`ù_loˇl
(
pkçå
);

92 
	`‰ìbuf
((*)
pkçå
);

95 
	}
}

103 
°©us
 
	$ù_£nd
(

104 
√çackë
 *
pkçå


107 
ötmask
 
mask
;

108 
uöt32
 
de°
;

109 
öt32
 
ªtvÆ
;

110 
uöt32
 
nxth›
;

112 
mask
 = 
	`dißbÀ
();

116 
de°
 = 
pkçå
->
√t_ùd°
;

120 i‡((
de°
&0xff000000) == 0x7f000000) {

121 
	`ù_loˇl
(
pkçå
);

122 
	`ª°‹e
(
mask
);

123  
OK
;

128 i‡(
de°
 =
NëD©a
.
ùuˇ°
) {

129 
	`ù_loˇl
(
pkçå
);

130 
	`ª°‹e
(
mask
);

131  
OK
;

136 i‡–(
de°
 =
IP_BCAST
) ||

137 (
de°
 =
NëD©a
.
ùbˇ°
) ) {

138 
	`mem˝y
(
pkçå
->
√t_ëhd°
, 
NëD©a
.
ëhbˇ°
,

139 
ETH_ADDR_LEN
);

140 
ªtvÆ
 = 
	`ù_out
(
pkçå
);

141 
	`ª°‹e
(
mask
);

142  
ªtvÆ
;

149 i‡–(
de°
 & 
NëD©a
.
ùmask
Ë=NëD©a.
ù¥efix
) {

152 
nxth›
 = 
de°
;

157 
nxth›
 = 
NëD©a
.
ùrouãr
;

161 i‡(
nxth›
 == 0) {

162 
	`‰ìbuf
((*)
pkçå
);

163  
SYSERR
;

168 
ªtvÆ
 = 
	`¨p_ªsﬁve
(
nxth›
, 
pkçå
->
√t_ëhd°
);

169 i‡(
ªtvÆ
 !
OK
) {

170 
	`‰ìbuf
((*)
pkçå
);

171  
SYSERR
;

176 
ªtvÆ
 = 
	`ù_out
(
pkçå
);

177 
	`ª°‹e
(
mask
);

178  
ªtvÆ
;

179 
	}
}

186 
	$ù_loˇl
(

187 
√çackë
 *
pkçå


192 
pkçå
->
√t_ù¥Ÿo
) {

194 
IP_UDP
:

195 
	`udp_ö
(
pkçå
);

198 
IP_ICMP
:

199 
	`icmp_ö
(
pkçå
);

203 
	`‰ìbuf
((*)
pkçå
);

206 
	}
}

213 
°©us
 
	$ù_out
(

214 
√çackë
 *
pkçå


217 
uöt16
 
cksum
;

218 
öt32
 
Àn
;

219 
öt32
 
pkéí
;

220 
öt32
 
ªtvÆ
;

224 
pkéí
 = 
pkçå
->
√t_ùÀn
 + 
ETH_HDR_LEN
;

228 
pkçå
->
√t_ù¥Ÿo
) {

230 
IP_UDP
:

232 
pkçå
->
√t_udpcksum
 = 0;

233 
	`udp_ht⁄
(
pkçå
);

239 
IP_ICMP
:

240 
	`icmp_ht⁄
(
pkçå
);

244 
pkçå
->
√t_iccksum
 = 0;

245 
Àn
 = 
pkçå
->
√t_ùÀn
-
IP_HDR_LEN
;

246 
cksum
 = 
	`icmp_cksum
((*)&
pkçå
->
√t_i˘y≥
,

247 
Àn
);

248 
pkçå
->
√t_iccksum
 = 0xfff‡& 
	`ht⁄s
(
cksum
);

257 
	`ù_ht⁄
(
pkçå
);

261 
pkçå
->
√t_ùcksum
 = 0;

262 
cksum
 = 
	`ùcksum
(
pkçå
);

263 
pkçå
->
√t_ùcksum
 = 0xfff‡& 
	`ht⁄s
(
cksum
);

267 
	`ëh_ht⁄
(
pkçå
);

271 
ªtvÆ
 = 
	`wrôe
(
ETHER0
, (*)
pkçå
, 
pkéí
);

272 
	`‰ìbuf
((*)
pkçå
);

274 i‡(
ªtvÆ
 =
SYSERR
) {

275  
SYSERR
;

277  
OK
;

279 
	}
}

286 
uöt16
 
	$ùcksum
(

287 
√çackë
 *
pkt


290 
uöt16
 *
h±r
;

291 
öt32
 
i
;

292 
uöt16
 
w‹d
;

293 
uöt32
 
cksum
;

295 
h±r
(
uöt16
 *Ë&
pkt
->
√t_ùvh
;

299 
cksum
 = 0;

300 
i
=0; i<10; i++) {

301 
w‹d
 = *
h±r
++;

302 
cksum
 +(
uöt32
Ë
	`ht⁄s
(
w‹d
);

307 
cksum
 += (cksum >> 16);

308 
cksum
 = 0xffff & ~cksum;

312 i‡(
cksum
 == 0xffff) {

313 
cksum
 = 0;

315  (
uöt16
Ë(0xfff‡& 
cksum
);

316 
	}
}

323 
	$ù_¡oh
(

324 
√çackë
 *
pkçå


327 
pkçå
->
√t_ùÀn
 = 
	`¡ohs
(pktptr->net_iplen);

328 
pkçå
->
√t_ùid
 = 
	`¡ohs
(pktptr->net_ipid);

329 
pkçå
->
√t_ù‰ag
 = 
	`¡ohs
(pktptr->net_ipfrag);

330 
pkçå
->
√t_ù§c
 = 
	`¡ohl
(pktptr->net_ipsrc);

331 
pkçå
->
√t_ùd°
 = 
	`¡ohl
(pktptr->net_ipdst);

332 
	}
}

338 
	$ù_ht⁄
(

339 
√çackë
 *
pkçå


343 
pkçå
->
√t_ùÀn
 = 
	`ht⁄s
(pktptr->net_iplen);

344 
pkçå
->
√t_ùid
 = 
	`ht⁄s
(pktptr->net_ipid);

345 
pkçå
->
√t_ù‰ag
 = 
	`ht⁄s
(pktptr->net_ipfrag);

346 
pkçå
->
√t_ù§c
 = 
	`ht⁄l
(pktptr->net_ipsrc);

347 
pkçå
->
√t_ùd°
 = 
	`ht⁄l
(pktptr->net_ipdst);

348 
	}
}

356 
¥o˚ss
 
	$ùout
()

358 
√çackë
 *
pkçå
;

359 
iqíåy
 *
ùq±r
;

360 
uöt32
 
de°ù
;

361 
uöt32
 
nxth›
;

362 
öt32
 
ªtvÆ
;

364 
ùq±r
 = &
ùoqueue
;

370 
	`waô
(
ùq±r
->
iq£m
);

371 
pkçå
 = 
ùq±r
->
iqbuf
[ùq±r->
iqhód
++];

372 i‡(
ùq±r
->
iqhód
 >
IP_OQSIZ
) {

373 
ùq±r
->
iqhód
= 0;

378 
	`mem˝y
(
pkçå
->
√t_ëh§c
, 
NëD©a
.
ëhuˇ°
, 
ETH_ADDR_LEN
);

382 
de°ù
 = 
pkçå
->
√t_ùd°
;

388 i‡((
de°ù
 =
IP_BCAST
)||(de°ù =
NëD©a
.
ùbˇ°
)) {

389 
	`k¥ötf
("ipout:Éncounteredá broadcast\n");

390 
	`‰ìbuf
((*)
pkçå
);

396 i‡(
de°ù
 =
NëD©a
.
ùuˇ°
) {

397 
	`ù_loˇl
(
pkçå
);

403 i‡–(
de°ù
 & 
NëD©a
.
ùmask
Ë=NëD©a.
ù¥efix
) {

407 
nxth›
 = 
de°ù
;

412 
nxth›
 = 
NëD©a
.
ùrouãr
;

415 i‡(
nxth›
 == 0) {

416 
	`‰ìbuf
((*)
pkçå
);

422 
ªtvÆ
 = 
	`¨p_ªsﬁve
(
nxth›
, 
pkçå
->
√t_ëhd°
);

423 i‡(
ªtvÆ
 !
OK
) {

424 
	`‰ìbuf
((*)
pkçå
);

430 
	`ù_out
(
pkçå
);

432 
	}
}

439 
°©us
 
	$ù_íqueue
(

440 
√çackë
 *
pkçå


443 
ötmask
 
mask
;

444 
iqíåy
 *
ùå
;

448 
mask
 = 
	`dißbÀ
();

452 
ùå
 = &
ùoqueue
;

453 i‡(
	`£mcou¡
(
ùå
->
iq£m
Ë>
IP_OQSIZ
) {

454 
	`k¥ötf
("ipout: output queue overflow\n");

455 
	`‰ìbuf
((*)
pkçå
);

456 
	`ª°‹e
(
mask
);

457  
SYSERR
;

459 
ùå
->
iqbuf
[ùå->
iqèû
++] = 
pkçå
;

460 i‡(
ùå
->
iqèû
 >
IP_OQSIZ
) {

461 
ùå
->
iqèû
 = 0;

463 
	`sig«l
(
ùå
->
iq£m
);

464 
	`ª°‹e
(
mask
);

465  
OK
;

466 
	}
}

	@net/net.c

3 
	~<xöu.h
>

4 
	~<°dio.h
>

6 
√tw‹k
 
	gNëD©a
;

7 
bpid32
 
	g√tbuÂoﬁ
;

8 
uöt64
 
	g√ç‹t£ed
;

15 
	$√t_öô
 ()

17 
öt32
 
nbufs
;

21 
	`mem£t
((*)&
NëD©a
, 
NULLCH
, (
√tw‹k
));

25 
	`c⁄åﬁ
(
ETHER0
, 
ETH_CTRL_GET_MAC
, (
öt32
)
NëD©a
.
ëhuˇ°
, 0);

27 
	`mem£t
((*)
NëD©a
.
ëhbˇ°
, 0xFF, 
ETH_ADDR_LEN
);

31 
√ç‹t£ed
 = 
	`gëticks
();

35 
nbufs
 = 
UDP_SLOTS
 * 
UDP_QSIZ
 + 
ICMP_SLOTS
 * 
ICMP_QSIZ
 + 1;

37 
√tbuÂoﬁ
 = 
	`mkbuÂoﬁ
(
PACKLEN
, 
nbufs
);

41 
	`¨p_öô
();

45 
	`udp_öô
();

49 
	`icmp_öô
();

53 
ùoqueue
.
iqhód
 = 0;

54 
ùoqueue
.
iqèû
 = 0;

55 
ùoqueue
.
iq£m
 = 
	`£m¸óã
(0);

56 if((
öt32
)
ùoqueue
.
iq£m
 =
SYSERR
) {

57 
	`∑nic
("Cannot create ip output queue semaphore");

63 
	`ªsume
(
	`¸óã
(
ùout
, 
NETSTK
, 
PSSCHED
, 
NETPRIO
, "ùout", 0, 
NULL
));

67 
	`ªsume
(
	`¸óã
(
√tö
, 
NETSTK
, 
PSSCHED
, 
NETPRIO
, "√tö", 0, 
NULL
));

68 
	}
}

76 
¥o˚ss
 
	$√tö
 ()

78 
√çackë
 *
pkt
;

79 
öt32
 
ªtvÆ
;

87 
pkt
 = (
√çackë
 *)
	`gëbuf
(
√tbuÂoﬁ
);

91 
ªtvÆ
 = 
	`ªad
(
ETHER0
, (*)
pkt
, 
PACKLEN
);

92 if(
ªtvÆ
 =
SYSERR
) {

93 
	`∑nic
("CannotÑead from Ethernet\n");

98 
	`ëh_¡oh
(
pkt
);

102 
pkt
->
√t_ëhty≥
) {

104 
ETH_ARP
:

105 
	`¨p_ö
((
¨µackë
 *)
pkt
);

108 
ETH_IP
:

109 
	`ù_ö
(
pkt
);

112 
ETH_IPv6
:

113 
	`‰ìbuf
((*)
pkt
);

117 
	`‰ìbuf
((*)
pkt
);

121 
	}
}

127 
	$ëh_ht⁄
(

128 
√çackë
 *
pkçå


131 
pkçå
->
√t_ëhty≥
 = 
	`ht⁄s
(pktptr->net_ethtype);

132 
	}
}

139 
	$ëh_¡oh
(

140 
√çackë
 *
pkçå


143 
pkçå
->
√t_ëhty≥
 = 
	`¡ohs
(pktptr->net_ethtype);

144 
	}
}

150 
uöt16
 
	$gëp‹t
()

152 
√ç‹t£ed
 = 6364136223846793005ULL *Çetportseed + 1;

153  50000 + ((
uöt16
)((
√ç‹t£ed
 >> 48)) % 15535);

154 
	}
}

	@net/pdump.c

3 
	~<xöu.h
>

9 
	$pdump
(
√çackë
 *
µå
)

11 
¨µackë
 *
≠å
;

13 
	`k¥ötf
("%02x:%02x:%02x:%02x:%02x:%02x >",

14 
µå
->
√t_ëh§c
[0],

15 
µå
->
√t_ëh§c
[1],

16 
µå
->
√t_ëh§c
[2],

17 
µå
->
√t_ëh§c
[3],

18 
µå
->
√t_ëh§c
[4],

19 
µå
->
√t_ëh§c
[5]

21 
	`k¥ötf
(" %02x:%02x:%02x:%02x:%02x:%02x, ",

22 
µå
->
√t_ëhd°
[0],

23 
µå
->
√t_ëhd°
[1],

24 
µå
->
√t_ëhd°
[2],

25 
µå
->
√t_ëhd°
[3],

26 
µå
->
√t_ëhd°
[4],

27 
µå
->
√t_ëhd°
[5]

30 
	`k¥ötf
("ethertype ");

32 
	`¡ohs
(
µå
->
√t_ëhty≥
)) {

35 
	`k¥ötf
("ARP (0x%04x),Üength %d: ",

36 
	`¡ohs
(
µå
->
√t_ëhty≥
),

37 (
¨µackë
));

38 
≠å
 = (
¨µackë
 *)
µå
;

40 i‡–(
	`¡ohs
(
≠å
->
¨p_hty≥
Ë!
ARP_HTYPE
) ||

41 (
	`¡ohs
(
≠å
->
¨p_±y≥
Ë!
ARP_PTYPE
) ) {

45 
	`k¥ötf
("hardáddrÜen=%d),ÖrotoáddrÜen=%d), ",

46 
≠å
->
¨p_hÀn
,

47 
≠å
->
¨p_∂í
);

49 i‡(
	`¡ohs
(
≠å
->
¨p_›
Ë=
ARP_OP_REQ
) {

50 
	`k¥ötf
("Request who-has %d.%d.%d.%dÅell %d.%d.%d.%d, ",

51 (
	`¡ohl
(
≠å
->
¨p_èΩa
)>>24)&0xff,

52 (
	`¡ohl
(
≠å
->
¨p_èΩa
)>>16)&0xff,

53 (
	`¡ohl
(
≠å
->
¨p_èΩa
)>>8)&0xff,

54 
	`¡ohl
(
≠å
->
¨p_èΩa
)&0xff,

55 (
	`¡ohl
(
≠å
->
¨p_¢d∑
)>>24)&0xff,

56 (
	`¡ohl
(
≠å
->
¨p_¢d∑
)>>16)&0xff,

57 (
	`¡ohl
(
≠å
->
¨p_¢d∑
)>>8)&0xff,

58 
	`¡ohl
(
≠å
->
¨p_¢d∑
)&0xff);

59 } i‡(
	`¡ohs
(
≠å
->
¨p_›
Ë=
ARP_OP_RPLY
) {

60 
	`k¥ötf
("Reply %d.%d.%d.%d is-at %02x:%02x:%02x:%02x:%02x:%02x, ",

61 (
	`¡ohl
(
≠å
->
¨p_¢d∑
)>>24)&0xff,

62 (
	`¡ohl
(
≠å
->
¨p_¢d∑
)>>16)&0xff,

63 (
	`¡ohl
(
≠å
->
¨p_¢d∑
)>>8)&0xff,

64 
	`¡ohl
(
≠å
->
¨p_¢d∑
)&0xff,

65 
≠å
->
¨p_¢dha
[0],

66 
≠å
->
¨p_¢dha
[1],

67 
≠å
->
¨p_¢dha
[2],

68 
≠å
->
¨p_¢dha
[3],

69 
≠å
->
¨p_¢dha
[4],

70 
≠å
->
¨p_¢dha
[5]);

75 
	`k¥ötf
("Àngth %d\n", (
¨µackë
Ë- 
ETH_HDR_LEN
);

79 
	`k¥ötf
("IPv4 (0x%04x),Üength %d: ",

80 
	`¡ohs
(
µå
->
√t_ëhty≥
),

81 
	`¡ohs
(
µå
->
√t_ùÀn
Ë+ 
ETH_HDR_LEN
);

83 
	`k¥ötf
("(");

84 
	`k¥ötf
("tos 0x%01x,Åtl %d, id %d, offset %d ",

85 
µå
->
√t_ùtos
,

86 
µå
->
√t_ùâl
,

87 
	`¡ohs
(
µå
->
√t_ùid
),

88 (
	`¡ohs
(
µå
->
√t_ù‰ag
) & 0x1fff));

90 
	`k¥ötf
("flags ");

91 i‡(
	`¡ohs
(
µå
->
√t_ù‰ag
) & 0x4000)

92 
	`k¥ötf
("[DF], ");

93 i‡(
	`¡ohs
(
µå
->
√t_ù‰ag
) & 0x2000)

94 
	`k¥ötf
("[MF], " );

96 
	`k¥ötf
("[none], ");

98 
	`k¥ötf
("[ip checksum %s], ",

99 
	`ùcksum
(
µå
) == 0 ? "ok" : "fail");

101 i‡(
µå
->
√t_ù¥Ÿo
 =
IP_UDP
) {

102 
	`k¥ötf
("proto UDP (%d),Üength %d",

103 
µå
->
√t_ù¥Ÿo
, 
	`¡ohs
’±r->
√t_ùÀn
));

104 
	`k¥ötf
(")\n");

105 
	`k¥ötf
("\t%d.%d.%d.%d > ",

106 (
	`¡ohl
(
µå
->
√t_ù§c
)>>24)&0xff,

107 (
	`¡ohl
(
µå
->
√t_ù§c
)>>16)&0xff,

108 (
	`¡ohl
(
µå
->
√t_ù§c
)>>8)&0xff,

109 (
	`¡ohl
(
µå
->
√t_ù§c
)&0xff));

110 
	`k¥ötf
("%d.%d.%d.%d: ",

111 (
	`¡ohl
(
µå
->
√t_ùd°
)>>24)&0xff,

112 (
	`¡ohl
(
µå
->
√t_ùd°
)>>16)&0xff,

113 (
	`¡ohl
(
µå
->
√t_ùd°
)>>8)&0xff,

114 (
	`¡ohl
(
µå
->
√t_ùd°
)&0xff));

115 
	`k¥ötf
("[udp checksumÇone] ");

116 
	`k¥ötf
("UDP, srcÖort %d, dstÖort %d,Üength %d\n",

117 
	`¡ohs
(
µå
->
√t_udp•‹t
),

118 
	`¡ohs
(
µå
->
√t_udpdp‹t
),

119 
	`¡ohs
(
µå
->
√t_ud∂í
Ë- 
UDP_HDR_LEN
);

121 } i‡(
µå
->
√t_ù¥Ÿo
 =
IP_ICMP
) {

122 
	`k¥ötf
("proto ICMP (%d),Üength %d",

123 
µå
->
√t_ù¥Ÿo
, 
	`¡ohs
’±r->
√t_ùÀn
));

124 
	`k¥ötf
(")\n");

125 
	`k¥ötf
("\t%d.%d.%d.%d > ",

126 (
	`¡ohl
(
µå
->
√t_ù§c
)>>24)&0xff,

127 (
	`¡ohl
(
µå
->
√t_ù§c
)>>16)&0xff,

128 (
	`¡ohl
(
µå
->
√t_ù§c
)>>8)&0xff,

129 (
	`¡ohl
(
µå
->
√t_ù§c
)&0xff));

130 
	`k¥ötf
("%d.%d.%d.%d: ",

131 (
	`¡ohl
(
µå
->
√t_ùd°
)>>24)&0xff,

132 (
	`¡ohl
(
µå
->
√t_ùd°
)>>16)&0xff,

133 (
	`¡ohl
(
µå
->
√t_ùd°
)>>8)&0xff,

134 (
	`¡ohl
(
µå
->
√t_ùd°
)&0xff));

136 i‡(
µå
->
√t_i˘y≥
 =
ICMP_ECHOREQST
)

137 
	`k¥ötf
("ICMPÉchoÑequest, ");

138 i‡(
µå
->
√t_i˘y≥
 =
ICMP_ECHOREPLY
)

139 
	`k¥ötf
("ICMPÉchoÑeply, ");

143 
	`k¥ötf
("id %d, seq %d\n",

144 
	`¡ohs
(
µå
->
√t_icidít
),

145 
	`¡ohs
(
µå
->
√t_ic£q
));

152 
	`k¥ötf
("unknown\n");

158 
	}
}

164 
	$pdumph
(
√çackë
 *
µå
)

166 
¨µackë
 *
≠å
;

168 
	`k¥ötf
("%02x:%02x:%02x:%02x:%02x:%02x >",

169 
µå
->
√t_ëh§c
[0],

170 
µå
->
√t_ëh§c
[1],

171 
µå
->
√t_ëh§c
[2],

172 
µå
->
√t_ëh§c
[3],

173 
µå
->
√t_ëh§c
[4],

174 
µå
->
√t_ëh§c
[5]

176 
	`k¥ötf
(" %02x:%02x:%02x:%02x:%02x:%02x, ",

177 
µå
->
√t_ëhd°
[0],

178 
µå
->
√t_ëhd°
[1],

179 
µå
->
√t_ëhd°
[2],

180 
µå
->
√t_ëhd°
[3],

181 
µå
->
√t_ëhd°
[4],

182 
µå
->
√t_ëhd°
[5]

185 
	`k¥ötf
("ethertype ");

187 
µå
->
√t_ëhty≥
) {

190 
	`k¥ötf
("ARP (0x%04x),Üength %d: ",

191 
µå
->
√t_ëhty≥
,

192 (
¨µackë
));

193 
≠å
 = (
¨µackë
 *)
µå
;

195 i‡–(
≠å
->
¨p_hty≥
 !
ARP_HTYPE
) ||

196 (
≠å
->
¨p_±y≥
 !
ARP_PTYPE
) ) {

200 
	`k¥ötf
("hardáddrÜen=%d),ÖrotoáddrÜen=%d), ",

201 
≠å
->
¨p_hÀn
,

202 
≠å
->
¨p_∂í
);

204 i‡(
≠å
->
¨p_›
 =
ARP_OP_REQ
) {

205 
	`k¥ötf
("Request who-has %d.%d.%d.%dÅell %d.%d.%d.%d, ",

206 (
≠å
->
¨p_èΩa
>>24)&0xff,

207 (
≠å
->
¨p_èΩa
>>16)&0xff,

208 (
≠å
->
¨p_èΩa
>>8)&0xff,

209 
≠å
->
¨p_èΩa
&0xff,

210 (
≠å
->
¨p_¢d∑
>>24)&0xff,

211 (
≠å
->
¨p_¢d∑
>>16)&0xff,

212 (
≠å
->
¨p_¢d∑
>>8)&0xff,

213 
≠å
->
¨p_¢d∑
&0xff);

214 } i‡(
≠å
->
¨p_›
 =
ARP_OP_RPLY
) {

215 
	`k¥ötf
("Reply %d.%d.%d.%d is-at %02x:%02x:%02x:%02x:%02x:%02x, ",

216 (
≠å
->
¨p_¢d∑
>>24)&0xff,

217 (
≠å
->
¨p_¢d∑
>>16)&0xff,

218 (
≠å
->
¨p_¢d∑
>>8)&0xff,

219 
≠å
->
¨p_¢d∑
&0xff,

220 
≠å
->
¨p_¢dha
[0],

221 
≠å
->
¨p_¢dha
[1],

222 
≠å
->
¨p_¢dha
[2],

223 
≠å
->
¨p_¢dha
[3],

224 
≠å
->
¨p_¢dha
[4],

225 
≠å
->
¨p_¢dha
[5]);

230 
	`k¥ötf
("Àngth %d\n", (
¨µackë
Ë- 
ETH_HDR_LEN
);

234 
	`k¥ötf
("IPv4 (0x%04x),Üength %d: ",

235 
µå
->
√t_ëhty≥
,

236 
µå
->
√t_ùÀn
 + 
ETH_HDR_LEN
);

238 
	`k¥ötf
("(");

239 
	`k¥ötf
("tos 0x%01x,Åtl %d, id %d, offset %d ",

240 
µå
->
√t_ùtos
,

241 
µå
->
√t_ùâl
,

242 
µå
->
√t_ùid
,

243 
µå
->
√t_ù‰ag
 & 0x1fff);

245 
	`k¥ötf
("flags ");

246 i‡(
µå
->
√t_ù‰ag
 & 0x4000)

247 
	`k¥ötf
("[DF], ");

248 i‡(
µå
->
√t_ù‰ag
 & 0x2000)

249 
	`k¥ötf
("[MF], " );

251 
	`k¥ötf
("[none], ");

253 
	`k¥ötf
("[ip checksum %s], ",

254 
	`ùcksum
(
µå
) == 0 ? "ok" : "fail");

256 i‡(
µå
->
√t_ù¥Ÿo
 =
IP_UDP
) {

257 
	`k¥ötf
("proto UDP (%d),Üength %d",

258 
µå
->
√t_ù¥Ÿo
,Ö±r->
√t_ùÀn
);

259 
	`k¥ötf
(")\n");

260 
	`k¥ötf
("\t%d.%d.%d.%d > ",

261 (
µå
->
√t_ù§c
>>24)&0xff,

262 (
µå
->
√t_ù§c
>>16)&0xff,

263 (
µå
->
√t_ù§c
>>8)&0xff,

264 (
µå
->
√t_ù§c
&0xff));

265 
	`k¥ötf
("%d.%d.%d.%d: ",

266 (
µå
->
√t_ùd°
>>24)&0xff,

267 (
µå
->
√t_ùd°
>>16)&0xff,

268 (
µå
->
√t_ùd°
>>8)&0xff,

269 (
µå
->
√t_ùd°
&0xff));

270 
	`k¥ötf
("[udp checksumÇone] ");

271 
	`k¥ötf
("UDP, srcÖort %d, dstÖort %d,Üength %d\n",

272 
µå
->
√t_udp•‹t
,

273 
µå
->
√t_udpdp‹t
,

274 
µå
->
√t_ud∂í
 - 
UDP_HDR_LEN
);

276 } i‡(
µå
->
√t_ù¥Ÿo
 =
IP_ICMP
) {

277 
	`k¥ötf
("proto ICMP (%d),Üength %d",

278 
µå
->
√t_ù¥Ÿo
,Ö±r->
√t_ùÀn
);

279 
	`k¥ötf
(")\n");

280 
	`k¥ötf
("\t%d.%d.%d.%d > ",

281 (
µå
->
√t_ù§c
>>24)&0xff,

282 (
µå
->
√t_ù§c
>>16)&0xff,

283 (
µå
->
√t_ù§c
>>8)&0xff,

284 (
µå
->
√t_ù§c
&0xff));

285 
	`k¥ötf
("%d.%d.%d.%d: ",

286 (
µå
->
√t_ù§c
>>24)&0xff,

287 (
µå
->
√t_ù§c
>>16)&0xff,

288 (
µå
->
√t_ù§c
>>8)&0xff,

289 (
µå
->
√t_ù§c
&0xff));

291 i‡(
µå
->
√t_i˘y≥
 =
ICMP_ECHOREQST
)

292 
	`k¥ötf
("ICMPÉchoÑequest, ");

293 i‡(
µå
->
√t_i˘y≥
 =
ICMP_ECHOREPLY
)

294 
	`k¥ötf
("ICMPÉchoÑeply, ");

298 
	`k¥ötf
("id %d, seq %d\n",

299 
µå
->
√t_icidít
,

300 
µå
->
√t_ic£q
);

301 
	`k¥ötf
("icmp ckeckcum %s\n",

302 
	`icmp_cksum
((*)&
µå
->
√t_i˘y≥
,

303 
	`¡ohs
(
µå
->
√t_ùÀn
)-
IP_HDR_LEN
)==0?

310 
	`k¥ötf
("unknown\n");

316 
	}
}

	@net/pxe.c

3 
	~<xöu.h
>

12 
sysid_íåy_poöt
* 
	$gë_sysid_íåy_poöt
()

17 
uöt32
 
i
;

18 
i
 = 
SYSID_ENTRY_POINT_SADDR
; i < 
SYSID_ENTRY_POINT_EADDR
; i += 16) {

19 
sysid_íåy_poöt
* 
sysid_íåy
 = (sysid_íåy_poöt*)
i
;

20 if(
	`memcmp
(
sysid_íåy
->
hódî
, 
SYSID_ENTRY_POINT_HDR
, (sysid_entry->header)) == 0) {

21  (
sysid_íåy_poöt
*)
i
;

24  
NULL
;

25 
	}
}

31 * 
	$gë_uuid
(
uöt16
* 
uuid_Àn
)

33 
uöt16
 
i
;

34 
sysid_bios_°ru˘
* 
sysid_bios_íåy
;

35 
sysid_íåy_poöt
* 
sysid_íåy
 = 
	`gë_sysid_íåy_poöt
();

36 if(
NULL
 =
sysid_íåy
) {

37 (*
uuid_Àn
) = 0;

38  
NULL
;

41 
sysid_bios_íåy
 = (
sysid_bios_°ru˘
*)
sysid_íåy
->
bios_°ru˘uª_addr
;

42 
i
 = 0; i < 
sysid_íåy
->
bios_°ru˘_cou¡
; i++)

44 if(
	`memcmp
(
sysid_bios_íåy
->
hódî
, 
SYSID_ENTRY_UUID_HDR
, (sysid_bios_entry->header)) == 0) {

45 (*
uuid_Àn
Ë
sysid_bios_íåy
->
Àn
 - (
sysid_bios_°ru˘
);

46  (*)(
sysid_bios_íåy
+1);

49 
sysid_bios_íåy
 = (
sysid_bios_°ru˘
*)(((*)sysid_bios_íåyË+ sysid_bios_íåy->
Àn
);

52 (*
uuid_Àn
) = 0;

53  
NULL
;

54 
	}
}

60 
öt32
 
	$buûd_dh˝_discovî_pxe
(
dh˝msg
* 
dmsg
)

62 
uöt32
 
i
,
j
;

63 
uöt32
 
xid
;

65 
	`mem˝y
(&
xid
, 
NëD©a
.
ëhuˇ°
, 4);

66 
	`mem£t
(
dmsg
, 0x00, (
dh˝msg
));

68 
dmsg
->
dc_b›
 = 0x01;

69 
dmsg
->
dc_hty≥
 = 0x01;

70 
dmsg
->
dc_hÀn
 = 0x06;

71 
dmsg
->
dc_h›s
 = 0x00;

72 
dmsg
->
dc_xid
 = 
	`ht⁄l
(
xid
);

73 
dmsg
->
dc_£cs
 = 0x0000;

74 
dmsg
->
dc_Êags
 = 0x0000;

75 
dmsg
->
dc_cù
 = 0x00000000;

76 
dmsg
->
dc_yù
 = 0x00000000;

77 
dmsg
->
dc_sù
 = 0x00000000;

78 
dmsg
->
dc_gù
 = 0x00000000;

79 
	`mem£t
(&
dmsg
->
dc_chaddr
,'\0',16);

80 
	`mem˝y
(&
dmsg
->
dc_chaddr
, 
NëD©a
.
ëhuˇ°
, 
ETH_ADDR_LEN
);

81 
	`mem£t
(&
dmsg
->
dc_boŸp
,'\0',192);

82 
dmsg
->
dc_cookõ
 = 
	`ht⁄l
(0x63825363);

84 
j
 = 0;

86 
uöt16
 
uuid_Àn
 = 0;

87 * 
uuid
 = 
	`gë_uuid
(&
uuid_Àn
);

88 if(
uuid_Àn
 == 0) {

89 
	`k¥ötf
("build_dhcp_discover_pxe: UnableÅoÑetrieve UUID\r\n");

90  
SYSERR
;

93 
dmsg
->
dc_›t
[
j
++] = 0xff & 97;

94 
dmsg
->
dc_›t
[
j
++] = 0xf‡& (
uuid_Àn
 + 1);

95 
dmsg
->
dc_›t
[
j
++] = 0xff & 0;

96 
i
 = 0; i < 
uuid_Àn
; i++) {

97 
dmsg
->
dc_›t
[
j
++] = 0xf‡& 
uuid
[
i
];

99 
dmsg
->
dc_›t
[
j
++] = 0xff & 94;

100 
dmsg
->
dc_›t
[
j
++] = 0xff & 3;

101 
dmsg
->
dc_›t
[
j
++] = 0xff & 1;

102 
dmsg
->
dc_›t
[
j
++] = 0xff & 1;

103 
dmsg
->
dc_›t
[
j
++] = 0xff & 2;

105 
dmsg
->
dc_›t
[
j
++] = 0xff & 93;

106 
dmsg
->
dc_›t
[
j
++] = 0xff & 2;

107 
dmsg
->
dc_›t
[
j
++] = 0xff & 0;

108 
dmsg
->
dc_›t
[
j
++] = 0xff & 0;

110 
dmsg
->
dc_›t
[
j
++] = 0xff & 53;

111 
dmsg
->
dc_›t
[
j
++] = 0xff & 1;

112 
dmsg
->
dc_›t
[
j
++] = 0xff & 1;

113 
dmsg
->
dc_›t
[
j
++] = 0xff & 0;

115 
dmsg
->
dc_›t
[
j
++] = 0xff & 55;

116 
dmsg
->
dc_›t
[
j
++] = 0xff & 4;

117 
dmsg
->
dc_›t
[
j
++] = 0xff & 1;

118 
dmsg
->
dc_›t
[
j
++] = 0xff & 3;

119 
dmsg
->
dc_›t
[
j
++] = 0xff & 43;

120 
dmsg
->
dc_›t
[
j
++] = 0xff & 60;

121 
dmsg
->
dc_›t
[
j
++] = 0xff & 66;

122 
dmsg
->
dc_›t
[
j
++] = 0xff & 67;

124 
dmsg
->
dc_›t
[
j
++] = 0xff & 60;

125 
dmsg
->
dc_›t
[
j
++] = 0xff & 32;

127 * 
pxe_˛õ¡_tmp
 = 
PXE_CLIENT_STRING
;

128 
i
 = 0; i < 
PXE_CLIENT_STRING_LEN
; i++) {

129 
dmsg
->
dc_›t
[
j
++] = 0xf‡& 
pxe_˛õ¡_tmp
[
i
];

132 
dmsg
->
dc_›t
[
j
++] = 0xff & 0;

133 
dmsg
->
dc_›t
[
j
++] = 0xff & 0;

134 
dmsg
->
dc_›t
[
j
++] = 0xff & 0;

136  (
uöt32
)((*)&
dmsg
->
dc_›t
[
j
] - (*)dmsg + 1);

137 
	}
}

	@net/tftp.c

3 
	~<xöu.h
>

4 
	~<°dlib.h
>

5 
	~<°rög.h
>

9 
	$°©us
 (*
	tt·p_ªcv_cb
Ë(
	tuöt16
, *, 
	tuöt32
, 
	tbyã
);

20 
°©us
 
	$t·p_£nd1
 (

21 
öt32
 
sock
,

22 
uöt32
 
ªmù
,

23 
uöt16
 *
ªmp‹t
,

24 
t·p_msg
 *
msg
,

25 
öt32
 
mÀn
,

26 
t·p_msg
 *
ömsg
,

28 
uöt16
 
ex≥˘ed


31 
öt32
 
ªt
;

32 
öt32
 
n
;

33 
uöt32
 
tmp
;

49 
ªt
 = 
	`udp_£ndto
(
sock
, 
ªmù
, *
ªmp‹t
, (*Ë
msg
, 
mÀn
);

51 i‡(
ªt
 =
SYSERR
) {

52  
SYSERR
;

63 
n
 = 
	`udp_ªcvaddr
(
sock
, &
tmp
, 
ªmp‹t
, (*)
ömsg
,

64 (
t·p_msg
), 
TFTP_WAIT
);

65 i‡(
n
 =
SYSERR
) {

66  
SYSERR
;

67 } i‡(
n
 =
TIMEOUT
) {

68 
	`k¥ötf
("\n[tftp_send1] UDP Receive Timeout\n");

69  
TIMEOUT
;

72 i‡(
n
 < 4) {

78 i‡(
	`¡ohs
(
ömsg
->
tf_›code
Ë=
TFTP_ERROR
) {

79 
	`k¥ötf
("\n[tftp_send1] TFTP Error %d, %s\n",

80 
	`¡ohs
(
ömsg
->
tf_îcode
),

81 
ömsg
->
tf_îmsg
 );

82  
SYSERR
;

87 i‡–(
	`¡ohs
(
ömsg
->
tf_›code
Ë=
TFTP_DATA
) &&

88 (
	`¡ohs
(
ömsg
->
tf_dblk
Ë=
ex≥˘ed
)) {

89  
n
;

95 
	}
}

103 
°©us
 
	$t·pgë
(

104 
uöt32
 
£rvîù
,

105 c⁄° * 
fûíame
,

106 * 
u£r_±r
,

108 
uöt32
 
u£r_Àn


112 
öt32
 
∆í
;

113 
uöt16
 
loˇÕ‹t
;

114 
uöt16
 
ªmp‹t
=
TFTP_PORT
;

115 
öt32
 
sock
;

116 
uöt16
 
ex≥˘ed
 = 1;

117 
öt32
 
i
;

118 
öt32
 
n
;

119 
öt32
 
ªt
;

120 
öt32
 
fûesiz
;

121 
t·p_msg
 
outmsg
;

122 
öt32
 
mÀn
;

123 
t·p_msg
 
ömsg
;

124 
öt32
 
dÀn
;

125 * 
b±r
;

126 
byã
 
œ°pkt
;

130 if(
fûíame
 =
NULL
 || 
£rvîù
 == 0 ||

131 
u£r_±r
 =
NULL
 || 
u£r_Àn
 == 0) {

132 
	`k¥ötf
("[TFTP GET] ERROR: Invalidárgument\n");

133  
SYSERR
;

136 
∆í
 = 
	`°∫Àn
(
fûíame
, 
TFTP_MAXNAM
+1);

137 i‡–(
∆í
 <0Ë|| (∆í > 
TFTP_MAXNAM
) ) {

138  
SYSERR
;

143 
loˇÕ‹t
 = 
	`gëp‹t
();

147 
sock
 = 
	`udp_ªgi°î
(
£rvîù
, 0, 
loˇÕ‹t
);

148 i‡(
sock
 =
SYSERR
) {

149 
	`k¥ötf
("[TFTP Get] ERROR: udp_register failed\n");

150  
SYSERR
;

155 
	`mem£t
((*)&
outmsg
, 
NULLCH
, (outmsg));

159 
fûesiz
 = 0;

160 
b±r
 = (*)
u£r_±r
;

161 
œ°pkt
 = 
FALSE
;

165 
outmsg
.
tf_›code
 = 
	`ht⁄s
(
TFTP_RRQ
);

166 
	`°∫˝y
(
outmsg
.
tf_fûemode
, 
fûíame
, 
∆í
+1);

168 
	`°∫˝y
(
outmsg
.
tf_fûemode
+
∆í
+1, "octet", ("octet")+1);

173 
mÀn
 = 
∆í
 + 
	`°∫Àn
("octet", 6) + 4;

179 
i
=0; i < 
TFTP_MAXRETRIES
; i++) {

180 
n
 = 
	`t·p_£nd1
(
sock
, 
£rvîù
, &
ªmp‹t
, &
outmsg
,

181 
mÀn
, &
ömsg
, 
ex≥˘ed
);

182 i‡(
n
 > 0) {

184 } i‡(
n
 =
SYSERR
) {

185 
	`k¥ötf
("\n[TFTP Get] ERROR: TFTP Send "

187 
	`udp_ªÀa£
(
sock
);

188  
SYSERR
;

189 } i‡(
n
 =
TIMEOUT
) {

194 i‡(
i
 >
TFTP_MAXRETRIES
) {

195 
	`k¥ötf
("\n[TFTP Get] ERROR: MaxÑetries %d "

196 "ex˚eded\n", 
TFTP_MAXRETRIES
);

197 
	`udp_ªÀa£
(
sock
);

198  
SYSERR
;

203 
dÀn
 = 
n
 - (
ömsg
.
tf_›code
) -

204 (
ömsg
.
tf_dblk
);

206 if(
dÀn
 < 512) {

207 
œ°pkt
 = 
TRUE
;

212 
i
=0; i<
dÀn
; i++) {

213 i‡(
u£r_Àn
 !
TFTP_FUNC_MAGIC
 &&

214 
fûesiz
 < 
u£r_Àn
) {

215 *
b±r
++ = 
ömsg
.
tf_d©a
[
i
];

217 
fûesiz
++;

222 if(
u£r_Àn
 =
TFTP_FUNC_MAGIC
) {

223 ((
t·p_ªcv_cb
)
u£r_±r
)(
	`¡ohs
(
ömsg
.
tf_dblk
),

224 
ömsg
.
tf_d©a
, 
dÀn
, 
œ°pkt
);

230 
outmsg
.
tf_›code
 = 
	`ht⁄s
(
TFTP_ACK
);

231 
outmsg
.
tf_ablk
 = 
	`ht⁄s
(
ex≥˘ed
);

232 
mÀn
 = (
outmsg
.
tf_›code
Ë+ (outmsg.
tf_ablk
);

236 i‡(
œ°pkt
) {

237 
ªt
 = 
	`udp_£ndto
(
sock
, 
£rvîù
, 
ªmp‹t
,

238 (*Ë&
outmsg
, 
mÀn
);

239 
	`udp_ªÀa£
(
sock
);

241 i‡(
ªt
 =
SYSERR
) {

242 
	`k¥ötf
("\n[TFTP GET] Error on final "

244  
SYSERR
;

247  
fûesiz
;

252 
ex≥˘ed
++;

254 
	}
}

	@net/udp.c

4 
	~<xöu.h
>

6 
ud≥¡ry
 
	gud±ab
[
UDP_SLOTS
];

12 
	$udp_öô
()

15 
öt32
 
i
;

17 
i
=0; i<
UDP_SLOTS
; i++) {

18 
ud±ab
[
i
].
ud°©e
 = 
UDP_FREE
;

22 
	}
}

29 
	$udp_ö
(

30 
√çackë
 *
pkçå


33 
ötmask
 
mask
;

34 
öt32
 
i
;

35 
ud≥¡ry
 *
ud±r
;

40 
mask
 = 
	`dißbÀ
();

42 
i
=0; i<
UDP_SLOTS
; i++) {

43 
ud±r
 = &
ud±ab
[
i
];

44 i‡(
ud±r
->
ud°©e
 =
UDP_FREE
) {

48 i‡((
pkçå
->
√t_udpdp‹t
 =
ud±r
->
udlo˝‹t
) &&

49 ((
ud±r
->
udªmp‹t
 == 0) ||

50 (
pkçå
->
√t_udp•‹t
 =
ud±r
->
udªmp‹t
)) &&

51 –((
ud±r
->
udªmù
==0) ||

52 (
pkçå
->
√t_ù§c
 =
ud±r
->
udªmù
))) ) {

56 i‡(
ud±r
->
udcou¡
 < 
UDP_QSIZ
) {

57 
ud±r
->
udcou¡
++;

58 
ud±r
->
udqueue
[ud±r->
udèû
++] = 
pkçå
;

59 i‡(
ud±r
->
udèû
 >
UDP_QSIZ
) {

60 
ud±r
->
udèû
 = 0;

62 i‡(
ud±r
->
ud°©e
 =
UDP_RECV
) {

63 
ud±r
->
ud°©e
 = 
UDP_USED
;

64 
	`£nd
 (
ud±r
->
udpid
, 
OK
);

66 
	`ª°‹e
(
mask
);

74 
	`‰ìbuf
((*Ë
pkçå
);

75 
	`ª°‹e
(
mask
);

77 
	}
}

85 
uid32
 
	$udp_ªgi°î
 (

86 
uöt32
 
ªmù
,

87 
uöt16
 
ªmp‹t
,

88 
uöt16
 
lo˝‹t


91 
ötmask
 
mask
;

92 
öt32
 
¶Ÿ
;

93 
ud≥¡ry
 *
ud±r
;

97 
mask
 = 
	`dißbÀ
();

101 
¶Ÿ
=0; slŸ<
UDP_SLOTS
; slot++) {

102 
ud±r
 = &
ud±ab
[
¶Ÿ
];

103 i‡(
ud±r
->
ud°©e
 =
UDP_FREE
) {

109 i‡–(
ªmp‹t
 =
ud±r
->
udªmp‹t
) &&

110 (
lo˝‹t
 =
ud±r
->
udlo˝‹t
) &&

111 (
ªmù
 =
ud±r
->
udªmù
 ) ) {

115 
	`ª°‹e
(
mask
);

116  
SYSERR
;

122 
¶Ÿ
=0; slŸ<
UDP_SLOTS
; slot++) {

123 
ud±r
 = &
ud±ab
[
¶Ÿ
];

124 i‡(
ud±r
->
ud°©e
 !
UDP_FREE
) {

127 
ud±r
->
udlo˝‹t
 = 
lo˝‹t
;

128 
ud±r
->
udªmp‹t
 = 
ªmp‹t
;

129 
ud±r
->
udªmù
 = 
ªmù
;

130 
ud±r
->
udcou¡
 = 0;

131 
ud±r
->
udhód
 = ud±r->
udèû
 = 0;

132 
ud±r
->
udpid
 = -1;

133 
ud±r
->
ud°©e
 = 
UDP_USED
;

134 
	`ª°‹e
(
mask
);

135  
¶Ÿ
;

138 
	`ª°‹e
(
mask
);

139  
SYSERR
;

140 
	}
}

146 
öt32
 
	$udp_ªcv
 (

147 
uid32
 
¶Ÿ
,

148 *
buff
,

149 
öt32
 
Àn
,

150 
uöt32
 
timeout


153 
ötmask
 
mask
;

154 
ud≥¡ry
 *
ud±r
;

155 
umsg32
 
msg
;

156 
√çackë
 *
pkt
;

157 
öt32
 
i
;

158 
öt32
 
msgÀn
;

159 *
ud©≠å
;

163 
mask
 = 
	`dißbÀ
();

167 i‡((
¶Ÿ
 < 0Ë|| (¶Ÿ >
UDP_SLOTS
)) {

168 
	`ª°‹e
(
mask
);

169  
SYSERR
;

174 
ud±r
 = &
ud±ab
[
¶Ÿ
];

178 i‡(
ud±r
->
ud°©e
 !
UDP_USED
) {

179 
	`ª°‹e
(
mask
);

180  
SYSERR
;

185 i‡(
ud±r
->
udcou¡
 == 0) {

186 
ud±r
->
ud°©e
 = 
UDP_RECV
;

187 
ud±r
->
udpid
 = 
cuºpid
;

188 
msg
 = 
	`ªcv˛r
();

189 
msg
 = 
	`ªcvtime
(
timeout
);

190 
ud±r
->
ud°©e
 = 
UDP_USED
;

191 i‡(
msg
 =
TIMEOUT
) {

192 
	`ª°‹e
(
mask
);

193  
TIMEOUT
;

194 } i‡(
msg
 !
OK
) {

195 
	`ª°‹e
(
mask
);

196  
SYSERR
;

202 
pkt
 = 
ud±r
->
udqueue
[ud±r->
udhód
++];

203 i‡(
ud±r
->
udhód
 >
UDP_QSIZ
) {

204 
ud±r
->
udhód
 = 0;

206 
ud±r
->
udcou¡
--;

210 
msgÀn
 = 
pkt
->
√t_ud∂í
 - 
UDP_HDR_LEN
;

211 
ud©≠å
 = (*)
pkt
->
√t_udpd©a
;

212 i‡(
Àn
 < 
msgÀn
) {

213 
msgÀn
 = 
Àn
;

215 
i
=0; i<
msgÀn
; i++) {

216 *
buff
++ = *
ud©≠å
++;

218 
	`‰ìbuf
((*)
pkt
);

219 
	`ª°‹e
(
mask
);

220  
msgÀn
;

221 
	}
}

227 
öt32
 
	$udp_ªcvaddr
 (

228 
uid32
 
¶Ÿ
,

229 
uöt32
 *
ªmù
,

230 
uöt16
 *
ªmp‹t
,

231 *
buff
,

232 
öt32
 
Àn
,

233 
uöt32
 
timeout


236 
ötmask
 
mask
;

237 
ud≥¡ry
 *
ud±r
;

238 
umsg32
 
msg
;

239 
√çackë
 *
pkt
;

240 
öt32
 
msgÀn
;

241 
öt32
 
i
;

242 *
ud©≠å
;

246 
mask
 = 
	`dißbÀ
();

250 i‡((
¶Ÿ
 < 0Ë|| (¶Ÿ >
UDP_SLOTS
)) {

251 
	`ª°‹e
(
mask
);

252  
SYSERR
;

257 
ud±r
 = &
ud±ab
[
¶Ÿ
];

261 i‡(
ud±r
->
ud°©e
 !
UDP_USED
) {

262 
	`ª°‹e
(
mask
);

263  
SYSERR
;

268 i‡(
ud±r
->
udcou¡
 == 0) {

269 
ud±r
->
ud°©e
 = 
UDP_RECV
;

270 
ud±r
->
udpid
 = 
cuºpid
;

271 
msg
 = 
	`ªcv˛r
();

272 
msg
 = 
	`ªcvtime
(
timeout
);

273 
ud±r
->
ud°©e
 = 
UDP_USED
;

274 i‡(
msg
 =
TIMEOUT
) {

275 
	`ª°‹e
(
mask
);

276  
TIMEOUT
;

277 } i‡(
msg
 !
OK
) {

278 
	`ª°‹e
(
mask
);

279  
SYSERR
;

285 
pkt
 = 
ud±r
->
udqueue
[ud±r->
udhód
++];

286 i‡(
ud±r
->
udhód
 >
UDP_QSIZ
) {

287 
ud±r
->
udhód
 = 0;

292 *
ªmù
 = 
pkt
->
√t_ù§c
;

293 *
ªmp‹t
 = 
pkt
->
√t_udp•‹t
;

295 
ud±r
->
udcou¡
--;

299 
msgÀn
 = 
pkt
->
√t_ud∂í
 - 
UDP_HDR_LEN
;

300 
ud©≠å
 = (*)
pkt
->
√t_udpd©a
;

301 i‡(
Àn
 < 
msgÀn
) {

302 
msgÀn
 = 
Àn
;

304 
i
=0; i<
msgÀn
; i++) {

305 *
buff
++ = *
ud©≠å
++;

307 
	`‰ìbuf
((*)
pkt
);

308 
	`ª°‹e
(
mask
);

309  
msgÀn
;

310 
	}
}

316 
°©us
 
	$udp_£nd
 (

317 
uid32
 
¶Ÿ
,

318 *
buff
,

319 
öt32
 
Àn


322 
ötmask
 
mask
;

323 
√çackë
 *
pkt
;

324 
öt32
 
pkéí
;

325 
uöt16
 
idít
 = 1;

326 *
ud©≠å
;

327 
uöt32
 
ªmù
;

328 
uöt16
 
ªmp‹t
;

329 
uöt16
 
lo˝‹t
;

330 
uöt32
 
locù
;

332 
ud≥¡ry
 *
ud±r
;

336 
mask
 = 
	`dißbÀ
();

340 i‡–(
¶Ÿ
 < 0Ë|| (¶Ÿ >
UDP_SLOTS
) ) {

341 
	`ª°‹e
(
mask
);

342  
SYSERR
;

347 
ud±r
 = &
ud±ab
[
¶Ÿ
];

351 i‡(
ud±r
->
ud°©e
 =
UDP_FREE
) {

352 
	`ª°‹e
(
mask
);

353  
SYSERR
;

358 
ªmù
 = 
ud±r
->
udªmù
;

359 i‡(
ªmù
 == 0) {

360 
	`ª°‹e
(
mask
);

361  
SYSERR
;

364 
locù
 = 
NëD©a
.
ùuˇ°
;

365 
ªmp‹t
 = 
ud±r
->
udªmp‹t
;

366 
lo˝‹t
 = 
ud±r
->
udlo˝‹t
;

370 
pkt
 = (
√çackë
 *)
	`gëbuf
(
√tbuÂoﬁ
);

372 i‡((
öt32
)
pkt
 =
SYSERR
) {

373 
	`ª°‹e
(
mask
);

374  
SYSERR
;

379 
pkéí
 = ((*)&
pkt
->
√t_udpd©a
 - (*ÌktË+ 
Àn
;

383 
	`mem˝y
((*)
pkt
->
√t_ëh§c
,
NëD©a
.
ëhuˇ°
,
ETH_ADDR_LEN
);

384 
pkt
->
√t_ëhty≥
 = 0x0800;

385 
pkt
->
√t_ùvh
 = 0x45;

386 
pkt
->
√t_ùtos
 = 0x00;

387 
pkt
->
√t_ùÀn

pkéí
 - 
ETH_HDR_LEN
;

388 
pkt
->
√t_ùid
 = 
idít
++;

389 
pkt
->
√t_ù‰ag
 = 0x0000;

390 
pkt
->
√t_ùâl
 = 0xff;

391 
pkt
->
√t_ù¥Ÿo
 = 
IP_UDP
;

392 
pkt
->
√t_ùcksum
 = 0x0000;

393 
pkt
->
√t_ù§c
 = 
locù
;

394 
pkt
->
√t_ùd°
 = 
ªmù
;

396 
pkt
->
√t_udp•‹t
 = 
lo˝‹t
;

397 
pkt
->
√t_udpdp‹t
 = 
ªmp‹t
;

398 
pkt
->
√t_ud∂í
 = (
uöt16
)(
UDP_HDR_LEN
+
Àn
);

399 
pkt
->
√t_udpcksum
 = 0x0000;

400 
ud©≠å
 = (*Ë
pkt
->
√t_udpd©a
;

401 
	`mem˝y
(
ud©≠å
, 
buff
, 
Àn
);

405 
	`ù_£nd
(
pkt
);

406 
	`ª°‹e
(
mask
);

407  
OK
;

408 
	}
}

415 
°©us
 
	$udp_£ndto
 (

416 
uid32
 
¶Ÿ
,

417 
uöt32
 
ªmù
,

418 
uöt16
 
ªmp‹t
,

419 *
buff
,

420 
öt32
 
Àn


423 
ötmask
 
mask
;

424 
√çackë
 *
pkt
;

425 
öt32
 
pkéí
;

426 
uöt16
 
idít
 = 1;

427 
ud≥¡ry
 *
ud±r
;

428 *
ud©≠å
;

432 
mask
 = 
	`dißbÀ
();

436 i‡–(
¶Ÿ
 < 0Ë|| (¶Ÿ >
UDP_SLOTS
) ) {

437 
	`ª°‹e
(
mask
);

438  
SYSERR
;

443 
ud±r
 = &
ud±ab
[
¶Ÿ
];

447 i‡(
ud±r
->
ud°©e
 =
UDP_FREE
) {

448 
	`ª°‹e
(
mask
);

449  
SYSERR
;

454 
pkt
 = (
√çackë
 *)
	`gëbuf
(
√tbuÂoﬁ
);

456 i‡((
öt32
)
pkt
 =
SYSERR
) {

457 
	`ª°‹e
(
mask
);

458  
SYSERR
;

463 
pkéí
 = ((*)&
pkt
->
√t_udpd©a
 - (*ÌktË+ 
Àn
;

467 
	`mem˝y
((*)
pkt
->
√t_ëh§c
,
NëD©a
.
ëhuˇ°
,
ETH_ADDR_LEN
);

468 
pkt
->
√t_ëhty≥
 = 0x0800;

469 
pkt
->
√t_ùvh
 = 0x45;

470 
pkt
->
√t_ùtos
 = 0x00;

471 
pkt
->
√t_ùÀn

pkéí
 - 
ETH_HDR_LEN
;

472 
pkt
->
√t_ùid
 = 
idít
++;

473 
pkt
->
√t_ù‰ag
 = 0x0000;

474 
pkt
->
√t_ùâl
 = 0xff;

475 
pkt
->
√t_ù¥Ÿo
 = 
IP_UDP
;

476 
pkt
->
√t_ùcksum
 = 0x0000;

477 
pkt
->
√t_ù§c
 = 
NëD©a
.
ùuˇ°
;

478 
pkt
->
√t_ùd°
 = 
ªmù
;

479 
pkt
->
√t_udp•‹t
 = 
ud±r
->
udlo˝‹t
;

480 
pkt
->
√t_udpdp‹t
 = 
ªmp‹t
;

481 
pkt
->
√t_ud∂í
 = (
uöt16
)(
UDP_HDR_LEN
+
Àn
);

482 
pkt
->
√t_udpcksum
 = 0x0000;

483 
ud©≠å
 = (*Ë
pkt
->
√t_udpd©a
;

484 
	`mem˝y
(
ud©≠å
, 
buff
, 
Àn
);

488 
	`ù_£nd
(
pkt
);

489 
	`ª°‹e
(
mask
);

490  
OK
;

491 
	}
}

498 
°©us
 
	$udp_ªÀa£
 (

499 
uid32
 
¶Ÿ


502 
ötmask
 
mask
;

503 
ud≥¡ry
 *
ud±r
;

504 
√çackë
 *
pkt
;

508 
mask
 = 
	`dißbÀ
();

512 i‡–(
¶Ÿ
 < 0Ë|| (¶Ÿ >
UDP_SLOTS
) ) {

513 
	`ª°‹e
(
mask
);

514  
SYSERR
;

519 
ud±r
 = &
ud±ab
[
¶Ÿ
];

523 i‡(
ud±r
->
ud°©e
 =
UDP_FREE
) {

524 
	`ª°‹e
(
mask
);

525  
SYSERR
;

530 
	`ªsched_˙é
(
DEFER_START
);

531 
ud±r
->
udcou¡
 > 0) {

532 
pkt
 = 
ud±r
->
udqueue
[ud±r->
udhód
++];

533 i‡(
ud±r
->
udhód
 >
UDP_QSIZ
) {

534 
ud±r
->
udhód
 = 0;

536 
	`‰ìbuf
((*)
pkt
);

537 
ud±r
->
udcou¡
--;

539 
ud±r
->
ud°©e
 = 
UDP_FREE
;

540 
	`ªsched_˙é
(
DEFER_STOP
);

541 
	`ª°‹e
(
mask
);

542  
OK
;

543 
	}
}

549 
	$udp_¡oh
(

550 
√çackë
 *
pkçå


553 
pkçå
->
√t_udp•‹t
 = 
	`¡ohs
(pktptr->net_udpsport);

554 
pkçå
->
√t_udpdp‹t
 = 
	`¡ohs
(pktptr->net_udpdport);

555 
pkçå
->
√t_ud∂í
 = 
	`¡ohs
(pktptr->net_udplen);

557 
	}
}

563 
	$udp_ht⁄
(

564 
√çackë
 *
pkçå


567 
pkçå
->
√t_udp•‹t
 = 
	`ht⁄s
(pktptr->net_udpsport);

568 
pkçå
->
√t_udpdp‹t
 = 
	`ht⁄s
(pktptr->net_udpdport);

569 
pkçå
->
√t_ud∂í
 = 
	`ht⁄s
(pktptr->net_udplen);

571 
	}
}

	@shell/addargs.c

3 
	~<xöu.h
>

4 
	~"sh¥ŸŸy≥s.h
"

11 
°©us
 
	$add¨gs
(

12 
pid32
 
pid
,

13 
öt32
 
¡ok
,

14 
öt32
 
tok
[],

15 
öt32
 
éí
,

16 *
tokbuf
,

17 *
dummy


23 
ötmask
 
mask
;

24 
¥o˚¡
 *
¥±r
;

25 
uöt32
 
Æoc
;

27 
uöt32
 *
¨gloc
;

29 *
¨g°r
;

31 
uöt32
 *
£¨ch
;

33 
uöt32
 *
≠å
;

34 
öt32
 
i
;

36 
mask
 = 
	`dißbÀ
();

40 i‡–(
¡ok
 <0Ë|| (
éí
 < 0) ) {

41 
	`ª°‹e
(
mask
);

42  
SYSERR
;

45 
¥±r
 = &
¥o˘ab
[
pid
];

51 
Æoc
 = (
uöt32
Ë(
¥±r
->
¥°kba£


52 - 
¥±r
->
¥°kÀn
 + (
uöt32
));

53 
¨gloc
 = (
uöt32
*Ë((
Æoc
 + 3) & ~0x3);

57 
¨g°r
 = (*Ë(
¨gloc
 + (
¡ok
+1));

62 
≠å
=
¨gloc
, 
i
=0; i < 
¡ok
; i++) {

63 *
≠å
++ = (
uöt32
Ë(
¨g°r
 + 
tok
[
i
]);

68 *
≠å
++ = (
uöt32
)
NULL
;

73 
	`mem˝y
(
≠å
, 
tokbuf
, 
éí
);

77 
£¨ch
 = (
uöt32
 *)
¥±r
->
¥°k±r
;

78 
£¨ch
 < (
uöt32
 *)
¥±r
->
¥°kba£
; search++) {

82 i‡(*
£¨ch
 =(
uöt32
)
dummy
) {

83 *
£¨ch
 = (
uöt32
)
¨gloc
;

84 
	`ª°‹e
(
mask
);

85  
OK
;

91 
	`ª°‹e
(
mask
);

92  
SYSERR
;

93 
	}
}

	@shell/lexan.c

3 
	~<xöu.h
>

10 
öt32
 
	$Àx™
 (

11 *
löe
,

13 
öt32
 
Àn
,

15 *
tokbuf
,

18 
öt32
 *
éí
,

20 
öt32
 
tok
[],

22 
öt32
 
toktyp
[]

26 
quŸe
;

27 
uöt32
 
¡ok
;

28 *
p
;

30 
öt32
 
tbödex
;

31 
ch
;

35 
¡ok
 = 0;

36 
p
 = 
löe
;

37 
tbödex
 = 0;

41  (*
p
 !
NULLCH
Ë&& (*∞!
SH_NEWLINE
) ) {

45 i‡(
¡ok
 >
SHELL_MAXTOK
) {

46  
SYSERR
;

51  (*
p
 =
SH_BLANK
Ë|| (*∞=
SH_TAB
) ) {

52 
p
++;

57 
ch
 = *
p
;

58 i‡–(
ch
==
SH_NEWLINE
Ë|| (ch==
NULLCH
) ) {

59 *
éí
 = 
tbödex
;

60  
¡ok
;

66 
tok
[
¡ok
] = 
tbödex
;

70 
ch
) {

72 
SH_AMPER
: 
toktyp
[
¡ok
] = 
SH_TOK_AMPER
;

73 
tokbuf
[
tbödex
++] = 
ch
;

74 
tokbuf
[
tbödex
++] = 
NULLCH
;

75 
¡ok
++;

76 
p
++;

79 
SH_LESS
: 
toktyp
[
¡ok
] = 
SH_TOK_LESS
;

80 
tokbuf
[
tbödex
++] = 
ch
;

81 
tokbuf
[
tbödex
++] = 
NULLCH
;

82 
¡ok
++;

83 
p
++;

86 
SH_GREATER
: 
toktyp
[
¡ok
] = 
SH_TOK_GREATER
;

87 
tokbuf
[
tbödex
++] = 
ch
;

88 
tokbuf
[
tbödex
++] = 
NULLCH
;

89 
¡ok
++;

90 
p
++;

93 : 
toktyp
[
¡ok
] = 
SH_TOK_OTHER
;

98 i‡–(
ch
==
SH_SQUOTE
Ë|| (ch==
SH_DQUOTE
) ) {

99 
quŸe
 = 
ch
;

103 
p
++;

105  ((
ch
=*
p
++Ë!
quŸe
Ë&& (ch !
SH_NEWLINE
)

106 && (
ch
 !
NULLCH
) ) {

107 
tokbuf
[
tbödex
++] = 
ch
;

109 i‡(
ch
 !
quŸe
) {

110  
SYSERR
;

115 
tokbuf
[
tbödex
++] = 
NULLCH
;

116 
¡ok
++;

122 
tokbuf
[
tbödex
++] = 
ch
;

123 
p
++;

125  ((
ch
 = *
p
Ë!
SH_NEWLINE
Ë&& (ch !
NULLCH
)

126 && (
ch
 !
SH_LESS
Ë&& (ch !
SH_GREATER
)

127 && (
ch
 !
SH_BLANK
Ë&& (ch !
SH_TAB
)

128 && (
ch
 !
SH_AMPER
Ë&& (ch !
SH_SQUOTE
)

129 && (
ch
 !
SH_DQUOTE
) ) {

130 
tokbuf
[
tbödex
++] = 
ch
;

131 
p
++;

136 i‡–(
ch
 =
SH_SQUOTE
Ë|| (ch =
SH_DQUOTE
)

137 || (
ch
 =
SH_LESS
Ë|| (ch =
SH_GREATER
) ) {

138  
SYSERR
;

141 
tokbuf
[
tbödex
++] = 
NULLCH
;

143 
¡ok
++;

146 *
éí
 = 
tbödex
;

147  
¡ok
;

148 
	}
}

	@shell/shell.c

3 
	~<xöu.h
>

4 
	~<°dio.h
>

5 
	~"sh¥ŸŸy≥s.h
"

10 c⁄° 
cmdít
 
	gcmdèb
[] = {

11 {"¨gecho", 
TRUE
, 
xsh_¨gecho
},

12 {"¨p", 
FALSE
, 
xsh_¨p
},

13 {"ˇt", 
FALSE
, 
xsh_ˇt
},

14 {"˛ór", 
TRUE
, 
xsh_˛ór
},

15 {"d©e", 
FALSE
, 
xsh_d©e
},

16 {"devdump", 
FALSE
, 
xsh_devdump
},

17 {"echo", 
FALSE
, 
xsh_echo
},

18 {"exô", 
TRUE
, 
xsh_exô
},

19 {"hñp", 
FALSE
, 
xsh_hñp
},

20 {"kûl", 
TRUE
, 
xsh_kûl
},

21 {"memdump", 
FALSE
, 
xsh_memdump
},

22 {"mem°©", 
FALSE
, 
xsh_mem°©
},

23 {"√töfo", 
FALSE
, 
xsh_√töfo
},

24 {"pög", 
FALSE
, 
xsh_pög
},

25 {"ps", 
FALSE
, 
xsh_ps
},

26 {"¶ìp", 
FALSE
, 
xsh_¶ìp
},

27 {"udp", 
FALSE
, 
xsh_udpdump
},

28 {"ud≥cho", 
FALSE
, 
xsh_ud≥cho
},

29 {"ud≥£rvî", 
FALSE
, 
xsh_ud≥£rvî
},

30 {"u±ime", 
FALSE
, 
xsh_u±ime
},

31 {"?", 
FALSE
, 
xsh_hñp
},

32 {"hñlo", 
FALSE
, 
xsh_hñlo
},

33 {"œyout", 
FALSE
, 
xsh_œyout
}

37 
uöt32
 
	gncmd
 = (
cmdèb
Ë/ (
cmdít
);

56 
¥o˚ss
 
	$shñl
 (

57 
did32
 
dev


60 
buf
[
SHELL_BUFLEN
];

62 
öt32
 
Àn
;

63 
tokbuf
[
SHELL_BUFLEN
 +

64 
SHELL_MAXTOK
];

66 
öt32
 
éí
;

68 
öt32
 
tok
[
SHELL_MAXTOK
];

70 
öt32
 
toktyp
[
SHELL_MAXTOK
];

71 
öt32
 
¡ok
;

72 
pid32
 
chûd
;

73 
boﬁ8
 
backgnd
;

74 *
ouäame
, *
ö«me
;

76 
did32
 
°döput
, 
°douçut
;

78 
öt32
 
i
;

79 
öt32
 
j
;

80 
öt32
 
msg
;

82 
öt32
 
tm∑rg
;

85 *
§c
, *
cmp
;

87 
boﬁ8
 
diff
;

89 *
¨gs
[
SHELL_MAXTOK
];

94 
	`Ârötf
(
dev
, "\n\n%s%s\n%s\n%s\n%s\n%s\n%s\n%s\n%s\n%s\n",

95 
SHELL_BAN0
,
SHELL_BAN1
,
SHELL_BAN2
,
SHELL_BAN3
,
SHELL_BAN4
,

96 
SHELL_BAN5
,
SHELL_BAN6
,
SHELL_BAN7
,
SHELL_BAN8
,
SHELL_BAN9
);

98 
	`Ârötf
(
dev
, "%s\n\n", 
SHELL_STRTMSG
);

102 
TRUE
) {

106 
	`Ârötf
(
dev
, 
SHELL_PROMPT
);

110 
Àn
 = 
	`ªad
(
dev
, 
buf
, (buf));

114 i‡(
Àn
 =
EOF
) {

120 i‡(
Àn
 <= 1) {

124 
buf
[
Àn
] = 
SH_NEWLINE
;

128 
¡ok
 = 
	`Àx™
(
buf
, 
Àn
, 
tokbuf
, &
éí
, 
tok
, 
toktyp
);

132 i‡(
¡ok
 =
SYSERR
) {

133 
	`Ârötf
(
dev
,"%s\n", 
SHELL_SYNERRMSG
);

139 i‡(
¡ok
 == 0) {

140 
	`Ârötf
(
dev
, "\n");

146 i‡(
toktyp
[
¡ok
-1] =
SH_TOK_AMPER
) {

147 
¡ok
-- ;

148 
éí
-= 2;

149 
backgnd
 = 
TRUE
;

151 
backgnd
 = 
FALSE
;

157 
ouäame
 = 
ö«me
 = 
NULL
;

158 i‡–(
¡ok
 >=3Ë&& ( (
toktyp
[¡ok-2] =
SH_TOK_LESS
)

159 ||(
toktyp
[
¡ok
-2] =
SH_TOK_GREATER
))){

160 i‡(
toktyp
[
¡ok
-1] !
SH_TOK_OTHER
) {

161 
	`Ârötf
(
dev
,"%s\n", 
SHELL_SYNERRMSG
);

164 i‡(
toktyp
[
¡ok
-2] =
SH_TOK_LESS
) {

165 
ö«me
 = &
tokbuf
[
tok
[
¡ok
-1]];

167 
ouäame
 = &
tokbuf
[
tok
[
¡ok
-1]];

169 
¡ok
 -= 2;

170 
éí
 = 
tok
[
¡ok
];

174 i‡–(
¡ok
 >=3Ë&& ( (
toktyp
[¡ok-2] =
SH_TOK_LESS
)

175 ||(
toktyp
[
¡ok
-2] =
SH_TOK_GREATER
))){

176 i‡(
toktyp
[
¡ok
-1] !
SH_TOK_OTHER
) {

177 
	`Ârötf
(
dev
,"%s\n", 
SHELL_SYNERRMSG
);

180 i‡(
toktyp
[
¡ok
-2] =
SH_TOK_LESS
) {

181 i‡(
ö«me
 !
NULL
) {

182 
	`Ârötf
(
dev
,"%s\n", 
SHELL_SYNERRMSG
);

185 
ö«me
 = &
tokbuf
[
tok
[
¡ok
-1]];

187 i‡(
ouäame
 !
NULL
) {

188 
	`Ârötf
(
dev
,"%s\n", 
SHELL_SYNERRMSG
);

191 
ouäame
 = &
tokbuf
[
tok
[
¡ok
-1]];

193 
¡ok
 -= 2;

194 
éí
 = 
tok
[
¡ok
];

199 
i
=0; i<
¡ok
; i++) {

200 i‡(
toktyp
[
i
] !
SH_TOK_OTHER
) {

204 i‡((
¡ok
 =0Ë|| (
i
 <Çtok)) {

205 
	`Ârötf
(
dev
, 
SHELL_SYNERRMSG
);

209 
°döput
 = 
°douçut
 = 
dev
;

213 
j
 = 0; j < 
ncmd
; j++) {

214 
§c
 = 
cmdèb
[
j
].
˙ame
;

215 
cmp
 = 
tokbuf
;

216 
diff
 = 
FALSE
;

217 *
§c
 !
NULLCH
) {

218 i‡(*
cmp
 !*
§c
) {

219 
diff
 = 
TRUE
;

222 
§c
++;

223 
cmp
++;

225 i‡(
diff
 || (*
cmp
 !
NULLCH
)) {

234 i‡(
j
 >
ncmd
) {

235 
	`Ârötf
(
dev
, "comm™d %†nŸ found\n", 
tokbuf
);

241 i‡(
cmdèb
[
j
].
cbuûtö
) {

242 i‡(
ö«me
 !
NULL
 || 
ouäame
 !NULL || 
backgnd
){

243 
	`Ârötf
(
dev
, 
SHELL_BGERRMSG
);

248 
i
=0; i<
¡ok
; i++) {

249 
¨gs
[
i
] = &
tokbuf
[
tok
[i]];

254 i‡((*
cmdèb
[
j
].
cfunc
)(
¡ok
, 
¨gs
)

255 =
SHELL_EXIT
) {

264 i‡(
ö«me
 !
NULL
) {

265 
°döput
 = 
	`›í
(
NAMESPACE
,
ö«me
,"ro");

266 i‡(
°döput
 =
SYSERR
) {

267 
	`Ârötf
(
dev
, 
SHELL_INERRMSG
, 
ö«me
);

271 i‡(
ouäame
 !
NULL
) {

272 
°douçut
 = 
	`›í
(
NAMESPACE
,
ouäame
,"w");

273 i‡(
°douçut
 =
SYSERR
) {

274 
	`Ârötf
(
dev
, 
SHELL_OUTERRMSG
, 
ouäame
);

277 
	`c⁄åﬁ
(
°douçut
, 
F_CTL_TRUNC
, 0, 0);

283 
chûd
 = 
	`¸óã
(
cmdèb
[
j
].
cfunc
,

284 
SHELL_CMDSTK
, 
PSSCHED
, 
SHELL_CMDPRIO
,

285 
cmdèb
[
j
].
˙ame
, 2, 
¡ok
, &
tm∑rg
);

289 i‡((
chûd
 =
SYSERR
) ||

290 (
	`add¨gs
(
chûd
, 
¡ok
, 
tok
, 
éí
, 
tokbuf
, &
tm∑rg
)

291 =
SYSERR
) ) {

292 
	`Ârötf
(
dev
, 
SHELL_CREATMSG
);

298 
¥o˘ab
[
chûd
].
¥desc
[0] = 
°döput
;

299 
¥o˘ab
[
chûd
].
¥desc
[1] = 
°douçut
;

301 
msg
 = 
	`ªcv˛r
();

302 
	`ªsume
(
chûd
);

303 i‡(! 
backgnd
) {

304 
msg
 = 
	`ª˚ive
();

305 
msg
 !
chûd
) {

306 
msg
 = 
	`ª˚ive
();

313 
	`Ârötf
(
dev
,
SHELL_EXITMSG
);

314  
OK
;

315 
	}
}

	@shell/xsh_argecho.c

3 
	~<xöu.h
>

4 
	~<°dio.h
>

10 
shñlcmd
 
	$xsh_¨gecho
(
«rgs
, *
¨gs
[])

12 
öt32
 
i
;

14 
	`¥ötf
("\n\nThê%dárgumít†¨e:\n", 
«rgs
);

15 
i
 = 0; i < 
«rgs
; i++) {

16 
	`¥ötf
(" %2d: %s\n", 
i
, 
¨gs
[i]);

18 
	`¥ötf
("\n");

21 
	}
}

	@shell/xsh_arp.c

3 
	~<xöu.h
>

4 
	~<°dio.h
>

5 
	~<°rög.h
>

7 
¨p_dmp
();

12 
shñlcmd
 
	$xsh_¨p
(
«rgs
, *
¨gs
[])

16 i‡(
«rgs
 =2 && 
	`°∫cmp
(
¨gs
[1], "--help", 7) == 0) {

17 
	`¥ötf
("U£: %s\n\n", 
¨gs
[0]);

18 
	`¥ötf
("Description:\n");

19 
	`¥ötf
("\tDisplays information fromÅhe ARP cache\n");

20 
	`¥ötf
("Options:\n");

21 
	`¥ötf
("\t--help\t displayÅhis helpándÉxit\n");

26 
	`¥ötf
("\n");

27 
	`¨p_dmp
();

30 
	}
}

37 
	$¨p_dmp
 ()

39 
öt32
 
i
, 
j
;

40 
¨≥¡ry
 *
¨±r
;

44 
	`¥ötf
("ARP cache:\n");

45 
	`¥ötf
(" State Pid IP Address Hardware Address\n");

46 
	`¥ötf
(" ----- --- --------------- -----------------\n");

47 
i
 = 0; i < 
ARP_SIZ
; i++) {

48 
¨±r
 = &
¨pˇche
[
i
];

49 i‡(
¨±r
->
¨°©e
 =
AR_FREE
) {

52 
¨±r
->
¨°©e
) {

53 
AR_PENDING
: 
	`¥ötf
(" PEND "); ;

54 
AR_RESOLVED
: 
	`¥ötf
(" RESLV"); ;

55 : 
	`¥ötf
(" ?????"); ;

57 i‡(
¨±r
->
¨°©e
 =
AR_PENDING
) {

58 
	`¥ötf
("%4d ", 
¨±r
->
¨pid
);

60 
	`¥ötf
(" ");

62 
	`¥ötf
("%3d.", (
¨±r
->
¨∑ddr
 & 0xFF000000) >> 24);

63 
	`¥ötf
("%3d.", (
¨±r
->
¨∑ddr
 & 0x00FF0000) >> 16);

64 
	`¥ötf
("%3d.", (
¨±r
->
¨∑ddr
 & 0x0000FF00) >> 8);

65 
	`¥ötf
("%3d", (
¨±r
->
¨∑ddr
 & 0x000000FF));

67 
	`¥ötf
(" %02X", 
¨±r
->
¨haddr
[0]);

68 
j
 = 1; j < 
ARP_HALEN
; j++) {

69 
	`¥ötf
(":%02X", 
¨±r
->
¨haddr
[
j
]);

71 
	`¥ötf
("\n");

73 
	`¥ötf
("\n");

75 
	}
}

	@shell/xsh_cat.c

3 
	~<xöu.h
>

4 
	~<°dio.h
>

5 
	~<°rög.h
>

11 
shñlcmd
 
	$xsh_ˇt
(
«rgs
, *
¨gs
[])

13 
öt32
 
i
;

14 
öt32
 
√xtch
;

15 
did32
 
des¸
;

16 *
¨g±r
;

21 i‡(
«rgs
 =2 && 
	`°∫cmp
(
¨gs
[1], "--help", 7) == 0) {

22 
	`¥ötf
("U£: %†[fûe...]\n\n", 
¨gs
[0]);

23 
	`¥ötf
("Description:\n");

24 
	`¥ötf
("\twrites contents of files or stdinÅo stdout\n");

25 
	`¥ötf
("Options:\n");

26 
	`¥ötf
("\tfile...\tzero or more fileÇames\n");

27 
	`¥ötf
("\t--help\t displayÅhis helpándÉxit\n");

31 i‡(
«rgs
 == 1) {

32 
√xtch
 = 
	`gëc
(
°dö
);

33 
√xtch
 !
EOF
) {

34 
	`putc
(
°dout
, 
√xtch
);

35 
√xtch
 = 
	`gëc
(
°dö
);

39 
i
 = 1; i < 
«rgs
; i++) {

40 
¨g±r
 = 
¨gs
[
i
];

41 i‡–(
¨g±r
[0] ='-'Ë&& (¨g±r[1] =
NULLCH
) ) {

42 
des¸
 = 
°dö
;

44 
des¸
 = 
	`›í
(
NAMESPACE
, 
¨g±r
, "ro");

45 i‡(
des¸
 =(
did32
)
SYSERR
) {

46 
	`Ârötf
(
°dîr
, "%s: cannot open file %s\n",

47 
¨gs
[0], 
¨g±r
);

51 
√xtch
 = 
	`gëc
(
des¸
);

52 
√xtch
 !
EOF
) {

53 
	`putc
(
°dout
, 
√xtch
);

54 
√xtch
 = 
	`gëc
(
des¸
);

56 
	`˛o£
(
des¸
);

59 
	}
}

	@shell/xsh_clear.c

3 
	~<xöu.h
>

4 
	~<°dio.h
>

10 
shñlcmd
 
	$xsh_˛ór
(
«rgs
, *
¨gs
[])

15 i‡(
«rgs
 > 1) {

16 
	`Ârötf
(
°dîr
,"u£ is: %s\n", 
¨gs
[0]);

20 
	`¥ötf
("\033[0m\033[2J\033[H\n");

22 
	}
}

	@shell/xsh_date.c

3 
	~<xöu.h
>

4 
	~<°rög.h
>

5 
	~<°dio.h
>

11 
shñlcmd
 
	$xsh_d©e
(
«rgs
, *
¨gs
[]) {

13 
öt32
 
ªtvÆ
;

14 
uöt32
 
now
;

15 
d©e°r
[64];

19 i‡(
«rgs
 =2 && 
	`°∫cmp
(
¨gs
[1], "--help", 7) == 0) {

20 
	`¥ötf
("Ußge: %s\n\n", 
¨gs
[0]);

21 
	`¥ötf
("Description:\n");

22 
	`¥ötf
("\tDisplaysÅhe current dateándÅime\n");

23 
	`¥ötf
("Options (oneÖer invocation):\n");

24 
	`¥ötf
("\t-f\tforceáÅime serverÑequestÅo be sent\n");

25 
	`¥ötf
("\t-d\tset daylight savingsÅime on\n");

26 
	`¥ötf
("\t-s\tset standardÅime (not daylight savings)\n");

27 
	`¥ötf
("\t-a\tset daylight savingsÅoáutomatic\n");

28 
	`¥ötf
("\t--help\tdisplayÅhis helpándÉxit\n");

34 i‡(
«rgs
 > 2) {

35 
	`Ârötf
(
°dîr
, "%s:Åoÿm™yárgumíts\n", 
¨gs
[0]);

36 
	`Ârötf
(
°dîr
, "Try '%s --help' for more information\n",

37 
¨gs
[0]);

41 i‡(
«rgs
 == 2) {

42 i‡(
	`°∫cmp
(
¨gs
[1], "-f", 3) == 0) {

43 
D©e
.
dt_boŸvÆid
 = 
FALSE
;

44 } i‡(
	`°∫cmp
(
¨gs
[1], "-d", 3) == 0) {

45 
D©e
.
dt_daylight
 = 
DATE_DST_ON
;

46 } i‡(
	`°∫cmp
(
¨gs
[1], "-s", 3) == 0) {

47 
D©e
.
dt_daylight
 = 
DATE_DST_OFF
;

48 } i‡(
	`°∫cmp
(
¨gs
[1], "-a", 3) == 0) {

49 
D©e
.
dt_daylight
 = 
DATE_DST_AUTO
;

51 
	`Ârötf
(
°dîr
, "%s: invÆidárgumít\n", 
¨gs
[0]);

52 
	`Ârötf
(
°dîr
,

54 
¨gs
[0]);

59 
ªtvÆ
 = 
	`gëtime
(&
now
);

60 i‡(
ªtvÆ
 =
SYSERR
) {

61 
	`Ârötf
(
°dîr
,

63 
¨gs
[0]);

66 
	`ascd©e
(
now
, 
d©e°r
);

67 
	`¥ötf
("%s\n", 
d©e°r
);

69 
	}
}

	@shell/xsh_devdump.c

3 
	~<xöu.h
>

4 
	~<°dio.h
>

10 
shñlcmd
 
	$xsh_devdump
 (

11 
«rgs
,

12 *
¨gs
[]

15 
díåy
 *
dev±r
;

16 
öt32
 
i
;

20 i‡(
«rgs
 > 1) {

21 
	`Ârötf
(
°dîr
, "Noárgumentsállowed\n");

27 
	`¥ötf
("Device Name Minor\n");

28 
	`¥ötf
("------ ------------ -----\n");

30 
i
 = 0; i < 
NDEVS
; i++) {

31 
dev±r
 = &
devèb
[
i
];

32 
	`¥ötf
("%4d %-12†%3d\n", 
i
, 
dev±r
->
dv«me
,

33 
dev±r
->
dvmö‹
);

36 
	}
}

	@shell/xsh_echo.c

3 
	~<xöu.h
>

4 
	~<°dio.h
>

10 
shñlcmd
 
	$xsh_echo
(
«rgs
, *
¨gs
[])

12 
öt32
 
i
;

14 i‡(
«rgs
 > 1) {

15 
	`¥ötf
("%s", 
¨gs
[1]);

17 
i
 = 2; i < 
«rgs
; i++) {

18 
	`¥ötf
(" %s", 
¨gs
[
i
]);

21 
	`¥ötf
("\n");

24 
	}
}

	@shell/xsh_exit.c

3 
	~<xöu.h
>

10 
shñlcmd
 
	$xsh_exô
(
«rgs
, *
¨gs
[])

12  
SHELL_EXIT
;

13 
	}
}

	@shell/xsh_hello.c

3 
	~<xöu.h
>

4 
	~<°dio.h
>

10 
shñlcmd
 
	$xsh_hñlo
(
«rgs
, *
¨gs
[])

12 
	`hñlo
();

14 
	}
}

	@shell/xsh_help.c

3 
	~<xöu.h
>

4 
	~<°dio.h
>

5 
	~<°rög.h
>

11 
shñlcmd
 
	$xsh_hñp
(
«rgs
, *
¨gs
[])

13 
öt32
 
i
;

14 *
¨gv
[2];

15 *
§c
, *
cmp
;

16 
öt32
 
Àn
;

17 
öt32
 
maxÀn
;

19 
öt32
 
cﬁs
;

21 
öt32
 
•ac
;

23 
öt32
 
löes
;

25 
öt32
 
j
;

30 i‡(
«rgs
 =2 && 
	`°∫cmp
(
¨gs
[1], "--help", 7) == 0) {

32 
	`¥ötf
("Use:\n");

33 
	`¥ötf
("\t%†[comm™d]\n", 
¨gs
[0]);

34 
	`¥ötf
("Description:\n");

35 
	`¥ötf
("\tProvidesáÜist of shell commands or\n");

36 
	`¥ötf
("\thelp information forá specific command\n");

37 
	`¥ötf
("Options:\n");

38 
	`¥ötf
("\tcommand\tspecific command for whichÅo\n");

39 
	`¥ötf
("\t\tdisplay help information\n");

40 
	`¥ötf
("\t--help\tdisplayÅhis helpándÉxit\n");

46 i‡(
«rgs
 > 2) {

47 
	`Ârötf
(
°dîr
, "%s:Åoÿm™yárgumíts\n", 
¨gs
[0]);

48 
	`Ârötf
(
°dîr
, "Try '%s --help' for more information\n",

49 
¨gs
[0]);

55 i‡(
«rgs
 == 2) {

56 
i
 = 0; i < 
ncmd
; i++) {

57 
§c
 = 
cmdèb
[
i
].
˙ame
;

58 
cmp
 = 
¨gs
[1];

59 *
§c
 !
NULLCH
) {

60 i‡(*
§c
 !*
cmp
) {

63 
§c
++;

64 
cmp
++;

66 i‡–(*
§c
 !
NULLCH
Ë|| (*
cmp
 != NULLCH) ) {

72 
¨gv
[0] = 
¨gs
[1];

73 
¨gv
[1] = "--help";

74 (*
cmdèb
[
i
].
cfunc
Ë(2, 
¨gv
);

77 
	`¥ötf
("%s:Çÿsuch comm™dá†'%s'\n", 
¨gs
[0],árgs[1]);

83 
	`¥ötf
("\nshell commandsáre:\n\n");

87 
maxÀn
 = 0;

88 
i
 = 0; i < 
ncmd
; i++) {

89 
Àn
 = 
	`°∫Àn
(
cmdèb
[
i
].
˙ame
, 80);

90 i‡(
Àn
 > 
maxÀn
) {

91 
maxÀn
 = 
Àn
;

97 
cﬁs
 = 80/(
maxÀn
+1);

98 i‡(
cﬁs
 > 6) {

99 
cﬁs
 = 6;

104 
•ac
 = 80/
cﬁs
;

108 
löes
 = (
ncmd
+(
cﬁs
-1))/cols;

112 
i
=0; i<
löes
; i++) {

113 
j
=
i
; j<
ncmd
; j+=
löes
) {

114 
Àn
 = 
	`°∫Àn
(
cmdèb
[
j
].
˙ame
,80);

115 
	`¥ötf
("%s", 
cmdèb
[
j
].
˙ame
);

116 
Àn
 < 
•ac
) {

117 
	`¥ötf
(" ");

118 
Àn
++;

121 
	`¥ötf
("\n");

124 
	}
}

	@shell/xsh_kill.c

3 
	~<xöu.h
>

4 
	~<°rög.h
>

5 
	~<°dio.h
>

11 
shñlcmd
 
	$xsh_kûl
(
«rgs
, *
¨gs
[]) {

13 
öt32
 
ªtvÆ
;

14 
pid32
 
pid
;

15 
ch
;

16 *
ch±r
;

20 i‡(
«rgs
 =2 && 
	`°∫cmp
(
¨gs
[1], "--help", 7) == 0) {

21 
	`¥ötf
("Ußge: %†PID\n\n", 
¨gs
[0]);

22 
	`¥ötf
("Description:\n");

23 
	`¥ötf
("\tterminatesáÖrocess\n");

24 
	`¥ötf
("Options:\n");

25 
	`¥ötf
("\tPID \tthe ID ofáÖrocessÅoÅerminate\n");

26 
	`¥ötf
("\t--help\tdisplayÅhis helpándÉxit\n");

27  
OK
;

32 i‡(
«rgs
 != 2) {

33 
	`Ârötf
(
°dîr
, "%s: inc‹ª˘árgumít\n", 
¨gs
[0]);

34 
	`Ârötf
(
°dîr
, "Try '%s --help' for more information\n",

35 
¨gs
[0]);

36  
SYSERR
;

41 
ch±r
 = 
¨gs
[1];

42 
ch
 = *
ch±r
++;

43 
pid
 = 0;

44 
ch
 !
NULLCH
) {

45 i‡–(
ch
 < '0') || (ch > '9') ) {

46 
	`Ârötf
(
°dîr
, "%s:Çon-digit inÖrocess ID\n",

47 
¨gs
[0]);

50 
pid
 = 10*pid + (
ch
 - '0');

51 
ch
 = *
ch±r
++;

53 i‡(
pid
 == 0) {

54 
	`Ârötf
(
°dîr
, "%s: cannot killÅheÇullÖrocess\n",

55 
¨gs
[0]);

59 
ªtvÆ
 = 
	`kûl
(
pid
);

60 i‡(
ªtvÆ
 =
SYSERR
) {

61 
	`Ârötf
(
°dîr
, "%s: cannot killÖrocess %d\n",

62 
¨gs
[0], 
pid
);

66 
	}
}

	@shell/xsh_layout.c

3 
	~<xöu.h
>

4 
	~<°dio.h
>

12 
	gœyout_v¨_öô
 = 1;

15 
	gœyout_v¨_unöô
;

17 
shñlcmd
 
	$xsh_œyout
(
«rgs
, *
¨gs
[])

20 
œyout_°ack
;

22 
	`k¥ötf
("globÆ inô v¨áddr: %x\n", &
œyout_v¨_öô
);

23 
	`k¥ötf
("globÆ unöô v¨áddr: %x\n", &
œyout_v¨_unöô
);

24 
	`k¥ötf
("°ack inô v¨áddr: %x\n", &
œyout_°ack
);

26 
	`shñlcmd
 (*
addr_xsh_œyout
)(, * []Ë
xsh_œyout
;

27 
	`k¥ötf
("xsh_œyouàfun¯addr: %x\n", 
addr_xsh_œyout
);

30 
	}
}

	@shell/xsh_memdump.c

3 
	~<xöu.h
>

4 
	~<°rög.h
>

5 
	~<°dio.h
>

7 
uöt32
 
∑r£vÆ
(*);

8 
uöt32
 
°¨t
;

15 
shñlcmd
 
	$xsh_memdump
(
«rgs
, *
¨gs
[])

17 
boﬁ8
 
f‹˚
 = 
FALSE
;

18 
uöt32
 
begö
;

19 
uöt32
 
°›
;

20 
uöt32
 
Àngth
;

21 
öt32
 
¨g
;

22 
uöt32
 
l
;

23 
öt32
 
i
;

24 
uöt32
 *
addr
;

25 *
ch±r
;

26 
ch
;

30 i‡(
«rgs
 =2 && 
	`°∫cmp
(
¨gs
[1], "--help", 7) == 0) {

31 
	`¥ötf
("U£: %†[-f] Addªs†Lígth\n\n", 
¨gs
[0]);

32 
	`¥ötf
("Description:\n");

33 
	`¥ötf
("\tDumps Length bytes of memory beginingátÅhe\n");

34 
	`¥ötf
("\tspecified startingáddress (bothÅheáddress\n");

35 
	`¥ötf
("\tandÜength can be specified in decimal or hex)\n");

36 
	`¥ötf
("Options:\n");

37 
	`¥ötf
("\t-f ignore sanity checks foráddresses\n");

38 
	`¥ötf
("\tAddress memoryáddressát whichÅo start\n");

39 
	`¥ötf
("\tLengthÅheÇumber of bytesÅo dump\n");

40 
	`¥ötf
("\t--help displayÅhis helpándÉxit\n");

46 i‡(
«rgs
 < 3 ||Çargs > 4) {

47 
	`Ârötf
(
°dîr
, "%s: incorrectÇumber ofárguments\n",

48 
¨gs
[0]);

49 
	`Ârötf
(
°dîr
, "Try '%s --help' for more information\n",

50 
¨gs
[0]);

54 
¨g
 = 1;

55 i‡(
	`°∫cmp
(
¨gs
[
¨g
], "-f", 2) == 0) {

56 
f‹˚
 = 
TRUE
;

57 
¨g
++;

58 
«rgs
 --;

61 i‡(
«rgs
 != 3) {

62 
	`Ârötf
(
°dîr
, "%s:Åoÿ„wárgumíts\n", 
¨gs
[0]);

63 
	`Ârötf
(
°dîr
, "Try '%s --help' for more information\n",

64 
¨gs
[0]);

68 i‡–(
begö
=
	`∑r£vÆ
(
¨gs
[
¨g
])) == 0 ) {

69 
	`Ârötf
(
°dîr
, "%s: invalid beginingáddress\n",

70 
¨gs
[0]);

73 i‡–(
Àngth
 =
	`∑r£vÆ
(
¨gs
[
¨g
+1])) == 0 ) {

74 
	`Ârötf
(
°dîr
, "%s: invalidÜengtháddress\n",

75 
¨gs
[0]);

82 
begö
 &= ~0x3;

83 
Àngth
 = (length + 3) & ~0x3;

87 
°›
 = 
begö
 + 
Àngth
;

91 i‡–
f‹˚
 || ( (
begö
 >(
uöt32
)&
°¨t
Ë&& (
°›
 > begin) &&

92 (((*)
°›
Ë< 
maxhóp
)) ) {

96 
ch±r
 = (*)
begö
;

97 
l
=0;Ü<
Àngth
;Ü+=16) {

98 
	`¥ötf
("%08x: ", 
begö
);

99 
addr
 = (
uöt32
 *)
begö
;

100 
i
=0; i<4; i++) {

101 
	`¥ötf
("%08x ",*
addr
++);

103 
	`¥ötf
(" *");

104 
i
=0; i<16; i++) {

105 
ch
 = *
ch±r
++;

106 i‡–(
ch
 >= 0x20) && (ch <= 0x7e) ) {

107 
	`¥ötf
("%c",
ch
);

109 
	`¥ötf
(".");

112 
	`¥ötf
("*\n");

113 
begö
 += 16;

117 
	`¥ötf
("Valuesáre out ofÑange; use -fÅo force\n");

120 
	}
}

126 
uöt32
 
	$∑r£vÆ
(

127 *
°rög


130 
uöt32
 
vÆue
;

131 
ch
;

134 
vÆue
 = 0;

139 
ch
 = *
°rög
++;

140 i‡(
ch
 == '0') {

141 i‡(*
°rög
++ != 'x') {

144 
ch
 = *
°rög
++; ch !
NULLCH
; ch = *string++) {

145 i‡((
ch
 >= '0') && (ch <= '9') ) {

146 
vÆue
 = 16*vÆuê+ (
ch
 - '0');

147 } i‡((
ch
 >= 'a') && (ch <= 'f') ) {

148 
vÆue
 = 16*vÆuê+ 10 + (
ch
 - 'a');

149 } i‡((
ch
 >= 'A') && (ch <= 'F') ) {

150 
vÆue
 = 16*vÆuê+ 10 + (
ch
 - 'A');

156 
ch
 !
NULLCH
) {

157 i‡–(
ch
 < '0') || (ch > '9') ) {

160 
vÆue
 = 10*vÆuê+ (
ch
 - '0');

161 
ch
 = *
°rög
++;

164  
vÆue
;

165 
	}
}

	@shell/xsh_memstat.c

3 
	~<xöu.h
>

4 
	~<°dio.h
>

5 
	~<°rög.h
>

7 
¥ötMemU£
();

8 
¥ötFªeLi°
();

14 
shñlcmd
 
	$xsh_mem°©
(
«rgs
, *
¨gs
[])

19 i‡(
«rgs
 =2 && 
	`°∫cmp
(
¨gs
[1], "--help", 7) == 0) {

20 
	`¥ötf
("u£: %†\n\n", 
¨gs
[0]);

21 
	`¥ötf
("Description:\n");

22 
	`¥ötf
("\tDisplaysÅhe current memory useándÖrintsÅhe\n");

23 
	`¥ötf
("\tfreeÜist.\n");

24 
	`¥ötf
("Options:\n");

25 
	`¥ötf
("\t--help\t\tdisplayÅhis helpándÉxit\n");

31 i‡(
«rgs
 > 1) {

32 
	`Ârötf
(
°dîr
, "%s:Åoÿm™yárgumíts\n", 
¨gs
[0]);

33 
	`Ârötf
(
°dîr
, "Try '%s --help' for more information\n",

34 
¨gs
[0]);

38 
	`¥ötMemU£
();

39 
	`¥ötFªeLi°
();

42 
	}
}

50 
	$¥ötFªeLi°
()

52 
memblk
 *
block
;

56 
	`¥ötf
("Free List:\n");

57 
	`¥ötf
("Blockáddress Length (dec) Length (hex)\n");

58 
	`¥ötf
("------------- ------------ ------------\n");

60 
block
 = 
memli°
.
m√xt
; block !
NULL
; block = block->mnext) {

61 
	`¥ötf
(" 0x%08x %9d 0x%08x\n", 
block
,

62 
block
->
mÀngth
, block->mlength);

64 
	`¥ötf
("\n");

65 
	}
}

67 
°¨t
();

68 *
_íd
;

74 
	$¥ötMemU£
()

76 
i
;

77 
uöt32
 
code
 = 0;

78 
uöt32
 
°ack
 = 0;

79 
uöt32
 
khóp
 = 0;

80 
uöt32
 
k‰ì
 = 0;

81 
memblk
 *
block
;

85 
code
 = (
uöt32
)&
_íd
 - (uöt32)
°¨t
;

90 
i
 = 1; i < 
NPROC
; i++) {

91 i‡(
¥o˘ab
[
i
].
¥°©e
 !
PR_FREE
) {

92 
°ack
 +(
uöt32
)
¥o˘ab
[
i
].
¥°kÀn
;

98 
block
 = 
memli°
.
m√xt
; block !
NULL
; block = block->mnext) {

99 
k‰ì
 +
block
->
mÀngth
;

104 
khóp
 = 
k‰ì
 - 
°ack
;

108 
	`¥ötf
("Current system memory statistics:\n");

109 
	`¥ötf
("---------------------------------\n");

110 
	`¥ötf
("%10d byã†(0x%08xËo‡Xöu code\n", 
code
, code);

111 
	`¥ötf
("%10d byã†(0x%08xËo‡Æloˇãd sèck s∑˚\n", 
°ack
, stack);

112 
	`¥ötf
("%10d byã†(0x%08xËo‡avaûabÀ kî√»hó∞•a˚\n\n", 
khóp
, kheap);

113 
	}
}

	@shell/xsh_netinfo.c

3 
	~<xöu.h
>

4 
	~<°rög.h
>

5 
	~<°dio.h
>

12 
shñlcmd
 
	$xsh_√töfo
(
«rgs
, *
¨gs
[]) {

14 
uöt32
 
ùaddr
;

15 
uöt32
 
ùbˇ°
;

16 
uöt32
 
ù¥efix
;

17 
uöt32
 
rouãr
;

18 
uöt32
 
t£rvî
;

19 
uöt32
 
d£rvî
;

20 
°r
[40];

21 
uöt32
 
ùmask
;

25 i‡(
«rgs
 =2 && 
	`°∫cmp
(
¨gs
[1], "--help", 7) == 0) {

26 
	`¥ötf
("Ußge: %s\n\n", 
¨gs
[0]);

27 
	`¥ötf
("Description:\n");

28 
	`¥ötf
("\tDisplays IPáddress information\n");

29 
	`¥ötf
("Options:\n");

30 
	`¥ötf
("\t-f\tforceáÇew DHCPÑequest\n");

31 
	`¥ötf
("\t--help\tdisplayÅhis helpándÉxit\n");

32  
OK
;

37 i‡(
«rgs
 > 2) {

38 
	`Ârötf
(
°dîr
, "%s:Åoÿm™yárgumíts\n", 
¨gs
[0]);

39 
	`Ârötf
(
°dîr
, "Try '%s --help' for more information\n",

40 
¨gs
[0]);

41  
SYSERR
;

44 i‡(
«rgs
 == 2) {

45 i‡(
	`°∫cmp
(
¨gs
[1], "-f", 3) != 0) {

46 
	`Ârötf
(
°dîr
, "%s: invÆidárgumít\n", 
¨gs
[0]);

47 
	`Ârötf
(
°dîr
,

49 
¨gs
[0]);

52 
NëD©a
.
ùvÆid
 = 
FALSE
;

53 
	`gëloˇlù
();

59 
ùaddr
 = 
NëD©a
.
ùuˇ°
;

60 
	`•rötf
(
°r
, "%d.%d.%d.%d",

61 (
ùaddr
>>24)&0xff, (ipaddr>>16)&0xff,

62 (
ùaddr
>>8)&0xff, ipaddr&0xff);

63 
	`¥ötf
(" %-16s %-16s 0x%08x\n",

64 "IPáddªss:", 
°r
, 
ùaddr
);

68 
ùbˇ°
 = 
NëD©a
.ipbcast;

69 
	`•rötf
(
°r
, "%d.%d.%d.%d",

70 (
ùbˇ°
>>24)&0xff, (ipbcast>>16)&0xff,

71 (
ùbˇ°
>>8)&0xff, ipbcast&0xff);

72 
	`¥ötf
(" %-16s %-16s 0x%08x\n",

73 "IP brﬂdˇ°:", 
°r
, 
ùbˇ°
);

77 
ù¥efix
 = 
NëD©a
.ipprefix;

78 
	`•rötf
(
°r
, "%d.%d.%d.%d",

79 (
ù¥efix
>>24)&0xff, (ipprefix>>16)&0xff,

80 (
ù¥efix
>>8)&0xff, ipprefix&0xff);

81 
	`¥ötf
(" %-16s %-16s 0x%08x\n",

82 "IPÖªfix:", 
°r
, 
ù¥efix
);

86 
ùmask
 = 
NëD©a
.ipmask;

87 
ùaddr
 = 
NëD©a
.
ùuˇ°
;

88 
	`•rötf
(
°r
, "%d.%d.%d.%d",

89 (
ùmask
>>24)&0xff, (ipmask>>16)&0xff,

90 (
ùmask
>>8)&0xff, ipmask&0xff);

91 
	`¥ötf
(" %-16s %-16s 0x%08x\n",

92 "Addªs†mask:", 
°r
, 
ùmask
);

96 
rouãr
 = 
NëD©a
.
ùrouãr
;

97 
	`•rötf
(
°r
, "%d.%d.%d.%d",

98 (
rouãr
>>24)&0xff, (router>>16)&0xff,

99 (
rouãr
>>8)&0xff,Ñouter&0xff);

100 
	`¥ötf
(" %-16s %-16s 0x%08x\n",

101 "IPÑouãr:", 
°r
, 
rouãr
);

105 
t£rvî
 = 
NëD©a
.
¡p£rvî
;

106 i‡(
t£rvî
 != 0) {

107 
	`•rötf
(
°r
, "%d.%d.%d.%d",

108 (
t£rvî
>>24)&0xff, (tserver>>16)&0xff,

109 (
t£rvî
>>8)&0xff,Åserver&0xff);

110 
	`¥ötf
(" %-16s %-16s 0x%08x\n",

111 "NTPÅimê£rvî:", 
°r
, 
t£rvî
);

116 
d£rvî
 = 
NëD©a
.
dns£rvî
;

117 i‡(
d£rvî
 != 0) {

118 
	`•rötf
(
°r
, "%d.%d.%d.%d",

119 (
d£rvî
>>24)&0xff, (dserver>>16)&0xff,

120 (
d£rvî
>>8)&0xff, dserver&0xff);

121 
	`¥ötf
(" %-16s %-16s 0x%08x\n",

122 "DNS sîvî:", 
°r
, 
d£rvî
);

125 
	`¥ötf
(" %-16s %02x:%02x:%02x:%02x:%02x:%02x\n",

127 0xf‡& 
NëD©a
.
ëhuˇ°
[0],

128 0xf‡& 
NëD©a
.
ëhuˇ°
[1],

129 0xf‡& 
NëD©a
.
ëhuˇ°
[2],

130 0xf‡& 
NëD©a
.
ëhuˇ°
[3],

131 0xf‡& 
NëD©a
.
ëhuˇ°
[4],

132 0xf‡& 
NëD©a
.
ëhuˇ°
[5]);

134 
	`¥ötf
(" %-16s %02x:%02x:%02x:%02x:%02x:%02x\n",

136 0xf‡& 
NëD©a
.
ëhbˇ°
[0],

137 0xf‡& 
NëD©a
.
ëhbˇ°
[1],

138 0xf‡& 
NëD©a
.
ëhbˇ°
[2],

139 0xf‡& 
NëD©a
.
ëhbˇ°
[3],

140 0xf‡& 
NëD©a
.
ëhbˇ°
[4],

141 0xf‡& 
NëD©a
.
ëhbˇ°
[5]);

143  
OK
;

144 
	}
}

	@shell/xsh_ping.c

3 
	~<xöu.h
>

4 
	~<°dio.h
>

5 
	~<°rög.h
>

11 
shñlcmd
 
	$xsh_pög
(
«rgs
, *
¨gs
[])

13 
uöt32
 
ùaddr
;

14 
öt32
 
ªtvÆ
;

15 
öt32
 
¶Ÿ
;

16 
öt32
 
£q
 = 0;

17 
buf
[56];

18 
öt32
 
i
;

19 
öt32
 
√xtvÆ
;

20 
boﬁ8
 
d«me
;

24 i‡(
«rgs
 =2 && 
	`°∫cmp
(
¨gs
[1], "--help", 7) == 0) {

25 
	`¥ötf
("U£: %†áddªss\n\n", 
¨gs
[0]);

26 
	`¥ötf
("Description:\n");

27 
	`¥ötf
("\tUse ICMP EchoÅoÖingáÑemote host\n");

28 
	`¥ötf
("Options:\n");

29 
	`¥ötf
("\t--help\t displayÅhis helpándÉxit\n");

30 
	`¥ötf
("\taddress\tán IPáddress in dotted decimal\n");

36 i‡(
«rgs
 != 2) {

37 
	`Ârötf
(
°dîr
, "%s: invÆidárgumíts\n", 
¨gs
[0]);

38 
	`Ârötf
(
°dîr
, "Try '%s --help' for more information\n",

39 
¨gs
[0]);

43 
d«me
 = 
FALSE
;

44 
i
 = 0; i < 
	`°æí
(
¨gs
[1]); i++) {

45 if––(
¨gs
[1][
i
] >= 65) && (args[1][i] <= 90) ) ||

46 –(
¨gs
[1][
i
] >= 97) && (args[1][i] <= 122)) ) {

47 
d«me
 = 
TRUE
;

52 if(
d«me
 =
TRUE
) {

53 
ùaddr
 = 
	`dn¶ookup
(
¨gs
[1]);

54 if((
öt32
)
ùaddr
 =
SYSERR
) {

55 
	`Ârötf
(
°dîr
, "DNS c™nŸÑesﬁvê%s\n", 
¨gs
[1]);

58 
	`¥ötf
("Pögög %d.%d.%d.%d\n", (
ùaddr
>>24)&0xff,

59 (
ùaddr
>>16)&0xff,

60 (
ùaddr
>>8)&0xff,

61 (
ùaddr
)&0xff);

66 
ªtvÆ
 = 
	`dŸ2ù
(
¨gs
[1], &
ùaddr
);

67 i‡((
öt32
)
ªtvÆ
 =
SYSERR
) {

68 
	`Ârötf
(
°dîr
, "%s: invÆid IPáddªss\n", 
¨gs
[0]);

75 
¶Ÿ
 = 
	`icmp_ªgi°î
(
ùaddr
);

76 i‡(
¶Ÿ
 =
SYSERR
) {

77 
	`Ârötf
(
°dîr
,"%s: ICMPÑegi°øti⁄ faûed\n", 
¨gs
[0]);

84 
√xtvÆ
 = 
£q
;

85 
i
 = 0; i<(
buf
); i++) {

86 
buf
[
i
] = 0xf‡& 
√xtvÆ
++;

90 
ªtvÆ
 = 
	`icmp_£nd
(
ùaddr
, 
ICMP_ECHOREQST
, 
¶Ÿ
,

91 
£q
++, 
buf
, (buf));

92 i‡(
ªtvÆ
 =
SYSERR
) {

93 
	`Ârötf
(
°dîr
, "%s:Çÿª•⁄£ from ho° %s\n", 
¨gs
[0],árgs[1]);

94 
	`icmp_ªÀa£
(
¶Ÿ
);

100 
ªtvÆ
 = 
	`icmp_ªcv
(
¶Ÿ
, 
buf
, (buf), 3000);

101 
	`icmp_ªÀa£
(
¶Ÿ
);

102 i‡(
ªtvÆ
 =
TIMEOUT
) {

103 
	`Ârötf
(
°dîr
, "%s:Çÿª•⁄£ from ho° %s\n", 
¨gs
[0],

104 
¨gs
[1]);

108 i‡(
ªtvÆ
 !(
buf
)) {

109 
	`Ârötf
(
°dîr
,"expected %d bytes but got back %d\n",

110 (
buf
), 
ªtvÆ
);

112 
	`Ârötf
(
°dîr
, "ho° %†i†Æive\n", 
¨gs
[1]);

114 
	}
}

	@shell/xsh_ps.c

3 
	~<xöu.h
>

4 
	~<°dio.h
>

5 
	~<°rög.h
>

11 
shñlcmd
 
	$xsh_ps
(
«rgs
, *
¨gs
[])

13 
¥o˚¡
 *
¥±r
;

14 
öt32
 
i
;

15 *
p°©e
[] = {

21 i‡(
«rgs
 =2 && 
	`°∫cmp
(
¨gs
[1], "--help", 7) == 0) {

22 
	`¥ötf
("U£: %s\n\n", 
¨gs
[0]);

23 
	`¥ötf
("Description:\n");

24 
	`¥ötf
("\tDisplays informationáboutÑunningÖrocesses\n");

25 
	`¥ötf
("Options:\n");

26 
	`¥ötf
("\t--help\t displayÅhis helpándÉxit\n");

32 i‡(
«rgs
 > 1) {

33 
	`Ârötf
(
°dîr
, "%s:Åoÿm™yárgumíts\n", 
¨gs
[0]);

34 
	`Ârötf
(
°dîr
, "Try '%s --help' for more information\n",

35 
¨gs
[0]);

41 
	`¥ötf
("%3s %-16s %5s %4s %4s %10s %-10s %10s\n",

45 
	`¥ötf
("%3s %-16s %5s %4s %4s %10s %-10s %10s\n",

51 
i
 = 0; i < 
NPROC
; i++) {

52 
¥±r
 = &
¥o˘ab
[
i
];

53 i‡(
¥±r
->
¥°©e
 =
PR_FREE
) {

56 
	`¥ötf
("%3d %-16s %s %4d %4d 0x%08X 0x%08X %8d\n",

57 
i
, 
¥±r
->
¥«me
, 
p°©e
[(ÌΩå->
¥°©e
],

58 
¥±r
->
¥¥io
,ÖΩå->
¥∑ª¡
,ÖΩå->
¥°kba£
,

59 
¥±r
->
¥°k±r
,ÖΩå->
¥°kÀn
);

62 
	}
}

	@shell/xsh_rdstest.c

2 
	~<xöu.h
>

3 
	~<°dio.h
>

9 
shñlcmd
 
	$xsh_rd°e°
(
«rgs
, *
¨gs
[])

11 
boﬁ8
 
îr
;

12 
öt32
 
ªtvÆ
;

13 
öt32
 
i
, 
j
;

14 
dsk«me
[] = "TestDisk";

16 
buff
[2048];

17 
buff2
[2048];

19 
ªtvÆ
 = 
	`›í
(
RDISK
,
dsk«me
,"rw");

21 i‡(
ªtvÆ
 < 0) {

22 
	`k¥ötf
("xsh_rdstest: open %sÑeturns %s, stopping\r\n",

23 
dsk«me
, 
ªtvÆ
==
SYSERR
?"SYSERR":"TIMEOUT");

24 
	`˛o£
–
RDISK
 );

27 
	`k¥ötf
("xsh_rdstest: open %sÑeturns %d\r\n",

28 
dsk«me
, 
ªtvÆ
);

31 
	`k¥ötf
("writingÉight blocksÅoÅhe disk\r\n");

32 
i
=7; i>=0; i--) {

33 
	`mem£t
(
buff
, ()(
i
&0xff), 
RD_BLKSIZ
);

34 
	`k¥ötf
("\n\r*** wrôög block %d\n\r",
i
);

35 
ªtvÆ
 = 
	`wrôe
(
RDISK
, 
buff
, 
i
);

36 i‡(
ªtvÆ
 < 0) {

37 
	`k¥ötf
("wrôêtÿblock %dÑëu∫†%d\r\n", 
i
, 
ªtvÆ
);

40 
	`k¥ötf
("reading block 1\n\r");

41 
ªtvÆ
 = 
	`ªad
(
RDISK
, 
buff
, 1);

42 
	`k¥ötf
("ªad from block 1 ha†ªtu∫ vÆuê%d\r\n", 
ªtvÆ
);

44 
îr
 = 0;

45 
i
=0; i<
RD_BLKSIZ
; i++) {

46 i‡(
buff
[
i
] != () (0xff&1)) {

47 
îr
 = 1;

51 i‡(
îr
 == 0) {

52 
	`k¥ötf
("Block 1 came back intact!!!\r\n");

54 
	`k¥ötf
("Sadly :-–byã %d i†nŸ c‹ª˘!!!\r\n", 
i
);

57 
	`k¥ötf
("reading block 6\n\r");

58 
ªtvÆ
 = 
	`ªad
(
RDISK
, 
buff
, 6);

59 
îr
 = 0;

60 
i
=0; i<
RD_BLKSIZ
; i++) {

61 i‡(
buff
[
i
] != () (0xff&6)) {

62 
îr
 = 1;

66 i‡(
îr
 == 0) {

67 
	`k¥ötf
("Block 6 came back intact!!!\r\n");

69 
	`k¥ötf
("Sadly :-–byã %d i†nŸ c‹ª˘!!!\r\n", 
i
);

72 
j
 = 0;

73 
i
=0; i<
RD_BLKSIZ
; i++) {

74 
buff2
[
i
] = "abcdefghijklmn›qr°uvwxyz"[
j
++];

75 
j
 %= 13;

78 
	`k¥ötf
("rewriting block 5\n\r");

79 
ªtvÆ
 = 
	`wrôe
(
RDISK
, 
buff2
, 5);

80 
	`k¥ötf
("wrôêtÿblock 5 ha†ªtu∫ vÆuê%d\r\n", 
ªtvÆ
);

82 
	`k¥ötf
("reading block 5\n\r");

83 
ªtvÆ
 = 
	`ªad
(
RDISK
, 
buff2
, 5);

85 
îr
 = 0;

86 
i
=0; i<
RD_BLKSIZ
; i++) {

87 i‡(
buff2
[
i
] !
buff
[i]) {

88 
îr
 = 1;

93 i‡(
îr
 == 0) {

94 
	`k¥ötf
("Block 5 came back intact!!!\r\n");

96 
	`k¥ötf
("Sadly :-–byã %d i†nŸ c‹ª˘!!!\r\n", 
i
);

99 
	`mem£t
(
buff
, 
NULLCH
, 
RD_BLKSIZ
);

101 
	`k¥ötf
("reading block 6ágain\n\r");

102 
ªtvÆ
 = 
	`ªad
(
RDISK
, 
buff
, 6);

103 
	`k¥ötf
("ªad from block 6 ha†ªtu∫ vÆuê%d\r\n", 
ªtvÆ
);

105 
îr
 = 0;

106 
i
=0; i<
RD_BLKSIZ
; i++) {

107 i‡–
buff
[
i
] != ()(0xff&6) ) {

108 
îr
 = 1;

112 i‡(
îr
 == 0) {

113 
	`k¥ötf
("Got back identicalÑesults!!!\r\n");

115 
	`k¥ötf
("Sadly :-–byã %d dif„rs!!!\r\n", 
i
);

118 
	}
}

	@shell/xsh_sleep.c

3 
	~<xöu.h
>

4 
	~<°dio.h
>

5 
	~<°rög.h
>

11 
shñlcmd
 
	$xsh_¶ìp
(
«rgs
, *
¨gs
[])

13 
öt32
 
dñay
;

14 *
ch±r
;

15 
ch
;

19 i‡(
«rgs
 =2 && 
	`°∫cmp
(
¨gs
[1], "--help", 7) == 0) {

20 
	`¥ötf
("U£: %s\n\n", 
¨gs
[0]);

21 
	`¥ötf
("Description:\n");

22 
	`¥ötf
("\tDelay forá specifiedÇumber of seconds\n");

23 
	`¥ötf
("Options:\n");

24 
	`¥ötf
("\t--help\t displayÅhis helpándÉxit\n");

30 i‡(
«rgs
 > 2) {

31 
	`Ârötf
(
°dîr
, "%s:Åoÿm™yárgumíts\n", 
¨gs
[0]);

32 
	`Ârötf
(
°dîr
, "Try '%s --help' for more information\n",

33 
¨gs
[0]);

37 i‡(
«rgs
 != 2) {

38 
	`Ârötf
(
°dîr
, "%s:árgumíàöÉº‹\n", 
¨gs
[0]);

39 
	`Ârötf
(
°dîr
, "Try '%s --help' for more information\n",

40 
¨gs
[0]);

44 
ch±r
 = 
¨gs
[1];

45 
ch
 = *
ch±r
++;

46 
dñay
 = 0;

47 
ch
 !
NULLCH
) {

48 i‡–(
ch
 < '0') || (ch > '9') ) {

49 
	`Ârötf
(
°dîr
, "%s:Çondigit inárgument\n",

50 
¨gs
[0]);

53 
dñay
 = 10*dñay + (
ch
 - '0');

54 
ch
 = *
ch±r
++;

56 
	`¶ìp
(
dñay
);

58 
	}
}

	@shell/xsh_udpdump.c

3 
	~<xöu.h
>

4 
	~<°dio.h
>

5 
	~<°rög.h
>

11 
shñlcmd
 
	$xsh_udpdump
(
«rgs
, *
¨gs
[])

13 
öt32
 
i
;

14 *
udp°©e
[] = {

16 
ud≥¡ry
 *
u±r
;

17 
uöt32
 
ªmù
;

18 
öt32
 
r1
,
r2
,
r3
,
r4
;

19 
öt32
 
ªm¥t
, 
lo˝π
;

20 
öt32
 
°©e
;

21 
pid32
 
pid
;

26 i‡(
«rgs
 =2 && 
	`°∫cmp
(
¨gs
[1], "--help", 7) == 0) {

27 
	`¥ötf
("U£: %s\n\n", 
¨gs
[0]);

28 
	`¥ötf
("Description:\n");

29 
	`¥ötf
("\tDisplaysÑegisterd UDPÖorts\n");

30 
	`¥ötf
("Options:\n");

31 
	`¥ötf
("\t--help\t displayÅhis helpándÉxit\n");

37 i‡(
«rgs
 > 1) {

38 
	`Ârötf
(
°dîr
, "%s:Çÿ¨gumítdÉx≥˘ed\n", 
¨gs
[0]);

39 
	`Ârötf
(
°dîr
, "Try '%s --help' for more information\n",

40 
¨gs
[0]);

46 
	`¥ötf
("%5s %5s %5s %9s %8s %8s %3s %4s\n",

49 
	`¥ötf
("%5s %5s %5s %15s %8s %8s %3s %4s\n",

54 
i
 = 0; i < 
UDP_SLOTS
; i++) {

55 
u±r
 = &
ud±ab
[
i
];

56 i‡(
u±r
->
ud°©e
 =
UDP_FREE
) {

57 
	`¥ötf
("%3d ---- slŸ i†‰ì ---\n", 
i
);

60 
ªmù
 = 
u±r
->
udªmù
;

61 
r1
 = (
ªmù
 >> 24) & 0xff;

62 
r2
 = (
ªmù
 >> 16) & 0xff;

63 
r3
 = (
ªmù
 >> 8) & 0xff;

64 
r4
 = (
ªmù
 ) & 0xff;

65 
ªm¥t
 = 
u±r
->
udªmp‹t
;

66 
lo˝π
 = 
u±r
->
udlo˝‹t
;

67 
pid
 = 
u±r
->
udpid
;

68 
°©e
 = 
u±r
->
ud°©e
;

69 
	`¥ötf
(

71 
udp°©e
[
°©e
], 
r1
, 
r2
, 
r3
, 
r4
, 
ªm¥t
, 
lo˝π
, 
pid
,

72 
u±r
->
udcou¡
);

75 
	}
}

	@shell/xsh_udpecho.c

3 
	~<xöu.h
>

4 
	~<°dio.h
>

5 
	~<°rög.h
>

12 
shñlcmd
 
	$xsh_ud≥cho
(
«rgs
, *
¨gs
[])

14 
i
;

15 
ªtvÆ
;

16 
msg
[] = "XinuÅesting UDPÉcho";

17 
öbuf
[1500];

18 
öt32
 
¶Ÿ
;

19 
öt32
 
msgÀn
;

20 
uöt32
 
ªmŸeù
;

22 
uöt16
 
ech›‹t
= 7;

23 
uöt16
 
lo˝‹t
 = 52743;

24 
öt32
 
ªåõs
 = 3;

25 
öt32
 
dñay
 = 2000;

29 i‡(
«rgs
 =2 && 
	`°∫cmp
(
¨gs
[1], "--help", 7) == 0) {

30 
	`¥ötf
("U£: %† REMOTEIP\n\n", 
¨gs
[0]);

31 
	`¥ötf
("Description:\n");

32 
	`¥ötf
("\tBounceá message offáÑemote UDPÉcho server\n");

33 
	`¥ötf
("Options:\n");

34 
	`¥ötf
("\tREMOTEIP:\tIPáddress in dotted decimal\n");

35 
	`¥ötf
("\t--help\t displayÅhis helpándÉxit\n");

41 i‡(
«rgs
 != 2) {

42 
	`Ârötf
(
°dîr
, "%s: invÆidárgumít(s)\n", 
¨gs
[0]);

43 
	`Ârötf
(
°dîr
, "Try '%s --help' for more information\n",

44 
¨gs
[0]);

48 i‡(
	`dŸ2ù
(
¨gs
[1], &
ªmŸeù
Ë=
SYSERR
) {

49 
	`Ârötf
(
°dîr
, "%s: invalid IPáddressárgument\r\n",

50 
¨gs
[0]);

65 
¶Ÿ
 = 
	`udp_ªgi°î
(
ªmŸeù
, 
ech›‹t
, 
lo˝‹t
);

66 i‡(
¶Ÿ
 =
SYSERR
) {

67 
	`Ârötf
(
°dîr
, "%s: couldÇotÑeserve UDPÖort %d\n",

68 
¨gs
[0], 
lo˝‹t
);

74 
msgÀn
 = 
	`°∫Àn
(
msg
, 1200);

75 
i
=0; i<
ªåõs
; i++) {

76 
ªtvÆ
 = 
	`udp_£nd
(
¶Ÿ
, 
msg
, 
msgÀn
);

77 i‡(
ªtvÆ
 =
SYSERR
) {

78 
	`Ârötf
(
°dîr
, "%s:Érror sending UDP \n",

79 
¨gs
[0]);

83 
ªtvÆ
 = 
	`udp_ªcv
(
¶Ÿ
, 
öbuf
, (öbuf), 
dñay
);

84 i‡(
ªtvÆ
 =
TIMEOUT
) {

85 
	`Ârötf
(
°dîr
, "%s:Åimeout...\n", 
¨gs
[0]);

87 } i‡(
ªtvÆ
 =
SYSERR
) {

88 
	`Ârötf
(
°dîr
, "%s:Érror from udp_recv \n",

89 
¨gs
[0]);

90 
	`udp_ªÀa£
(
¶Ÿ
);

96 
	`udp_ªÀa£
(
¶Ÿ
);

97 i‡(
ªtvÆ
 =
TIMEOUT
) {

98 
	`Ârötf
(
°dîr
, "%s:ÑetryÜimitÉxceeded\n",

99 
¨gs
[0]);

105 i‡(
ªtvÆ
 !
msgÀn
) {

106 
	`Ârötf
(
°dîr
, "%s: sent %d bytesándÑeceived %d\n",

107 
¨gs
[0], 
msgÀn
, 
ªtvÆ
);

110 
i
 = 0; i < 
msgÀn
; i++) {

111 i‡(
msg
[
i
] !
öbuf
[i]) {

112 
	`Ârötf
(
°dîr
, "%s:Ñeply differsát byte %d\n",

113 
¨gs
[0], 
i
);

118 
	`¥ötf
("UDPÉchoÅest was successful\n");

120 
	}
}

	@shell/xsh_udpserver.c

3 
	~<xöu.h
>

4 
	~<°dio.h
>

5 
	~<°rög.h
>

12 
shñlcmd
 
	$xsh_ud≥£rvî
(
«rgs
, *
¨gs
[])

14 
öt32
 
ªtvÆ
;

15 
uöt32
 
loˇlù
;

16 
uöt32
 
ªmù
;

17 
uöt16
 
ªmp‹t
;

18 
buff
[1500];

19 
öt32
 
msgÀn
;

20 
öt32
 
¶Ÿ
;

21 
uöt16
 
echo£rvîp‹t
= 7;

25 i‡(
«rgs
 =2 && 
	`°∫cmp
(
¨gs
[1], "--help", 7) == 0) {

26 
	`¥ötf
("U£: %s\n\n", 
¨gs
[0]);

27 
	`¥ötf
("Description:\n");

28 
	`¥ötf
("\tBecomeá UDPÉcho server\n");

29 
	`¥ötf
("Options:\n");

30 
	`¥ötf
("\t--help\t displayÅhis helpándÉxit\n");

36 i‡(
«rgs
 != 1) {

37 
	`Ârötf
(
°dîr
, "%s:Çÿ¨gumít†ex≥˘ed\n", 
¨gs
[0]);

38 
	`Ârötf
(
°dîr
, "Try '%s --help' for more information\n",

39 
¨gs
[0]);

43 
loˇlù
 = 
	`gëloˇlù
();

44 i‡(
loˇlù
 =
SYSERR
) {

45 
	`Ârötf
(
°dîr
,

47 
¨gs
[0]);

53 
¶Ÿ
 = 
	`udp_ªgi°î
(0, 0, 
echo£rvîp‹t
);

54 i‡(
¶Ÿ
 =
SYSERR
) {

55 
	`Ârötf
(
°dîr
, "%s: couldÇotÑeserve UDPÖort %d\n",

56 
¨gs
[0], 
echo£rvîp‹t
);

62 
TRUE
) {

63 
ªtvÆ
 = 
	`udp_ªcvaddr
(
¶Ÿ
, &
ªmù
, &
ªmp‹t
, 
buff
,

64 (
buff
), 600000);

66 i‡(
ªtvÆ
 =
TIMEOUT
) {

68 } i‡(
ªtvÆ
 =
SYSERR
) {

69 
	`Ârötf
(
°dîr
, "%s:ÉrrorÑeceiving UDP\n",

70 
¨gs
[0]);

73 
msgÀn
 = 
ªtvÆ
;

74 
ªtvÆ
 = 
	`udp_£ndto
(
¶Ÿ
, 
ªmù
, 
ªmp‹t
, 
buff
, 
msgÀn
);

75 i‡(
ªtvÆ
 =
SYSERR
) {

76 
	`Ârötf
(
°dîr
, "%s: udp_sendto failed\n",

77 
¨gs
[0]);

82 
	}
}

	@shell/xsh_uptime.c

3 
	~<xöu.h
>

4 
	~<°dio.h
>

5 
	~<°rög.h
>

11 
shñlcmd
 
	$xsh_u±ime
(
«rgs
, *
¨gs
[])

13 
uöt32
 
days
, 
hrs
, 
mös
, 
£cs
;

15 
uöt32
 
£˝îday
 = 86400;

16 
uöt32
 
£˝îhr
 = 3600;

17 
uöt32
 
£˝îmö
 = 60;

21 i‡(
«rgs
 =2 && 
	`°∫cmp
(
¨gs
[1], "--help", 7) == 0) {

22 
	`¥ötf
("U£: %s\n\n", 
¨gs
[0]);

23 
	`¥ötf
("Description:\n");

24 
	`¥ötf
("\tDisplaysÅime sinceÅhe system booted\n");

25 
	`¥ötf
("Options:\n");

26 
	`¥ötf
("\t--help\t displayÅhis helpándÉxit\n");

32 i‡(
«rgs
 > 1) {

33 
	`Ârötf
(
°dîr
, "%s:Åoÿm™yárgumíts\n", 
¨gs
[0]);

34 
	`Ârötf
(
°dîr
, "Try '%s --help' for more information\n",

35 
¨gs
[0]);

39 
£cs
 = 
˛ktime
;

43 
days
 = 
£cs
/
£˝îday
;

44 
£cs
 -
days
*
£˝îday
;

48 
hrs
 = 
£cs
/
£˝îhr
;

49 
£cs
 -
hrs
*
£˝îhr
;

53 
mös
 = 
£cs
/
£˝îmö
;

54 
£cs
 -
mös
*
£˝îmö
;

56 
	`¥ötf
("Xinu has been up ");

57 i‡(
days
 > 0) {

58 
	`¥ötf
(" %d day(sË", 
days
);

61 i‡(
hrs
 > 0) {

62 
	`¥ötf
(" %d hour(sË", 
hrs
);

65 i‡(
mös
 > 0) {

66 
	`¥ötf
(" %d möuã(sË", 
mös
);

69 i‡(
£cs
 > 0) {

70 
	`¥ötf
(" %d sec⁄d(sË", 
£cs
);

72 
	`¥ötf
("\n");

75 
	}
}

	@system/ascdate.c

3 
	~<xöu.h
>

4 
	~<°dio.h
>

6 
d©eöfo
 
	gD©e
 = {0, 
FALSE
, 
DATE_DST_AUTO
,

16 
°©us
 
	$ascd©e
 (

17 
uöt32
 
now
,

18 *
°r


21 
uöt32
 
tmp
;

23 
öt32
 
yór
, 
m⁄th
, 
day
,

24 
hour
, 
möuã
, 
£c⁄d
;

25 
uöt32
 
days
;

26 
uöt32
 
À≠yrs
;

28 
uöt32
 
shi·
;

30 
uöt32
 
dayofwìk
;

32 
öt32
 
j™1
;

33 
öt32
 
m¨1
;

34 
öt32
 
nov1
;

35 
öt32
 
m¨ss
;

36 
öt32
 
novfs
;

37 
boﬁ8
 
d°
;

38 
öt32
 
i
;

40 *
z⁄es
[] = {"EST", "CST", "MST", "PST"};

41 *
dz⁄es
[] = {"EDT", "CDT", "MDT", "PDT"};

45 
yór
=1970 ; 
TRUE
 ; year++) {

46 
days
 = 
	`i¶óp
(
yór
) ? 366 : 365;

47 
tmp
 = 
days
 * 
SECPERDY
;

48 i‡(
tmp
 > 
now
)

50 
now
 -
tmp
;

56 
days
 = 
now
 / 
SECPERDY
;

60 
m⁄th
=0 ; month<12 ; month++) {

61 
tmp
 = 
D©e
.
dt_msize
[
m⁄th
] * 
SECPERDY
;

62 i‡((
m⁄th
 =1Ë&& 
	`i¶óp
(
yór
)) {

63 
tmp
 +
SECPERDY
;

65 i‡(
tmp
 > 
now
)

67 
now
 -
tmp
;

72 
day
 = (
öt32
)–
now
/
SECPERDY
 ) + 1;

73 
now
 %
SECPERDY
;

77 
hour
 = (
öt32
Ë–
now
/
SECPERHR
 );

78 
now
 %
SECPERHR
;

82 
möuã
 = 
now
 / 
SECPERMN
;

83 
now
 %
SECPERMN
;

86 
£c⁄d
 = (
öt32
Ë
now
;

96 
À≠yrs
 = (
yór
-1969)/4;

101 
shi·
 = 4 + (
yór
 - 1970Ë+ 
À≠yrs
;

105 
j™1
 = 
shi·
 % 7;

109 
shi·
 +
days
;

113 
dayofwìk
 = 
shi·
 % 7;

122 
d°
 = 
FALSE
;

123 i‡(
D©e
.
dt_daylight
 =
DATE_DST_ON
) {

124 
d°
 = 
TRUE
;

125 } i‡(
D©e
.
dt_daylight
 =
DATE_DST_AUTO
) {

133 
m¨1
 = (
j™1
 + 
D©e
.
dt_msize
[0] + Date.dt_msize[1] +

134 
	`i¶óp
(
yór
)) % 7;

138 i‡(
m¨1
 == 0) {

139 
m¨ss
 = 8;

141 
m¨ss
 = 15 - 
m¨1
;

146 
nov1
 = 
j™1
;

147 
i
=0; i<10; i++) {

148 
nov1
 +
D©e
.
dt_msize
[
i
];

150 i‡(
	`i¶óp
(
yór
)) {

151 
nov1
++;

153 
nov1
 =Çov1 % 7;

154 i‡(
nov1
 == 0) {

155 
novfs
 = 1;

157 
novfs
 = 8 - 
nov1
;

164 i‡–(
m⁄th
 == 11) || (month == 0) || (month == 1) ) {

165 
d°
 = 
FALSE
;

169 } i‡–(
m⁄th
>2) && (month<10) ) {

170 
d°
 = 
TRUE
;

174 } i‡(
m⁄th
 == 2) {

176 
d°
 = 
FALSE
;

177 i‡(
day
 > 
m¨ss
) {

178 
d°
 = 
TRUE
;

179 } i‡–(
day
 =
m¨ss
Ë&& (
hour
 >= 2) ) {

180 
d°
 = 
TRUE
;

186 } i‡(
m⁄th
 == 10) {

188 
d°
 = 
TRUE
;

189 i‡(
day
 > 
novfs
) {

190 
d°
 = 
FALSE
;

191 } i‡–(
day
 =
novfs
Ë&& (
hour
 >= 1) ) {

192 
d°
 = 
FALSE
;

200 i‡(
d°
) {

201 
hour
++;

205 i‡(
hour
 > 23) {

206 
hour
 = 0;

207 
day
++;

211 i‡(
day
 > 
D©e
.
dt_msize
[
m⁄th
]) {

212 
day
 = 1;

213 
m⁄th
++;

221 
	`•rötf
(
°r
, "%3s %3s %2d %2d:%02d:%02d %s %d",

222 
D©e
.
dt_d«m
[
dayofwìk
], D©e.
dt_m«m
[
m⁄th
],

223 
day
, 
hour
, 
möuã
, 
£c⁄d
, 
d°
? 
dz⁄es
[
TIMEZONE
-5]:

224 
z⁄es
[
TIMEZONE
-5], 
yór
);

225  
OK
;

226 
	}
}

	@system/bufinit.c

3 
	~<xöu.h
>

5 
b≥¡ry
 
	gbu·ab
[
NBPOOLS
];

6 
bpid32
 
	gnbpoﬁs
;

12 
°©us
 
	$buföô
()

14 
nbpoﬁs
 = 0;

15  
OK
;

16 
	}
}

	@system/chprio.c

3 
	~<xöu.h
>

9 
¥i16
 
	$ch¥io
(

10 
pid32
 
pid
,

11 
¥i16
 
√w¥io


14 
ötmask
 
mask
;

15 
¥o˚¡
 *
¥±r
;

16 
¥i16
 
ﬁd¥io
;

18 
mask
 = 
	`dißbÀ
();

19 i‡(
	`isbadpid
(
pid
)) {

20 
	`ª°‹e
(
mask
);

21  (
¥i16
Ë
SYSERR
;

23 
¥±r
 = &
¥o˘ab
[
pid
];

24 
ﬁd¥io
 = 
¥±r
->
¥¥io
;

25 
¥±r
->
¥¥io
 = 
√w¥io
;

26 
	`ª°‹e
(
mask
);

27  
ﬁd¥io
;

28 
	}
}

	@system/clkhandler.c

3 
	~<xöu.h
>

9 
	$˛kh™dÀr
(

10 
öt32
 
¨g


14 if(!(
h≥t
->
gis
 & 
HPET_GIS_T0
)) {

18 
h≥t
->
gis
 |
HPET_GIS_T0
;

22 if((++
cou¡1000
) >= 1000) {

26 
˛ktime
++;

30 
cou¡1000
 = 0;

35 if(!
	`i£m±y
(
¶ìpq
)) {

40 if((--
queuëab
[
	`fú°id
(
¶ìpq
)].
qkey
) <= 0) {

41 
	`wakeup
();

48 if((--
¥ìm±
) <= 0) {

49 
¥ìm±
 = 
QUANTUM
;

50 
	`ªsched
();

52 
	}
}

	@system/clkinit.c

3 
	~<xöu.h
>

5 
uöt32
 
	g˛ktime
;

6 
uöt32
 
	gcou¡1000
;

7 
qid16
 
	g¶ìpq
;

8 
uöt32
 
	g¥ìm±
;

10 vﬁ©ûê
h≥t_c§eg
 *
	gh≥t
 = (hpet_csreg *)

11 
HPET_BASE_ADDR
;

17 
	$˛köô
()

21 
¶ìpq
 = 
	`√wqueue
();

25 
¥ìm±
 = 
QUANTUM
;

29 
˛ktime
 = 0;

30 
cou¡1000
 = 0;

33 
	`iﬂpic_úq2vec
(2, 
IRQBASE
);

35 
	`£t_ivec
(
IRQBASE
, 
˛kh™dÀr
, 0);

37 
h≥t
->
gc
 = 0;

39 
h≥t
->
mcv_l
 = 0;

40 
h≥t
->
mcv_u
 = 0;

42 
h≥t
->
t0cc_l
 |
HPET_TXCC_TVS
;

43 
h≥t
->
t0cv_l
 = 14318;

44 
h≥t
->
t0cc_l
 |
HPET_TXCC_TVS
;

45 
h≥t
->
t0cv_u
 = 0;

47 
h≥t
->
t0cc_l
 = 
HPET_TXCC_IT
 | 
HPET_TXCC_TYP
 | 
HPET_TXCC_IE
;

49 
h≥t
->
gc
 = 
HPET_GC_OE
;

52 
	}
}

	@system/close.c

3 
	~<xöu.h
>

9 
sysˇŒ
 
	$˛o£
(

10 
did32
 
des¸p


13 
ötmask
 
mask
;

14 
díåy
 *
dev±r
;

15 
öt32
 
ªtvÆ
;

17 
mask
 = 
	`dißbÀ
();

18 i‡(
	`isbaddev
(
des¸p
)) {

19 
	`ª°‹e
(
mask
);

20  
SYSERR
;

22 
dev±r
 = (
díåy
 *Ë&
devèb
[
des¸p
];

23 
ªtvÆ
 = (*
dev±r
->
dv˛o£
) (devptr);

24 
	`ª°‹e
(
mask
);

25  
ªtvÆ
;

26 
	}
}

	@system/control.c

3 
	~<xöu.h
>

9 
sysˇŒ
 
	$c⁄åﬁ
(

10 
did32
 
des¸p
,

11 
öt32
 
func
,

12 
öt32
 
¨g1
,

13 
öt32
 
¨g2


16 
ötmask
 
mask
;

17 
díåy
 *
dev±r
;

18 
öt32
 
ªtvÆ
;

20 
mask
 = 
	`dißbÀ
();

21 i‡(
	`isbaddev
(
des¸p
)) {

22 
	`ª°‹e
(
mask
);

23  
SYSERR
;

25 
dev±r
 = (
díåy
 *Ë&
devèb
[
des¸p
];

26 
ªtvÆ
 = (*
dev±r
->
dv˙é
Ë(dev±r, 
func
, 
¨g1
, 
¨g2
);

27 
	`ª°‹e
(
mask
);

28  
ªtvÆ
;

29 
	}
}

	@system/create.c

3 
	~<xöu.h
>

5 
loˇl
 
√wpid
();

11 
pid32
 
	$¸óã
(

12 *
funˇddr
,

13 
uöt32
 
ssize
,

14 
group
,

15 
¥i16
 
¥i‹ôy
,

16 *
«me
,

17 
uöt32
 
«rgs
,

21 
uöt32
 
ßv•
, *
push•
;

22 
ötmask
 
mask
;

23 
pid32
 
pid
;

24 
¥o˚¡
 *
¥±r
;

25 
öt32
 
i
;

26 
uöt32
 *
a
;

27 
uöt32
 *
ßddr
;

29 
mask
 = 
	`dißbÀ
();

30 i‡(
ssize
 < 
MINSTK
)

31 
ssize
 = 
MINSTK
;

32 
ssize
 = (
uöt32
Ë
	`roundmb
(ssize);

33 i‡–(
¥i‹ôy
 < 1Ë|| ((
pid
=
	`√wpid
()Ë=
SYSERR
) ||

34 ((
ßddr
 = (
uöt32
 *)
	`gë°k
(
ssize
)Ë=(uöt32 *)
SYSERR
) ) {

35 
	`ª°‹e
(
mask
);

36  
SYSERR
;

39 
¥cou¡
++;

40 
¥±r
 = &
¥o˘ab
[
pid
];

43 
¥±r
->
¥°©e
 = 
PR_SUSP
;

44 
¥±r
->
¥¥io
 = 
¥i‹ôy
;

45 
¥±r
->
¥°kba£
 = (*)
ßddr
;

46 
¥±r
->
¥°kÀn
 = 
ssize
;

47 
¥±r
->
¥«me
[
PNMLEN
-1] = 
NULLCH
;

48 
i
=0 ; i<
PNMLEN
-1 && (
¥±r
->
¥«me
[i]=
«me
[i])!=
NULLCH
; i++)

50 
¥±r
->
¥£m
 = -1;

51 
¥±r
->
¥∑ª¡
 = (
pid32
)
	`gëpid
();

52 
¥±r
->
¥hasmsg
 = 
FALSE
;

55 
¥±r
->
¥desc
[0] = 
CONSOLE
;

56 
¥±r
->
¥desc
[1] = 
CONSOLE
;

57 
¥±r
->
¥desc
[2] = 
CONSOLE
;

61 *
ßddr
 = 
STACKMAGIC
;

62 
ßv•
 = (
uöt32
)
ßddr
;

65 
a
 = (
uöt32
 *)(&
«rgs
 + 1);

66 
a
 +
«rgs
 -1;

67  ; 
«rgs
 > 0 ;Çargs--)

68 *--
ßddr
 = *
a
--;

69 *--
ßddr
 = ()
INITRET
;

75 *--
ßddr
 = ()
funˇddr
;

79 *--
ßddr
 = 
ßv•
;

81 
ßv•
 = (
uöt32
Ë
ßddr
;

82 *--
ßddr
 = 0x00000200;

87 *--
ßddr
 = 0;

88 *--
ßddr
 = 0;

89 *--
ßddr
 = 0;

90 *--
ßddr
 = 0;

91 *--
ßddr
 = 0;

92 
push•
 = 
ßddr
;

93 *--
ßddr
 = 
ßv•
;

94 *--
ßddr
 = 0;

95 *--
ßddr
 = 0;

96 *
push•
 = (Ë(
¥±r
->
¥°k±r
 = (*)
ßddr
);

97 
	`ª°‹e
(
mask
);

98  
pid
;

99 
	}
}

105 
loˇl
 
pid32
 
	$√wpid
()

107 
uöt32
 
i
;

108 
pid32
 
√xçid
 = 1;

113 
i
 = 0; i < 
NPROC
; i++) {

114 
√xçid
 %
NPROC
;

115 i‡(
¥o˘ab
[
√xçid
].
¥°©e
 =
PR_FREE
) {

116  
√xçid
++;

118 
√xçid
++;

121  (
pid32
Ë
SYSERR
;

122 
	}
}

	@system/debug.c

3 
	~<xöu.h
>

4 
	~<°dio.h
>

5 
	~<debug.h
>

7 
hexdump_¥öt
(
byã
, byte);

13 
	$hexdump_¥öt
(

14 
byã
 
d©a
,

15 
byã
 
mode


18 
mode
)

20 
DEBUG_ASCII
:

21 
d©a
 = (' ' <= data && data <= '~') ? data : '.';

22 
	`Ârötf
(
°dout
, "%c", 
d©a
);

24 
DEBUG_HEX
:

25 
	`Ârötf
(
°dout
, "%02x ", 
d©a
);

30 
	}
}

37 
	$hexdump
(

38 *
buf„r
,

39 
uöt32
 
Àngth
,

40 
boﬁ8
 
ˇn⁄


43 
uöt32
 
m
, 
n
, 
ªmaö
;

45 
byã
 *
b
 = (byã *)
buf„r
;

47 
n
 = 0;Ç < 
Àngth
;Ç += 0x10) {

48 
	`Ârötf
(
°dout
, "%08x ", (
uöt32
)
buf„r
 + 
n
);

50 
ªmaö
 = 
Àngth
 - 
n
;

52 
m
 = 0; m < 
ªmaö
 && m < 0x10; m++) {

53 i‡(
m
 % 0x08 == 0) {

54 
	`Ârötf
(
°dout
, " ");

56 
	`hexdump_¥öt
(
b
[
n
 + 
m
], 
DEBUG_HEX
);

60 i‡(
ªmaö
 < 0x10) {

61 
m
 = 0; m < 0x10 - 
ªmaö
; m++) {

62 i‡((0 !
m
) && (0 == m % 0x08)) {

63 
	`Ârötf
(
°dout
, " ");

65 
	`Ârötf
(
°dout
, " ");

69 i‡(
ˇn⁄
 =
TRUE
) {

70 
	`Ârötf
(
°dout
, " |");

71 
m
 = 0; m < 
ªmaö
 && m < 0x10; m++) {

72 
	`hexdump_¥öt
(
b
[
n
 + 
m
], 
DEBUG_ASCII
);

74 
	`Ârötf
(
°dout
, "|");

76 
	`Ârötf
(
°dout
, "\n");

78 
	}
}

	@system/early_imr.c

12 
	~<xöu.h
>

14 
	#INTEL_CLN_SB_CMD_ADDR
 (0x000000D0)

	)

15 
	#INTEL_CLN_SB_DATA_ADDR
 (0x000000D4)

	)

17 
	#INTEL_CLN_SB_MCR_SHIFT
 (24)

	)

18 
	#INTEL_CLN_SB_PORT_SHIFT
 (16)

	)

19 
	#INTEL_CLN_SB_REG_SHIFT
 (8)

	)

20 
	#INTEL_CLN_SB_BYTEEN
 (0xF0Ë

	)

23 
	#CFG_READ_OPCODE
 (0x10Ë

	)

24 
	#CFG_WRITE_OPCODE
 (0x11Ë

	)

25 
	#DRAM_IMR0L
 (0x40Ë

	)

26 
	#DRAM_IMR0H
 (0x41Ë

	)

27 
	#DRAM_IMR0RM
 (0x42Ë

	)

28 
	#DRAM_IMR0WM
 (0x43Ë

	)

29 
	#DRAM_IMR1L
 (0x44Ë

	)

30 
	#DRAM_IMR1H
 (0x45Ë

	)

31 
	#DRAM_IMR1RM
 (0x46Ë

	)

32 
	#DRAM_IMR1WM
 (0x47Ë

	)

33 
	#DRAM_IMR3L
 (0x4CË

	)

34 
	#DRAM_IMR3H
 (0x4DË

	)

35 
	#DRAM_IMR3RM
 (0x4EË

	)

36 
	#DRAM_IMR3WM
 (0x4FË

	)

37 
	#DRAM_IMR7L
 (0x5CË

	)

38 
	#DRAM_IMR7H
 (0x5DË

	)

39 
	#DRAM_IMR7RM
 (0x5EË

	)

40 
	#DRAM_IMR7WM
 (0x5FË

	)

42 
	#IMR_WRITE_ENABLE_ALL
 (0xFFFFFFFF)

	)

43 
	#IMR_READ_ENABLE_ALL
 (0xBFFFFFFF)

	)

44 
	#IMR_BASE_ADDR
 (0x0000)

	)

45 
	#IMR_LOCK_BIT
 (0x80000000)

	)

48 
	#IMR_MASK
 (0xFFFFFC)

	)

50 
	#IMR_SNOOP_NON_SMM_ENABLE
 (0x40000001)

	)

52 
	#IMR_NON_SMM_ENABLE
 (0x00000001)

	)

55 
	mSB_ID_HUNIT
 = 0x03,

56 
	mSB_ID_THERMAL
 = 0x04,

57 
	mSB_ID_ESRAM
 = 0x05,

58 }
	t˛n_sb_id
;

60 
uöt32
 
	gsb_pcidev
;

74 
	$öãl_˛n_óæy_sb_ªad_ªg
(
˛n_sb_id
 
id
, 
cmd
,

75 
ªg
, 
uöt32
 *
d©a
)

77 
uöt32
 
msg
 = (
cmd
 << 
INTEL_CLN_SB_MCR_SHIFT
) |

78 ((
id
 << 
INTEL_CLN_SB_PORT_SHIFT
) & 0xFF0000)|

79 ((
ªg
 << 
INTEL_CLN_SB_REG_SHIFT
) & 0xFF00)|

80 
INTEL_CLN_SB_BYTEEN
;

82 i‡(
d©a
 =
NULL
) {

86 
	`pci_wrôe_c⁄fig_dw‹d
(
sb_pcidev
, 
INTEL_CLN_SB_CMD_ADDR
, 
msg
);

87 
	`pci_ªad_c⁄fig_dw‹d
(
sb_pcidev
, 
INTEL_CLN_SB_DATA_ADDR
, 
d©a
);

89 
	}
}

101 
	$öãl_˛n_óæy_sb_wrôe_ªg
(
˛n_sb_id
 
id
, 
cmd
,

102 
ªg
, 
uöt32
 
d©a
)

104 
uöt32
 
msg
 = (
cmd
 << 
INTEL_CLN_SB_MCR_SHIFT
) |

105 ((
id
 << 
INTEL_CLN_SB_PORT_SHIFT
) & 0xFF0000)|

106 ((
ªg
 << 
INTEL_CLN_SB_REG_SHIFT
) & 0xFF00)|

107 
INTEL_CLN_SB_BYTEEN
;

109 
	`pci_wrôe_c⁄fig_dw‹d
(
sb_pcidev
, 
INTEL_CLN_SB_DATA_ADDR
, 
d©a
);

110 
	`pci_wrôe_c⁄fig_dw‹d
(
sb_pcidev
, 
INTEL_CLN_SB_CMD_ADDR
, 
msg
);

111 
	}
}

114 
	#PCI_VENDOR_ID_INTEL
 0x8086

	)

115 
	#PCI_DEVICE_ID_CLANTON_SB
 0x0958

	)

127 
	$öãl_˛n_óæy_sb_¥obe
()

129 
sb_dev
;

131 
sb_dev
 = 
	`föd_pci_devi˚
(
PCI_DEVICE_ID_CLANTON_SB
,

132 
PCI_VENDOR_ID_INTEL
, 0);

133 i‡(
sb_dev
 < 0) {

134 
	`k¥ötf
("%s():Érror finding PCI device DID 0x%x\n",

135 
__FUNCTION__
, 
PCI_DEVICE_ID_CLANTON_SB
);

137  
sb_dev
;

140 
	}
}

148 
	$˛n_ªmove_imr
(
ªg_l
, 
ªg_h
,

149 
ªg_rm
, 
ªg_wm
)

151 
	`öãl_˛n_óæy_sb_wrôe_ªg
(
SB_ID_ESRAM
, 
CFG_WRITE_OPCODE
,

152 
ªg_rm
, 
IMR_READ_ENABLE_ALL
);

153 
	`öãl_˛n_óæy_sb_wrôe_ªg
(
SB_ID_ESRAM
, 
CFG_WRITE_OPCODE
,

154 
ªg_wm
, 
IMR_WRITE_ENABLE_ALL
);

155 
	`öãl_˛n_óæy_sb_wrôe_ªg
(
SB_ID_ESRAM
, 
CFG_WRITE_OPCODE
,

156 
ªg_h
, 
IMR_BASE_ADDR
);

157 
	`öãl_˛n_óæy_sb_wrôe_ªg
(
SB_ID_ESRAM
, 
CFG_WRITE_OPCODE
,

158 
ªg_l
, 
IMR_BASE_ADDR
);

159 
	}
}

167 
	$˛n_ªmove_imr_grub
()

169 
	`˛n_ªmove_imr
(
DRAM_IMR0L
, 
DRAM_IMR0H
, 
DRAM_IMR0RM
, 
DRAM_IMR0WM
);

170 
	}
}

178 
	$˛n_ªmove_imr_boŸ_∑øms
()

180 
	`˛n_ªmove_imr
(
DRAM_IMR1L
, 
DRAM_IMR1H
, 
DRAM_IMR1RM
, 
DRAM_IMR1WM
);

181 
	}
}

189 
	$˛n_ªmove_imr_bzimage
()

191 
	`˛n_ªmove_imr
(
DRAM_IMR7L
, 
DRAM_IMR7H
, 
DRAM_IMR7RM
, 
DRAM_IMR7WM
);

192 
	}
}

194 
	$ªmove_úm_¥Ÿe˘i⁄s
()

196 
uöt32
 
tmp_addr
;

198 i‡(
	`öãl_˛n_óæy_sb_¥obe
() != 0) {

199 
	`k¥ötf
("%s(Ëîr‹Örobög f‹ IRM devi˚\n", 
__FUNCTION__
);

201  
SYSERR
;

204 
	`öãl_˛n_óæy_sb_ªad_ªg
(
SB_ID_ESRAM
, 
CFG_READ_OPCODE
,

205 
DRAM_IMR3L
, &
tmp_addr
);

206 i‡(
tmp_addr
 & 
IMR_LOCK_BIT
) {

207  
SYSERR
;

210 i‡(
tmp_addr
) {

211 
	`öãl_˛n_óæy_sb_wrôe_ªg
(
SB_ID_ESRAM
, 
CFG_WRITE_OPCODE
,

212 
DRAM_IMR3RM
, 
IMR_READ_ENABLE_ALL
);

213 
	`öãl_˛n_óæy_sb_wrôe_ªg
(
SB_ID_ESRAM
, 
CFG_WRITE_OPCODE
,

214 
DRAM_IMR3WM
,

215 
IMR_WRITE_ENABLE_ALL
);

218 
	`˛n_ªmove_imr_boŸ_∑øms
();

219 
	`˛n_ªmove_imr_bzimage
();

220 
	`˛n_ªmove_imr_grub
();

222  
OK
;

223 
	}
}

	@system/evec.c

3 
	~<xöu.h
>

7 
__©åibuã__
 ((
__∑cked__
)Ë
	gidt
 {

8 
	gigd_loff£t
;

9 
	gigd_£g£l
;

10 
	gigd_rsvd
 : 5;

11 
	gigd_mbz
 : 3;

12 
	gigd_ty≥
 : 5;

13 
	gigd_d∂
 : 2;

14 
	gigd_¥e£¡
 : 1;

15 
	gigd_hoff£t
;

23 
uöt16
 
	ggúmask
;

25 
	#IMR1
 0x21

	)

26 
	#IMR2
 0xA1

	)

28 
	#ICU1
 0x20

	)

29 
	#ICU2
 0xA0

	)

31 
	#OCR
 
ICU1


	)

32 
	#IMR
 (
ICU1
+1Ë

	)

34 
	#EOI
 0x20

	)

36 
	#NID
 48

	)

37 
	#IGDT_TRAPG
 15

	)

38 
	#IGDT_INTRG
 0xê

	)

40 
_8259_£túmask
();

42 
öt_íåy
 
	göt_a˘i⁄s
[
MAX_EXT_IRQS
];

44 
idt
 idt[
NID
];

45 
de„vec
[];

48 vﬁ©ûê
œpic_c§eg
 *
	gœpic
 = (lapic_csreg *)

49 
LAPIC_BASE_ADDR
;

55 
öt32
 
	$öôevec
()

57 
i
;

59 
i
 = 0; i < 
MAX_EXT_IRQS
; i++) {

60 
öt_a˘i⁄s
[
i
].
nôems
 = 0;

65 
i
 = 0; i < 
NID
; i++) {

66 
	`£t_evec
(
i
, 
de„vec
[i]);

71 
	`lidt
();

75 
gúmask
 = 0xfffb;

80 
	`outb
(
ICU1
, 0x11);

81 
	`outb
(
ICU1
+1, 0x20);

82 
	`outb
(
ICU1
+1, 0x4);

83 
	`outb
(
ICU1
+1, 0x1);

84 
	`outb
(
ICU1
, 0xb);

87 
	`outb
(
ICU2
, 0x11);

88 
	`outb
(
ICU2
+1, 0x28);

89 
	`outb
(
ICU2
+1, 0x2);

90 
	`outb
(
ICU2
+1, 0xb);

91 
	`outb
(
ICU2
, 0xb);

93 
	`_8259_£túmask
();

97 
i
 = 0; i < 24; i++) {

98 *((
uöt32
 *)
IOAPIC_IDX_ADDR
Ë0x10 + (2 * 
i
);

99 *((
uöt32
 *)
IOAPIC_WIN_ADDR
) |= 0x00010000;

102  
OK
;

103 
	}
}

109 
öt32
 
	$£t_evec
(
uöt32
 
xnum
, uöt32 
h™dÀr
)

111 
idt
 *
pidt
;

113 
pidt
 = &
idt
[
xnum
];

114 
pidt
->
igd_loff£t
 = 
h™dÀr
;

115 
pidt
->
igd_£g£l
 = 0x8;

116 
pidt
->
igd_mbz
 = 0;

117 
pidt
->
igd_ty≥
 = 
IGDT_INTRG
;

118 
pidt
->
igd_d∂
 = 0;

119 
pidt
->
igd_¥e£¡
 = 1;

120 
pidt
->
igd_hoff£t
 = 
h™dÀr
 >> 16;

122  
OK
;

123 
	}
}

129 
	$£t_ivec
 (

130 
uöt32
 
öum
,

131 *
h™dÀr
,

132 
öt32
 
¨g


135 
öt_íåy
 *
õ¡
;

136 
öt_öfo
 *
iöfo
;

137 
ötmask
 
mask
;

141 if–(
öum
 < 
IRQBASE
Ë|| (öum >(IRQBASE + 
MAX_EXT_IRQS
)) ) {

142  
SYSERR
;

145 
mask
 = 
	`dißbÀ
();

147 
õ¡
 = &
öt_a˘i⁄s
[
öum
-
IRQBASE
];

151 if(
õ¡
->
nôems
 >
MAX_IRQ_SHARING
) {

152 
	`ª°‹e
(
mask
);

153  
SYSERR
;

156 
iöfo
 = &
õ¡
->
öt_ôems
[õ¡->
nôems
++];

160 
iöfo
->
öt_h™dÀr
 = ((*)(
öt32
))
h™dÀr
;

161 
iöfo
->
öt_¨g
 = 
¨g
;

163 
	`ª°‹e
(
mask
);

164  
OK
;

165 
	}
}

171 
öt32
 
	$iﬂpic_úq2vec
 (

172 
öt32
 
úq
,

173 
öt32
 
vec


176 *((
uöt32
 *)
IOAPIC_IDX_ADDR
Ë0x10 + (2 * 
úq
) + 1;

177 *((
uöt32
 *)
IOAPIC_WIN_ADDR
) = 0;

179 *((
uöt32
 *)
IOAPIC_IDX_ADDR
Ë0x10 + (2 * 
úq
);

180 *((
uöt32
 *)
IOAPIC_WIN_ADDR
Ë0x0000a000 | 
vec
;

182  
OK
;

183 
	}
}

189 
	$öt_di•©ch
 (

190 
öt32
 
öum
,

191 *
ßved•


194 
öt_íåy
 *
õ¡
;

195 
öt_öfo
 *
iöfo
;

196 
öt32
 
i
;

198 
œpic
->
eoi
 = 0;

202 if–(
öum
 < 
IRQBASE
Ë|| (öum >(IRQBASE + 
MAX_EXT_IRQS
)) ) {

206 
õ¡
 = &
öt_a˘i⁄s
[
öum
-
IRQBASE
];

208 if(
õ¡
->
nôems
 == 0) {

210 
	`å≠
(
öum
, 
ßved•
);

215 
i
 = 0; i < 
õ¡
->
nôems
; i++) {

217 
iöfo
 = &
õ¡
->
öt_ôems
[
i
];

218 
iöfo
->
	`öt_h™dÀr
(iöfo->
öt_¨g
);

224 
	}
}

230 
	$_8259_£túmask
()

232 i‡(
gúmask
 == 0) {

235 
	`outb
(
IMR1
, 
gúmask
&0xff);

236 
	`outb
(
IMR2
, (
gúmask
>>8)&0xff);

238 
	}
}

240 *
	göames
[] = {

263 
	$å≠
 (

264 
öum
,

265 *
•


268 
ötmask
 
mask
;

269 *
ªgs
;

273 
mask
 = 
	`dißbÀ
();

277 
ªgs
 = 
•
;

281 
	`k¥ötf
("XinuÅrap!\n");

282 i‡(
öum
 < 16) {

283 
	`k¥ötf
("ex˚±i⁄ %d (%sËcuºpid %d (%s)\n", 
öum
,

284 
öames
[
öum
], 
cuºpid
, 
¥o˘ab
[cuºpid].
¥«me
);

286 
	`k¥ötf
("ex˚±i⁄ %d cuºpid %d (%s)\n", 
öum
, 
cuºpid
,

287 
¥o˘ab
[
cuºpid
].
¥«me
);

293 
•
 = 
ªgs
 + 8;

297 i‡(
öum
 == 8 || (inum >= 10 && inum <= 14)) {

298 
	`k¥ötf
("îr‹ codê%08x (%u)\n", *
•
, *sp);

299 
•
++;

302 
	`k¥ötf
("CS %XÉù %X\n", *(
•
 + 1), *sp);

303 
	`k¥ötf
("eÊag†%X\n", *(
•
 + 2));

307 
•
 = 
ªgs
 + 7;

309 
	`k¥ötf
("register dump:\n");

310 
	`k¥ötf
("óx %08X (%u)\n", *
•
, *sp);

311 
•
--;

312 
	`k¥ötf
("ecx %08X (%u)\n", *
•
, *sp);

313 
•
--;

314 
	`k¥ötf
("edx %08X (%u)\n", *
•
, *sp);

315 
•
--;

316 
	`k¥ötf
("ebx %08X (%u)\n", *
•
, *sp);

317 
•
--;

318 
	`k¥ötf
("e• %08X (%u)\n", *
•
, *sp);

319 
•
--;

320 
	`k¥ötf
("eb∞%08X (%u)\n", *
•
, *sp);

321 
•
--;

322 
	`k¥ötf
("esò%08X (%u)\n", *
•
, *sp);

323 
•
--;

324 
	`k¥ötf
("edò%08X (%u)\n", *
•
, *sp);

325 
•
--;

327 
	`∑nic
("TrapÖrocessing complete...\n");

328 
	`ª°‹e
(
mask
);

329 
	}
}

	@system/exit.c

3 
	~<xöu.h
>

9 
	$exô
()

11 
	`kûl
(
	`gëpid
());

12 
	}
}

	@system/freebuf.c

3 
	~<xöu.h
>

9 
sysˇŒ
 
	$‰ìbuf
(

10 *
buÁddr


13 
ötmask
 
mask
;

14 
b≥¡ry
 *
bµå
;

15 
bpid32
 
poﬁid
;

17 
mask
 = 
	`dißbÀ
();

21 
buÁddr
 -(
bpid32
);

22 
poﬁid
 = *(
bpid32
 *)
buÁddr
;

23 i‡(
poﬁid
 < 0 ||Öoﬁid >
nbpoﬁs
) {

24 
	`ª°‹e
(
mask
);

25  
SYSERR
;

30 
bµå
 = &
bu·ab
[
poﬁid
];

34 ((
b≥¡ry
 *)
buÁddr
)->
b≤ext
 = 
bµå
->bpnext;

35 
bµå
->
b≤ext
 = (
b≥¡ry
 *)
buÁddr
;

36 
	`sig«l
(
bµå
->
bp£m
);

37 
	`ª°‹e
(
mask
);

38  
OK
;

39 
	}
}

	@system/freemem.c

3 
	~<xöu.h
>

9 
sysˇŒ
 
	$‰ìmem
(

10 *
blkaddr
,

11 
uöt32
 
nbyãs


14 
ötmask
 
mask
;

15 
memblk
 *
√xt
, *
¥ev
, *
block
;

16 
uöt32
 
t›
;

18 
mask
 = 
	`dißbÀ
();

19 i‡((
nbyãs
 =0Ë|| ((
uöt32
Ë
blkaddr
 < (uöt32Ë
möhóp
)

20 || ((
uöt32
Ë
blkaddr
 > (uöt32Ë
maxhóp
)) {

21 
	`ª°‹e
(
mask
);

22  
SYSERR
;

25 
nbyãs
 = (
uöt32
Ë
	`roundmb
(nbytes);

26 
block
 = (
memblk
 *)
blkaddr
;

28 
¥ev
 = &
memli°
;

29 
√xt
 = 
memli°
.
m√xt
;

30 (
√xt
 !
NULL
Ë&& (√xà< 
block
)) {

31 
¥ev
 = 
√xt
;

32 
√xt
 =Çext->
m√xt
;

35 i‡(
¥ev
 =&
memli°
) {

36 
t›
 = (
uöt32
Ë
NULL
;

38 
t›
 = (
uöt32
Ë
¥ev
 +Öªv->
mÀngth
;

43 i‡(((
¥ev
 !&
memli°
Ë&& (
uöt32
Ë
block
 < 
t›
)

44 || ((
√xt
 !
NULL
Ë&& (
uöt32
Ë
block
+
nbyãs
>(uint32)next)) {

45 
	`ª°‹e
(
mask
);

46  
SYSERR
;

49 
memli°
.
mÀngth
 +
nbyãs
;

53 i‡(
t›
 =(
uöt32
Ë
block
) {

54 
¥ev
->
mÀngth
 +
nbyãs
;

55 
block
 = 
¥ev
;

57 
block
->
m√xt
 = 
√xt
;

58 
block
->
mÀngth
 = 
nbyãs
;

59 
¥ev
->
m√xt
 = 
block
;

64 i‡(((
uöt32
Ë
block
 + block->
mÀngth
Ë=(uöt32Ë
√xt
) {

65 
block
->
mÀngth
 +
√xt
->mlength;

66 
block
->
m√xt
 = 
√xt
->mnext;

68 
	`ª°‹e
(
mask
);

69  
OK
;

70 
	}
}

	@system/getbuf.c

3 
	~<xöu.h
>

9 *
	$gëbuf
(

10 
bpid32
 
poﬁid


13 
ötmask
 
mask
;

14 
b≥¡ry
 *
bµå
;

15 
b≥¡ry
 *
buÂå
;

17 
mask
 = 
	`dißbÀ
();

21 i‡–(
poﬁid
 < 0 ||Öoﬁid >
nbpoﬁs
) ) {

22 
	`ª°‹e
(
mask
);

23  (*)
SYSERR
;

26 
bµå
 = &
bu·ab
[
poﬁid
];

30 
	`waô
(
bµå
->
bp£m
);

31 
buÂå
 = 
bµå
->
b≤ext
;

35 
bµå
->
b≤ext
 = 
buÂå
->bpnext;

39 *(
bpid32
 *)
buÂå
 = 
poﬁid
;

40 
buÂå
 = (
b≥¡ry
 *)((
bpid32
) + (*)bufptr);

41 
	`ª°‹e
(
mask
);

42  (*)
buÂå
;

43 
	}
}

	@system/getc.c

3 
	~<xöu.h
>

9 
sysˇŒ
 
	$gëc
(

10 
did32
 
des¸p


13 
ötmask
 
mask
;

14 
díåy
 *
dev±r
;

15 
öt32
 
ªtvÆ
;

17 
mask
 = 
	`dißbÀ
();

18 i‡(
	`isbaddev
(
des¸p
)) {

19 
	`ª°‹e
(
mask
);

20  
SYSERR
;

22 
dev±r
 = (
díåy
 *Ë&
devèb
[
des¸p
];

23 
ªtvÆ
 = (*
dev±r
->
dvgëc
) (devptr);

24 
	`ª°‹e
(
mask
);

25  
ªtvÆ
;

26 
	}
}

	@system/getdev.c

3 
	~<xöu.h
>

4 
	~<°rög.h
>

10 
did32
 
	$gëdev
(

11 *
dev«me


14 
ötmask
 
mask
;

15 
did32
 
id
;

17 
mask
 = 
	`dißbÀ
();

18 
id
 = 0; id < 
NDEVS
; id++) {

19 i‡(
	`°∫cmp
(
dev«me
, 
devèb
[
id
].
dv«me
, 
DEVNAMLEN
)) {

20 
	`ª°‹e
(
mask
);

21  
id
;

24 
	`ª°‹e
(
mask
);

25  (
did32
Ë
SYSERR
;

26 
	}
}

	@system/getitem.c

3 
	~<xöu.h
>

9 
pid32
 
	$gëfú°
(

10 
qid16
 
q


14 
pid32
 
hód
;

16 i‡(
	`i£m±y
(
q
)) {

17  
EMPTY
;

20 
hód
 = 
	`queuehód
(
q
);

21  
	`gëôem
(
queuëab
[
hód
].
q√xt
);

22 
	}
}

28 
pid32
 
	$gëœ°
(

29 
qid16
 
q


33 
pid32
 
èû
;

35 i‡(
	`i£m±y
(
q
)) {

36  
EMPTY
;

39 
èû
 = 
	`queuëaû
(
q
);

40  
	`gëôem
(
queuëab
[
èû
].
q¥ev
);

41 
	}
}

47 
pid32
 
	$gëôem
(

48 
pid32
 
pid


51 
pid32
 
¥ev
, 
√xt
;

53 
√xt
 = 
queuëab
[
pid
].
q√xt
;

54 
¥ev
 = 
queuëab
[
pid
].
q¥ev
;

55 
queuëab
[
¥ev
].
q√xt
 = 
√xt
;

56 
queuëab
[
√xt
].
q¥ev
 = 
¥ev
;

57  
pid
;

58 
	}
}

	@system/getmem.c

3 
	~<xöu.h
>

9 *
	$gëmem
(

10 
uöt32
 
nbyãs


13 
ötmask
 
mask
;

14 
memblk
 *
¥ev
, *
cuº
, *
À·ovî
;

16 
mask
 = 
	`dißbÀ
();

17 i‡(
nbyãs
 == 0) {

18 
	`ª°‹e
(
mask
);

19  (*)
SYSERR
;

22 
nbyãs
 = (
uöt32
Ë
	`roundmb
(nbytes);

24 
¥ev
 = &
memli°
;

25 
cuº
 = 
memli°
.
m√xt
;

26 
cuº
 !
NULL
) {

28 i‡(
cuº
->
mÀngth
 =
nbyãs
) {

29 
¥ev
->
m√xt
 = 
cuº
->mnext;

30 
memli°
.
mÀngth
 -
nbyãs
;

31 
	`ª°‹e
(
mask
);

32  (*)(
cuº
);

34 } i‡(
cuº
->
mÀngth
 > 
nbyãs
) {

35 
À·ovî
 = (
memblk
 *)((
uöt32
Ë
cuº
 +

36 
nbyãs
);

37 
¥ev
->
m√xt
 = 
À·ovî
;

38 
À·ovî
->
m√xt
 = 
cuº
->mnext;

39 
À·ovî
->
mÀngth
 = 
cuº
->mÀngth - 
nbyãs
;

40 
memli°
.
mÀngth
 -
nbyãs
;

41 
	`ª°‹e
(
mask
);

42  (*)(
cuº
);

44 
¥ev
 = 
cuº
;

45 
cuº
 = cuº->
m√xt
;

48 
	`ª°‹e
(
mask
);

49  (*)
SYSERR
;

50 
	}
}

	@system/getpid.c

3 
	~<xöu.h
>

9 
pid32
 
	$gëpid
()

11  (
cuºpid
);

12 
	}
}

	@system/getprio.c

3 
	~<xöu.h
>

9 
sysˇŒ
 
	$gë¥io
(

10 
pid32
 
pid


13 
ötmask
 
mask
;

14 
uöt32
 
¥io
;

16 
mask
 = 
	`dißbÀ
();

17 i‡(
	`isbadpid
(
pid
)) {

18 
	`ª°‹e
(
mask
);

19  
SYSERR
;

21 
¥io
 = 
¥o˘ab
[
pid
].
¥¥io
;

22 
	`ª°‹e
(
mask
);

23  
¥io
;

24 
	}
}

	@system/getstk.c

3 
	~<xöu.h
>

9 *
	$gë°k
(

10 
uöt32
 
nbyãs


13 
ötmask
 
mask
;

14 
memblk
 *
¥ev
, *
cuº
;

15 
memblk
 *
fôs
, *
fô•ªv
;

17 
mask
 = 
	`dißbÀ
();

18 i‡(
nbyãs
 == 0) {

19 
	`ª°‹e
(
mask
);

20  (*)
SYSERR
;

23 
nbyãs
 = (
uöt32
Ë
	`roundmb
(nbytes);

25 
¥ev
 = &
memli°
;

26 
cuº
 = 
memli°
.
m√xt
;

27 
fôs
 = 
NULL
;

28 
fô•ªv
 = 
NULL
;

30 
cuº
 !
NULL
) {

31 i‡(
cuº
->
mÀngth
 >
nbyãs
) {

32 
fôs
 = 
cuº
;

33 
fô•ªv
 = 
¥ev
;

35 
¥ev
 = 
cuº
;

36 
cuº
 = cuº->
m√xt
;

39 i‡(
fôs
 =
NULL
) {

40 
	`ª°‹e
(
mask
);

41  (*)
SYSERR
;

43 i‡(
nbyãs
 =
fôs
->
mÀngth
) {

44 
fô•ªv
->
m√xt
 = 
fôs
->mnext;

46 
fôs
->
mÀngth
 -
nbyãs
;

47 
fôs
 = (
memblk
 *)((
uöt32
)fô†+ fôs->
mÀngth
);

49 
memli°
.
mÀngth
 -
nbyãs
;

50 
	`ª°‹e
(
mask
);

51  (*)((
uöt32
Ë
fôs
 + 
nbyãs
 - (uint32));

52 
	}
}

	@system/getticks.c

3 
	~<xöu.h
>

9 
uöt64
 
	$gëticks
()

11 
uöt64
 
ªt
;

12 
asm
 vﬁ©ûê–"rdtsc" : "=A"(
ªt
) );

13  
ªt
;

14 
	}
}

	@system/gettime.c

3 
	~<xöu.h
>

9 
°©us
 
	$gëtime
(

10 
uöt32
 *
timv¨


13 
uöt32
 
now
;

14 
öt32
 
ªtvÆ
;

18 
ªtvÆ
 = 
	`gëutime
(&
now
);

19 i‡(
ªtvÆ
 =
SYSERR
) {

20  
SYSERR
;

25 *
timv¨
 = 
	`utim2…im
(
now
);

26  
OK
;

27 
	}
}

	@system/getutime.c

3 
	~<xöu.h
>

4 
	~<°dio.h
>

10 
°©us
 
	$gëutime
(

11 
uöt32
 *
timv¨


14 
uöt32
 
now
;

15 
öt32
 
ªtvÆ
;

16 
uid32
 
¶Ÿ
;

17 
	s¡p
 {

18 
byã
 
livn
;

19 
byã
 
°øt
;

20 
byã
 
pﬁl
;

21 
byã
 
¥ecisi⁄
;

22 
uöt32
 
roŸdñay
;

23 
uöt32
 
roŸdi•
;

24 
uöt32
 
ªfid
;

25 
uöt32
 
ª·ime°amp
[2];

26 
uöt32
 
‹ôime°amp
[2];

27 
uöt32
 
ª˘ime°amp
[2];

28 
uöt32
 
å¡ime°amp
[2];

29 } 
¡pmsg
;

31 i‡(
D©e
.
dt_boŸvÆid
) {

32 *
timv¨
 = 
D©e
.
dt_boŸ
 + 
˛ktime
;

33  
OK
;

38 i‡(
	`gëloˇlù
(Ë=
SYSERR
) {

39  
SYSERR
;

45 i‡(
NëD©a
.
¡p£rvî
 == 0) {

46 i‡(
	`dŸ2ù
(
TIMESERVER
, &
NëD©a
.
¡p£rvî
Ë=
SYSERR
) {

47  
SYSERR
;

53 
¶Ÿ
 = 
	`udp_ªgi°î
(
NëD©a
.
¡p£rvî
, 
TIMERPORT
, 
TIMELPORT
);

54 i‡(
¶Ÿ
 =
SYSERR
) {

55 
	`Ârötf
(
°dîr
,"getutime: cannotÑegisterá udpÖort %d\n",

56 
TIMERPORT
);

57  
SYSERR
;

62 
	`mem£t
((*)&
¡pmsg
, 0x00, (ntpmsg));

63 
¡pmsg
.
livn
 = 0x1b;

64 
ªtvÆ
 = 
	`udp_£nd
(
¶Ÿ
, (*)&
¡pmsg
, (ntpmsg));

65 i‡(
ªtvÆ
 =
SYSERR
) {

66 
	`Ârötf
(
°dîr
,"getutime: cannot sendÅoÅhe server\n");

67 
	`udp_ªÀa£
(
¶Ÿ
);

68  
SYSERR
;

73 
ªtvÆ
 = 
	`udp_ªcv
(
¶Ÿ
, (*Ë&
¡pmsg
, (ntpmsg),

74 
TIMETIMEOUT
);

75 i‡–(
ªtvÆ
 =
SYSERR
Ë|| (ªtvÆ =
TIMEOUT
) ) {

76 
	`udp_ªÀa£
(
¶Ÿ
);

77  
SYSERR
;

79 
	`udp_ªÀa£
(
¶Ÿ
);

83 
now
 = 
	`¡im2xtim
–
	`¡ohl
(
¡pmsg
.
å¡ime°amp
[0]) );

84 
D©e
.
dt_boŸ
 = 
now
 - 
˛ktime
;

85 
D©e
.
dt_boŸvÆid
 = 
TRUE
;

86 *
timv¨
 = 
now
;

87  
OK
;

88 
	}
}

	@system/hello.c

3 
	~<xöu.h
>

9 
sysˇŒ
 
	$hñlo
()

11 
	`k¥ötf
("Hello system call invoked\n");

13 
	}
}

	@system/init.c

3 
	~<xöu.h
>

9 
sysˇŒ
 
	$öô
(

10 
did32
 
des¸p


13 
ötmask
 
mask
;

14 
díåy
 *
dev±r
;

15 
öt32
 
ªtvÆ
;

17 
mask
 = 
	`dißbÀ
();

18 i‡(
	`isbaddev
(
des¸p
)) {

19 
	`ª°‹e
(
mask
);

20  
SYSERR
;

22 
dev±r
 = (
díåy
 *Ë&
devèb
[
des¸p
];

23 
ªtvÆ
 = (*
dev±r
->
dvöô
) (devptr);

24 
	`ª°‹e
(
mask
);

25  
ªtvÆ
;

26 
	}
}

	@system/initialize.c

5 
	~<xöu.h
>

6 
	~<°rög.h
>

8 
°¨t
();

9 *
_íd
;

13 
maö
();

14 
sysöô
();

15 
memöô
();

16 
loˇl
 
¥o˚ss
 
°¨tup
();

20 
¥o˚¡
 
	g¥o˘ab
[
NPROC
];

21 
£¡ry
 
	g£mèb
[
NSEM
];

22 
memblk
 
	gmemli°
;

26 
	g¥cou¡
;

27 
pid32
 
	gcuºpid
;

31 
	#CONSOLE_RESET
 " \033[0m\033[2J\033[;H"

	)

47 
	$nuŒu£r
()

49 
memblk
 *
mem±r
;

50 
uöt32
 
‰ì_mem
;

54 
	`sysöô
();

57 
‰ì_mem
 = 0;

58 
mem±r
 = 
memli°
.
m√xt
; mem±∏!
NULL
;

59 
mem±r
 = mem±r->
m√xt
) {

60 
‰ì_mem
 +
mem±r
->
mÀngth
;

62 
	`k¥ötf
("%10d byã†o‡‰ì mem‹y. Fªêli°:\n", 
‰ì_mem
);

63 
mem±r
=
memli°
.
m√xt
; mem±r!=
NULL
;memptr = memptr->mnext) {

64 
	`k¥ötf
(" [0x%08XÅo 0x%08X]\n",

65 (
uöt32
)
mem±r
, ((uöt32)mem±rË+ mem±r->
mÀngth
 - 1);

68 
	`k¥ötf
("%10d bytes of Xinu code.\n",

69 (
uöt32
)&
ëext
 - (uöt32)&
ãxt
);

70 
	`k¥ötf
(" [0x%08XÅo 0x%08X]\n",

71 (
uöt32
)&
ãxt
, (uöt32)&
ëext
 - 1);

72 
	`k¥ötf
("%10d bytes of data.\n",

73 (
uöt32
)&
ebss
 - (uöt32)&
d©a
);

74 
	`k¥ötf
(" [0x%08XÅo 0x%08X]\n\n",

75 (
uöt32
)&
d©a
, (uöt32)&
ebss
 - 1);

79 
	`íabÀ
();

83 
	`√t_öô
();

87 
	`ªsume
(
	`¸óã
((*)
°¨tup
, 
INITSTK
, 
PSSCHED
, 
INITPRIO
,

88 "Sèπu∞¥o˚ss", 0, 
NULL
));

93 
TRUE
) {

97 
asm
 volatile ("hlt");

100 
	}
}

110 
loˇl
 
¥o˚ss
 
	$°¨tup
()

112 
uöt32
 
ùaddr
;

113 
°r
[128];

118 
ùaddr
 = 
	`gëloˇlù
();

119 i‡((
öt32
)
ùaddr
 =
SYSERR
) {

120 
	`k¥ötf
("Cannot obtainán IPáddress\n");

123 
ùaddr
 = 
NëD©a
.
ùuˇ°
;

124 
	`•rötf
(
°r
, "%d.%d.%d.%d",

125 (
ùaddr
>>24)&0xff, (ipaddr>>16)&0xff,

126 (
ùaddr
>>8)&0xff, ipaddr&0xff);

128 
	`k¥ötf
("Obèöed IPáddªs† %† (0x%08x)\n", 
°r
,

129 
ùaddr
);

133 
	`ªsume
(
	`¸óã
((*)
maö
, 
INITSTK
, 
PSSCHED
, 
INITPRIO
,

134 "MaöÖro˚ss", 0, 
NULL
));

138  
OK
;

139 
	}
}

148 
	$sysöô
()

150 
öt32
 
i
;

151 
¥o˚¡
 *
¥±r
;

152 
£¡ry
 *
£m±r
;

156 
	`∂©öô
();

160 
	`k¥ötf
(
CONSOLE_RESET
);

161 
	`k¥ötf
("\n%s\n\n", 
VERSION
);

165 
	`öôevec
();

169 
	`memöô
();

175 
¥cou¡
 = 1;

179 
De„r
.
nde„rs
 = 0;

183 
i
 = 0; i < 
NPROC
; i++) {

184 
¥±r
 = &
¥o˘ab
[
i
];

185 
¥±r
->
¥°©e
 = 
PR_FREE
;

186 
¥±r
->
¥«me
[0] = 
NULLCH
;

187 
¥±r
->
¥°kba£
 = 
NULL
;

188 
¥±r
->
¥¥io
 = 0;

193 
¥±r
 = &
¥o˘ab
[
NULLPROC
];

194 
¥±r
->
¥°©e
 = 
PR_CURR
;

195 
¥±r
->
¥¥io
 = 0;

196 
	`°∫˝y
(
¥±r
->
¥«me
, "prnull", 7);

197 
¥±r
->
¥°kba£
 = 
	`gë°k
(
NULLSTK
);

198 
¥±r
->
¥°kÀn
 = 
NULLSTK
;

199 
¥±r
->
¥°k±r
 = 0;

200 
cuºpid
 = 
NULLPROC
;

204 
i
 = 0; i < 
NSEM
; i++) {

205 
£m±r
 = &
£mèb
[
i
];

206 
£m±r
->
s°©e
 = 
S_FREE
;

207 
£m±r
->
scou¡
 = 0;

208 
£m±r
->
squeue
 = 
	`√wqueue
();

213 
	`buföô
();

217 
ªadyli°
 = 
	`√wqueue
();

221 
	`˛köô
();

223 
i
 = 0; i < 
NDEVS
; i++) {

224 
	`öô
(
i
);

227 
	}
}

229 
öt32
 
	$°›
(*
s
)

231 
	`k¥ötf
("%s\n", 
s
);

232 
	`k¥ötf
("looping...ÖressÑeset\n");

235 
	}
}

237 
öt32
 
	$dñay
(
n
)

239 
	`DELAY
(
n
);

240  
OK
;

241 
	}
}

	@system/insert.c

3 
	~<xöu.h
>

9 
°©us
 
	$ö£π
(

10 
pid32
 
pid
,

11 
qid16
 
q
,

12 
öt32
 
key


15 
qid16
 
cuº
;

16 
qid16
 
¥ev
;

18 i‡(
	`isbadqid
(
q
Ë|| 
	`isbadpid
(
pid
)) {

19  
SYSERR
;

22 
cuº
 = 
	`fú°id
(
q
);

23 
queuëab
[
cuº
].
qkey
 >
key
) {

24 
cuº
 = 
queuëab
[cuº].
q√xt
;

29 
¥ev
 = 
queuëab
[
cuº
].
q¥ev
;

30 
queuëab
[
pid
].
q√xt
 = 
cuº
;

31 
queuëab
[
pid
].
q¥ev
 = 
¥ev
;

32 
queuëab
[
pid
].
qkey
 = 
key
;

33 
queuëab
[
¥ev
].
q√xt
 = 
pid
;

34 
queuëab
[
cuº
].
q¥ev
 = 
pid
;

35  
OK
;

36 
	}
}

	@system/insertd.c

3 
	~<xöu.h
>

9 
°©us
 
	$ö£πd
(

10 
pid32
 
pid
,

11 
qid16
 
q
,

12 
öt32
 
key


15 
öt32
 
√xt
;

16 
öt32
 
¥ev
;

18 i‡(
	`isbadqid
(
q
Ë|| 
	`isbadpid
(
pid
)) {

19  
SYSERR
;

22 
¥ev
 = 
	`queuehód
(
q
);

23 
√xt
 = 
queuëab
[
	`queuehód
(
q
)].
q√xt
;

24 (
√xt
 !
	`queuëaû
(
q
)Ë&& (
queuëab
[√xt].
qkey
 <
key
)) {

25 
key
 -
queuëab
[
√xt
].
qkey
;

26 
¥ev
 = 
√xt
;

27 
√xt
 = 
queuëab
[√xt].
q√xt
;

32 
queuëab
[
pid
].
q√xt
 = 
√xt
;

33 
queuëab
[
pid
].
q¥ev
 = 
¥ev
;

34 
queuëab
[
pid
].
qkey
 = 
key
;

35 
queuëab
[
¥ev
].
q√xt
 = 
pid
;

36 
queuëab
[
√xt
].
q¥ev
 = 
pid
;

37 i‡(
√xt
 !
	`queuëaû
(
q
)) {

38 
queuëab
[
√xt
].
qkey
 -
key
;

41  
OK
;

42 
	}
}

	@system/ioerr.c

3 
	~<xöu.h
>

9 
devˇŒ
 
	$i€º
()

11  
SYSERR
;

12 
	}
}

	@system/ionull.c

3 
	~<xöu.h
>

9 
devˇŒ
 
	$i⁄uŒ
()

11  
OK
;

12 
	}
}

	@system/kill.c

3 
	~<xöu.h
>

9 
sysˇŒ
 
	$kûl
(

10 
pid32
 
pid


13 
ötmask
 
mask
;

14 
¥o˚¡
 *
¥±r
;

15 
öt32
 
i
;

17 
mask
 = 
	`dißbÀ
();

18 i‡(
	`isbadpid
(
pid
Ë|| (pid =
NULLPROC
)

19 || ((
¥±r
 = &
¥o˘ab
[
pid
])->
¥°©e
Ë=
PR_FREE
) {

20 
	`ª°‹e
(
mask
);

21  
SYSERR
;

24 i‡(--
¥cou¡
 <= 1) {

25 
	`xd⁄e
();

28 
	`£nd
(
¥±r
->
¥∑ª¡
, 
pid
);

29 
i
=0; i<3; i++) {

30 
	`˛o£
(
¥±r
->
¥desc
[
i
]);

32 
	`‰ì°k
(
¥±r
->
¥°kba£
,ÖΩå->
¥°kÀn
);

34 
¥±r
->
¥°©e
) {

35 
PR_CURR
:

36 
¥±r
->
¥°©e
 = 
PR_FREE
;

37 
	`ªsched
();

39 
PR_SLEEP
:

40 
PR_RECTIM
:

41 
	`un¶ìp
(
pid
);

42 
¥±r
->
¥°©e
 = 
PR_FREE
;

45 
PR_WAIT
:

46 
£mèb
[
¥±r
->
¥£m
].
scou¡
++;

49 
PR_READY
:

50 
	`gëôem
(
pid
);

54 
¥±r
->
¥°©e
 = 
PR_FREE
;

57 
	`ª°‹e
(
mask
);

58  
OK
;

59 
	}
}

	@system/kprintf.c

3 
	~<xöu.h
>

4 
	~<°d¨g.h
>

11 
sysˇŒ
 
	$kputc
(
byã
 
c
)

13 
díåy
 *
dev±r
;

14 vﬁ©ûê
u¨t_c§eg
 *
c§±r
;

15 
ötmask
 
mask
;

18 
mask
 = 
	`dißbÀ
();

20 
dev±r
 = (
díåy
 *Ë&
devèb
[
CONSOLE
];

21 
c§±r
 = (
u¨t_c§eg
 *)
dev±r
->
dvc§
;

24 i‡(
c§±r
 =
NULL
) {

25 
	`ª°‹e
(
mask
);

26  
SYSERR
;

30 (
c§±r
->
l§
 & 
UART_LSR_THRE
) == 0) {

35 
c§±r
->
buf„r
 = 
c
;

38 i‡(
c
 == '\n') {

40 (
c§±r
->
l§
 & 
UART_LSR_THRE
) == 0) {

43 
c§±r
->
buf„r
 = '\r';

46 
	`ª°‹e
(
mask
);

47  
OK
;

48 
	}
}

54 
sysˇŒ
 
	$kgëc
()

56 
úmask
;

57 vﬁ©ûê
u¨t_c§eg
 *
c§±r
;

58 
byã
 
c
;

59 
díåy
 *
dev±r
;

60 
ötmask
 
mask
;

63 
mask
 = 
	`dißbÀ
();

65 
dev±r
 = (
díåy
 *Ë&
devèb
[
CONSOLE
];

66 
c§±r
 = (
u¨t_c§eg
 *)
dev±r
->
dvc§
;

69 i‡(
c§±r
 =
NULL
) {

70 
	`ª°‹e
(
mask
);

71  
SYSERR
;

74 
úmask
 = 
c§±r
->
õr
;

75 
c§±r
->
õr
 = 0;

79 0 =(
c§±r
->
l§
 & 
UART_LSR_DR
)) {

85 
c
 = 
c§±r
->
rbr
;

86 
c§±r
->
õr
 = 
úmask
;

88 
	`ª°‹e
(
mask
);

89  
c
;

90 
	}
}

92 
_d›∫t
(*, 
va_li°
 
≠
, (*)());

98 
sysˇŒ
 
	$k¥ötf
(*
fmt
, ...)

100 
va_li°
 
≠
;

102 
	`va_°¨t
(
≠
, 
fmt
);

103 
	`_d›∫t
(
fmt
, 
≠
, ((*)())
kputc
);

104 
	`va_íd
(
≠
);

105  
OK
;

106 
	}
}

	@system/main.c

3 
	~<xöu.h
>

5 
¥o˚ss
 
	$maö
()

10 
	`ªcv˛r
();

11 
pid32
 
pid
 = 
	`¸óã
(
shñl
, 8192, 
PSSCHED
, 50, "shñl", 1, 
CONSOLE
);

12 
	`k¥ötf
("S∑wnögÇew shñ»wôh PID = %d\n", 
pid
);

13 
	`ªsume
(
pid
);

17 
TRUE
) {

18 
	`ª˚ive
();

19 
	`¶ìpms
(200);

20 
pid32
 
pid
 = 
	`¸óã
(
shñl
, 4096, 
PSSCHED
, 20, "shñl", 1, 
CONSOLE
);

21 
	`k¥ötf
("S∑wnögÇew shñ»wôh PID = %d\n", 
pid
);

22 
	`ªsume
(
pid
);

24  
OK
;

26 
	}
}

	@system/mark.c

3 
	~<xöu.h
>

5 
öt32
 *
	gm¨ks
[
MAXMARK
];

6 
öt32
 
	gnm¨ks
;

7 
sid32
 
	gmkmuãx
;

13 
	$m¨köô
()

15 
nm¨ks
 = 0;

16 
mkmuãx
 = 
	`£m¸óã
(1);

17 
	}
}

24 
°©us
 
	$m¨k
(

25 
öt32
 *
loc


31 i‡–(*
loc
>=0Ë&& (*loc<
nm¨ks
Ë&& (
m¨ks
[*loc]==loc) ) {

32  
OK
;

37 i‡(
nm¨ks
 >
MAXMARK
) {

38  
SYSERR
;

43 
	`waô
(
mkmuãx
);

44 
m¨ks
[ (*
loc
Ë
nm¨ks
++ ] =Üoc;

45 
	`sig«l
(
mkmuãx
);

46  
OK
;

47 
	}
}

	@system/meminit.c

3 
	~<xöu.h
>

7 *
	gmöhóp
;

8 *
	gmaxhóp
;

12 
uöt32
 
	gboŸsign
 = 1;

14 
mboŸöfo
 *
	gboŸöfo
 = (mbootinfo *)1;

24 
__©åibuã__
 ((
__∑cked__
)Ë
	gsd
 {

25 
	gsd_lﬁimô
;

26 
	gsd_loba£
;

27 
	gsd_midba£
;

28 
	gsd_ac˚ss
;

29 
	gsd_hûim_Ê
;

30 
	gsd_hiba£
;

33 
	#NGD
 4

	)

34 
	#FLAGS_GRANULARITY
 0x80

	)

35 
	#FLAGS_SIZE
 0x40

	)

36 
	#FLAGS_SETTINGS
 (
FLAGS_GRANULARITY
 | 
FLAGS_SIZE
)

	)

38 
sd
 
	ggdt_c›y
[
NGD
] = {

50 
sd
 
gdt
[];

56 
	$memöô
() {

58 
memblk
 *
mem±r
;

59 
mbmªgi⁄
 *
mm≠_addr
;

60 
mbmªgi⁄
 *
mm≠_addªnd
;

61 
memblk
 *
√xt_mem±r
;

62 
uöt32
 
√xt_block_Àngth
;

64 
mm≠_addr
 = (
mbmªgi⁄
*)
NULL
;

65 
mm≠_addªnd
 = (
mbmªgi⁄
*)
NULL
;

68 
mem±r
 = &
memli°
;

69 
mem±r
->
m√xt
 = (
memblk
 *)
NULL
;

70 
mem±r
->
mÀngth
 = 0;

74 
möhóp
 = (*)&
íd
;

75 
maxhóp
 = 
möhóp
;

79 if(
boŸsign
 !
MULTIBOOT_SIGNATURE
) {

80 
	`∑nic
("couldÇot find multiboot signature");

82 if(!(
boŸöfo
->
Êags
 & 
MULTIBOOT_BOOTINFO_MMAP
)) {

83 
	`∑nic
("no mmap found in boot info");

87 
mm≠_addr
 = (
mbmªgi⁄
*)
boŸöfo
->mmap_addr;

90 
mm≠_addªnd
 = (
mbmªgi⁄
*)((
uöt8
*)
mm≠_addr
 + 
boŸöfo
->
mm≠_Àngth
);

93 
mm≠_addr
 < 
mm≠_addªnd
) {

96 if(
mm≠_addr
->
ty≥
 !
MULTIBOOT_MMAP_TYPE_USABLE
) {

97 
mm≠_addr
 = (
mbmªgi⁄
*)((
uöt8
*)mm≠_add∏+ mm≠_addr->
size
 + 4);

101 if((
uöt32
)
maxhóp
 < ((uöt32)
mm≠_addr
->
ba£_addr
 + (uöt32)mm≠_addr->
Àngth
)) {

102 
maxhóp
 = (*)((
uöt32
)
mm≠_addr
->
ba£_addr
 + (uöt32)mm≠_addr->
Àngth
);

106 if((
mm≠_addr
->
ba£_addr
 + mm≠_addr->
Àngth
Ë< ((
uöt32
)
möhóp
)) {

107 
mm≠_addr
 = (
mbmªgi⁄
*)((
uöt8
*)mm≠_add∏+ mm≠_addr->
size
 + 4);

114 if((
mm≠_addr
->
ba£_addr
 <(
uöt32
)
möhóp
) &&

115 ((
mm≠_addr
->
ba£_addr
 + mm≠_addr->
Àngth
) >

116 (
uöt32
)
möhóp
)) {

119 
√xt_mem±r
 = (
memblk
 *)
	`roundmb
(
möhóp
);

122 
√xt_block_Àngth
 = (
uöt32
)
	`åuncmb
(
mm≠_addr
->
ba£_addr
 + mm≠_addr->
Àngth
 - (uöt32)
möhóp
);

126 
√xt_mem±r
 = (
memblk
 *)
	`roundmb
(
mm≠_addr
->
ba£_addr
);

129 
√xt_block_Àngth
 = (
uöt32
)
	`åuncmb
(
mm≠_addr
->
Àngth
);

133 
mem±r
->
m√xt
 = 
√xt_mem±r
;

134 
mem±r
 = mem±r->
m√xt
;

135 
mem±r
->
mÀngth
 = 
√xt_block_Àngth
;

136 
memli°
.
mÀngth
 +
√xt_block_Àngth
;

139 
mm≠_addr
 = (
mbmªgi⁄
*)((
uöt8
*)mm≠_add∏+ mm≠_addr->
size
 + 4);

143 if(
mem±r
) {

144 
mem±r
->
m√xt
 = (
memblk
 *)
NULL
;

146 
	}
}

153 
	$£t£gs
()

155 
ëext
;

156 
sd
 *
psd
;

157 
uöt32
 
≈
, 
ds_íd
;

159 
ds_íd
 = 0xffffffff/
PAGE_SIZE
;

161 
psd
 = &
gdt_c›y
[1];

163 
≈
 = (()&
ëext
 - 0 + 
PAGE_SIZE
-1) / PAGE_SIZE;

164 
psd
->
sd_lﬁimô
 = 
≈
;

165 
psd
->
sd_hûim_Ê
 = 
FLAGS_SETTINGS
 | ((
≈
 >> 16) & 0xff);

167 
psd
 = &
gdt_c›y
[2];

168 
psd
->
sd_lﬁimô
 = 
ds_íd
;

169 
psd
->
sd_hûim_Ê
 = 
FLAGS_SETTINGS
 | ((
ds_íd
 >> 16) & 0xff);

171 
psd
 = &
gdt_c›y
[3];

172 
psd
->
sd_lﬁimô
 = 
ds_íd
;

173 
psd
->
sd_hûim_Ê
 = 
FLAGS_SETTINGS
 | ((
ds_íd
 >> 16) & 0xff);

175 
	`mem˝y
(
gdt
, 
gdt_c›y
, (gdt_copy));

176 
	}
}

	@system/mkbufpool.c

3 
	~<xöu.h
>

9 
bpid32
 
	$mkbuÂoﬁ
(

10 
öt32
 
bufsiz
,

11 
öt32
 
numbufs


14 
ötmask
 
mask
;

15 
bpid32
 
poﬁid
;

16 
b≥¡ry
 *
bµå
;

17 *
buf
;

19 
mask
 = 
	`dißbÀ
();

20 i‡(
bufsiz
<
BP_MINB
 || bufsiz>
BP_MAXB


21 || 
numbufs
<1 ||Çumbufs>
BP_MAXN


22 || 
nbpoﬁs
 >
NBPOOLS
) {

23 
	`ª°‹e
(
mask
);

24  (
bpid32
)
SYSERR
;

28 
bufsiz
 = ( (bufsiz + 3) & (~3) );

30 
buf
 = (*)
	`gëmem
–
numbufs
 * (
bufsiz
+(
bpid32
)) );

31 i‡((
öt32
)
buf
 =
SYSERR
) {

32 
	`ª°‹e
(
mask
);

33  (
bpid32
)
SYSERR
;

35 
poﬁid
 = 
nbpoﬁs
++;

36 
bµå
 = &
bu·ab
[
poﬁid
];

37 
bµå
->
b≤ext
 = (
b≥¡ry
 *)
buf
;

38 
bµå
->
bpsize
 = 
bufsiz
;

39 i‡–(
bµå
->
bp£m
 = 
	`£m¸óã
(
numbufs
)Ë=
SYSERR
) {

40 
	`‰ìmem
(
buf
, 
numbufs
 * (
bufsiz
+(
bpid32
)) );

41 
nbpoﬁs
--;

42 
	`ª°‹e
(
mask
);

43  (
bpid32
)
SYSERR
;

45 
bufsiz
+=(
bpid32
);

46 
numbufs
-- ;Çumbufs>0 ;Çumbufs-- ) {

47 
bµå
 = (
b≥¡ry
 *)
buf
;

48 
buf
 +
bufsiz
;

49 
bµå
->
b≤ext
 = (
b≥¡ry
 *)
buf
;

51 
bµå
 = (
b≥¡ry
 *)
buf
;

52 
bµå
->
b≤ext
 = (
b≥¡ry
 *)
NULL
;

53 
	`ª°‹e
(
mask
);

54  
poﬁid
;

55 
	}
}

	@system/newqueue.c

3 
	~<xöu.h
>

9 
qid16
 
	$√wqueue
()

11 
qid16
 
√xtqid
=
NPROC
;

12 
qid16
 
q
;

14 
q
 = 
√xtqid
;

15 i‡(
q
 >
NQENT
) {

16  
SYSERR
;

19 
√xtqid
 += 2;

23 
queuëab
[
	`queuehód
(
q
)].
q√xt
 = 
	`queuëaû
(q);

24 
queuëab
[
	`queuehód
(
q
)].
q¥ev
 = 
EMPTY
;

25 
queuëab
[
	`queuehód
(
q
)].
qkey
 = 
MAXKEY
;

26 
queuëab
[
	`queuëaû
(
q
)].
q√xt
 = 
EMPTY
;

27 
queuëab
[
	`queuëaû
(
q
)].
q¥ev
 = 
	`queuehód
(q);

28 
queuëab
[
	`queuëaû
(
q
)].
qkey
 = 
MINKEY
;

29  
q
;

30 
	}
}

	@system/open.c

3 
	~<xöu.h
>

9 
sysˇŒ
 
	$›í
(

10 
did32
 
des¸p
,

11 *
«me
,

12 *
mode


15 
ötmask
 
mask
;

16 
díåy
 *
dev±r
;

17 
öt32
 
ªtvÆ
;

19 
mask
 = 
	`dißbÀ
();

20 i‡(
	`isbaddev
(
des¸p
)) {

21 
	`ª°‹e
(
mask
);

22  
SYSERR
;

24 
dev±r
 = (
díåy
 *Ë&
devèb
[
des¸p
];

25 
ªtvÆ
 = (*
dev±r
->
dv›í
Ë(dev±r, 
«me
, 
mode
);

26 
	`ª°‹e
(
mask
);

27  
ªtvÆ
;

28 
	}
}

	@system/panic.c

3 
	~<xöu.h
>

9 
	$∑nic
 (

10 *
msg


13 
	`dißbÀ
();

14 
	`k¥ötf
("\n\n\Ω™ic: %s\n\n", 
msg
);

15 
TRUE
) {;}

16 
	}
}

	@system/pci.c

3 
	~<xöu.h
>

18 
	#MMCONFIG_BASE
 0xe0000000

	)

19 
	#MMCONFIG_LEN
 0x10000000

	)

25 
öt32
 
	$pci_öô
()

27  
OK
;

28 
	}
}

34 
ölöe
 *
	$ªgAddªss_MMC⁄fig
(

35 
uöt32
 
mmc⁄figBa£
,

36 
uöt32
 
bus
,

37 
uöt32
 
devi˚
,

38 
uöt32
 
fun˘i⁄
,

39 
uöt32
 
off£t


42 *
ªtvÆ
;

44 
ªtvÆ
 = (*)

45 (
mmc⁄figBa£
 +

46 (
bus
 * 
PCIE_BYTES_PER_BUS
) +

47 (
devi˚
 * 
PCIE_BYTES_PER_DEVICE
) +

48 (
fun˘i⁄
 * 
PCIE_BYTES_PER_FUNCTION
) +

49 
off£t
);

50  
ªtvÆ
;

51 
	}
}

57 
ölöe
 
uöt32
 
	$ícodePCIDevi˚
(

58 
uöt32
 
bus
,

59 
uöt32
 
dev
,

60 
uöt32
 
func


63 
uöt32
 
ªtvÆ
;

65 
ªtvÆ
 = (
bus
 << 
PCI_BUS_SHIFT
Ë| (
dev
 << 
PCI_DEV_SHIFT
Ë| 
func
;

66  
ªtvÆ
;

67 
	}
}

73 
ölöe
 
uöt32
 
	$ícodedPCIDevToBus
(

74 
uöt32
 
ícodedDev


77  ((
ícodedDev
 >> 
PCI_BUS_SHIFT
Ë& 
PCI_BUS_MASK
);

78 
	}
}

84 
ölöe
 
uöt32
 
	$ícodedPCIDevToDevi˚
(

85 
uöt32
 
ícodedDev


88  ((
ícodedDev
 >> 
PCI_DEV_SHIFT
Ë& 
PCI_DEV_MASK
);

89 
	}
}

95 
ölöe
 
uöt32
 
	$ícodedPCIDevToFun˘i⁄
(

96 
uöt32
 
ícodedDev


99  
ícodedDev
 & 
PCI_FUNC_MASK
;

100 
	}
}

106 
öt32
 
	$föd_pci_devi˚
(

107 
öt32
 
devi˚ID
,

108 
öt32
 
víd‹ID
,

109 
öt32
 
ödex


112 
öt32
 
cou¡
;

113 
öt32
 
mu…ifun˘i⁄
;

114 
uöt32
 
öfo
;

115 
uöt32
 
bus
, 
dev
, 
func
;

116 
pci_c⁄fig_hódî
 *
devfuncHdr
;

121 
cou¡
 = 0;

122 
bus
 = 0; bu†< 
PCI_MAX_BUSES
; bus++) {

123 
dev
 = 0; dev < 
PCI_DEVICES_PER_BUS
; dev++) {

124 
func
 = 0; fun¯< 
PCI_FUNCTIONS_PER_DEVICE
;

125 
func
++) {

126 
devfuncHdr
 =

127 
	`ªgAddªss_MMC⁄fig
(
MMCONFIG_BASE
,

128 
bus
, 
dev
, 
func
, 0);

129 i‡((
devfuncHdr
->
víd‹ID
 == vendorID) &&

130 (
devfuncHdr
->
devi˚ID
 == deviceID) &&

131 (
ödex
 =
cou¡
++)) {

135 
öfo
 = 
	`ícodePCIDevi˚
(
bus
, 
dev
,

136 
func
);

137  
öfo
;

141 i‡(
func
 == 0) {

142 
mu…ifun˘i⁄
 =

143 
devfuncHdr
->
hódîTy≥
 &

144 
PCI_HDR_TYPE_MULTIFCN
;

145 i‡(!
mu…ifun˘i⁄
) {

153  
SYSERR
;

154 
	}
}

160 
öt32
 
	$pci_ªad_c⁄fig_byã
(

161 
uöt32
 
ícodedDev
,

162 
off£t
,

163 
byã
 *
vÆue


166 
uöt32
 
bus
, 
dev
, 
func
;

167 *
ªg
;

169 
bus
 = 
	`ícodedPCIDevToBus
(
ícodedDev
);

170 
dev
 = 
	`ícodedPCIDevToDevi˚
(
ícodedDev
);

171 
func
 = 
	`ícodedPCIDevToFun˘i⁄
(
ícodedDev
);

172 
ªg
 = 
	`ªgAddªss_MMC⁄fig
(
MMCONFIG_BASE
, 
bus
, 
dev
, 
func
, 
off£t
);

173 *
vÆue
 = *((
uöt8
 vﬁ©ûê*Ë
ªg
);

174  
OK
;

175 
	}
}

181 
	$pci_ªad_c⁄fig_w‹d
(

182 
uöt32
 
ícodedDev
,

183 
öt32
 
off£t
,

184 
uöt16
 *
vÆue


187 
uöt32
 
bus
, 
dev
, 
func
;

188 *
ªg
;

190 
bus
 = 
	`ícodedPCIDevToBus
(
ícodedDev
);

191 
dev
 = 
	`ícodedPCIDevToDevi˚
(
ícodedDev
);

192 
func
 = 
	`ícodedPCIDevToFun˘i⁄
(
ícodedDev
);

193 
ªg
 = 
	`ªgAddªss_MMC⁄fig
(
MMCONFIG_BASE
, 
bus
, 
dev
, 
func
, 
off£t
);

194 *
vÆue
 = *(
uöt16
 vﬁ©ûê*Ë
ªg
;

195  
OK
;

196 
	}
}

202 
	$pci_ªad_c⁄fig_dw‹d
(

203 
uöt32
 
ícodedDev
,

204 
öt32
 
off£t
,

205 
uöt32
 *
vÆue


208 
uöt32
 
bus
, 
dev
, 
func
;

209 *
ªg
;

211 
bus
 = 
	`ícodedPCIDevToBus
(
ícodedDev
);

212 
dev
 = 
	`ícodedPCIDevToDevi˚
(
ícodedDev
);

213 
func
 = 
	`ícodedPCIDevToFun˘i⁄
(
ícodedDev
);

214 
ªg
 = 
	`ªgAddªss_MMC⁄fig
(
MMCONFIG_BASE
, 
bus
, 
dev
, 
func
, 
off£t
);

215 *
vÆue
 = *(
uöt32
 vﬁ©ûê*Ë
ªg
;

216  
OK
;

217 
	}
}

223 
	$pci_wrôe_c⁄fig_byã
(

224 
uöt32
 
ícodedDev
,

225 
öt32
 
off£t
,

226 
byã
 
vÆue


229 
uöt32
 
bus
, 
dev
, 
func
;

230 *
ªg
;

232 
bus
 = 
	`ícodedPCIDevToBus
(
ícodedDev
);

233 
dev
 = 
	`ícodedPCIDevToDevi˚
(
ícodedDev
);

234 
func
 = 
	`ícodedPCIDevToFun˘i⁄
(
ícodedDev
);

235 
ªg
 = 
	`ªgAddªss_MMC⁄fig
(
MMCONFIG_BASE
, 
bus
, 
dev
, 
func
, 
off£t
);

236 *(
uöt8
 vﬁ©ûê*Ë
ªg
 = 
vÆue
;

237  
OK
;

238 
	}
}

244 
	$pci_wrôe_c⁄fig_w‹d
(

245 
uöt32
 
ícodedDev
,

246 
öt32
 
off£t
,

247 
uöt16
 
vÆue


250 
uöt32
 
bus
, 
dev
, 
func
;

251 *
ªg
;

253 
bus
 = 
	`ícodedPCIDevToBus
(
ícodedDev
);

254 
dev
 = 
	`ícodedPCIDevToDevi˚
(
ícodedDev
);

255 
func
 = 
	`ícodedPCIDevToFun˘i⁄
(
ícodedDev
);

256 
ªg
 = 
	`ªgAddªss_MMC⁄fig
(
MMCONFIG_BASE
, 
bus
, 
dev
, 
func
, 
off£t
);

257 *(
uöt16
 vﬁ©ûê*Ë
ªg
 = 
vÆue
;

258  
OK
;

259 
	}
}

265 
	$pci_wrôe_c⁄fig_dw‹d
(

266 
uöt32
 
ícodedDev
,

267 
öt32
 
off£t
,

268 
uöt32
 
vÆue


271 
uöt32
 
bus
, 
dev
, 
func
;

272 *
ªg
;

274 
bus
 = 
	`ícodedPCIDevToBus
(
ícodedDev
);

275 
dev
 = 
	`ícodedPCIDevToDevi˚
(
ícodedDev
);

276 
func
 = 
	`ícodedPCIDevToFun˘i⁄
(
ícodedDev
);

277 
ªg
 = 
	`ªgAddªss_MMC⁄fig
(
MMCONFIG_BASE
, 
bus
, 
dev
, 
func
, 
off£t
);

278 *(
uöt32
 vﬁ©ûê*Ë
ªg
 = 
vÆue
;

279  
OK
;

280 
	}
}

286 
öt32
 
	$pci_gë_dev_mmio_ba£_addr
(

287 
uöt32
 
ícodedDev
,

288 
öt32
 
b¨Index
,

289 **
mmio_ba£_addªss


293 
uöt32
 
b¨_vÆue
;

294 
öt32
 
°©us
;

298 
b¨_vÆue
 = 0;

299 
°©us
 = 
	`pci_ªad_c⁄fig_dw‹d
(
ícodedDev
,

300 
	`off£tof
(
pci_c⁄fig_hódî
,

301 
b¨s
[
b¨Index
]),

302 &
b¨_vÆue
);

303 i‡(
°©us
 < 0) {

304  
°©us
;

306 i‡(
b¨_vÆue
 & 
PCI_BAR_REGION_TYPE_IO_MASK
) {

308  
SYSERR
;

310 i‡(
b¨_vÆue
 & 
PCI_BAR_LOCATABLE_64B_MASK
) {

312  
SYSERR
;

314 *
mmio_ba£_addªss
 = (*Ë(
b¨_vÆue
 &

315 
PCI_BAR_BASE_ADDRESS_MASK
);

316  
OK
;

317 
	}
}

323 
öt32
 
	$pci_£t_ivec
 (

324 
uöt32
 
pcidev
,

325 
öt32
 
öum
,

326 *
h™dÀr
,

327 
öt32
 
¨g


330 
uöt16
 
pci_˘æ
, 
msi_˘æ
;

331 
byã
 
ˇp
;

332 
byã
 
√xt
;

336 
	`pci_ªad_c⁄fig_byã
(
pcidev
, 0x34, &
√xt
);

340 
√xt
 != 0) {

342 
	`pci_ªad_c⁄fig_byã
(
pcidev
, 
√xt
, &
ˇp
);

344 if(
ˇp
 == 0x05) {

348 
	`pci_ªad_c⁄fig_byã
(
pcidev
, 
√xt
+1, &next);

353 if(
√xt
 == 0) {

354 
	`∑nic
("PCI device doesÇot support MSI");

359 
	`£t_ivec
(
öum
, 
h™dÀr
, 
¨g
);

363 
	`pci_ªad_c⁄fig_w‹d
(
pcidev
, 0x04, &
pci_˘æ
);

364 
pci_˘æ
 &= 0xFBFF;

365 
	`pci_wrôe_c⁄fig_w‹d
(
pcidev
, 0x04, 
pci_˘æ
);

369 
	`pci_wrôe_c⁄fig_dw‹d
(
pcidev
, 
√xt
+4, 0xFEE00000);

370 
	`pci_wrôe_c⁄fig_dw‹d
(
pcidev
, 
√xt
+8, 
öum
);

374 
	`pci_ªad_c⁄fig_w‹d
(
pcidev
, 
√xt
+2, &
msi_˘æ
);

375 
msi_˘æ
 |= 0x0001;

376 
	`pci_wrôe_c⁄fig_w‹d
(
pcidev
, 
√xt
+2, 
msi_˘æ
);

378  
OK
;

379 
	}
}

	@system/platinit.c

2 
	~<xöu.h
>

4 
	#QUARK_CONS_PORT
 1

	)

5 
	#QUARK_CONS_BAR_INDEX
 0

	)

7 
	#QUARK_CPUID_VALUE
 0x590

	)

9 
	#CPUID_MAJOR_MASK
 0xfffffff0

	)

17 
	$˝u_is_qu¨k
()

19  (
	`˝uid
(Ë& 
CPUID_MAJOR_MASK
Ë=
QUARK_CPUID_VALUE
;

20 
	}
}

27 
	$c⁄sﬁe_öô
()

29 
°©us
;

30 
pciDev
;

32 
pciDev
 = 
	`föd_pci_devi˚
(
INTEL_QUARK_UART_PCI_DID
,

33 
INTEL_QUARK_UART_PCI_VID
,

34 
QUARK_CONS_PORT
);

35 i‡(
pciDev
 < 0) {

37  
pciDev
;

41 
°©us
 = 
	`pci_gë_dev_mmio_ba£_addr
(
pciDev
, 
QUARK_CONS_BAR_INDEX
,

42 &
devèb
[
CONSOLE
].
dvc§
);

43  
°©us
;

44 
	}
}

50 
	$∂©öô
()

53 
öt32
 
pcidev
;

56 
	`pci_öô
();

59 
	`c⁄sﬁe_öô
();

61 i‡(
	`˝u_is_qu¨k
()) {

63 
	`ªmove_úm_¥Ÿe˘i⁄s
();

67 
	`qu¨k_úq_routög
();

70 
pcidev
 = 
	`föd_pci_devi˚
(
INTEL_ETH_QUARK_PCI_DID
,

71 
INTEL_ETH_QUARK_PCI_VID
, 0);

72 if(
pcidev
 !
SYSERR
) {

75 
ëhîèb
[0].
pcidev
 =Öcidev;

77 
	`pci_gë_dev_mmio_ba£_addr
(
pcidev
, 0,

78 &
devèb
[
ETHER0
].
dvc§
);

80 
	}
}

	@system/ptclear.c

3 
	~<xöu.h
>

11 
	$_±˛ór
(

12 
±íåy
 *
±±r
,

13 
uöt16
 
√w°©e
,

14 
	$öt32
 (*
di•o£
)(
öt32
)

17 
±node
 *
wÆk
;

21 
±±r
->
±°©e
 = 
PT_LIMBO
;

23 
±±r
->
±£q
++;

24 
wÆk
 = 
±±r
->
±hód
;

26 i‡–
wÆk
 !
NULL
 ) {

30  ; 
wÆk
!=
NULL
 ; wÆk=wÆk->
±√xt
) {

31 (*
di•o£
)–
wÆk
->
±msg
 );

36 (
±±r
->
±èû
)->
±√xt
 = 
±‰ì
;

37 
±‰ì
 = 
±±r
->
±hód
;

40 i‡(
√w°©e
 =
PT_ALLOC
) {

41 
±±r
->
±èû
 =Öçå->
±hód
 = 
NULL
;

42 
	`£mª£t
(
±±r
->
±s£m
,Öçå->
±max˙t
);

43 
	`£mª£t
(
±±r
->
±r£m
, 0);

45 
	`£mdñëe
(
±±r
->
±s£m
);

46 
	`£mdñëe
(
±±r
->
±r£m
);

48 
±±r
->
±°©e
 = 
√w°©e
;

50 
	}
}

	@system/ptcount.c

3 
	~<xöu.h
>

14 
öt32
 
	$±cou¡
(

15 
öt32
 
p‹tid


18 
ötmask
 
mask
;

19 
öt32
 
cou¡
;

20 
öt32
 
¢d˙t
;

21 
±íåy
 *
±±r
;

23 
mask
 = 
	`dißbÀ
();

24 i‡–
	`isbadp‹t
(
p‹tid
) ||

25 (
±±r
&
p‹âab
[
p‹tid
])->
±°©e
 !
PT_ALLOC
 ) {

26 
	`ª°‹e
(
mask
);

27  
SYSERR
;

32 
cou¡
 = 
	`£mcou¡
(
±±r
->
±r£m
);

36 i‡(
cou¡
 >= 0) {

37 
¢d˙t
 = 
	`£mcou¡
(
±±r
->
±s£m
);

38 i‡(
¢d˙t
 < 0) {

39 
cou¡
 +-
¢d˙t
;

42 
	`ª°‹e
(
mask
);

43  
cou¡
;

44 
	}
}

	@system/ptcreate.c

3 
	~<xöu.h
>

9 
sysˇŒ
 
	$±¸óã
(

10 
öt32
 
cou¡


13 
ötmask
 
mask
;

14 
öt32
 
i
;

15 
öt32
 
±num
;

16 
±íåy
 *
±±r
;

18 
mask
 = 
	`dißbÀ
();

19 i‡(
cou¡
 < 0) {

20 
	`ª°‹e
(
mask
);

21  
SYSERR
;

24 
i
=0 ; i<
NPORTS
 ; i++) {

25 
±num
 = 
±√xtid
;

26 i‡(++
±√xtid
 >
NPORTS
) {

27 
±√xtid
 = 0;

32 
±±r
&
p‹âab
[
±num
];

33 i‡(
±±r
->
±°©e
 =
PT_FREE
) {

34 
±±r
->
±°©e
 = 
PT_ALLOC
;

35 
±±r
->
±s£m
 = 
	`£m¸óã
(
cou¡
);

36 
±±r
->
±r£m
 = 
	`£m¸óã
(0);

37 
±±r
->
±hód
 =Öçå->
±èû
 = 
NULL
;

38 
±±r
->
±£q
++;

39 
±±r
->
±max˙t
 = 
cou¡
;

40 
	`ª°‹e
(
mask
);

41  
±num
;

44 
	`ª°‹e
(
mask
);

45  
SYSERR
;

46 
	}
}

	@system/ptdelete.c

3 
	~<xöu.h
>

9 
sysˇŒ
 
	$±dñëe
(

10 
öt32
 
p‹tid
,

11 
	$öt32
 (*
di•
)(
öt32
)

14 
ötmask
 
mask
;

15 
±íåy
 *
±±r
;

17 
mask
 = 
	`dißbÀ
();

18 i‡–
	`isbadp‹t
(
p‹tid
) ||

19 (
±±r
&
p‹âab
[
p‹tid
])->
±°©e
 !
PT_ALLOC
 ) {

20 
	`ª°‹e
(
mask
);

21  
SYSERR
;

23 
	`_±˛ór
(
±±r
, 
PT_FREE
, 
di•
);

24 
±√xtid
 = 
p‹tid
;

25 
	`ª°‹e
(
mask
);

26  
OK
;

27 
	}
}

	@system/ptinit.c

3 
	~<xöu.h
>

5 
±node
 *
	g±‰ì
;

6 
±íåy
 
	gp‹âab
[
NPORTS
];

7 
öt32
 
	g±√xtid
;

13 
sysˇŒ
 
	$±öô
(

14 
öt32
 
maxmsgs


17 
öt32
 
i
;

18 
±node
 *
√xt
, *
cuº
;

22 
±‰ì
 = (
±node
 *)
	`gëmem
(
maxmsgs
*(ptnode));

23 i‡(
±‰ì
 =(
±node
 *)
SYSERR
) {

24 
	`∑nic
("ptinit - insufficient memory");

29 
i
=0 ; i<
NPORTS
 ; i++) {

30 
p‹âab
[
i
].
±°©e
 = 
PT_FREE
;

31 
p‹âab
[
i
].
±£q
 = 0;

33 
±√xtid
 = 0;

37  
cuº
=
√xt
=
±‰ì
 ; --
maxmsgs
 > 0 ; curr=next ) {

38 
cuº
->
±√xt
 = ++
√xt
;

43 
cuº
->
±√xt
 = 
NULL
;

44  
OK
;

45 
	}
}

	@system/ptrecv.c

3 
	~<xöu.h
>

9 
uöt32
 
	$±ªcv
(

10 
öt32
 
p‹tid


13 
ötmask
 
mask
;

14 
±íåy
 *
±±r
;

15 
öt32
 
£q
;

16 
umsg32
 
msg
;

17 
±node
 *
msgnode
;

19 
mask
 = 
	`dißbÀ
();

20 i‡–
	`isbadp‹t
(
p‹tid
) ||

21 (
±±r
&
p‹âab
[
p‹tid
])->
±°©e
 !
PT_ALLOC
 ) {

22 
	`ª°‹e
(
mask
);

23  (
uöt32
)
SYSERR
;

28 
£q
 = 
±±r
->
±£q
;

29 i‡(
	`waô
(
±±r
->
±r£m
Ë=
SYSERR
 ||Öçå->
±°©e
 !
PT_ALLOC


30 || 
±±r
->
±£q
 !
£q
) {

31 
	`ª°‹e
(
mask
);

32  (
uöt32
)
SYSERR
;

37 
msgnode
 = 
±±r
->
±hód
;

38 
msg
 = 
msgnode
->
±msg
;

39 i‡(
±±r
->
±hód
 =±±r->
±èû
)

40 
±±r
->
±hód
 =Öçå->
±èû
 = 
NULL
;

42 
±±r
->
±hód
 = 
msgnode
->
±√xt
;

43 
msgnode
->
±√xt
 = 
±‰ì
;

44 
±‰ì
 = 
msgnode
;

45 
	`sig«l
(
±±r
->
±s£m
);

46 
	`ª°‹e
(
mask
);

47  
msg
;

48 
	}
}

	@system/ptreset.c

3 
	~<xöu.h
>

10 
sysˇŒ
 
	$±ª£t
(

11 
öt32
 
p‹tid
,

12 
	$öt32
 (*
di•
)(
öt32
)

15 
ötmask
 
mask
;

16 
±íåy
 *
±±r
;

18 
mask
 = 
	`dißbÀ
();

19 i‡–
	`isbadp‹t
(
p‹tid
) ||

20 (
±±r
&
p‹âab
[
p‹tid
])->
±°©e
 !
PT_ALLOC
 ) {

21 
	`ª°‹e
(
mask
);

22  
SYSERR
;

24 
	`_±˛ór
(
±±r
, 
PT_ALLOC
, 
di•
);

25 
	`ª°‹e
(
mask
);

26  
OK
;

27 
	}
}

	@system/ptsend.c

3 
	~<xöu.h
>

9 
sysˇŒ
 
	$±£nd
(

10 
öt32
 
p‹tid
,

11 
umsg32
 
msg


14 
ötmask
 
mask
;

15 
±íåy
 *
±±r
;

16 
öt32
 
£q
;

17 
±node
 *
msgnode
;

18 
±node
 *
èûnode
;

20 
mask
 = 
	`dißbÀ
();

21 i‡–
	`isbadp‹t
(
p‹tid
) ||

22 (
±±r
&
p‹âab
[
p‹tid
])->
±°©e
 !
PT_ALLOC
 ) {

23 
	`ª°‹e
(
mask
);

24  
SYSERR
;

29 
£q
 = 
±±r
->
±£q
;

30 i‡(
	`waô
(
±±r
->
±s£m
Ë=
SYSERR


31 || 
±±r
->
±°©e
 !
PT_ALLOC


32 || 
±±r
->
±£q
 !
£q
) {

33 
	`ª°‹e
(
mask
);

34  
SYSERR
;

36 i‡(
±‰ì
 =
NULL
) {

37 
	`∑nic
("Port systemÑan out of messageÇodes");

42 
msgnode
 = 
±‰ì
;

43 
±‰ì
 = 
msgnode
->
±√xt
;

44 
msgnode
->
±√xt
 = 
NULL
;

45 
msgnode
->
±msg
 = 
msg
;

49 
èûnode
 = 
±±r
->
±èû
;

50 i‡(
èûnode
 =
NULL
) {

51 
±±r
->
±èû
 =Öçå->
±hód
 = 
msgnode
;

53 
èûnode
->
±√xt
 = 
msgnode
;

54 
±±r
->
±èû
 = 
msgnode
;

56 
	`sig«l
(
±±r
->
±r£m
);

57 
	`ª°‹e
(
mask
);

58  
OK
;

59 
	}
}

	@system/putc.c

3 
	~<xöu.h
>

9 
sysˇŒ
 
	$putc
(

10 
did32
 
des¸p
,

11 
ch


14 
ötmask
 
mask
;

15 
díåy
 *
dev±r
;

16 
öt32
 
ªtvÆ
;

18 
mask
 = 
	`dißbÀ
();

19 i‡(
	`isbaddev
(
des¸p
)) {

20 
	`ª°‹e
(
mask
);

21  
SYSERR
;

23 
dev±r
 = (
díåy
 *Ë&
devèb
[
des¸p
];

24 
ªtvÆ
 = (*
dev±r
->
dvputc
Ë(dev±r, 
ch
);

25 
	`ª°‹e
(
mask
);

26  
ªtvÆ
;

27 
	}
}

	@system/quark_irq.c

3 
	~<xöu.h
>

9 
öt32
 
	$qu¨k_úq_routög
()

11 
pciöfo
;

12 
uöt32
 
rcba
;

14 
pciöfo
 = 
	`föd_pci_devi˚
(
INTEL_QUARK_LEGBR_PCI_DID
,

15 
INTEL_QUARK_LEGBR_PCI_VID
, 0);

16 if(
pciöfo
 =
SYSERR
) {

17  
SYSERR
;

22 
	`pci_wrôe_c⁄fig_dw‹d
(
pciöfo
, 
PABCDRC_OFFSET
, 
PABCDRC_VALUE
);

26 
	`pci_wrôe_c⁄fig_dw‹d
(
pciöfo
, 
PEFGHRC_OFFSET
, 
PEFGHRC_VALUE
);

30 
	`pci_ªad_c⁄fig_dw‹d
(
pciöfo
, 
RCBA_OFFSET
, &
rcba
);

31 
rcba
 &
RCBA_MASK
;

36 *(
uöt16
 *)(
rcba
 + 
IRQAGENT0_OFFSET
Ë
IRQAGENT0_VALUE
;

37 *(
uöt16
 *)(
rcba
 + 
IRQAGENT1_OFFSET
Ë
IRQAGENT1_VALUE
;

38 *(
uöt16
 *)(
rcba
 + 
IRQAGENT2_OFFSET
Ë
IRQAGENT2_VALUE
;

39 *(
uöt16
 *)(
rcba
 + 
IRQAGENT3_OFFSET
Ë
IRQAGENT3_VALUE
;

41 
	`outb
(0x4d1, 0x1E);

42  
OK
;

43 
	}
}

	@system/quark_pdat.c

3 
	~<xöu.h
>

9 
	$gë_qu¨k_pd©_íåy_d©a_by_id
(
uöt16
 
ty≥_id
, * 
buf
, 
uöt32
 
size
)

11 
uöt32
 
off£t
 = 0;

12 
qu¨k_pd©_hódî
* 
hódî
 = (qu¨k_pd©_hódî*)
QUARK_PDAT_MEMORY_LOC
;

14 if(
	`memcmp
(
hódî
->
qu¨k_pd©_magic
, 
QUARK_PDAT_MAGIC
, 4) != 0) {

15 
	`k¥ötf
("InvalidÖlatform data magic\n");

16  
SYSERR
;

19 
qu¨k_pd©_íåy
* 
íåy
 = (qu¨k_pd©_íåy*)(
hódî
 + 1);

20 
off£t
 < 
hódî
->
qu¨k_pd©_Àn
) {

23 if(
íåy
->
pd©_íåy_id
 =
ty≥_id
) {

24 
	`mem£t
(
buf
, 0x00, 
size
);

25 
size
 = sizê< 
íåy
->
pd©_íåy_Àn
 ? size :Éntry->pdat_entry_len;

26 
	`mem˝y
(
buf
, (*)(
íåy
 + 1), 
size
);

27  
size
;

30 
íåy
 = (
qu¨k_pd©_íåy
*)(((*Î¡ryË+ ((qu¨k_pd©_íåyË+É¡ry->
pd©_íåy_Àn
));

31 
off£t
 +((
qu¨k_pd©_íåy
Ë+ 
íåy
->
pd©_íåy_Àn
);

34  
SYSERR
;

35 
	}
}

41 
	$gë_qu¨k_pd©_íåy_d©a_by_desc
(c⁄° * 
íåy_desc
, * 
buf
, 
uöt32
 
size
)

43 
uöt32
 
off£t
 = 0;

44 
qu¨k_pd©_hódî
* 
hódî
 = (qu¨k_pd©_hódî*)
QUARK_PDAT_MEMORY_LOC
;

46 if(
	`memcmp
(
hódî
->
qu¨k_pd©_magic
, 
QUARK_PDAT_MAGIC
, 4) != 0) {

47 
	`k¥ötf
("InvalidÖlatform data magic\n");

48  
SYSERR
;

51 
qu¨k_pd©_íåy
* 
íåy
 = (qu¨k_pd©_íåy*)(
hódî
 + 1);

52 
off£t
 < 
hódî
->
qu¨k_pd©_Àn
) {

55 if(
	`°∫cmp
(
íåy
->
pd©_íåy_desc
, 
íåy_desc
, 10) == 0) {

56 
	`mem£t
(
buf
, 0x00, 
size
);

57 
size
 = sizê< 
íåy
->
pd©_íåy_Àn
 ? size :Éntry->pdat_entry_len;

58 
	`mem˝y
(
buf
, (*)(
íåy
 + 1), 
size
);

59  
size
;

62 
íåy
 = (
qu¨k_pd©_íåy
*)(((*Î¡ryË+ ((qu¨k_pd©_íåyË+É¡ry->
pd©_íåy_Àn
));

63 
off£t
 +((
qu¨k_pd©_íåy
Ë+ 
íåy
->
pd©_íåy_Àn
);

66  
SYSERR
;

67 
	}
}

	@system/queue.c

3 
	~<xöu.h
>

5 
qíåy
 
	gqueuëab
[
NQENT
];

11 
pid32
 
	$íqueue
(

12 
pid32
 
pid
,

13 
qid16
 
q


16 
qid16
 
èû
, 
¥ev
;

18 i‡(
	`isbadqid
(
q
Ë|| 
	`isbadpid
(
pid
)) {

19  
SYSERR
;

22 
èû
 = 
	`queuëaû
(
q
);

23 
¥ev
 = 
queuëab
[
èû
].
q¥ev
;

25 
queuëab
[
pid
].
q√xt
 = 
èû
;

26 
queuëab
[
pid
].
q¥ev
 = 
¥ev
;

27 
queuëab
[
¥ev
].
q√xt
 = 
pid
;

28 
queuëab
[
èû
].
q¥ev
 = 
pid
;

29  
pid
;

30 
	}
}

36 
pid32
 
	$dequeue
(

37 
qid16
 
q


40 
pid32
 
pid
;

42 i‡(
	`isbadqid
(
q
)) {

43  
SYSERR
;

44 } i‡(
	`i£m±y
(
q
)) {

45  
EMPTY
;

48 
pid
 = 
	`gëfú°
(
q
);

49 
queuëab
[
pid
].
q¥ev
 = 
EMPTY
;

50 
queuëab
[
pid
].
q√xt
 = 
EMPTY
;

51  
pid
;

52 
	}
}

	@system/read.c

3 
	~<xöu.h
>

9 
sysˇŒ
 
	$ªad
(

10 
did32
 
des¸p
,

11 *
buf„r
,

12 
uöt32
 
cou¡


15 
ötmask
 
mask
;

16 
díåy
 *
dev±r
;

17 
öt32
 
ªtvÆ
;

19 
mask
 = 
	`dißbÀ
();

20 i‡(
	`isbaddev
(
des¸p
)) {

21 
	`ª°‹e
(
mask
);

22  
SYSERR
;

24 
dev±r
 = (
díåy
 *Ë&
devèb
[
des¸p
];

25 
ªtvÆ
 = (*
dev±r
->
dvªad
Ë(dev±r, 
buf„r
, 
cou¡
);

26 
	`ª°‹e
(
mask
);

27  
ªtvÆ
;

28 
	}
}

	@system/ready.c

3 
	~<xöu.h
>

5 
qid16
 
	gªadyli°
;

11 
°©us
 
	$ªady
(

12 
pid32
 
pid


15 
¥o˚¡
 *
¥±r
;

17 i‡(
	`isbadpid
(
pid
)) {

18  
SYSERR
;

23 
¥±r
 = &
¥o˘ab
[
pid
];

24 
¥±r
->
¥°©e
 = 
PR_READY
;

25 
	`ö£π
(
pid
, 
ªadyli°
, 
¥±r
->
¥¥io
);

26 
	`ªsched
();

28  
OK
;

29 
	}
}

	@system/receive.c

3 
	~<xöu.h
>

9 
umsg32
 
	$ª˚ive
()

11 
ötmask
 
mask
;

12 
¥o˚¡
 *
¥±r
;

13 
umsg32
 
msg
;

15 
mask
 = 
	`dißbÀ
();

16 
¥±r
 = &
¥o˘ab
[
cuºpid
];

17 i‡(
¥±r
->
¥hasmsg
 =
FALSE
) {

18 
¥±r
->
¥°©e
 = 
PR_RECV
;

19 
	`ªsched
();

21 
msg
 = 
¥±r
->
¥msg
;

22 
¥±r
->
¥hasmsg
 = 
FALSE
;

23 
	`ª°‹e
(
mask
);

24  
msg
;

25 
	}
}

	@system/recvclr.c

3 
	~<xöu.h
>

9 
umsg32
 
	$ªcv˛r
()

11 
ötmask
 
mask
;

12 
¥o˚¡
 *
¥±r
;

13 
umsg32
 
msg
;

15 
mask
 = 
	`dißbÀ
();

16 
¥±r
 = &
¥o˘ab
[
cuºpid
];

17 i‡(
¥±r
->
¥hasmsg
 =
TRUE
) {

18 
msg
 = 
¥±r
->
¥msg
;

19 
¥±r
->
¥hasmsg
 = 
FALSE
;

21 
msg
 = 
OK
;

23 
	`ª°‹e
(
mask
);

24  
msg
;

25 
	}
}

	@system/recvtime.c

3 
	~<xöu.h
>

9 
umsg32
 
	$ªcvtime
(

10 
öt32
 
maxwaô


13 
ötmask
 
mask
;

14 
¥o˚¡
 *
¥±r
;

15 
umsg32
 
msg
;

17 i‡(
maxwaô
 < 0) {

18  
SYSERR
;

20 
mask
 = 
	`dißbÀ
();

24 
¥±r
 = &
¥o˘ab
[
cuºpid
];

25 i‡(
¥±r
->
¥hasmsg
 =
FALSE
) {

26 i‡(
	`ö£πd
(
cuºpid
,
¶ìpq
,
maxwaô
Ë=
SYSERR
) {

27 
	`ª°‹e
(
mask
);

28  
SYSERR
;

30 
¥±r
->
¥°©e
 = 
PR_RECTIM
;

31 
	`ªsched
();

36 i‡(
¥±r
->
¥hasmsg
) {

37 
msg
 = 
¥±r
->
¥msg
;

38 
¥±r
->
¥hasmsg
 = 
FALSE
;

40 
msg
 = 
TIMEOUT
;

42 
	`ª°‹e
(
mask
);

43  
msg
;

44 
	}
}

	@system/resched.c

3 
	~<xöu.h
>

5 
de„r
 
	gDe„r
;

11 
	$ªsched
()

13 
¥o˚¡
 *
±ﬁd
;

14 
¥o˚¡
 *
±√w
;

18 i‡(
De„r
.
nde„rs
 > 0) {

19 
De„r
.
©ãm±
 = 
TRUE
;

25 
±ﬁd
 = &
¥o˘ab
[
cuºpid
];

27 i‡(
±ﬁd
->
¥°©e
 =
PR_CURR
) {

28 i‡(
±ﬁd
->
¥¥io
 > 
	`fú°key
(
ªadyli°
)) {

34 
±ﬁd
->
¥°©e
 = 
PR_READY
;

35 
	`ö£π
(
cuºpid
, 
ªadyli°
, 
±ﬁd
->
¥¥io
);

40 
cuºpid
 = 
	`dequeue
(
ªadyli°
);

41 
±√w
 = &
¥o˘ab
[
cuºpid
];

42 
±√w
->
¥°©e
 = 
PR_CURR
;

43 
¥ìm±
 = 
QUANTUM
;

44 
	`˘xsw
(&
±ﬁd
->
¥°k±r
, &
±√w
->prstkptr);

49 
	}
}

55 
°©us
 
	$ªsched_˙é
(

56 
öt32
 
de„r


59 
de„r
) {

61 
DEFER_START
:

63 i‡(
De„r
.
nde„rs
++ == 0) {

64 
De„r
.
©ãm±
 = 
FALSE
;

66  
OK
;

68 
DEFER_STOP
:

69 i‡(
De„r
.
nde„rs
 <= 0) {

70  
SYSERR
;

72 i‡–(--
De„r
.
nde„rs
 =0Ë&& De„r.
©ãm±
 ) {

73 
	`ªsched
();

75  
OK
;

78  
SYSERR
;

80 
	}
}

	@system/resume.c

3 
	~<xöu.h
>

9 
¥i16
 
	$ªsume
(

10 
pid32
 
pid


13 
ötmask
 
mask
;

14 
¥o˚¡
 *
¥±r
;

15 
¥i16
 
¥io
;

17 
mask
 = 
	`dißbÀ
();

18 i‡(
	`isbadpid
(
pid
)) {

19 
	`ª°‹e
(
mask
);

20  (
¥i16
)
SYSERR
;

22 
¥±r
 = &
¥o˘ab
[
pid
];

23 i‡(
¥±r
->
¥°©e
 !
PR_SUSP
) {

24 
	`ª°‹e
(
mask
);

25  (
¥i16
)
SYSERR
;

27 
¥io
 = 
¥±r
->
¥¥io
;

28 
	`ªady
(
pid
);

29 
	`ª°‹e
(
mask
);

30  
¥io
;

31 
	}
}

	@system/seek.c

3 
	~<xöu.h
>

9 
sysˇŒ
 
	$£ek
(

10 
did32
 
des¸p
,

11 
uöt32
 
pos


14 
ötmask
 
mask
;

15 
díåy
 *
dev±r
;

16 
öt32
 
ªtvÆ
;

18 
mask
 = 
	`dißbÀ
();

19 i‡(
	`isbaddev
(
des¸p
)) {

20 
	`ª°‹e
(
mask
);

21  
SYSERR
;

23 
dev±r
 = (
díåy
 *Ë&
devèb
[
des¸p
];

24 
ªtvÆ
 = (*
dev±r
->
dv£ek
Ë(dev±r, 
pos
);

25 
	`ª°‹e
(
mask
);

26  
ªtvÆ
;

27 
	}
}

	@system/semcount.c

3 
	~<xöu.h
>

10 
sysˇŒ
 
	$£mcou¡
(

11 
sid32
 
£mid


14 
ötmask
 
mask
;

15 
öt32
 
cou¡
;

17 
mask
 = 
	`dißbÀ
();

19 i‡(
	`isbad£m
(
£mid
Ë|| 
£mèb
[£mid].
s°©e
 =
S_FREE
) {

20 
	`ª°‹e
(
mask
);

21  
SYSERR
;

23 
cou¡
 = 
£mèb
[
£mid
].
scou¡
;

24 
	`ª°‹e
(
mask
);

25  
cou¡
;

26 
	}
}

	@system/semcreate.c

3 
	~<xöu.h
>

5 
loˇl
 
sid32
 
√w£m
();

11 
sid32
 
	$£m¸óã
(

12 
öt32
 
cou¡


15 
ötmask
 
mask
;

16 
sid32
 
£m
;

18 
mask
 = 
	`dißbÀ
();

20 i‡(
cou¡
 < 0 || ((
£m
=
	`√w£m
())==
SYSERR
)) {

21 
	`ª°‹e
(
mask
);

22  
SYSERR
;

24 
£mèb
[
£m
].
scou¡
 = 
cou¡
;

26 
	`ª°‹e
(
mask
);

27  
£m
;

28 
	}
}

34 
loˇl
 
sid32
 
	$√w£m
()

36 
sid32
 
√xt£m
 = 0;

37 
sid32
 
£m
;

38 
öt32
 
i
;

40 
i
=0 ; i<
NSEM
 ; i++) {

41 
£m
 = 
√xt£m
++;

42 i‡(
√xt£m
 >
NSEM
)

43 
√xt£m
 = 0;

44 i‡(
£mèb
[
£m
].
s°©e
 =
S_FREE
) {

45 
£mèb
[
£m
].
s°©e
 = 
S_USED
;

46  
£m
;

49  
SYSERR
;

50 
	}
}

	@system/semdelete.c

3 
	~<xöu.h
>

9 
sysˇŒ
 
	$£mdñëe
(

10 
sid32
 
£m


13 
ötmask
 
mask
;

14 
£¡ry
 *
£m±r
;

16 
mask
 = 
	`dißbÀ
();

17 i‡(
	`isbad£m
(
£m
)) {

18 
	`ª°‹e
(
mask
);

19  
SYSERR
;

22 
£m±r
 = &
£mèb
[
£m
];

23 i‡(
£m±r
->
s°©e
 =
S_FREE
) {

24 
	`ª°‹e
(
mask
);

25  
SYSERR
;

27 
£m±r
->
s°©e
 = 
S_FREE
;

29 
	`ªsched_˙é
(
DEFER_START
);

30 
£m±r
->
scou¡
++ < 0) {

31 
	`ªady
(
	`gëfú°
(
£m±r
->
squeue
));

33 
	`ªsched_˙é
(
DEFER_STOP
);

34 
	`ª°‹e
(
mask
);

35  
OK
;

36 
	}
}

	@system/semreset.c

3 
	~<xöu.h
>

9 
sysˇŒ
 
	$£mª£t
(

10 
sid32
 
£m
,

11 
öt32
 
cou¡


14 
ötmask
 
mask
;

15 
£¡ry
 *
£m±r
;

16 
qid16
 
£mqueue
;

17 
pid32
 
pid
;

19 
mask
 = 
	`dißbÀ
();

21 i‡(
cou¡
 < 0 || 
	`isbad£m
(
£m
Ë|| 
£mèb
[£m].
s°©e
==
S_FREE
) {

22 
	`ª°‹e
(
mask
);

23  
SYSERR
;

26 
£m±r
 = &
£mèb
[
£m
];

27 
£mqueue
 = 
£m±r
->
squeue
;

28 
	`ªsched_˙é
(
DEFER_START
);

29 (
pid
=
	`gëfú°
(
£mqueue
)Ë!
EMPTY
)

30 
	`ªady
(
pid
);

31 
£m±r
->
scou¡
 = 
cou¡
;

32 
	`ªsched_˙é
(
DEFER_STOP
);

33 
	`ª°‹e
(
mask
);

34  
OK
;

35 
	}
}

	@system/send.c

3 
	~<xöu.h
>

9 
sysˇŒ
 
	$£nd
(

10 
pid32
 
pid
,

11 
umsg32
 
msg


14 
ötmask
 
mask
;

15 
¥o˚¡
 *
¥±r
;

17 
mask
 = 
	`dißbÀ
();

18 i‡(
	`isbadpid
(
pid
)) {

19 
	`ª°‹e
(
mask
);

20  
SYSERR
;

23 
¥±r
 = &
¥o˘ab
[
pid
];

24 i‡(
¥±r
->
¥hasmsg
) {

25 
	`ª°‹e
(
mask
);

26  
SYSERR
;

28 
¥±r
->
¥msg
 = 
msg
;

29 
¥±r
->
¥hasmsg
 = 
TRUE
;

33 i‡(
¥±r
->
¥°©e
 =
PR_RECV
) {

34 
	`ªady
(
pid
);

35 } i‡(
¥±r
->
¥°©e
 =
PR_RECTIM
) {

36 
	`un¶ìp
(
pid
);

37 
	`ªady
(
pid
);

39 
	`ª°‹e
(
mask
);

40  
OK
;

41 
	}
}

	@system/signal.c

3 
	~<xöu.h
>

9 
sysˇŒ
 
	$sig«l
(

10 
sid32
 
£m


13 
ötmask
 
mask
;

14 
£¡ry
 *
£m±r
;

16 
mask
 = 
	`dißbÀ
();

17 i‡(
	`isbad£m
(
£m
)) {

18 
	`ª°‹e
(
mask
);

19  
SYSERR
;

21 
£m±r
&
£mèb
[
£m
];

22 i‡(
£m±r
->
s°©e
 =
S_FREE
) {

23 
	`ª°‹e
(
mask
);

24  
SYSERR
;

26 i‡((
£m±r
->
scou¡
++) < 0) {

27 
	`ªady
(
	`dequeue
(
£m±r
->
squeue
));

29 
	`ª°‹e
(
mask
);

30  
OK
;

31 
	}
}

	@system/signaln.c

3 
	~<xöu.h
>

9 
sysˇŒ
 
	$sig« 
(

10 
sid32
 
£m
,

11 
öt32
 
cou¡


14 
ötmask
 
mask
;

15 
£¡ry
 *
£m±r
;

17 
mask
 = 
	`dißbÀ
();

18 i‡(
	`isbad£m
(
£m
Ë|| (
cou¡
 < 0)) {

19 
	`ª°‹e
(
mask
);

20  
SYSERR
;

22 
£m±r
 = &
£mèb
[
£m
];

23 i‡(
£m±r
->
s°©e
 =
S_FREE
) {

24 
	`ª°‹e
(
mask
);

25  
SYSERR
;

28 
	`ªsched_˙é
(
DEFER_START
);

29 ; 
cou¡
 > 0; count--) {

30 i‡((
£m±r
->
scou¡
++) < 0) {

31 
	`ªady
(
	`dequeue
(
£m±r
->
squeue
));

34 
	`ªsched_˙é
(
DEFER_STOP
);

35 
	`ª°‹e
(
mask
);

36  
OK
;

37 
	}
}

	@system/sleep.c

3 
	~<xöu.h
>

5 
	#MAXSECONDS
 2147483

	)

11 
sysˇŒ
 
	$¶ìp
(

12 
öt32
 
dñay


15 i‡–(
dñay
 < 0Ë|| (dñay > 
MAXSECONDS
) ) {

16  
SYSERR
;

18 
	`¶ìpms
(1000*
dñay
);

19  
OK
;

20 
	}
}

26 
sysˇŒ
 
	$¶ìpms
(

27 
öt32
 
dñay


30 
ötmask
 
mask
;

32 i‡(
dñay
 < 0) {

33  
SYSERR
;

36 i‡(
dñay
 == 0) {

37 
	`yõld
();

38  
OK
;

43 
mask
 = 
	`dißbÀ
();

44 i‡(
	`ö£πd
(
cuºpid
, 
¶ìpq
, 
dñay
Ë=
SYSERR
) {

45 
	`ª°‹e
(
mask
);

46  
SYSERR
;

49 
¥o˘ab
[
cuºpid
].
¥°©e
 = 
PR_SLEEP
;

50 
	`ªsched
();

51 
	`ª°‹e
(
mask
);

52  
OK
;

53 
	}
}

	@system/stacktrace.c

2 
	~<xöu.h
>

4 
	#STKDETAIL


	)

10 
sysˇŒ
 
	$°ackåa˚
(
pid
)

12 
¥o˚¡
 *
¥oc
 = &
¥o˘ab
[
pid
];

13 *
•
, *
Â
;

15 i‡(
pid
 !0 && 
	`isbadpid
(pid))

16  
SYSERR
;

17 i‡(
pid
 =
cuºpid
) {

18 
	`asm
("mov»%%e•, %0\n" :"Ù"(
•
));

19 
	`asm
("mov»%%ebp, %0\n" :"Ù"(
Â
));

21 
•
 = (*)
¥oc
->
¥°k±r
;

22 
Â
 = 
•
 + 2;

24 
	`k¥ötf
("• %X f∞%XÖroc->¥°kba£ %X\n", 
•
, 
Â
, 
¥oc
->
¥°kba£
);

25 #ifde‡
STKDETAIL


26 
•
 < (*)
¥oc
->
¥°kba£
) {

27 ; 
•
 < 
Â
; sp++)

28 
	`k¥ötf
("DATA (%08XË%08X (%d)\n", 
•
, *sp, *sp);

29 i‡(*
•
 =
STACKMAGIC
)

31 
	`k¥ötf
("\nFP (%08XË%08X (%d)\n", 
•
, *sp, *sp);

32 
Â
 = (*Ë*
•
++;

33 i‡(
Â
 <
•
) {

34 
	`k¥ötf
("bad sèck, f∞(%08XË<• (%08X)\n", 
Â
, 
•
);

35  
SYSERR
;

37 
	`k¥ötf
("RET 0x%X\n", *
•
);

38 
•
++;

40 
	`k¥ötf
("STACKMAGIC (should bê%X): %X\n", 
STACKMAGIC
, *
•
);

41 i‡(
•
 !(*)
¥oc
->
¥°kba£
) {

42 
	`k¥ötf
("unexpected short stack\n");

43  
SYSERR
;

46  
OK
;

47 
	}
}

	@system/suspend.c

3 
	~<xöu.h
>

9 
sysˇŒ
 
	$su•íd
(

10 
pid32
 
pid


13 
ötmask
 
mask
;

14 
¥o˚¡
 *
¥±r
;

15 
¥i16
 
¥io
;

17 
mask
 = 
	`dißbÀ
();

18 i‡(
	`isbadpid
(
pid
Ë|| (pid =
NULLPROC
)) {

19 
	`ª°‹e
(
mask
);

20  
SYSERR
;

25 
¥±r
 = &
¥o˘ab
[
pid
];

26 i‡((
¥±r
->
¥°©e
 !
PR_CURR
Ë&& (¥±r->¥°©ê!
PR_READY
)) {

27 
	`ª°‹e
(
mask
);

28  
SYSERR
;

30 i‡(
¥±r
->
¥°©e
 =
PR_READY
) {

31 
	`gëôem
(
pid
);

33 
¥±r
->
¥°©e
 = 
PR_SUSP
;

35 
¥±r
->
¥°©e
 = 
PR_SUSP
;

36 
	`ªsched
();

38 
¥io
 = 
¥±r
->
¥¥io
;

39 
	`ª°‹e
(
mask
);

40  
¥io
;

41 
	}
}

	@system/unsleep.c

3 
	~<xöu.h
>

11 
°©us
 
	$un¶ìp
(

12 
pid32
 
pid


15 
ötmask
 
mask
;

16 
¥o˚¡
 *
¥±r
;

18 
pid32
 
pid√xt
;

22 
mask
 = 
	`dißbÀ
();

24 i‡(
	`isbadpid
(
pid
)) {

25 
	`ª°‹e
(
mask
);

26  
SYSERR
;

31 
¥±r
 = &
¥o˘ab
[
pid
];

32 i‡((
¥±r
->
¥°©e
!=
PR_SLEEP
Ë&& (¥±r->¥°©e!=
PR_RECTIM
)) {

33 
	`ª°‹e
(
mask
);

34  
SYSERR
;

39 
pid√xt
 = 
queuëab
[
pid
].
q√xt
;

40 i‡(
pid√xt
 < 
NPROC
) {

41 
queuëab
[
pid√xt
].
qkey
 +queuëab[
pid
].qkey;

44 
	`gëôem
(
pid
);

45 
	`ª°‹e
(
mask
);

46  
OK
;

47 
	}
}

	@system/userret.c

3 
	~<xöu.h
>

9 
	$u£ºë
()

11 
	`kûl
(
	`gëpid
());

12 
	}
}

	@system/wait.c

3 
	~<xöu.h
>

9 
sysˇŒ
 
	$waô
(

10 
sid32
 
£m


13 
ötmask
 
mask
;

14 
¥o˚¡
 *
¥±r
;

15 
£¡ry
 *
£m±r
;

17 
mask
 = 
	`dißbÀ
();

18 i‡(
	`isbad£m
(
£m
)) {

19 
	`ª°‹e
(
mask
);

20  
SYSERR
;

23 
£m±r
 = &
£mèb
[
£m
];

24 i‡(
£m±r
->
s°©e
 =
S_FREE
) {

25 
	`ª°‹e
(
mask
);

26  
SYSERR
;

29 i‡(--(
£m±r
->
scou¡
) < 0) {

30 
¥±r
 = &
¥o˘ab
[
cuºpid
];

31 
¥±r
->
¥°©e
 = 
PR_WAIT
;

32 
¥±r
->
¥£m
 = 
£m
;

33 
	`íqueue
(
cuºpid
,
£m±r
->
squeue
);

34 
	`ªsched
();

37 
	`ª°‹e
(
mask
);

38  
OK
;

39 
	}
}

	@system/wakeup.c

3 
	~<xöu.h
>

9 
	$wakeup
()

13 
	`ªsched_˙é
(
DEFER_START
);

14 
	`n⁄em±y
(
¶ìpq
Ë&& (
	`fú°key
(sleepq) <= 0)) {

15 
	`ªady
(
	`dequeue
(
¶ìpq
));

18 
	`ªsched_˙é
(
DEFER_STOP
);

20 
	}
}

	@system/write.c

3 
	~<xöu.h
>

9 
sysˇŒ
 
	$wrôe
(

10 
did32
 
des¸p
,

11 *
buf„r
,

12 
uöt32
 
cou¡


15 
ötmask
 
mask
;

16 
díåy
 *
dev±r
;

17 
öt32
 
ªtvÆ
;

19 
mask
 = 
	`dißbÀ
();

20 i‡(
	`isbaddev
(
des¸p
)) {

21 
	`ª°‹e
(
mask
);

22  
SYSERR
;

24 
dev±r
 = (
díåy
 *Ë&
devèb
[
des¸p
];

25 
ªtvÆ
 = (*
dev±r
->
dvwrôe
Ë(dev±r, 
buf„r
, 
cou¡
);

26 
	`ª°‹e
(
mask
);

27  
ªtvÆ
;

28 
	}
}

	@system/xdone.c

3 
	~<xöu.h
>

9 
	$xd⁄e
()

11 
	`k¥ötf
("\n\nAll userÖrocesses have completed.\n\n");

12 
	`hÆt
();

13 
	}
}

	@system/yield.c

3 
	~<xöu.h
>

9 
sysˇŒ
 
	$yõld
()

11 
ötmask
 
mask
;

13 
mask
 = 
	`dißbÀ
();

14 
	`ªsched
();

15 
	`ª°‹e
(
mask
);

16  
OK
;

17 
	}
}

	@/usr/include/ctype.h

22 #i‚def 
_CTYPE_H


23 
	#_CTYPE_H
 1

	)

25 
	~<„©uªs.h
>

26 
	~<bôs/ty≥s.h
>

28 
	g__BEGIN_DECLS


30 #i‚de‡
_ISbô


39 
	~<ídün.h
>

40 #i‡
__BYTE_ORDER
 =
__BIG_ENDIAN


41 
	#_ISbô
(
bô
Ë(1 << (bô))

	)

43 
	#_ISbô
(
bô
Ë((bôË< 8 ? ((1 << (bô)Ë<< 8Ë: ((1 << (bô)Ë>> 8))

	)

48 
	m_ISuµî
 = 
_ISbô
 (0),

49 
	m_ISlowî
 = 
_ISbô
 (1),

50 
	m_ISÆpha
 = 
_ISbô
 (2),

51 
	m_ISdigô
 = 
_ISbô
 (3),

52 
	m_ISxdigô
 = 
_ISbô
 (4),

53 
	m_IS•a˚
 = 
_ISbô
 (5),

54 
	m_IS¥öt
 = 
_ISbô
 (6),

55 
	m_ISgøph
 = 
_ISbô
 (7),

56 
	m_ISbœnk
 = 
_ISbô
 (8),

57 
	m_IS˙ål
 = 
_ISbô
 (9),

58 
	m_ISpun˘
 = 
_ISbô
 (10),

59 
	m_ISÆnum
 = 
_ISbô
 (11)

79 c⁄° **
	$__˘y≥_b_loc
 ()

80 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

81 c⁄° 
__öt32_t
 **
	$__˘y≥_tﬁowî_loc
 ()

82 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

83 c⁄° 
__öt32_t
 **
	$__˘y≥_touµî_loc
 ()

84 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

87 #i‚de‡
__˝lu•lus


88 
	#__is˘y≥
(
c
, 
ty≥
) \

89 ((*
	`__˘y≥_b_loc
 ())[(Ë(
c
)] & (Ë
ty≥
)

	)

90 #ñi‡
deföed
 
__USE_EXTERN_INLINES


91 
	#__is˘y≥_f
(
ty≥
) \

92 
__exã∫_ölöe
 \

93 
is
##
	`ty≥
 (
__c
Ë
__THROW
 \

95  (*
	`__˘y≥_b_loc
 ())[(Ë(
__c
)] & (Ë
_IS
##
ty≥
; \

96 
	}

	)
}

99 
	#__ißscii
(
c
Ë(((cË& ~0x7fË=0Ë

	)

100 
	#__tﬂscii
(
c
Ë((cË& 0x7fË

	)

102 
	#__ex˘y≥
(
«me
Ë
	`«me
 (Ë
__THROW


	)

108 
__ex˘y≥
 (
iß um
);

109 
__ex˘y≥
 (
ißÕha
);

110 
__ex˘y≥
 (
is˙ål
);

111 
__ex˘y≥
 (
isdigô
);

112 
__ex˘y≥
 (
i¶owî
);

113 
__ex˘y≥
 (
isgøph
);

114 
__ex˘y≥
 (
i•röt
);

115 
__ex˘y≥
 (
i•un˘
);

116 
__ex˘y≥
 (
is•a˚
);

117 
__ex˘y≥
 (
isuµî
);

118 
__ex˘y≥
 (
isxdigô
);

122 
	$tﬁowî
 (
__c
Ë
__THROW
;

125 
	$touµî
 (
__c
Ë
__THROW
;

129 #ifdef 
__USE_ISOC99


130 
	`__ex˘y≥
 (
isbœnk
);

133 #ifde‡
__USE_GNU


135 
	$is˘y≥
 (
__c
, 
__mask
Ë
__THROW
;

138 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


142 
	$ißscii
 (
__c
Ë
__THROW
;

146 
	$tﬂscii
 (
__c
Ë
__THROW
;

150 
	`__ex˘y≥
 (
_touµî
);

151 
	`__ex˘y≥
 (
_tﬁowî
);

155 
	#__tobody
(
c
, 
f
, 
a
, 
¨gs
) \

156 (
__exãnsi⁄__
 \

157 ({ 
__ªs
; \

158 i‡( (
c
) > 1) \

160 i‡(
	`__buûtö_c⁄°™t_p
 (
c
)) \

162 
__c
 = (
c
); \

163 
__ªs
 = 
__c
 < -128 || __¯> 255 ? __¯: (
a
)[__c]; \

166 
__ªs
 = 
f
 
¨gs
; \

169 
__ªs
 = (
a
)[(Ë(
c
)]; \

170 
__ªs
; 
	}
}))

	)

172 #i‡!
deföed
 
__NO_CTYPE


173 #ifde‡
__is˘y≥_f


174 
	$__is˘y≥_f
 (
Ænum
)

175 
	$__is˘y≥_f
 (
Æpha
)

176 
	$__is˘y≥_f
 (
˙ål
)

177 
	$__is˘y≥_f
 (
digô
)

178 
	$__is˘y≥_f
 (
lowî
)

179 
	$__is˘y≥_f
 (
gøph
)

180 
	$__is˘y≥_f
 (
¥öt
)

181 
	$__is˘y≥_f
 (
pun˘
)

182 
	$__is˘y≥_f
 (
•a˚
)

183 
	$__is˘y≥_f
 (
uµî
)

184 
	$__is˘y≥_f
 (
xdigô
)

185 #ifde‡
__USE_ISOC99


186 
	$__is˘y≥_f
 (
bœnk
)

188 #ñi‡
deföed
 
__is˘y≥


189 
	#iß um
(
c
Ë
	`__is˘y≥
((c), 
_ISÆnum
)

	)

190 
	#ißÕha
(
c
Ë
	`__is˘y≥
((c), 
_ISÆpha
)

	)

191 
	#is˙ål
(
c
Ë
	`__is˘y≥
((c), 
_IS˙ål
)

	)

192 
	#isdigô
(
c
Ë
	`__is˘y≥
((c), 
_ISdigô
)

	)

193 
	#i¶owî
(
c
Ë
	`__is˘y≥
((c), 
_ISlowî
)

	)

194 
	#isgøph
(
c
Ë
	`__is˘y≥
((c), 
_ISgøph
)

	)

195 
	#i•röt
(
c
Ë
	`__is˘y≥
((c), 
_IS¥öt
)

	)

196 
	#i•un˘
(
c
Ë
	`__is˘y≥
((c), 
_ISpun˘
)

	)

197 
	#is•a˚
(
c
Ë
	`__is˘y≥
((c), 
_IS•a˚
)

	)

198 
	#isuµî
(
c
Ë
	`__is˘y≥
((c), 
_ISuµî
)

	)

199 
	#isxdigô
(
c
Ë
	`__is˘y≥
((c), 
_ISxdigô
)

	)

200 #ifde‡
__USE_ISOC99


201 
	#isbœnk
(
c
Ë
	`__is˘y≥
((c), 
_ISbœnk
)

	)

205 #ifde‡
__USE_EXTERN_INLINES


206 
__exã∫_ölöe
 

207 
	`__NTH
 (
	$tﬁowî
 (
__c
))

209  
__c
 >-128 && __¯< 256 ? (*
	`__˘y≥_tﬁowî_loc
 ())[__c] : __c;

210 
	}
}

212 
__exã∫_ölöe
 

213 
__NTH
 (
	$touµî
 (
__c
))

215  
__c
 >-128 && __¯< 256 ? (*
	`__˘y≥_touµî_loc
 ())[__c] : __c;

216 
	}
}

219 #i‡
__GNUC__
 >2 && 
deföed
 
__OPTIMIZE__
 && !deföed 
__˝lu•lus


220 
	#tﬁowî
(
c
Ë
	`__tobody
 (c, 
tﬁowî
, *
	`__˘y≥_tﬁowî_loc
 (), (c))

	)

221 
	#touµî
(
c
Ë
	`__tobody
 (c, 
touµî
, *
	`__˘y≥_touµî_loc
 (), (c))

	)

224 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


225 
	#ißscii
(
c
Ë
	`__ißscii
 (c)

	)

226 
	#tﬂscii
(
c
Ë
	`__tﬂscii
 (c)

	)

228 
	#_tﬁowî
(
c
Ë((Ë(*
	`__˘y≥_tﬁowî_loc
 ())[(Ë(c)])

	)

229 
	#_touµî
(
c
Ë((Ë(*
	`__˘y≥_touµî_loc
 ())[(Ë(c)])

	)

235 #ifde‡
__USE_XOPEN2K8


237 
	~<bôs/ty≥s/loˇÀ_t.h
>

241 
	#__is˘y≥_l
(
c
, 
ty≥
, 
loˇÀ
) \

242 ((
loˇÀ
)->
__˘y≥_b
[(Ë(
c
)] & (Ë
ty≥
)

	)

244 
	#__ex˘y≥_l
(
«me
) \

245 
	`«me
 (, 
loˇÀ_t
Ë
__THROW


	)

251 
__ex˘y≥_l
 (
iß um_l
);

252 
__ex˘y≥_l
 (
ißÕha_l
);

253 
__ex˘y≥_l
 (
is˙ål_l
);

254 
__ex˘y≥_l
 (
isdigô_l
);

255 
__ex˘y≥_l
 (
i¶owî_l
);

256 
__ex˘y≥_l
 (
isgøph_l
);

257 
__ex˘y≥_l
 (
i•röt_l
);

258 
__ex˘y≥_l
 (
i•un˘_l
);

259 
__ex˘y≥_l
 (
is•a˚_l
);

260 
__ex˘y≥_l
 (
isuµî_l
);

261 
__ex˘y≥_l
 (
isxdigô_l
);

263 
__ex˘y≥_l
 (
isbœnk_l
);

267 
	$__tﬁowî_l
 (
__c
, 
loˇÀ_t
 
__l
Ë
__THROW
;

268 
	$tﬁowî_l
 (
__c
, 
loˇÀ_t
 
__l
Ë
__THROW
;

271 
	$__touµî_l
 (
__c
, 
loˇÀ_t
 
__l
Ë
__THROW
;

272 
	$touµî_l
 (
__c
, 
loˇÀ_t
 
__l
Ë
__THROW
;

274 #i‡
__GNUC__
 >2 && 
deföed
 
__OPTIMIZE__
 && !deföed 
__˝lu•lus


275 
	#__tﬁowî_l
(
c
, 
loˇÀ
) \

276 
	`__tobody
 (
c
, 
__tﬁowî_l
, (
loˇÀ
)->
__˘y≥_tﬁowî
, (c,ÜoˇÀ))

	)

277 
	#__touµî_l
(
c
, 
loˇÀ
) \

278 
	`__tobody
 (
c
, 
__touµî_l
, (
loˇÀ
)->
__˘y≥_touµî
, (c,ÜoˇÀ))

	)

279 
	#tﬁowî_l
(
c
, 
loˇÀ
Ë
	`__tﬁowî_l
 ((c), (loˇÀ))

	)

280 
	#touµî_l
(
c
, 
loˇÀ
Ë
	`__touµî_l
 ((c), (loˇÀ))

	)

284 #i‚de‡
__NO_CTYPE


285 
	#__iß um_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISÆnum
, (l))

	)

286 
	#__ißÕha_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISÆpha
, (l))

	)

287 
	#__is˙ål_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_IS˙ål
, (l))

	)

288 
	#__isdigô_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISdigô
, (l))

	)

289 
	#__i¶owî_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISlowî
, (l))

	)

290 
	#__isgøph_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISgøph
, (l))

	)

291 
	#__i•röt_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_IS¥öt
, (l))

	)

292 
	#__i•un˘_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISpun˘
, (l))

	)

293 
	#__is•a˚_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_IS•a˚
, (l))

	)

294 
	#__isuµî_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISuµî
, (l))

	)

295 
	#__isxdigô_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISxdigô
, (l))

	)

297 
	#__isbœnk_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISbœnk
, (l))

	)

299 #ifde‡
__USE_MISC


300 
	#__ißscii_l
(
c
,
l
Ë(÷), 
	`__ißscii
 (c))

	)

301 
	#__tﬂscii_l
(
c
,
l
Ë(÷), 
	`__tﬂscii
 (c))

	)

304 
	#iß um_l
(
c
,
l
Ë
	`__iß um_l
 ((c), (l))

	)

305 
	#ißÕha_l
(
c
,
l
Ë
	`__ißÕha_l
 ((c), (l))

	)

306 
	#is˙ål_l
(
c
,
l
Ë
	`__is˙ål_l
 ((c), (l))

	)

307 
	#isdigô_l
(
c
,
l
Ë
	`__isdigô_l
 ((c), (l))

	)

308 
	#i¶owî_l
(
c
,
l
Ë
	`__i¶owî_l
 ((c), (l))

	)

309 
	#isgøph_l
(
c
,
l
Ë
	`__isgøph_l
 ((c), (l))

	)

310 
	#i•röt_l
(
c
,
l
Ë
	`__i•röt_l
 ((c), (l))

	)

311 
	#i•un˘_l
(
c
,
l
Ë
	`__i•un˘_l
 ((c), (l))

	)

312 
	#is•a˚_l
(
c
,
l
Ë
	`__is•a˚_l
 ((c), (l))

	)

313 
	#isuµî_l
(
c
,
l
Ë
	`__isuµî_l
 ((c), (l))

	)

314 
	#isxdigô_l
(
c
,
l
Ë
	`__isxdigô_l
 ((c), (l))

	)

316 
	#isbœnk_l
(
c
,
l
Ë
	`__isbœnk_l
 ((c), (l))

	)

318 #ifde‡
__USE_MISC


319 
	#ißscii_l
(
c
,
l
Ë
	`__ißscii_l
 ((c), (l))

	)

320 
	#tﬂscii_l
(
c
,
l
Ë
	`__tﬂscii_l
 ((c), (l))

	)

327 
__END_DECLS


	@/usr/include/memory.h

22 #i‚def 
_MEMORY_H


23 
	#_MEMORY_H
 1

	)

25 
	~<„©uªs.h
>

28 #i‚def 
_STRING_H


29 
	~<°rög.h
>

	@/usr/include/semaphore.h

18 #i‚de‡
_SEMAPHORE_H


19 
	#_SEMAPHORE_H
 1

	)

21 
	~<„©uªs.h
>

22 
	~<sys/ty≥s.h
>

23 #ifde‡
__USE_XOPEN2K


24 
	~<bôs/ty≥s/°ru˘_time•ec.h
>

28 
	~<bôs/£m≠h‹e.h
>

31 
__BEGIN_DECLS


35 
	$£m_öô
 (
£m_t
 *
__£m
, 
__psh¨ed
, 
__vÆue
)

36 
__THROW
;

38 
	$£m_de°roy
 (
£m_t
 *
__£m
Ë
__THROW
;

41 
£m_t
 *
	$£m_›í
 (c⁄° *
__«me
, 
__oÊag
, ...Ë
__THROW
;

44 
	$£m_˛o£
 (
£m_t
 *
__£m
Ë
__THROW
;

47 
	$£m_u∆ök
 (c⁄° *
__«me
Ë
__THROW
;

53 
	`£m_waô
 (
£m_t
 *
__£m
);

55 #ifde‡
__USE_XOPEN2K


60 
	`£m_timedwaô
 (
£m_t
 *
__ª°ri˘
 
__£m
,

61 c⁄° 
time•ec
 *
__ª°ri˘
 
__ab°ime
);

65 
	$£m_åywaô
 (
£m_t
 *
__£m
Ë
__THROWNL
;

68 
	$£m_po°
 (
£m_t
 *
__£m
Ë
__THROWNL
;

71 
	$£m_gëvÆue
 (
£m_t
 *
__ª°ri˘
 
__£m
, *__ª°ri˘ 
__svÆ
)

72 
__THROW
;

75 
__END_DECLS


	@/usr/include/stdio.h

23 #i‚de‡
_STDIO_H


24 
	#_STDIO_H
 1

	)

26 
	#__GLIBC_INTERNAL_STARTING_HEADER_IMPLEMENTATION


	)

27 
	~<bôs/libc-hódî-°¨t.h
>

29 
	g__BEGIN_DECLS


31 
	#__√ed_size_t


	)

32 
	#__√ed_NULL


	)

33 
	~<°ddef.h
>

35 
	~<bôs/ty≥s.h
>

36 
	~<bôs/ty≥s/__FILE.h
>

37 
	~<bôs/ty≥s/FILE.h
>

39 
	#_STDIO_USES_IOSTREAM


	)

41 
	~<bôs/libio.h
>

43 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8


44 #ifde‡
__GNUC__


45 #i‚de‡
_VA_LIST_DEFINED


46 
_G_va_li°
 
	tva_li°
;

47 
	#_VA_LIST_DEFINED


	)

50 
	~<°d¨g.h
>

54 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K


55 #i‚de‡
__off_t_deföed


56 #i‚de‡
__USE_FILE_OFFSET64


57 
__off_t
 
	toff_t
;

59 
__off64_t
 
	toff_t
;

61 
	#__off_t_deföed


	)

63 #i‡
deföed
 
__USE_LARGEFILE64
 && !deföed 
__off64_t_deföed


64 
__off64_t
 
	toff64_t
;

65 
	#__off64_t_deföed


	)

69 #ifde‡
__USE_XOPEN2K8


70 #i‚de‡
__ssize_t_deföed


71 
__ssize_t
 
	tssize_t
;

72 
	#__ssize_t_deföed


	)

77 #i‚de‡
__USE_FILE_OFFSET64


78 
_G_Âos_t
 
	tÂos_t
;

80 
_G_Âos64_t
 
	tÂos_t
;

82 #ifde‡
__USE_LARGEFILE64


83 
_G_Âos64_t
 
	tÂos64_t
;

87 
	#_IOFBF
 0

	)

88 
	#_IOLBF
 1

	)

89 
	#_IONBF
 2

	)

93 #i‚de‡
BUFSIZ


94 
	#BUFSIZ
 
_IO_BUFSIZ


	)

100 #i‚de‡
EOF


101 
	#EOF
 (-1)

	)

107 
	#SEEK_SET
 0

	)

108 
	#SEEK_CUR
 1

	)

109 
	#SEEK_END
 2

	)

110 #ifde‡
__USE_GNU


111 
	#SEEK_DATA
 3

	)

112 
	#SEEK_HOLE
 4

	)

116 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


118 
	#P_tmpdú
 "/tmp"

	)

131 
	~<bôs/°dio_lim.h
>

135 
_IO_FILE
 *
°dö
;

136 
_IO_FILE
 *
°dout
;

137 
_IO_FILE
 *
°dîr
;

139 
	#°dö
 
°dö


	)

140 
	#°dout
 
°dout


	)

141 
	#°dîr
 
°dîr


	)

144 
	$ªmove
 (c⁄° *
__fûíame
Ë
__THROW
;

146 
	$ª«me
 (c⁄° *
__ﬁd
, c⁄° *
__√w
Ë
__THROW
;

148 #ifde‡
__USE_ATFILE


150 
	$ª«mót
 (
__ﬁdfd
, c⁄° *
__ﬁd
, 
__√wfd
,

151 c⁄° *
__√w
Ë
__THROW
;

158 #i‚de‡
__USE_FILE_OFFSET64


159 
FILE
 *
	$tmpfûe
 (Ë
__wur
;

161 #ifde‡
__REDIRECT


162 
FILE
 *
	`__REDIRECT
 (
tmpfûe
, (), 
tmpfûe64
Ë
__wur
;

164 
	#tmpfûe
 
tmpfûe64


	)

168 #ifde‡
__USE_LARGEFILE64


169 
FILE
 *
	$tmpfûe64
 (Ë
__wur
;

173 *
	$tm≤am
 (*
__s
Ë
__THROW
 
__wur
;

175 #ifde‡
__USE_MISC


178 *
	$tm≤am_r
 (*
__s
Ë
__THROW
 
__wur
;

182 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


190 *
	$ãm≤am
 (c⁄° *
__dú
, c⁄° *
__pfx
)

191 
__THROW
 
__©åibuã_mÆloc__
 
__wur
;

199 
	`f˛o£
 (
FILE
 *
__°ªam
);

204 
	`fÊush
 (
FILE
 *
__°ªam
);

206 #ifde‡
__USE_MISC


213 
	`fÊush_u∆ocked
 (
FILE
 *
__°ªam
);

216 #ifde‡
__USE_GNU


223 
	`f˛o£Æl
 ();

227 #i‚de‡
__USE_FILE_OFFSET64


232 
FILE
 *
	$f›í
 (c⁄° *
__ª°ri˘
 
__fûíame
,

233 c⁄° *
__ª°ri˘
 
__modes
Ë
__wur
;

238 
FILE
 *
	$‰e›í
 (c⁄° *
__ª°ri˘
 
__fûíame
,

239 c⁄° *
__ª°ri˘
 
__modes
,

240 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

242 #ifde‡
__REDIRECT


243 
FILE
 *
	`__REDIRECT
 (
f›í
, (c⁄° *
__ª°ri˘
 
__fûíame
,

244 c⁄° *
__ª°ri˘
 
__modes
), 
f›í64
)

245 
__wur
;

246 
FILE
 *
	`__REDIRECT
 (
‰e›í
, (c⁄° *
__ª°ri˘
 
__fûíame
,

247 c⁄° *
__ª°ri˘
 
__modes
,

248 
FILE
 *
__ª°ri˘
 
__°ªam
), 
‰e›í64
)

249 
__wur
;

251 
	#f›í
 
f›í64


	)

252 
	#‰e›í
 
‰e›í64


	)

255 #ifde‡
__USE_LARGEFILE64


256 
FILE
 *
	$f›í64
 (c⁄° *
__ª°ri˘
 
__fûíame
,

257 c⁄° *
__ª°ri˘
 
__modes
Ë
__wur
;

258 
FILE
 *
	$‰e›í64
 (c⁄° *
__ª°ri˘
 
__fûíame
,

259 c⁄° *
__ª°ri˘
 
__modes
,

260 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

263 #ifdef 
__USE_POSIX


265 
FILE
 *
	$fd›í
 (
__fd
, c⁄° *
__modes
Ë
__THROW
 
__wur
;

268 #ifdef 
__USE_GNU


271 
FILE
 *
	$f›ícookõ
 (*
__ª°ri˘
 
__magic_cookõ
,

272 c⁄° *
__ª°ri˘
 
__modes
,

273 
_IO_cookõ_io_fun˘i⁄s_t
 
__io_funcs
Ë
__THROW
 
__wur
;

276 #i‡
deföed
 
__USE_XOPEN2K8
 || 
	`__GLIBC_USE
 (
LIB_EXT2
)

278 
FILE
 *
	$fmem›í
 (*
__s
, 
size_t
 
__Àn
, c⁄° *
__modes
)

279 
__THROW
 
__wur
;

284 
FILE
 *
	$›í_mem°ªam
 (**
__buÊoc
, 
size_t
 *
__sizñoc
Ë
__THROW
 
__wur
;

290 
	$£tbuf
 (
FILE
 *
__ª°ri˘
 
__°ªam
, *__ª°ri˘ 
__buf
Ë
__THROW
;

294 
	$£tvbuf
 (
FILE
 *
__ª°ri˘
 
__°ªam
, *__ª°ri˘ 
__buf
,

295 
__modes
, 
size_t
 
__n
Ë
__THROW
;

297 #ifdef 
__USE_MISC


300 
	$£tbuf„r
 (
FILE
 *
__ª°ri˘
 
__°ªam
, *__ª°ri˘ 
__buf
,

301 
size_t
 
__size
Ë
__THROW
;

304 
	$£éöebuf
 (
FILE
 *
__°ªam
Ë
__THROW
;

312 
	`Ârötf
 (
FILE
 *
__ª°ri˘
 
__°ªam
,

313 c⁄° *
__ª°ri˘
 
__f‹m©
, ...);

318 
	`¥ötf
 (c⁄° *
__ª°ri˘
 
__f‹m©
, ...);

320 
	$•rötf
 (*
__ª°ri˘
 
__s
,

321 c⁄° *
__ª°ri˘
 
__f‹m©
, ...Ë
__THROWNL
;

327 
	`vÂrötf
 (
FILE
 *
__ª°ri˘
 
__s
, c⁄° *__ª°ri˘ 
__f‹m©
,

328 
_G_va_li°
 
__¨g
);

333 
	`v¥ötf
 (c⁄° *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__¨g
);

335 
	$v•rötf
 (*
__ª°ri˘
 
__s
, c⁄° *__ª°ri˘ 
__f‹m©
,

336 
_G_va_li°
 
__¨g
Ë
__THROWNL
;

338 #i‡
deföed
 
__USE_ISOC99
 || deföed 
__USE_UNIX98


340 
	$¢¥ötf
 (*
__ª°ri˘
 
__s
, 
size_t
 
__maxÀn
,

341 c⁄° *
__ª°ri˘
 
__f‹m©
, ...)

342 
__THROWNL
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 3, 4)));

344 
	$v¢¥ötf
 (*
__ª°ri˘
 
__s
, 
size_t
 
__maxÀn
,

345 c⁄° *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__¨g
)

346 
__THROWNL
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 3, 0)));

349 #i‡
	`__GLIBC_USE
 (
LIB_EXT2
)

352 
	$va•rötf
 (**
__ª°ri˘
 
__±r
, c⁄° *__ª°ri˘ 
__f
,

353 
_G_va_li°
 
__¨g
)

354 
__THROWNL
 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__¥ötf__
, 2, 0))Ë
__wur
;

355 
	$__a•rötf
 (**
__ª°ri˘
 
__±r
,

356 c⁄° *
__ª°ri˘
 
__fmt
, ...)

357 
__THROWNL
 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__¥ötf__
, 2, 3))Ë
__wur
;

358 
	$a•rötf
 (**
__ª°ri˘
 
__±r
,

359 c⁄° *
__ª°ri˘
 
__fmt
, ...)

360 
__THROWNL
 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__¥ötf__
, 2, 3))Ë
__wur
;

363 #ifde‡
__USE_XOPEN2K8


365 
	$vd¥ötf
 (
__fd
, c⁄° *
__ª°ri˘
 
__fmt
,

366 
_G_va_li°
 
__¨g
)

367 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 2, 0)));

368 
	$d¥ötf
 (
__fd
, c⁄° *
__ª°ri˘
 
__fmt
, ...)

369 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 2, 3)));

377 
	$fsˇnf
 (
FILE
 *
__ª°ri˘
 
__°ªam
,

378 c⁄° *
__ª°ri˘
 
__f‹m©
, ...Ë
__wur
;

383 
	$sˇnf
 (c⁄° *
__ª°ri˘
 
__f‹m©
, ...Ë
__wur
;

385 
	$ssˇnf
 (c⁄° *
__ª°ri˘
 
__s
,

386 c⁄° *
__ª°ri˘
 
__f‹m©
, ...Ë
__THROW
;

388 #i‡
deföed
 
__USE_ISOC99
 && !deföed 
__USE_GNU
 \

389 && (!
deföed
 
__LDBL_COMPAT
 || !deföed 
__REDIRECT
) \

390 && (
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_XOPEN2K
)

391 #ifde‡
__REDIRECT


395 
	`__REDIRECT
 (
fsˇnf
, (
FILE
 *
__ª°ri˘
 
__°ªam
,

396 c⁄° *
__ª°ri˘
 
__f‹m©
, ...),

397 
__isoc99_fsˇnf
Ë
__wur
;

398 
	`__REDIRECT
 (
sˇnf
, (c⁄° *
__ª°ri˘
 
__f‹m©
, ...),

399 
__isoc99_sˇnf
Ë
__wur
;

400 
	`__REDIRECT_NTH
 (
ssˇnf
, (c⁄° *
__ª°ri˘
 
__s
,

401 c⁄° *
__ª°ri˘
 
__f‹m©
, ...),

402 
__isoc99_ssˇnf
);

404 
	$__isoc99_fsˇnf
 (
FILE
 *
__ª°ri˘
 
__°ªam
,

405 c⁄° *
__ª°ri˘
 
__f‹m©
, ...Ë
__wur
;

406 
	$__isoc99_sˇnf
 (c⁄° *
__ª°ri˘
 
__f‹m©
, ...Ë
__wur
;

407 
	$__isoc99_ssˇnf
 (c⁄° *
__ª°ri˘
 
__s
,

408 c⁄° *
__ª°ri˘
 
__f‹m©
, ...Ë
__THROW
;

409 
	#fsˇnf
 
__isoc99_fsˇnf


	)

410 
	#sˇnf
 
__isoc99_sˇnf


	)

411 
	#ssˇnf
 
__isoc99_ssˇnf


	)

415 #ifdef 
__USE_ISOC99


420 
	$vfsˇnf
 (
FILE
 *
__ª°ri˘
 
__s
, c⁄° *__ª°ri˘ 
__f‹m©
,

421 
_G_va_li°
 
__¨g
)

422 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__sˇnf__
, 2, 0))Ë
__wur
;

428 
	$vsˇnf
 (c⁄° *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__¨g
)

429 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__sˇnf__
, 1, 0))Ë
__wur
;

432 
	$vssˇnf
 (c⁄° *
__ª°ri˘
 
__s
,

433 c⁄° *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__¨g
)

434 
__THROW
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__sˇnf__
, 2, 0)));

436 #i‡!
deföed
 
__USE_GNU
 \

437 && (!
deföed
 
__LDBL_COMPAT
 || !deföed 
__REDIRECT
) \

438 && (
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_XOPEN2K
)

439 #ifde‡
__REDIRECT


443 
	`__REDIRECT
 (
vfsˇnf
,

444 (
FILE
 *
__ª°ri˘
 
__s
,

445 c⁄° *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__¨g
),

446 
__isoc99_vfsˇnf
)

447 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__sˇnf__
, 2, 0))Ë
__wur
;

448 
	`__REDIRECT
 (
vsˇnf
, (c⁄° *
__ª°ri˘
 
__f‹m©
,

449 
_G_va_li°
 
__¨g
), 
__isoc99_vsˇnf
)

450 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__sˇnf__
, 1, 0))Ë
__wur
;

451 
	`__REDIRECT_NTH
 (
vssˇnf
,

452 (c⁄° *
__ª°ri˘
 
__s
,

453 c⁄° *
__ª°ri˘
 
__f‹m©
,

454 
_G_va_li°
 
__¨g
), 
__isoc99_vssˇnf
)

455 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__sˇnf__
, 2, 0)));

457 
	$__isoc99_vfsˇnf
 (
FILE
 *
__ª°ri˘
 
__s
,

458 c⁄° *
__ª°ri˘
 
__f‹m©
,

459 
_G_va_li°
 
__¨g
Ë
__wur
;

460 
	$__isoc99_vsˇnf
 (c⁄° *
__ª°ri˘
 
__f‹m©
,

461 
_G_va_li°
 
__¨g
Ë
__wur
;

462 
	$__isoc99_vssˇnf
 (c⁄° *
__ª°ri˘
 
__s
,

463 c⁄° *
__ª°ri˘
 
__f‹m©
,

464 
_G_va_li°
 
__¨g
Ë
__THROW
;

465 
	#vfsˇnf
 
__isoc99_vfsˇnf


	)

466 
	#vsˇnf
 
__isoc99_vsˇnf


	)

467 
	#vssˇnf
 
__isoc99_vssˇnf


	)

477 
	`fgëc
 (
FILE
 *
__°ªam
);

478 
	`gëc
 (
FILE
 *
__°ªam
);

484 
	`gëch¨
 ();

488 
	#gëc
(
_Â
Ë
	`_IO_gëc
 (_Â)

	)

490 #ifde‡
__USE_POSIX199506


495 
	`gëc_u∆ocked
 (
FILE
 *
__°ªam
);

496 
	`gëch¨_u∆ocked
 ();

499 #ifde‡
__USE_MISC


506 
	`fgëc_u∆ocked
 (
FILE
 *
__°ªam
);

517 
	`Âutc
 (
__c
, 
FILE
 *
__°ªam
);

518 
	`putc
 (
__c
, 
FILE
 *
__°ªam
);

524 
	`putch¨
 (
__c
);

528 
	#putc
(
_ch
, 
_Â
Ë
	`_IO_putc
 (_ch, _Â)

	)

530 #ifde‡
__USE_MISC


537 
	`Âutc_u∆ocked
 (
__c
, 
FILE
 *
__°ªam
);

540 #ifde‡
__USE_POSIX199506


545 
	`putc_u∆ocked
 (
__c
, 
FILE
 *
__°ªam
);

546 
	`putch¨_u∆ocked
 (
__c
);

550 #i‡
deföed
 
__USE_MISC
 \

551 || (
deföed
 
__USE_XOPEN
 && !deföed 
__USE_XOPEN2K
)

553 
	`gëw
 (
FILE
 *
__°ªam
);

556 
	`putw
 (
__w
, 
FILE
 *
__°ªam
);

564 *
	$fgës
 (*
__ª°ri˘
 
__s
, 
__n
, 
FILE
 *__ª°ri˘ 
__°ªam
)

565 
__wur
;

567 #i‡
	`__GLIBC_USE
 (
DEPRECATED_GETS
)

577 *
	$gës
 (*
__s
Ë
__wur
 
__©åibuã_dïªˇãd__
;

580 #ifde‡
__USE_GNU


587 *
	$fgës_u∆ocked
 (*
__ª°ri˘
 
__s
, 
__n
,

588 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

592 #i‡
deföed
 
__USE_XOPEN2K8
 || 
	`__GLIBC_USE
 (
LIB_EXT2
)

603 
_IO_ssize_t
 
	$__gëdñim
 (**
__ª°ri˘
 
__löïå
,

604 
size_t
 *
__ª°ri˘
 
__n
, 
__dñimôî
,

605 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

606 
_IO_ssize_t
 
	$gëdñim
 (**
__ª°ri˘
 
__löïå
,

607 
size_t
 *
__ª°ri˘
 
__n
, 
__dñimôî
,

608 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

616 
_IO_ssize_t
 
	$gëlöe
 (**
__ª°ri˘
 
__löïå
,

617 
size_t
 *
__ª°ri˘
 
__n
,

618 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

626 
	`Âuts
 (c⁄° *
__ª°ri˘
 
__s
, 
FILE
 *__ª°ri˘ 
__°ªam
);

632 
	`puts
 (c⁄° *
__s
);

639 
	`ungëc
 (
__c
, 
FILE
 *
__°ªam
);

646 
size_t
 
	$‰ód
 (*
__ª°ri˘
 
__±r
, 
size_t
 
__size
,

647 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

652 
size_t
 
	`fwrôe
 (c⁄° *
__ª°ri˘
 
__±r
, size_à
__size
,

653 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__s
);

655 #ifde‡
__USE_GNU


662 
	`Âuts_u∆ocked
 (c⁄° *
__ª°ri˘
 
__s
,

663 
FILE
 *
__ª°ri˘
 
__°ªam
);

666 #ifde‡
__USE_MISC


673 
size_t
 
	$‰ód_u∆ocked
 (*
__ª°ri˘
 
__±r
, 
size_t
 
__size
,

674 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

675 
size_t
 
	`fwrôe_u∆ocked
 (c⁄° *
__ª°ri˘
 
__±r
, size_à
__size
,

676 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__°ªam
);

684 
	`f£ek
 (
FILE
 *
__°ªam
, 
__off
, 
__whí˚
);

689 
	$·ñl
 (
FILE
 *
__°ªam
Ë
__wur
;

694 
	`ªwöd
 (
FILE
 *
__°ªam
);

701 #i‡
deföed
 
__USE_LARGEFILE
 || deföed 
__USE_XOPEN2K


702 #i‚de‡
__USE_FILE_OFFSET64


707 
	`f£eko
 (
FILE
 *
__°ªam
, 
__off_t
 
__off
, 
__whí˚
);

712 
__off_t
 
	$·ñlo
 (
FILE
 *
__°ªam
Ë
__wur
;

714 #ifde‡
__REDIRECT


715 
	`__REDIRECT
 (
f£eko
,

716 (
FILE
 *
__°ªam
, 
__off64_t
 
__off
, 
__whí˚
),

717 
f£eko64
);

718 
__off64_t
 
	`__REDIRECT
 (
·ñlo
, (
FILE
 *
__°ªam
), 
·ñlo64
);

720 
	#f£eko
 
f£eko64


	)

721 
	#·ñlo
 
·ñlo64


	)

726 #i‚de‡
__USE_FILE_OFFSET64


731 
	`fgëpos
 (
FILE
 *
__ª°ri˘
 
__°ªam
, 
Âos_t
 *__ª°ri˘ 
__pos
);

736 
	`f£ços
 (
FILE
 *
__°ªam
, c⁄° 
Âos_t
 *
__pos
);

738 #ifde‡
__REDIRECT


739 
	`__REDIRECT
 (
fgëpos
, (
FILE
 *
__ª°ri˘
 
__°ªam
,

740 
Âos_t
 *
__ª°ri˘
 
__pos
), 
fgëpos64
);

741 
	`__REDIRECT
 (
f£ços
,

742 (
FILE
 *
__°ªam
, c⁄° 
Âos_t
 *
__pos
), 
f£ços64
);

744 
	#fgëpos
 
fgëpos64


	)

745 
	#f£ços
 
f£ços64


	)

749 #ifde‡
__USE_LARGEFILE64


750 
	`f£eko64
 (
FILE
 *
__°ªam
, 
__off64_t
 
__off
, 
__whí˚
);

751 
__off64_t
 
	$·ñlo64
 (
FILE
 *
__°ªam
Ë
__wur
;

752 
	`fgëpos64
 (
FILE
 *
__ª°ri˘
 
__°ªam
, 
Âos64_t
 *__ª°ri˘ 
__pos
);

753 
	`f£ços64
 (
FILE
 *
__°ªam
, c⁄° 
Âos64_t
 *
__pos
);

757 
	$˛óªº
 (
FILE
 *
__°ªam
Ë
__THROW
;

759 
	$„of
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

761 
	$„º‹
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

763 #ifde‡
__USE_MISC


765 
	$˛óªº_u∆ocked
 (
FILE
 *
__°ªam
Ë
__THROW
;

766 
	$„of_u∆ocked
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

767 
	$„º‹_u∆ocked
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

775 
	`≥º‹
 (c⁄° *
__s
);

781 
	~<bôs/sys_îæi°.h
>

784 #ifdef 
__USE_POSIX


786 
	$fûío
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

789 #ifde‡
__USE_MISC


791 
	$fûío_u∆ocked
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

795 #ifde‡
__USE_POSIX2


800 
FILE
 *
	$p›í
 (c⁄° *
__comm™d
, c⁄° *
__modes
Ë
__wur
;

806 
	`p˛o£
 (
FILE
 *
__°ªam
);

810 #ifdef 
__USE_POSIX


812 *
	$˘îmid
 (*
__s
Ë
__THROW
;

816 #i‡(
deföed
 
__USE_XOPEN
 && !deföed 
__USE_XOPEN2K
Ë|| deföed 
__USE_GNU


818 *
	`cu£rid
 (*
__s
);

822 #ifdef 
__USE_GNU


823 
ob°ack
;

826 
	$ob°ack_¥ötf
 (
ob°ack
 *
__ª°ri˘
 
__ob°ack
,

827 c⁄° *
__ª°ri˘
 
__f‹m©
, ...)

828 
__THROWNL
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 2, 3)));

829 
	$ob°ack_v¥ötf
 (
ob°ack
 *
__ª°ri˘
 
__ob°ack
,

830 c⁄° *
__ª°ri˘
 
__f‹m©
,

831 
_G_va_li°
 
__¨gs
)

832 
__THROWNL
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 2, 0)));

836 #ifde‡
__USE_POSIX199506


840 
	$Êockfûe
 (
FILE
 *
__°ªam
Ë
__THROW
;

844 
	$·rylockfûe
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

847 
	$fu∆ockfûe
 (
FILE
 *
__°ªam
Ë
__THROW
;

850 #i‡
deföed
 
__USE_XOPEN
 && !deföed 
__USE_XOPEN2K
 && !deföed 
__USE_GNU


853 
	~<bôs/gë›t_posix.h
>

858 #ifde‡
__USE_EXTERN_INLINES


859 
	~<bôs/°dio.h
>

861 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__f‹tify_fun˘i⁄


862 
	~<bôs/°dio2.h
>

864 #ifde‡
__LDBL_COMPAT


865 
	~<bôs/°dio-ldbl.h
>

868 
__END_DECLS


	@/usr/include/stdlib.h

22 #i‚def 
_STDLIB_H


24 
	#__GLIBC_INTERNAL_STARTING_HEADER_IMPLEMENTATION


	)

25 
	~<bôs/libc-hódî-°¨t.h
>

28 
	#__√ed_size_t


	)

29 
	#__√ed_wch¨_t


	)

30 
	#__√ed_NULL


	)

31 
	~<°ddef.h
>

33 
	g__BEGIN_DECLS


35 
	#_STDLIB_H
 1

	)

37 #i‡(
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8
Ë&& !deföed 
_SYS_WAIT_H


39 
	~<bôs/waôÊags.h
>

40 
	~<bôs/waô°©us.h
>

43 
	#WEXITSTATUS
(
°©us
Ë
	`__WEXITSTATUS
 (°©us)

	)

44 
	#WTERMSIG
(
°©us
Ë
	`__WTERMSIG
 (°©us)

	)

45 
	#WSTOPSIG
(
°©us
Ë
	`__WSTOPSIG
 (°©us)

	)

46 
	#WIFEXITED
(
°©us
Ë
	`__WIFEXITED
 (°©us)

	)

47 
	#WIFSIGNALED
(
°©us
Ë
	`__WIFSIGNALED
 (°©us)

	)

48 
	#WIFSTOPPED
(
°©us
Ë
	`__WIFSTOPPED
 (°©us)

	)

49 #ifde‡
__WIFCONTINUED


50 
	#WIFCONTINUED
(
°©us
Ë
	`__WIFCONTINUED
 (°©us)

	)

55 
	~<bôs/Êﬂä.h
>

60 
	mquŸ
;

61 
	mªm
;

62 } 
	tdiv_t
;

65 #i‚de‡
__ldiv_t_deföed


68 
	mquŸ
;

69 
	mªm
;

70 } 
	tldiv_t
;

71 
	#__ldiv_t_deföed
 1

	)

74 #i‡
deföed
 
__USE_ISOC99
 && !deföed 
__Œdiv_t_deföed


76 
__exãnsi⁄__
 struct

78 
	mquŸ
;

79 
	mªm
;

80 } 
	tŒdiv_t
;

81 
	#__Œdiv_t_deföed
 1

	)

86 
	#RAND_MAX
 2147483647

	)

91 
	#EXIT_FAILURE
 1

	)

92 
	#EXIT_SUCCESS
 0

	)

96 
	#MB_CUR_MAX
 (
	`__˘y≥_gë_mb_cur_max
 ())

	)

97 
size_t
 
	$__˘y≥_gë_mb_cur_max
 (Ë
__THROW
 
__wur
;

101 
	$©of
 (c⁄° *
__≈å
)

102 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

104 
	$©oi
 (c⁄° *
__≈å
)

105 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

107 
	$©ﬁ
 (c⁄° *
__≈å
)

108 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

110 #ifde‡
__USE_ISOC99


112 
__exãnsi⁄__
 
	$©ﬁl
 (c⁄° *
__≈å
)

113 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

117 
	$°πod
 (c⁄° *
__ª°ri˘
 
__≈å
,

118 **
__ª°ri˘
 
__íd±r
)

119 
__THROW
 
	`__n⁄nuŒ
 ((1));

121 #ifdef 
__USE_ISOC99


123 
	$°πof
 (c⁄° *
__ª°ri˘
 
__≈å
,

124 **
__ª°ri˘
 
__íd±r
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

126 
	$°πﬁd
 (c⁄° *
__ª°ri˘
 
__≈å
,

127 **
__ª°ri˘
 
__íd±r
)

128 
__THROW
 
	`__n⁄nuŒ
 ((1));

133 #i‡
__HAVE_FLOAT16
 && 
	`__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

134 
_Flﬂt16
 
	$°πof16
 (c⁄° *
__ª°ri˘
 
__≈å
,

135 **
__ª°ri˘
 
__íd±r
)

136 
__THROW
 
	`__n⁄nuŒ
 ((1));

139 #i‡
__HAVE_FLOAT32
 && 
	`__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

140 
_Flﬂt32
 
	$°πof32
 (c⁄° *
__ª°ri˘
 
__≈å
,

141 **
__ª°ri˘
 
__íd±r
)

142 
__THROW
 
	`__n⁄nuŒ
 ((1));

145 #i‡
__HAVE_FLOAT64
 && 
	`__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

146 
_Flﬂt64
 
	$°πof64
 (c⁄° *
__ª°ri˘
 
__≈å
,

147 **
__ª°ri˘
 
__íd±r
)

148 
__THROW
 
	`__n⁄nuŒ
 ((1));

151 #i‡
__HAVE_FLOAT128
 && 
	`__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

152 
_Flﬂt128
 
	$°πof128
 (c⁄° *
__ª°ri˘
 
__≈å
,

153 **
__ª°ri˘
 
__íd±r
)

154 
__THROW
 
	`__n⁄nuŒ
 ((1));

157 #i‡
__HAVE_FLOAT32X
 && 
	`__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

158 
_Flﬂt32x
 
	$°πof32x
 (c⁄° *
__ª°ri˘
 
__≈å
,

159 **
__ª°ri˘
 
__íd±r
)

160 
__THROW
 
	`__n⁄nuŒ
 ((1));

163 #i‡
__HAVE_FLOAT64X
 && 
	`__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

164 
_Flﬂt64x
 
	$°πof64x
 (c⁄° *
__ª°ri˘
 
__≈å
,

165 **
__ª°ri˘
 
__íd±r
)

166 
__THROW
 
	`__n⁄nuŒ
 ((1));

169 #i‡
__HAVE_FLOAT128X
 && 
	`__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

170 
_Flﬂt128x
 
	$°πof128x
 (c⁄° *
__ª°ri˘
 
__≈å
,

171 **
__ª°ri˘
 
__íd±r
)

172 
__THROW
 
	`__n⁄nuŒ
 ((1));

176 
	$°πﬁ
 (c⁄° *
__ª°ri˘
 
__≈å
,

177 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

178 
__THROW
 
	`__n⁄nuŒ
 ((1));

180 
	$°πoul
 (c⁄° *
__ª°ri˘
 
__≈å
,

181 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

182 
__THROW
 
	`__n⁄nuŒ
 ((1));

184 #ifde‡
__USE_MISC


186 
__exãnsi⁄__


187 
	$°πoq
 (c⁄° *
__ª°ri˘
 
__≈å
,

188 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

189 
__THROW
 
	`__n⁄nuŒ
 ((1));

191 
__exãnsi⁄__


192 
	$°πouq
 (c⁄° *
__ª°ri˘
 
__≈å
,

193 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

194 
__THROW
 
	`__n⁄nuŒ
 ((1));

197 #ifde‡
__USE_ISOC99


199 
__exãnsi⁄__


200 
	$°πﬁl
 (c⁄° *
__ª°ri˘
 
__≈å
,

201 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

202 
__THROW
 
	`__n⁄nuŒ
 ((1));

204 
__exãnsi⁄__


205 
	$°πouŒ
 (c⁄° *
__ª°ri˘
 
__≈å
,

206 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

207 
__THROW
 
	`__n⁄nuŒ
 ((1));

211 #i‡
	`__GLIBC_USE
 (
IEC_60559_BFP_EXT
)

212 
	$°r‰omd
 (*
__de°
, 
size_t
 
__size
, c⁄° *
__f‹m©
,

213 
__f
)

214 
__THROW
 
	`__n⁄nuŒ
 ((3));

216 
	$°r‰omf
 (*
__de°
, 
size_t
 
__size
, c⁄° *
__f‹m©
,

217 
__f
)

218 
__THROW
 
	`__n⁄nuŒ
 ((3));

220 
	$°r‰oml
 (*
__de°
, 
size_t
 
__size
, c⁄° *
__f‹m©
,

221 
__f
)

222 
__THROW
 
	`__n⁄nuŒ
 ((3));

225 #i‡
__HAVE_FLOAT16
 && 
	`__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

226 
	$°r‰omf16
 (*
__de°
, 
size_t
 
__size
, c⁄° * 
__f‹m©
,

227 
_Flﬂt16
 
__f
)

228 
__THROW
 
	`__n⁄nuŒ
 ((3));

231 #i‡
__HAVE_FLOAT32
 && 
	`__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

232 
	$°r‰omf32
 (*
__de°
, 
size_t
 
__size
, c⁄° * 
__f‹m©
,

233 
_Flﬂt32
 
__f
)

234 
__THROW
 
	`__n⁄nuŒ
 ((3));

237 #i‡
__HAVE_FLOAT64
 && 
	`__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

238 
	$°r‰omf64
 (*
__de°
, 
size_t
 
__size
, c⁄° * 
__f‹m©
,

239 
_Flﬂt64
 
__f
)

240 
__THROW
 
	`__n⁄nuŒ
 ((3));

243 #i‡
__HAVE_FLOAT128
 && 
	`__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

244 
	$°r‰omf128
 (*
__de°
, 
size_t
 
__size
, c⁄° * 
__f‹m©
,

245 
_Flﬂt128
 
__f
)

246 
__THROW
 
	`__n⁄nuŒ
 ((3));

249 #i‡
__HAVE_FLOAT32X
 && 
	`__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

250 
	$°r‰omf32x
 (*
__de°
, 
size_t
 
__size
, c⁄° * 
__f‹m©
,

251 
_Flﬂt32x
 
__f
)

252 
__THROW
 
	`__n⁄nuŒ
 ((3));

255 #i‡
__HAVE_FLOAT64X
 && 
	`__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

256 
	$°r‰omf64x
 (*
__de°
, 
size_t
 
__size
, c⁄° * 
__f‹m©
,

257 
_Flﬂt64x
 
__f
)

258 
__THROW
 
	`__n⁄nuŒ
 ((3));

261 #i‡
__HAVE_FLOAT128X
 && 
	`__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

262 
	$°r‰omf128x
 (*
__de°
, 
size_t
 
__size
, c⁄° * 
__f‹m©
,

263 
_Flﬂt128x
 
__f
)

264 
__THROW
 
	`__n⁄nuŒ
 ((3));

268 #ifde‡
__USE_GNU


272 
	~<bôs/ty≥s/loˇÀ_t.h
>

274 
	$°πﬁ_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

275 **
__ª°ri˘
 
__íd±r
, 
__ba£
,

276 
loˇÀ_t
 
__loc
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 4));

278 
	$°πoul_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

279 **
__ª°ri˘
 
__íd±r
,

280 
__ba£
, 
loˇÀ_t
 
__loc
)

281 
__THROW
 
	`__n⁄nuŒ
 ((1, 4));

283 
__exãnsi⁄__


284 
	$°πﬁl_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

285 **
__ª°ri˘
 
__íd±r
, 
__ba£
,

286 
loˇÀ_t
 
__loc
)

287 
__THROW
 
	`__n⁄nuŒ
 ((1, 4));

289 
__exãnsi⁄__


290 
	$°πouŒ_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

291 **
__ª°ri˘
 
__íd±r
,

292 
__ba£
, 
loˇÀ_t
 
__loc
)

293 
__THROW
 
	`__n⁄nuŒ
 ((1, 4));

295 
	$°πod_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

296 **
__ª°ri˘
 
__íd±r
, 
loˇÀ_t
 
__loc
)

297 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

299 
	$°πof_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

300 **
__ª°ri˘
 
__íd±r
, 
loˇÀ_t
 
__loc
)

301 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

303 
	$°πﬁd_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

304 **
__ª°ri˘
 
__íd±r
,

305 
loˇÀ_t
 
__loc
)

306 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

308 #i‡
__HAVE_FLOAT16


309 
_Flﬂt16
 
	$°πof16_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

310 **
__ª°ri˘
 
__íd±r
,

311 
loˇÀ_t
 
__loc
)

312 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

315 #i‡
__HAVE_FLOAT32


316 
_Flﬂt32
 
	$°πof32_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

317 **
__ª°ri˘
 
__íd±r
,

318 
loˇÀ_t
 
__loc
)

319 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

322 #i‡
__HAVE_FLOAT64


323 
_Flﬂt64
 
	$°πof64_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

324 **
__ª°ri˘
 
__íd±r
,

325 
loˇÀ_t
 
__loc
)

326 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

329 #i‡
__HAVE_FLOAT128


330 
_Flﬂt128
 
	$°πof128_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

331 **
__ª°ri˘
 
__íd±r
,

332 
loˇÀ_t
 
__loc
)

333 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

336 #i‡
__HAVE_FLOAT32X


337 
_Flﬂt32x
 
	$°πof32x_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

338 **
__ª°ri˘
 
__íd±r
,

339 
loˇÀ_t
 
__loc
)

340 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

343 #i‡
__HAVE_FLOAT64X


344 
_Flﬂt64x
 
	$°πof64x_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

345 **
__ª°ri˘
 
__íd±r
,

346 
loˇÀ_t
 
__loc
)

347 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

350 #i‡
__HAVE_FLOAT128X


351 
_Flﬂt128x
 
	$°πof128x_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

352 **
__ª°ri˘
 
__íd±r
,

353 
loˇÀ_t
 
__loc
)

354 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

359 #ifde‡
__USE_EXTERN_INLINES


360 
__exã∫_ölöe
 

361 
	`__NTH
 (
	$©oi
 (c⁄° *
__≈å
))

363  (Ë
	`°πﬁ
 (
__≈å
, (**Ë
NULL
, 10);

364 
	}
}

365 
__exã∫_ölöe
 

366 
__NTH
 (
	$©ﬁ
 (c⁄° *
__≈å
))

368  
	`°πﬁ
 (
__≈å
, (**Ë
NULL
, 10);

369 
	}
}

371 #ifde‡
__USE_ISOC99


372 
__exãnsi⁄__
 
__exã∫_ölöe
 

373 
__NTH
 (
	$©ﬁl
 (c⁄° *
__≈å
))

375  
	`°πﬁl
 (
__≈å
, (**Ë
NULL
, 10);

376 
	}
}

381 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED


385 *
	$l64a
 (
__n
Ë
__THROW
 
__wur
;

388 
	$a64l
 (c⁄° *
__s
)

389 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

393 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED


394 
	~<sys/ty≥s.h
>

401 
	$øndom
 (Ë
__THROW
;

404 
	$§™dom
 (
__£ed
Ë
__THROW
;

410 *
	$öô°©e
 (
__£ed
, *
__°©ebuf
,

411 
size_t
 
__°©ñí
Ë
__THROW
 
	`__n⁄nuŒ
 ((2));

415 *
	$£t°©e
 (*
__°©ebuf
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

418 #ifde‡
__USE_MISC


423 
	søndom_d©a


425 
öt32_t
 *
Âå
;

426 
öt32_t
 *
Ωå
;

427 
öt32_t
 *
°©e
;

428 
ønd_ty≥
;

429 
ønd_deg
;

430 
ønd_£p
;

431 
öt32_t
 *
íd_±r
;

434 
	$øndom_r
 (
øndom_d©a
 *
__ª°ri˘
 
__buf
,

435 
öt32_t
 *
__ª°ri˘
 
__ªsu…
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

437 
	$§™dom_r
 (
__£ed
, 
øndom_d©a
 *
__buf
)

438 
__THROW
 
	`__n⁄nuŒ
 ((2));

440 
	$öô°©e_r
 (
__£ed
, *
__ª°ri˘
 
__°©ebuf
,

441 
size_t
 
__°©ñí
,

442 
øndom_d©a
 *
__ª°ri˘
 
__buf
)

443 
__THROW
 
	`__n⁄nuŒ
 ((2, 4));

445 
	$£t°©e_r
 (*
__ª°ri˘
 
__°©ebuf
,

446 
øndom_d©a
 *
__ª°ri˘
 
__buf
)

447 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

453 
	$ønd
 (Ë
__THROW
;

455 
	$§™d
 (
__£ed
Ë
__THROW
;

457 #ifde‡
__USE_POSIX199506


459 
	$ønd_r
 (*
__£ed
Ë
__THROW
;

463 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


467 
	$dønd48
 (Ë
__THROW
;

468 
	$î™d48
 (
__xsubi
[3]Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

471 
	$Ã™d48
 (Ë
__THROW
;

472 
	$ƒ™d48
 (
__xsubi
[3])

473 
__THROW
 
	`__n⁄nuŒ
 ((1));

476 
	$mønd48
 (Ë
__THROW
;

477 
	$jønd48
 (
__xsubi
[3])

478 
__THROW
 
	`__n⁄nuŒ
 ((1));

481 
	$§™d48
 (
__£edvÆ
Ë
__THROW
;

482 *
	$£ed48
 (
__£ed16v
[3])

483 
__THROW
 
	`__n⁄nuŒ
 ((1));

484 
	$lc⁄g48
 (
__∑øm
[7]Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

486 #ifde‡
__USE_MISC


490 
	sdønd48_d©a


492 
__x
[3];

493 
__ﬁd_x
[3];

494 
__c
;

495 
__öô
;

496 
__exãnsi⁄__
 
__a
;

501 
	$dønd48_r
 (
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

502 *
__ª°ri˘
 
__ªsu…
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

503 
	$î™d48_r
 (
__xsubi
[3],

504 
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

505 *
__ª°ri˘
 
__ªsu…
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

508 
	$Ã™d48_r
 (
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

509 *
__ª°ri˘
 
__ªsu…
)

510 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

511 
	$ƒ™d48_r
 (
__xsubi
[3],

512 
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

513 *
__ª°ri˘
 
__ªsu…
)

514 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

517 
	$mønd48_r
 (
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

518 *
__ª°ri˘
 
__ªsu…
)

519 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

520 
	$jønd48_r
 (
__xsubi
[3],

521 
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

522 *
__ª°ri˘
 
__ªsu…
)

523 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

526 
	$§™d48_r
 (
__£edvÆ
, 
dønd48_d©a
 *
__buf„r
)

527 
__THROW
 
	`__n⁄nuŒ
 ((2));

529 
	$£ed48_r
 (
__£ed16v
[3],

530 
dønd48_d©a
 *
__buf„r
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

532 
	$lc⁄g48_r
 (
__∑øm
[7],

533 
dønd48_d©a
 *
__buf„r
)

534 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

539 *
	$mÆloc
 (
size_t
 
__size
Ë
__THROW
 
__©åibuã_mÆloc__
 
__wur
;

541 *
	$ˇŒoc
 (
size_t
 
__nmemb
, size_à
__size
)

542 
__THROW
 
__©åibuã_mÆloc__
 
__wur
;

549 *
	$ªÆloc
 (*
__±r
, 
size_t
 
__size
)

550 
__THROW
 
__©åibuã_w¨n_unu£d_ªsu…__
;

552 #ifde‡
__USE_GNU


558 *
	$ªÆloˇºay
 (*
__±r
, 
size_t
 
__nmemb
, size_à
__size
)

559 
__THROW
 
__©åibuã_w¨n_unu£d_ªsu…__
;

563 
	$‰ì
 (*
__±r
Ë
__THROW
;

565 #ifde‡
__USE_MISC


566 
	~<Æloˇ.h
>

569 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K
) \

570 || 
deföed
 
__USE_MISC


572 *
	$vÆloc
 (
size_t
 
__size
Ë
__THROW
 
__©åibuã_mÆloc__
 
__wur
;

575 #ifde‡
__USE_XOPEN2K


577 
	$posix_memÆign
 (**
__mem±r
, 
size_t
 
__Æignmít
, size_à
__size
)

578 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

581 #ifde‡
__USE_ISOC11


583 *
	$Æig√d_Æloc
 (
size_t
 
__Æignmít
, size_à
__size
)

584 
__THROW
 
__©åibuã_mÆloc__
 
	`__©åibuã_Æloc_size__
 ((2)Ë
__wur
;

588 
	$ab‹t
 (Ë
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

592 
	$©exô
 ((*
__func
Ë()Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

594 #i‡
deföed
 
__USE_ISOC11
 || deföed 
__USE_ISOCXX11


596 #ifde‡
__˝lu•lus


597 "C++" 
	$©_quick_exô
 ((*
__func
) ())

598 
__THROW
 
	`__asm
 ("©_quick_exô"Ë
	`__n⁄nuŒ
 ((1));

600 
	$©_quick_exô
 ((*
__func
Ë()Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

604 #ifdef 
__USE_MISC


607 
	$⁄_exô
 ((*
__func
Ë(
__°©us
, *
__¨g
), *__arg)

608 
__THROW
 
	`__n⁄nuŒ
 ((1));

614 
	$exô
 (
__°©us
Ë
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

616 #i‡
deföed
 
__USE_ISOC11
 || deföed 
__USE_ISOCXX11


620 
	$quick_exô
 (
__°©us
Ë
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

623 #ifde‡
__USE_ISOC99


626 
	$_Exô
 (
__°©us
Ë
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

631 *
	$gëív
 (c⁄° *
__«me
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

633 #ifde‡
__USE_GNU


636 *
	$£cuª_gëív
 (c⁄° *
__«me
)

637 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

640 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


644 
	$puãnv
 (*
__°rög
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

647 #ifde‡
__USE_XOPEN2K


650 
	$£ãnv
 (c⁄° *
__«me
, c⁄° *
__vÆue
, 
__ª∂a˚
)

651 
__THROW
 
	`__n⁄nuŒ
 ((2));

654 
	$un£ãnv
 (c⁄° *
__«me
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

657 #ifdef 
__USE_MISC


661 
	$˛óªnv
 (Ë
__THROW
;

665 #i‡
deföed
 
__USE_MISC
 \

666 || (
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K8
)

672 *
	$mkãmp
 (*
__ãm∂©e
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

675 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


684 #i‚de‡
__USE_FILE_OFFSET64


685 
	$mk°emp
 (*
__ãm∂©e
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

687 #ifde‡
__REDIRECT


688 
	`__REDIRECT
 (
mk°emp
, (*
__ãm∂©e
), 
mk°emp64
)

689 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

691 
	#mk°emp
 
mk°emp64


	)

694 #ifde‡
__USE_LARGEFILE64


695 
	$mk°emp64
 (*
__ãm∂©e
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

699 #ifde‡
__USE_MISC


706 #i‚de‡
__USE_FILE_OFFSET64


707 
	$mk°emps
 (*
__ãm∂©e
, 
__suffixÀn
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

709 #ifde‡
__REDIRECT


710 
	`__REDIRECT
 (
mk°emps
, (*
__ãm∂©e
, 
__suffixÀn
),

711 
mk°emps64
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

713 
	#mk°emps
 
mk°emps64


	)

716 #ifde‡
__USE_LARGEFILE64


717 
	$mk°emps64
 (*
__ãm∂©e
, 
__suffixÀn
)

718 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

722 #ifde‡
__USE_XOPEN2K8


728 *
	$mkdãmp
 (*
__ãm∂©e
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

731 #ifde‡
__USE_GNU


738 #i‚de‡
__USE_FILE_OFFSET64


739 
	$mko°emp
 (*
__ãm∂©e
, 
__Êags
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

741 #ifde‡
__REDIRECT


742 
	`__REDIRECT
 (
mko°emp
, (*
__ãm∂©e
, 
__Êags
), 
mko°emp64
)

743 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

745 
	#mko°emp
 
mko°emp64


	)

748 #ifde‡
__USE_LARGEFILE64


749 
	$mko°emp64
 (*
__ãm∂©e
, 
__Êags
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

758 #i‚de‡
__USE_FILE_OFFSET64


759 
	$mko°emps
 (*
__ãm∂©e
, 
__suffixÀn
, 
__Êags
)

760 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

762 #ifde‡
__REDIRECT


763 
	`__REDIRECT
 (
mko°emps
, (*
__ãm∂©e
, 
__suffixÀn
,

764 
__Êags
), 
mko°emps64
)

765 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

767 
	#mko°emps
 
mko°emps64


	)

770 #ifde‡
__USE_LARGEFILE64


771 
	$mko°emps64
 (*
__ãm∂©e
, 
__suffixÀn
, 
__Êags
)

772 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

781 
	$sy°em
 (c⁄° *
__comm™d
Ë
__wur
;

784 #ifdef 
__USE_GNU


787 *
	$ˇn⁄iˇlize_fûe_«me
 (c⁄° *
__«me
)

788 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

791 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED


797 *
	$ªÆ∑th
 (c⁄° *
__ª°ri˘
 
__«me
,

798 *
__ª°ri˘
 
__ªsﬁved
Ë
__THROW
 
__wur
;

803 #i‚de‡
__COMPAR_FN_T


804 
	#__COMPAR_FN_T


	)

805 (*
	t__com∑r_‚_t
) (const *, const *);

807 #ifdef 
__USE_GNU


808 
__com∑r_‚_t
 
	tcom∑ris⁄_‚_t
;

811 #ifde‡
__USE_GNU


812 (*
	t__com∑r_d_‚_t
) (const *, const *, *);

817 *
	$b£¨ch
 (c⁄° *
__key
, c⁄° *
__ba£
,

818 
size_t
 
__nmemb
, size_à
__size
, 
__com∑r_‚_t
 
__com∑r
)

819 
	`__n⁄nuŒ
 ((1, 2, 5)Ë
__wur
;

821 #ifde‡
__USE_EXTERN_INLINES


822 
	~<bôs/°dlib-b£¨ch.h
>

827 
	$qs‹t
 (*
__ba£
, 
size_t
 
__nmemb
, size_à
__size
,

828 
__com∑r_‚_t
 
__com∑r
Ë
	`__n⁄nuŒ
 ((1, 4));

829 #ifde‡
__USE_GNU


830 
	$qs‹t_r
 (*
__ba£
, 
size_t
 
__nmemb
, size_à
__size
,

831 
__com∑r_d_‚_t
 
__com∑r
, *
__¨g
)

832 
	`__n⁄nuŒ
 ((1, 4));

837 
	$abs
 (
__x
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

838 
	$œbs
 (
__x
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

840 #ifde‡
__USE_ISOC99


841 
__exãnsi⁄__
 
	$Œabs
 (
__x
)

842 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

849 
div_t
 
	$div
 (
__numî
, 
__díom
)

850 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

851 
ldiv_t
 
	$ldiv
 (
__numî
, 
__díom
)

852 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

854 #ifde‡
__USE_ISOC99


855 
__exãnsi⁄__
 
Œdiv_t
 
	$Œdiv
 (
__numî
,

856 
__díom
)

857 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

861 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K8
) \

862 || 
deföed
 
__USE_MISC


869 *
	$ecvt
 (
__vÆue
, 
__ndigô
, *
__ª°ri˘
 
__de˝t
,

870 *
__ª°ri˘
 
__sign
Ë
__THROW
 
	`__n⁄nuŒ
 ((3, 4)Ë
__wur
;

875 *
	$fcvt
 (
__vÆue
, 
__ndigô
, *
__ª°ri˘
 
__de˝t
,

876 *
__ª°ri˘
 
__sign
Ë
__THROW
 
	`__n⁄nuŒ
 ((3, 4)Ë
__wur
;

881 *
	$gcvt
 (
__vÆue
, 
__ndigô
, *
__buf
)

882 
__THROW
 
	`__n⁄nuŒ
 ((3)Ë
__wur
;

885 #ifde‡
__USE_MISC


887 *
	$qecvt
 (
__vÆue
, 
__ndigô
,

888 *
__ª°ri˘
 
__de˝t
, *__ª°ri˘ 
__sign
)

889 
__THROW
 
	`__n⁄nuŒ
 ((3, 4)Ë
__wur
;

890 *
	$qfcvt
 (
__vÆue
, 
__ndigô
,

891 *
__ª°ri˘
 
__de˝t
, *__ª°ri˘ 
__sign
)

892 
__THROW
 
	`__n⁄nuŒ
 ((3, 4)Ë
__wur
;

893 *
	$qgcvt
 (
__vÆue
, 
__ndigô
, *
__buf
)

894 
__THROW
 
	`__n⁄nuŒ
 ((3)Ë
__wur
;

899 
	$ecvt_r
 (
__vÆue
, 
__ndigô
, *
__ª°ri˘
 
__de˝t
,

900 *
__ª°ri˘
 
__sign
, *__ª°ri˘ 
__buf
,

901 
size_t
 
__Àn
Ë
__THROW
 
	`__n⁄nuŒ
 ((3, 4, 5));

902 
	$fcvt_r
 (
__vÆue
, 
__ndigô
, *
__ª°ri˘
 
__de˝t
,

903 *
__ª°ri˘
 
__sign
, *__ª°ri˘ 
__buf
,

904 
size_t
 
__Àn
Ë
__THROW
 
	`__n⁄nuŒ
 ((3, 4, 5));

906 
	$qecvt_r
 (
__vÆue
, 
__ndigô
,

907 *
__ª°ri˘
 
__de˝t
, *__ª°ri˘ 
__sign
,

908 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
)

909 
__THROW
 
	`__n⁄nuŒ
 ((3, 4, 5));

910 
	$qfcvt_r
 (
__vÆue
, 
__ndigô
,

911 *
__ª°ri˘
 
__de˝t
, *__ª°ri˘ 
__sign
,

912 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
)

913 
__THROW
 
	`__n⁄nuŒ
 ((3, 4, 5));

919 
	$mbÀn
 (c⁄° *
__s
, 
size_t
 
__n
Ë
__THROW
;

922 
	$mbtowc
 (
wch¨_t
 *
__ª°ri˘
 
__pwc
,

923 c⁄° *
__ª°ri˘
 
__s
, 
size_t
 
__n
Ë
__THROW
;

926 
	$w˘omb
 (*
__s
, 
wch¨_t
 
__wch¨
Ë
__THROW
;

930 
size_t
 
	$mb°owcs
 (
wch¨_t
 *
__ª°ri˘
 
__pwcs
,

931 c⁄° *
__ª°ri˘
 
__s
, 
size_t
 
__n
Ë
__THROW
;

933 
size_t
 
	$wc°ombs
 (*
__ª°ri˘
 
__s
,

934 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__pwcs
, 
size_t
 
__n
)

935 
__THROW
;

938 #ifde‡
__USE_MISC


943 
	$Ωm©ch
 (c⁄° *
__ª•⁄£
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

947 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


954 
	$gësub›t
 (**
__ª°ri˘
 
__›ti⁄p
,

955 *c⁄° *
__ª°ri˘
 
__tokís
,

956 **
__ª°ri˘
 
__vÆuï
)

957 
__THROW
 
	`__n⁄nuŒ
 ((1, 2, 3)Ë
__wur
;

961 #ifde‡
__USE_XOPEN


963 
	$£tkey
 (c⁄° *
__key
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

969 #ifde‡
__USE_XOPEN2KXSI


971 
	$posix_›í±
 (
__oÊag
Ë
__wur
;

974 #ifde‡
__USE_XOPEN_EXTENDED


979 
	$gø¡±
 (
__fd
Ë
__THROW
;

983 
	$u∆ock±
 (
__fd
Ë
__THROW
;

988 *
	$±¢ame
 (
__fd
Ë
__THROW
 
__wur
;

991 #ifde‡
__USE_GNU


995 
	$±¢ame_r
 (
__fd
, *
__buf
, 
size_t
 
__buÊí
)

996 
__THROW
 
	`__n⁄nuŒ
 ((2));

999 
	`gë±
 ();

1002 #ifde‡
__USE_MISC


1006 
	$gëlﬂdavg
 (
__lﬂdavg
[], 
__√Àm
)

1007 
__THROW
 
	`__n⁄nuŒ
 ((1));

1010 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K


1013 
	$ây¶Ÿ
 (Ë
__THROW
;

1016 
	~<bôs/°dlib-Êﬂt.h
>

1019 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__f‹tify_fun˘i⁄


1020 
	~<bôs/°dlib.h
>

1022 #ifde‡
__LDBL_COMPAT


1023 
	~<bôs/°dlib-ldbl.h
>

1026 
__END_DECLS


	@/usr/include/string.h

22 #i‚def 
_STRING_H


23 
	#_STRING_H
 1

	)

25 
	#__GLIBC_INTERNAL_STARTING_HEADER_IMPLEMENTATION


	)

26 
	~<bôs/libc-hódî-°¨t.h
>

28 
	g__BEGIN_DECLS


31 
	#__√ed_size_t


	)

32 
	#__√ed_NULL


	)

33 
	~<°ddef.h
>

36 #i‡
deföed
 
__˝lu•lus
 && 
__GNUC_PREREQ
 (4, 4)

37 
	#__CORRECT_ISO_CPP_STRING_H_PROTO


	)

42 *
	$mem˝y
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
,

43 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

46 *
	$memmove
 (*
__de°
, c⁄° *
__§c
, 
size_t
 
__n
)

47 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

52 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


53 *
	$memc˝y
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
,

54 
__c
, 
size_t
 
__n
)

55 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

60 *
	$mem£t
 (*
__s
, 
__c
, 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

63 
	$memcmp
 (c⁄° *
__s1
, c⁄° *
__s2
, 
size_t
 
__n
)

64 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

67 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


70 *
	`memchr
 (*
__s
, 
__c
, 
size_t
 
__n
)

71 
__THROW
 
	`__asm
 ("memchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

72 c⁄° *
	`memchr
 (c⁄° *
__s
, 
__c
, 
size_t
 
__n
)

73 
__THROW
 
	`__asm
 ("memchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

75 #ifde‡
__OPTIMIZE__


76 
__exã∫_Æways_ölöe
 *

77 
	`memchr
 (*
__s
, 
__c
, 
size_t
 
__n
Ë
__THROW


79  
	`__buûtö_memchr
 (
__s
, 
__c
, 
__n
);

82 
__exã∫_Æways_ölöe
 const *

83 
	`memchr
 (c⁄° *
__s
, 
__c
, 
size_t
 
__n
Ë
__THROW


85  
	`__buûtö_memchr
 (
__s
, 
__c
, 
__n
);

88 
	}
}

90 *
	$memchr
 (c⁄° *
__s
, 
__c
, 
size_t
 
__n
)

91 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

94 #ifde‡
__USE_GNU


97 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


98 "C++" *
	$øwmemchr
 (*
__s
, 
__c
)

99 
__THROW
 
	`__asm
 ("øwmemchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

100 "C++" c⁄° *
	$øwmemchr
 (c⁄° *
__s
, 
__c
)

101 
__THROW
 
	`__asm
 ("øwmemchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

103 *
	$øwmemchr
 (c⁄° *
__s
, 
__c
)

104 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

108 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


109 "C++" *
	$memrchr
 (*
__s
, 
__c
, 
size_t
 
__n
)

110 
__THROW
 
	`__asm
 ("memrchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

111 "C++" c⁄° *
	$memrchr
 (c⁄° *
__s
, 
__c
, 
size_t
 
__n
)

112 
__THROW
 
	`__asm
 ("memrchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

114 *
	$memrchr
 (c⁄° *
__s
, 
__c
, 
size_t
 
__n
)

115 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

121 *
	$°r˝y
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
)

122 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

124 *
	$°∫˝y
 (*
__ª°ri˘
 
__de°
,

125 c⁄° *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

126 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

129 *
	$°rˇt
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
)

130 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

132 *
	$°∫ˇt
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
,

133 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

136 
	$°rcmp
 (c⁄° *
__s1
, c⁄° *
__s2
)

137 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

139 
	$°∫cmp
 (c⁄° *
__s1
, c⁄° *
__s2
, 
size_t
 
__n
)

140 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

143 
	$°rcﬁl
 (c⁄° *
__s1
, c⁄° *
__s2
)

144 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

146 
size_t
 
	$°rx‰m
 (*
__ª°ri˘
 
__de°
,

147 c⁄° *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

148 
__THROW
 
	`__n⁄nuŒ
 ((2));

150 #ifde‡
__USE_XOPEN2K8


152 
	~<bôs/ty≥s/loˇÀ_t.h
>

155 
	$°rcﬁl_l
 (c⁄° *
__s1
, c⁄° *
__s2
, 
loˇÀ_t
 
__l
)

156 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2, 3));

159 
size_t
 
	$°rx‰m_l
 (*
__de°
, c⁄° *
__§c
, 
size_t
 
__n
,

160 
loˇÀ_t
 
__l
Ë
__THROW
 
	`__n⁄nuŒ
 ((2, 4));

163 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8
 \

164 || 
	$__GLIBC_USE
 (
LIB_EXT2
))

166 *
	$°rdup
 (c⁄° *
__s
)

167 
__THROW
 
__©åibuã_mÆloc__
 
	`__n⁄nuŒ
 ((1));

173 #i‡
deföed
 
__USE_XOPEN2K8
 || 
	`__GLIBC_USE
 (
LIB_EXT2
)

174 *
	$°∫dup
 (c⁄° *
__°rög
, 
size_t
 
__n
)

175 
__THROW
 
__©åibuã_mÆloc__
 
	`__n⁄nuŒ
 ((1));

178 #i‡
deföed
 
__USE_GNU
 && deföed 
__GNUC__


180 
	#°rdu∑
(
s
) \

181 (
__exãnsi⁄__
 \

183 c⁄° *
__ﬁd
 = (
s
); \

184 
size_t
 
__Àn
 = 
	`°æí
 (
__ﬁd
) + 1; \

185 *
__√w
 = (*Ë
	`__buûtö_Æloˇ
 (
__Àn
); \

186 (*Ë
	`mem˝y
 (
__√w
, 
__ﬁd
, 
__Àn
); \

187 
	}
}))

	)

190 
	#°∫du∑
(
s
, 
n
) \

191 (
__exãnsi⁄__
 \

193 c⁄° *
__ﬁd
 = (
s
); \

194 
size_t
 
__Àn
 = 
	`°∫Àn
 (
__ﬁd
, (
n
)); \

195 *
__√w
 = (*Ë
	`__buûtö_Æloˇ
 (
__Àn
 + 1); \

196 
__√w
[
__Àn
] = '\0'; \

197 (*Ë
	`mem˝y
 (
__√w
, 
__ﬁd
, 
__Àn
); \

198 }))

	)

202 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


205 *
°rchr
 (*
__s
, 
__c
)

206 
__THROW
 
__asm
 ("°rchr"Ë
__©åibuã_puª__
 
__n⁄nuŒ
 ((1));

207 c⁄° *
°rchr
 (c⁄° *
__s
, 
__c
)

208 
__THROW
 
__asm
 ("°rchr"Ë
__©åibuã_puª__
 
__n⁄nuŒ
 ((1));

210 #ifde‡
__OPTIMIZE__


211 
__exã∫_Æways_ölöe
 *

212 
°rchr
 (*
__s
, 
__c
Ë
	g__THROW


214  
__buûtö_°rchr
 (
__s
, 
__c
);

217 
__exã∫_Æways_ölöe
 const *

218 
°rchr
 (c⁄° *
__s
, 
__c
Ë
	g__THROW


220  
__buûtö_°rchr
 (
__s
, 
__c
);

225 *
	$°rchr
 (c⁄° *
__s
, 
__c
)

226 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

229 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


232 *
	`°ºchr
 (*
__s
, 
__c
)

233 
__THROW
 
	`__asm
 ("°ºchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

234 c⁄° *
	`°ºchr
 (c⁄° *
__s
, 
__c
)

235 
__THROW
 
	`__asm
 ("°ºchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

237 #ifde‡
__OPTIMIZE__


238 
__exã∫_Æways_ölöe
 *

239 
	`°ºchr
 (*
__s
, 
__c
Ë
__THROW


241  
	`__buûtö_°ºchr
 (
__s
, 
__c
);

244 
__exã∫_Æways_ölöe
 const *

245 
	`°ºchr
 (c⁄° *
__s
, 
__c
Ë
__THROW


247  
	`__buûtö_°ºchr
 (
__s
, 
__c
);

250 
	}
}

252 *
	$°ºchr
 (c⁄° *
__s
, 
__c
)

253 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

256 #ifde‡
__USE_GNU


259 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


260 "C++" *
	$°rch∫ul
 (*
__s
, 
__c
)

261 
__THROW
 
	`__asm
 ("°rch∫ul"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

262 "C++" c⁄° *
	$°rch∫ul
 (c⁄° *
__s
, 
__c
)

263 
__THROW
 
	`__asm
 ("°rch∫ul"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

265 *
	$°rch∫ul
 (c⁄° *
__s
, 
__c
)

266 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

272 
size_t
 
	$°rc•n
 (c⁄° *
__s
, c⁄° *
__ªje˘
)

273 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

276 
size_t
 
	$°r•n
 (c⁄° *
__s
, c⁄° *
__ac˚±
)

277 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

279 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


282 *
	`°Ωbrk
 (*
__s
, c⁄° *
__ac˚±
)

283 
__THROW
 
	`__asm
 ("°Ωbrk"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

284 c⁄° *
	`°Ωbrk
 (c⁄° *
__s
, c⁄° *
__ac˚±
)

285 
__THROW
 
	`__asm
 ("°Ωbrk"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

287 #ifde‡
__OPTIMIZE__


288 
__exã∫_Æways_ölöe
 *

289 
	`°Ωbrk
 (*
__s
, c⁄° *
__ac˚±
Ë
__THROW


291  
	`__buûtö_°Ωbrk
 (
__s
, 
__ac˚±
);

294 
__exã∫_Æways_ölöe
 const *

295 
	`°Ωbrk
 (c⁄° *
__s
, c⁄° *
__ac˚±
Ë
__THROW


297  
	`__buûtö_°Ωbrk
 (
__s
, 
__ac˚±
);

300 
	}
}

302 *
	$°Ωbrk
 (c⁄° *
__s
, c⁄° *
__ac˚±
)

303 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

306 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


309 *
	`°r°r
 (*
__hay°ack
, c⁄° *
__√edÀ
)

310 
__THROW
 
	`__asm
 ("°r°r"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

311 c⁄° *
	`°r°r
 (c⁄° *
__hay°ack
, c⁄° *
__√edÀ
)

312 
__THROW
 
	`__asm
 ("°r°r"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

314 #ifde‡
__OPTIMIZE__


315 
__exã∫_Æways_ölöe
 *

316 
	`°r°r
 (*
__hay°ack
, c⁄° *
__√edÀ
Ë
__THROW


318  
	`__buûtö_°r°r
 (
__hay°ack
, 
__√edÀ
);

321 
__exã∫_Æways_ölöe
 const *

322 
	`°r°r
 (c⁄° *
__hay°ack
, c⁄° *
__√edÀ
Ë
__THROW


324  
	`__buûtö_°r°r
 (
__hay°ack
, 
__√edÀ
);

327 
	}
}

329 *
	$°r°r
 (c⁄° *
__hay°ack
, c⁄° *
__√edÀ
)

330 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

335 *
	$°πok
 (*
__ª°ri˘
 
__s
, c⁄° *__ª°ri˘ 
__dñim
)

336 
__THROW
 
	`__n⁄nuŒ
 ((2));

340 *
	$__°πok_r
 (*
__ª°ri˘
 
__s
,

341 c⁄° *
__ª°ri˘
 
__dñim
,

342 **
__ª°ri˘
 
__ßve_±r
)

343 
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

344 #ifde‡
__USE_POSIX


345 *
	$°πok_r
 (*
__ª°ri˘
 
__s
, c⁄° *__ª°ri˘ 
__dñim
,

346 **
__ª°ri˘
 
__ßve_±r
)

347 
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

350 #ifde‡
__USE_GNU


352 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


353 "C++" *
	$°rˇ£°r
 (*
__hay°ack
, c⁄° *
__√edÀ
)

354 
__THROW
 
	`__asm
 ("°rˇ£°r"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

355 "C++" c⁄° *
	$°rˇ£°r
 (c⁄° *
__hay°ack
,

356 c⁄° *
__√edÀ
)

357 
__THROW
 
	`__asm
 ("°rˇ£°r"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

359 *
	$°rˇ£°r
 (c⁄° *
__hay°ack
, c⁄° *
__√edÀ
)

360 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

364 #ifde‡
__USE_GNU


368 *
	$memmem
 (c⁄° *
__hay°ack
, 
size_t
 
__hay°ackÀn
,

369 c⁄° *
__√edÀ
, 
size_t
 
__√edÀÀn
)

370 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 3));

374 *
	$__memp˝y
 (*
__ª°ri˘
 
__de°
,

375 c⁄° *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

376 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

377 *
	$memp˝y
 (*
__ª°ri˘
 
__de°
,

378 c⁄° *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

379 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

384 
size_t
 
	$°æí
 (c⁄° *
__s
)

385 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

387 #ifdef 
__USE_XOPEN2K8


390 
size_t
 
	$°∫Àn
 (c⁄° *
__°rög
, 
size_t
 
__maxÀn
)

391 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

396 *
	$°ªº‹
 (
__î∫um
Ë
__THROW
;

397 #ifde‡
__USE_XOPEN2K


405 #i‡
deföed
 
__USE_XOPEN2K
 && !deföed 
__USE_GNU


408 #ifde‡
__REDIRECT_NTH


409 
	`__REDIRECT_NTH
 (
°ªº‹_r
,

410 (
__î∫um
, *
__buf
, 
size_t
 
__buÊí
),

411 
__xpg_°ªº‹_r
Ë
	`__n⁄nuŒ
 ((2));

413 
	$__xpg_°ªº‹_r
 (
__î∫um
, *
__buf
, 
size_t
 
__buÊí
)

414 
__THROW
 
	`__n⁄nuŒ
 ((2));

415 
	#°ªº‹_r
 
__xpg_°ªº‹_r


	)

420 *
	$°ªº‹_r
 (
__î∫um
, *
__buf
, 
size_t
 
__buÊí
)

421 
__THROW
 
	`__n⁄nuŒ
 ((2)Ë
__wur
;

425 #ifde‡
__USE_XOPEN2K8


427 *
	$°ªº‹_l
 (
__î∫um
, 
loˇÀ_t
 
__l
Ë
__THROW
;

430 #ifde‡
__USE_MISC


431 
	~<°rögs.h
>

435 
	$ex∂icô_bzîo
 (*
__s
, 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

439 *
	$°r£p
 (**
__ª°ri˘
 
__°rögp
,

440 c⁄° *
__ª°ri˘
 
__dñim
)

441 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

444 #ifdef 
__USE_XOPEN2K8


446 *
	$°rsig«l
 (
__sig
Ë
__THROW
;

449 *
	$__°p˝y
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
)

450 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

451 *
	$°p˝y
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
)

452 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

456 *
	$__°≤˝y
 (*
__ª°ri˘
 
__de°
,

457 c⁄° *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

458 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

459 *
	$°≤˝y
 (*
__ª°ri˘
 
__de°
,

460 c⁄° *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

461 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

464 #ifdef 
__USE_GNU


466 
	$°rvîscmp
 (c⁄° *
__s1
, c⁄° *
__s2
)

467 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

470 *
	$°r‰y
 (*
__°rög
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

473 *
	$mem‰ob
 (*
__s
, 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

475 #i‚de‡
ba£«me


480 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


481 "C++" *
	$ba£«me
 (*
__fûíame
)

482 
__THROW
 
	`__asm
 ("ba£«me"Ë
	`__n⁄nuŒ
 ((1));

483 "C++" c⁄° *
	$ba£«me
 (c⁄° *
__fûíame
)

484 
__THROW
 
	`__asm
 ("ba£«me"Ë
	`__n⁄nuŒ
 ((1));

486 *
	$ba£«me
 (c⁄° *
__fûíame
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

491 #i‡
	`__GNUC_PREREQ
 (3,4)

492 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__f‹tify_fun˘i⁄


494 
	~<bôs/°rög_f‹tifõd.h
>

498 
__END_DECLS


	@/usr/include/alloca.h

18 #i‚def 
_ALLOCA_H


19 
	#_ALLOCA_H
 1

	)

21 
	~<„©uªs.h
>

23 
	#__√ed_size_t


	)

24 
	~<°ddef.h
>

26 
	g__BEGIN_DECLS


29 #unde‡
Æloˇ


32 *
	$Æloˇ
 (
size_t
 
__size
Ë
__THROW
;

34 #ifdef 
__GNUC__


35 
	#Æloˇ
(
size
Ë
	`__buûtö_Æloˇ
 (size)

	)

38 
__END_DECLS


	@/usr/include/endian.h

18 #i‚def 
_ENDIAN_H


19 
	#_ENDIAN_H
 1

	)

21 
	~<„©uªs.h
>

31 
	#__LITTLE_ENDIAN
 1234

	)

32 
	#__BIG_ENDIAN
 4321

	)

33 
	#__PDP_ENDIAN
 3412

	)

36 
	~<bôs/ídün.h
>

40 #i‚de‡
__FLOAT_WORD_ORDER


41 
	#__FLOAT_WORD_ORDER
 
__BYTE_ORDER


	)

44 #ifdef 
__USE_MISC


45 
	#LITTLE_ENDIAN
 
__LITTLE_ENDIAN


	)

46 
	#BIG_ENDIAN
 
__BIG_ENDIAN


	)

47 
	#PDP_ENDIAN
 
__PDP_ENDIAN


	)

48 
	#BYTE_ORDER
 
__BYTE_ORDER


	)

51 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


52 
	#__LONG_LONG_PAIR
(
HI
, 
LO
ËLO, 
	)
HI

53 #ñi‡
__BYTE_ORDER
 =
__BIG_ENDIAN


54 
	#__LONG_LONG_PAIR
(
HI
, 
LO
ËHI, 
	)
LO

58 #i‡
deföed
 
__USE_MISC
 && !deföed 
__ASSEMBLER__


60 
	~<bôs/byãsw≠.h
>

61 
	~<bôs/uöä-idítôy.h
>

63 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


64 
	#htobe16
(
x
Ë
	`__bsw≠_16
 (x)

	)

65 
	#htﬁe16
(
x
Ë
	`__uöt16_idítôy
 (x)

	)

66 
	#be16toh
(
x
Ë
	`__bsw≠_16
 (x)

	)

67 
	#À16toh
(
x
Ë
	`__uöt16_idítôy
 (x)

	)

69 
	#htobe32
(
x
Ë
	`__bsw≠_32
 (x)

	)

70 
	#htﬁe32
(
x
Ë
	`__uöt32_idítôy
 (x)

	)

71 
	#be32toh
(
x
Ë
	`__bsw≠_32
 (x)

	)

72 
	#À32toh
(
x
Ë
	`__uöt32_idítôy
 (x)

	)

74 
	#htobe64
(
x
Ë
	`__bsw≠_64
 (x)

	)

75 
	#htﬁe64
(
x
Ë
	`__uöt64_idítôy
 (x)

	)

76 
	#be64toh
(
x
Ë
	`__bsw≠_64
 (x)

	)

77 
	#À64toh
(
x
Ë
	`__uöt64_idítôy
 (x)

	)

80 
	#htobe16
(
x
Ë
	`__uöt16_idítôy
 (x)

	)

81 
	#htﬁe16
(
x
Ë
	`__bsw≠_16
 (x)

	)

82 
	#be16toh
(
x
Ë
	`__uöt16_idítôy
 (x)

	)

83 
	#À16toh
(
x
Ë
	`__bsw≠_16
 (x)

	)

85 
	#htobe32
(
x
Ë
	`__uöt32_idítôy
 (x)

	)

86 
	#htﬁe32
(
x
Ë
	`__bsw≠_32
 (x)

	)

87 
	#be32toh
(
x
Ë
	`__uöt32_idítôy
 (x)

	)

88 
	#À32toh
(
x
Ë
	`__bsw≠_32
 (x)

	)

90 
	#htobe64
(
x
Ë
	`__uöt64_idítôy
 (x)

	)

91 
	#htﬁe64
(
x
Ë
	`__bsw≠_64
 (x)

	)

92 
	#be64toh
(
x
Ë
	`__uöt64_idítôy
 (x)

	)

93 
	#À64toh
(
x
Ë
	`__bsw≠_64
 (x)

	)

	@/usr/include/features.h

18 #i‚def 
_FEATURES_H


19 
	#_FEATURES_H
 1

	)

119 #unde‡
__USE_ISOC11


120 #unde‡
__USE_ISOC99


121 #unde‡
__USE_ISOC95


122 #unde‡
__USE_ISOCXX11


123 #unde‡
__USE_POSIX


124 #unde‡
__USE_POSIX2


125 #unde‡
__USE_POSIX199309


126 #unde‡
__USE_POSIX199506


127 #unde‡
__USE_XOPEN


128 #unde‡
__USE_XOPEN_EXTENDED


129 #unde‡
__USE_UNIX98


130 #unde‡
__USE_XOPEN2K


131 #unde‡
__USE_XOPEN2KXSI


132 #unde‡
__USE_XOPEN2K8


133 #unde‡
__USE_XOPEN2K8XSI


134 #unde‡
__USE_LARGEFILE


135 #unde‡
__USE_LARGEFILE64


136 #unde‡
__USE_FILE_OFFSET64


137 #unde‡
__USE_MISC


138 #unde‡
__USE_ATFILE


139 #unde‡
__USE_GNU


140 #unde‡
__USE_FORTIFY_LEVEL


141 #unde‡
__KERNEL_STRICT_NAMES


142 #unde‡
__GLIBC_USE_DEPRECATED_GETS


146 #i‚de‡
_LOOSE_KERNEL_NAMES


147 
	#__KERNEL_STRICT_NAMES


	)

157 #i‡
deföed
 
__GNUC__
 && deföed 
__GNUC_MINOR__


158 
	#__GNUC_PREREQ
(
maj
, 
mö
) \

159 ((
__GNUC__
 << 16Ë+ 
__GNUC_MINOR__
 >((
maj
Ë<< 16Ë+ (
mö
))

	)

161 
	#__GNUC_PREREQ
(
maj
, 
mö
Ë0

	)

168 #i‡
deföed
 
__˛™g_maj‹__
 && deföed 
__˛™g_mö‹__


169 
	#__glibc_˛™g_¥îeq
(
maj
, 
mö
) \

170 ((
__˛™g_maj‹__
 << 16Ë+ 
__˛™g_mö‹__
 >((
maj
Ë<< 16Ë+ (
mö
))

	)

172 
	#__glibc_˛™g_¥îeq
(
maj
, 
mö
Ë0

	)

176 
	#__GLIBC_USE
(
F
Ë
__GLIBC_USE_
 ## 
	)
F

182 #i‡(
deföed
 
_BSD_SOURCE
 || deföed 
_SVID_SOURCE
) \

183 && !
deföed
 
	g_DEFAULT_SOURCE


185 #unde‡
_DEFAULT_SOURCE


186 
	#_DEFAULT_SOURCE
 1

	)

190 #ifde‡
_GNU_SOURCE


191 #unde‡
_ISOC95_SOURCE


192 
	#_ISOC95_SOURCE
 1

	)

193 #unde‡
_ISOC99_SOURCE


194 
	#_ISOC99_SOURCE
 1

	)

195 #unde‡
_ISOC11_SOURCE


196 
	#_ISOC11_SOURCE
 1

	)

197 #unde‡
_POSIX_SOURCE


198 
	#_POSIX_SOURCE
 1

	)

199 #unde‡
_POSIX_C_SOURCE


200 
	#_POSIX_C_SOURCE
 200809L

	)

201 #unde‡
_XOPEN_SOURCE


202 
	#_XOPEN_SOURCE
 700

	)

203 #unde‡
_XOPEN_SOURCE_EXTENDED


204 
	#_XOPEN_SOURCE_EXTENDED
 1

	)

205 #unde‡
_LARGEFILE64_SOURCE


206 
	#_LARGEFILE64_SOURCE
 1

	)

207 #unde‡
_DEFAULT_SOURCE


208 
	#_DEFAULT_SOURCE
 1

	)

209 #unde‡
_ATFILE_SOURCE


210 
	#_ATFILE_SOURCE
 1

	)

215 #i‡(
deföed
 
_DEFAULT_SOURCE
 \

216 || (!
deföed
 
	g__STRICT_ANSI__
 \

217 && !
deföed
 
	g_ISOC99_SOURCE
 \

218 && !
deföed
 
	g_POSIX_SOURCE
 && !deföed 
	g_POSIX_C_SOURCE
 \

219 && !
deföed
 
	g_XOPEN_SOURCE
))

220 #unde‡
_DEFAULT_SOURCE


221 
	#_DEFAULT_SOURCE
 1

	)

225 #i‡(
deföed
 
_ISOC11_SOURCE
 \

226 || (
deföed
 
	g__STDC_VERSION__
 && __STDC_VERSION__ >= 201112L))

227 
	#__USE_ISOC11
 1

	)

231 #i‡(
deföed
 
_ISOC99_SOURCE
 || deföed 
_ISOC11_SOURCE
 \

232 || (
deföed
 
__STDC_VERSION__
 && __STDC_VERSION__ >= 199901L))

233 
	#__USE_ISOC99
 1

	)

237 #i‡(
deföed
 
_ISOC99_SOURCE
 || deföed 
_ISOC11_SOURCE
 \

238 || (
deföed
 
__STDC_VERSION__
 && __STDC_VERSION__ >= 199409L))

239 
	#__USE_ISOC95
 1

	)

242 #ifde‡
__˝lu•lus


244 #i‡
__˝lu•lus
 >= 201703L

245 
	#__USE_ISOC11
 1

	)

249 #i‡
__˝lu•lus
 >201103L || 
deföed
 
__GXX_EXPERIMENTAL_CXX0X__


250 
	#__USE_ISOCXX11
 1

	)

251 
	#__USE_ISOC99
 1

	)

258 #ifde‡
_DEFAULT_SOURCE


259 #i‡!
deföed
 
_POSIX_SOURCE
 && !deföed 
_POSIX_C_SOURCE


260 
	#__USE_POSIX_IMPLICITLY
 1

	)

262 #unde‡
_POSIX_SOURCE


263 
	#_POSIX_SOURCE
 1

	)

264 #unde‡
_POSIX_C_SOURCE


265 
	#_POSIX_C_SOURCE
 200809L

	)

268 #i‡((!
deföed
 
__STRICT_ANSI__
 \

269 || (
deföed
 
_XOPEN_SOURCE
 && (_XOPEN_SOURCE - 0) >= 500)) \

270 && !
deföed
 
_POSIX_SOURCE
 && !deföed 
_POSIX_C_SOURCE
)

271 
	#_POSIX_SOURCE
 1

	)

272 #i‡
deföed
 
_XOPEN_SOURCE
 && (_XOPEN_SOURCE - 0) < 500

273 
	#_POSIX_C_SOURCE
 2

	)

274 #ñi‡
deföed
 
_XOPEN_SOURCE
 && (_XOPEN_SOURCE - 0) < 600

275 
	#_POSIX_C_SOURCE
 199506L

	)

276 #ñi‡
deföed
 
_XOPEN_SOURCE
 && (_XOPEN_SOURCE - 0) < 700

277 
	#_POSIX_C_SOURCE
 200112L

	)

279 
	#_POSIX_C_SOURCE
 200809L

	)

281 
	#__USE_POSIX_IMPLICITLY
 1

	)

290 #i‡((!
deföed
 
_POSIX_C_SOURCE
 || (_POSIX_C_SOURCE - 0) < 199506L) \

291 && (
deföed
 
_REENTRANT
 || deföed 
_THREAD_SAFE
))

292 
	#_POSIX_SOURCE
 1

	)

293 #unde‡
_POSIX_C_SOURCE


294 
	#_POSIX_C_SOURCE
 199506L

	)

297 #i‡(
deföed
 
_POSIX_SOURCE
 \

298 || (
deföed
 
_POSIX_C_SOURCE
 && _POSIX_C_SOURCE >= 1) \

299 || 
deföed
 
_XOPEN_SOURCE
)

300 
	#__USE_POSIX
 1

	)

303 #i‡
deföed
 
_POSIX_C_SOURCE
 && _POSIX_C_SOURCE >2 || deföed 
_XOPEN_SOURCE


304 
	#__USE_POSIX2
 1

	)

307 #i‡
deföed
 
_POSIX_C_SOURCE
 && (_POSIX_C_SOURCE - 0) >= 199309L

308 
	#__USE_POSIX199309
 1

	)

311 #i‡
deföed
 
_POSIX_C_SOURCE
 && (_POSIX_C_SOURCE - 0) >= 199506L

312 
	#__USE_POSIX199506
 1

	)

315 #i‡
deföed
 
_POSIX_C_SOURCE
 && (_POSIX_C_SOURCE - 0) >= 200112L

316 
	#__USE_XOPEN2K
 1

	)

317 #unde‡
__USE_ISOC95


318 
	#__USE_ISOC95
 1

	)

319 #unde‡
__USE_ISOC99


320 
	#__USE_ISOC99
 1

	)

323 #i‡
deföed
 
_POSIX_C_SOURCE
 && (_POSIX_C_SOURCE - 0) >= 200809L

324 
	#__USE_XOPEN2K8
 1

	)

325 #unde‡
_ATFILE_SOURCE


326 
	#_ATFILE_SOURCE
 1

	)

329 #ifdef 
_XOPEN_SOURCE


330 
	#__USE_XOPEN
 1

	)

331 #i‡(
_XOPEN_SOURCE
 - 0) >= 500

332 
	#__USE_XOPEN_EXTENDED
 1

	)

333 
	#__USE_UNIX98
 1

	)

334 #unde‡
_LARGEFILE_SOURCE


335 
	#_LARGEFILE_SOURCE
 1

	)

336 #i‡(
_XOPEN_SOURCE
 - 0) >= 600

337 #i‡(
_XOPEN_SOURCE
 - 0) >= 700

338 
	#__USE_XOPEN2K8
 1

	)

339 
	#__USE_XOPEN2K8XSI
 1

	)

341 
	#__USE_XOPEN2K
 1

	)

342 
	#__USE_XOPEN2KXSI
 1

	)

343 #unde‡
__USE_ISOC95


344 
	#__USE_ISOC95
 1

	)

345 #unde‡
__USE_ISOC99


346 
	#__USE_ISOC99
 1

	)

349 #ifde‡
_XOPEN_SOURCE_EXTENDED


350 
	#__USE_XOPEN_EXTENDED
 1

	)

355 #ifde‡
_LARGEFILE_SOURCE


356 
	#__USE_LARGEFILE
 1

	)

359 #ifde‡
_LARGEFILE64_SOURCE


360 
	#__USE_LARGEFILE64
 1

	)

363 #i‡
deföed
 
_FILE_OFFSET_BITS
 && _FILE_OFFSET_BITS == 64

364 
	#__USE_FILE_OFFSET64
 1

	)

367 #i‡
deföed
 
_DEFAULT_SOURCE


368 
	#__USE_MISC
 1

	)

371 #ifdef 
_ATFILE_SOURCE


372 
	#__USE_ATFILE
 1

	)

375 #ifdef 
_GNU_SOURCE


376 
	#__USE_GNU
 1

	)

379 #i‡
deföed
 
_FORTIFY_SOURCE
 && _FORTIFY_SOURCE > 0 \

380 && 
__GNUC_PREREQ
 (4, 1Ë&& 
deföed
 
	g__OPTIMIZE__
 && __OPTIMIZE__ > 0

381 #i‡
_FORTIFY_SOURCE
 > 1

382 
	#__USE_FORTIFY_LEVEL
 2

	)

384 
	#__USE_FORTIFY_LEVEL
 1

	)

387 
	#__USE_FORTIFY_LEVEL
 0

	)

394 #i‡
deföed
 
__˝lu•lus
 ? __˝lu•lu†>201402L : deföed 
__USE_ISOC11


395 
	#__GLIBC_USE_DEPRECATED_GETS
 0

	)

397 
	#__GLIBC_USE_DEPRECATED_GETS
 1

	)

402 
	~<°dc-¥edef.h
>

410 #unde‡
__GNU_LIBRARY__


411 
	#__GNU_LIBRARY__
 6

	)

415 
	#__GLIBC__
 2

	)

416 
	#__GLIBC_MINOR__
 27

	)

418 
	#__GLIBC_PREREQ
(
maj
, 
mö
) \

419 ((
__GLIBC__
 << 16Ë+ 
__GLIBC_MINOR__
 >((
maj
Ë<< 16Ë+ (
mö
))

	)

422 #i‚de‡
__ASSEMBLER__


423 #i‚de‡
_SYS_CDEFS_H


424 
	~<sys/cdefs.h
>

429 #i‡
deföed
 
__USE_FILE_OFFSET64
 && !deföed 
__REDIRECT


430 
	#__USE_LARGEFILE
 1

	)

431 
	#__USE_LARGEFILE64
 1

	)

437 #i‡
__GNUC_PREREQ
 (2, 7Ë&& 
deföed
 
__OPTIMIZE__
 \

438 && !
deföed
 
	g__OPTIMIZE_SIZE__
 && !deföed 
	g__NO_INLINE__
 \

439 && 
deföed
 
	g__exã∫_ölöe


440 
	#__USE_EXTERN_INLINES
 1

	)

448 
	~<gnu/°ubs.h
>

	@/usr/include/strings.h

18 #i‚def 
_STRINGS_H


19 
	#_STRINGS_H
 1

	)

21 
	~<„©uªs.h
>

22 
	#__√ed_size_t


	)

23 
	~<°ddef.h
>

26 #i‡
deföed
 
__˝lu•lus
 && 
__GNUC_PREREQ
 (4, 4)

27 
	#__CORRECT_ISO_CPP_STRINGS_H_PROTO


	)

30 
	g__BEGIN_DECLS


32 #i‡
deföed
 
__USE_MISC
 || !deföed 
__USE_XOPEN2K8


34 
	$bcmp
 (c⁄° *
__s1
, c⁄° *
__s2
, 
size_t
 
__n
)

35 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

38 
	$bc›y
 (c⁄° *
__§c
, *
__de°
, 
size_t
 
__n
)

39 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

42 
	$bzîo
 (*
__s
, 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

45 #ifde‡
__CORRECT_ISO_CPP_STRINGS_H_PROTO


48 *
	`ödex
 (*
__s
, 
__c
)

49 
__THROW
 
	`__asm
 ("ödex"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

50 c⁄° *
	`ödex
 (c⁄° *
__s
, 
__c
)

51 
__THROW
 
	`__asm
 ("ödex"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

53 #i‡
deföed
 
__OPTIMIZE__


54 
__exã∫_Æways_ölöe
 *

55 
	`ödex
 (*
__s
, 
__c
Ë
__THROW


57  
	`__buûtö_ödex
 (
__s
, 
__c
);

60 
__exã∫_Æways_ölöe
 const *

61 
	`ödex
 (c⁄° *
__s
, 
__c
Ë
__THROW


63  
	`__buûtö_ödex
 (
__s
, 
__c
);

66 
	}
}

68 *
	$ödex
 (c⁄° *
__s
, 
__c
)

69 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

73 #ifde‡
__CORRECT_ISO_CPP_STRINGS_H_PROTO


76 *
	`rödex
 (*
__s
, 
__c
)

77 
__THROW
 
	`__asm
 ("rödex"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

78 c⁄° *
	`rödex
 (c⁄° *
__s
, 
__c
)

79 
__THROW
 
	`__asm
 ("rödex"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

81 #i‡
deföed
 
__OPTIMIZE__


82 
__exã∫_Æways_ölöe
 *

83 
	`rödex
 (*
__s
, 
__c
Ë
__THROW


85  
	`__buûtö_rödex
 (
__s
, 
__c
);

88 
__exã∫_Æways_ölöe
 const *

89 
	`rödex
 (c⁄° *
__s
, 
__c
Ë
__THROW


91  
	`__buûtö_rödex
 (
__s
, 
__c
);

94 
	}
}

96 *
	$rödex
 (c⁄° *
__s
, 
__c
)

97 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

101 #i‡
deföed
 
__USE_MISC
 || !deföed 
__USE_XOPEN2K8
 || deföed 
__USE_XOPEN2K8XSI


104 
	$ffs
 (
__i
Ë
__THROW
 
__©åibuã_c⁄°__
;

109 #ifdef 
__USE_MISC


110 
	$ff¶
 (
__l
Ë
__THROW
 
__©åibuã_c⁄°__
;

111 
__exãnsi⁄__
 
	$ff¶l
 (
__Œ
)

112 
__THROW
 
__©åibuã_c⁄°__
;

116 
	$°rˇ£cmp
 (c⁄° *
__s1
, c⁄° *
__s2
)

117 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

120 
	$°∫ˇ£cmp
 (c⁄° *
__s1
, c⁄° *
__s2
, 
size_t
 
__n
)

121 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

123 #ifdef 
__USE_XOPEN2K8


125 
	~<bôs/ty≥s/loˇÀ_t.h
>

128 
	$°rˇ£cmp_l
 (c⁄° *
__s1
, c⁄° *
__s2
, 
loˇÀ_t
 
__loc
)

129 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2, 3));

133 
	$°∫ˇ£cmp_l
 (c⁄° *
__s1
, c⁄° *
__s2
,

134 
size_t
 
__n
, 
loˇÀ_t
 
__loc
)

135 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2, 4));

138 
__END_DECLS


140 #i‡
	`__GNUC_PREREQ
 (3,4Ë&& 
__USE_FORTIFY_LEVEL
 > 0 \

141 && 
deföed
 
__f‹tify_fun˘i⁄


143 #i‡
deföed
 
__USE_MISC
 || !deföed 
__USE_XOPEN2K8


144 
	~<bôs/°rögs_f‹tifõd.h
>

	@/usr/include/stdc-predef.h

18 #i‚def 
_STDC_PREDEF_H


19 
	#_STDC_PREDEF_H
 1

	)

36 #ifde‡
__GCC_IEC_559


37 #i‡
__GCC_IEC_559
 > 0

38 
	#__STDC_IEC_559__
 1

	)

41 
	#__STDC_IEC_559__
 1

	)

44 #ifde‡
__GCC_IEC_559_COMPLEX


45 #i‡
__GCC_IEC_559_COMPLEX
 > 0

46 
	#__STDC_IEC_559_COMPLEX__
 1

	)

49 
	#__STDC_IEC_559_COMPLEX__
 1

	)

58 
	#__STDC_ISO_10646__
 201706L

	)

61 
	#__STDC_NO_THREADS__
 1

	)

	@
1
.
1
/usr/include
298
5204
config/conf.c
config/conf.h
config/config.l
config/config.y
device/eth/ethcontrol.c
device/eth/ethhandler.c
device/eth/ethinit.c
device/eth/ethmcast.c
device/eth/ethread.c
device/eth/ethwrite.c
device/lfs/lfdballoc.c
device/lfs/lfdbfree.c
device/lfs/lfflush.c
device/lfs/lfgetmode.c
device/lfs/lfiballoc.c
device/lfs/lfibclear.c
device/lfs/lfibget.c
device/lfs/lfibput.c
device/lfs/lflclose.c
device/lfs/lflcontrol.c
device/lfs/lflgetc.c
device/lfs/lflinit.c
device/lfs/lflputc.c
device/lfs/lflread.c
device/lfs/lflseek.c
device/lfs/lflwrite.c
device/lfs/lfscheck.c
device/lfs/lfsckfmt.c
device/lfs/lfscreate.c
device/lfs/lfsetup.c
device/lfs/lfsinit.c
device/lfs/lfsopen.c
device/lfs/lftruncate.c
device/nam/mount.c
device/nam/naminit.c
device/nam/nammap.c
device/nam/namopen.c
device/ram/ramclose.c
device/ram/raminit.c
device/ram/ramopen.c
device/ram/ramread.c
device/ram/ramwrite.c
device/rds/rdsbufalloc.c
device/rds/rdsclose.c
device/rds/rdscomm.c
device/rds/rdscontrol.c
device/rds/rdsinit.c
device/rds/rdsopen.c
device/rds/rdsprocess.c
device/rds/rdsread.c
device/rds/rdswrite.c
device/rfs/rflclose.c
device/rfs/rflgetc.c
device/rfs/rflinit.c
device/rfs/rflputc.c
device/rfs/rflread.c
device/rfs/rflseek.c
device/rfs/rflwrite.c
device/rfs/rfscomm.c
device/rfs/rfscontrol.c
device/rfs/rfsgetmode.c
device/rfs/rfsinit.c
device/rfs/rfsndmsg.c
device/rfs/rfsopen.c
device/tty/ttycontrol.c
device/tty/ttygetc.c
device/tty/ttyhandle_in.c
device/tty/ttyhandle_out.c
device/tty/ttyhandler.c
device/tty/ttyinit.c
device/tty/ttykickout.c
device/tty/ttyputc.c
device/tty/ttyread.c
device/tty/ttywrite.c
include/apic.h
include/arp.h
include/bufpool.h
include/clock.h
include/ctype.h
include/date.h
include/debug.h
include/delay.h
include/device.h
include/dhcp.h
include/dns.h
include/ether.h
include/ethloop.h
include/file.h
include/flash.h
include/gprocess.h
include/hpet.h
include/icmp.h
include/icu.h
include/interrupt.h
include/ip.h
include/kernel.h
include/lfilesys.h
include/limits.h
include/mark.h
include/memory.h
include/multiboot.h
include/name.h
include/net.h
include/pci.h
include/ports.h
include/process.h
include/prototypes.h
include/pxe.h
include/quark_eth.h
include/quark_irq.h
include/quark_pdat.h
include/queue.h
include/ramdisk.h
include/rdisksys.h
include/resched.h
include/rfilesys.h
include/sdmc.h
include/semaphore.h
include/shell.h
include/shprototypes.h
include/stdarg.h
include/stddef.h
include/stdio.h
include/stdlib.h
include/string.h
include/testsuite.h
include/tftp.h
include/tty.h
include/uart.h
include/udp.h
include/xinu.h
lib/abs.c
lib/atoi.c
lib/atol.c
lib/bzero.c
lib/ctype_.c
lib/doprnt.c
lib/doscan.c
lib/fdoprnt.c
lib/fgetc.c
lib/fgets.c
lib/fprintf.c
lib/fputc.c
lib/fputs.c
lib/fscanf.c
lib/getchar.c
lib/labs.c
lib/memchr.c
lib/memcmp.c
lib/memcpy.c
lib/memset.c
lib/printf.c
lib/putchar.c
lib/qsort.c
lib/rand.c
lib/sprintf.c
lib/sscanf.c
lib/strchr.c
lib/strcmp.c
lib/strcpy.c
lib/strlen.c
lib/strncat.c
lib/strncmp.c
lib/strncpy.c
lib/strnlen.c
lib/strrchr.c
lib/strstr.c
net/arp.c
net/arp_dump.c
net/dhcp.c
net/dhcp_dump.c
net/dns.c
net/dot2ip.c
net/hexdump.c
net/icmp.c
net/ip.c
net/net.c
net/pdump.c
net/pxe.c
net/tftp.c
net/udp.c
shell/addargs.c
shell/lexan.c
shell/shell.c
shell/xsh_argecho.c
shell/xsh_arp.c
shell/xsh_cat.c
shell/xsh_clear.c
shell/xsh_date.c
shell/xsh_devdump.c
shell/xsh_echo.c
shell/xsh_exit.c
shell/xsh_hello.c
shell/xsh_help.c
shell/xsh_kill.c
shell/xsh_layout.c
shell/xsh_memdump.c
shell/xsh_memstat.c
shell/xsh_netinfo.c
shell/xsh_ping.c
shell/xsh_ps.c
shell/xsh_rdstest.c
shell/xsh_sleep.c
shell/xsh_udpdump.c
shell/xsh_udpecho.c
shell/xsh_udpserver.c
shell/xsh_uptime.c
system/ascdate.c
system/bufinit.c
system/chprio.c
system/clkhandler.c
system/clkinit.c
system/close.c
system/control.c
system/create.c
system/debug.c
system/early_imr.c
system/evec.c
system/exit.c
system/freebuf.c
system/freemem.c
system/getbuf.c
system/getc.c
system/getdev.c
system/getitem.c
system/getmem.c
system/getpid.c
system/getprio.c
system/getstk.c
system/getticks.c
system/gettime.c
system/getutime.c
system/hello.c
system/init.c
system/initialize.c
system/insert.c
system/insertd.c
system/ioerr.c
system/ionull.c
system/kill.c
system/kprintf.c
system/main.c
system/mark.c
system/meminit.c
system/mkbufpool.c
system/newqueue.c
system/open.c
system/panic.c
system/pci.c
system/platinit.c
system/ptclear.c
system/ptcount.c
system/ptcreate.c
system/ptdelete.c
system/ptinit.c
system/ptrecv.c
system/ptreset.c
system/ptsend.c
system/putc.c
system/quark_irq.c
system/quark_pdat.c
system/queue.c
system/read.c
system/ready.c
system/receive.c
system/recvclr.c
system/recvtime.c
system/resched.c
system/resume.c
system/seek.c
system/semcount.c
system/semcreate.c
system/semdelete.c
system/semreset.c
system/send.c
system/signal.c
system/signaln.c
system/sleep.c
system/stacktrace.c
system/suspend.c
system/unsleep.c
system/userret.c
system/wait.c
system/wakeup.c
system/write.c
system/xdone.c
system/yield.c
/usr/include/ctype.h
/usr/include/memory.h
/usr/include/semaphore.h
/usr/include/stdio.h
/usr/include/stdlib.h
/usr/include/string.h
/usr/include/alloca.h
/usr/include/endian.h
/usr/include/features.h
/usr/include/strings.h
/usr/include/stdc-predef.h

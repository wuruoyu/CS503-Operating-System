cscope 15 /u/antor/u13/wu1377/CS-503/xinu-cs503-fall2019-lab2               0000912683
	@config/conf.c

3 
	~<xöu.h
>

6 
devˇŒ
 
i€º
();

7 
devˇŒ
 
i⁄uŒ
();

11 
díåy
 
	gdevèb
[
NDEVS
] =

24 (*)
âyöô
, (*)
i⁄uŒ
, (*)ionull,

25 (*)
âyªad
, (*)
âywrôe
, (*)
i€º
,

26 (*)
âygëc
, (*)
âyputc
, (*)
âyc⁄åﬁ
,

27 (*)0x3f8, (*)
âyh™dÀr
, 33 },

31 (*)
i⁄uŒ
, (*)ionull, (*)ionull,

32 (*)
i⁄uŒ
, (*)i⁄uŒ, (*)
i€º
,

33 (*)
i⁄uŒ
, (*)i⁄uŒ, (*)
i€º
,

34 (*)0x0, (*)
i€º
, 0 },

38 (*)
ëhöô
, (*)
i€º
, (*)ioerr,

39 (*)
ëhªad
, (*)
ëhwrôe
, (*)
i€º
,

40 (*)
i€º
, (*)i€º, (*)
ëhc⁄åﬁ
,

41 (*)0x0, (*)
ëhh™dÀr
, 34 },

45 (*)
«möô
, (*)
«m›í
, (*)
i€º
,

46 (*)
i€º
, (*)ioerr, (*)ioerr,

47 (*)
i€º
, (*)ioerr, (*)ioerr,

48 (*)0x0, (*)
i€º
, 0 },

52 (*)
rdsöô
, (*)
rds›í
, (*)
rds˛o£
,

53 (*)
rd§ód
, (*)
rdswrôe
, (*)
i€º
,

54 (*)
i€º
, (*)i€º, (*)
rdsc⁄åﬁ
,

55 (*)0x0, (*)
i⁄uŒ
, 0 },

59 (*)
ømöô
, (*)
øm›í
, (*)
øm˛o£
,

60 (*)
ømªad
, (*)
ømwrôe
, (*)
i€º
,

61 (*)
i€º
, (*)ioerr, (*)ioerr,

62 (*)0x0, (*)
i⁄uŒ
, 0 },

66 (*)
rfsöô
, (*)
rfs›í
, (*)
i€º
,

67 (*)
i€º
, (*)ioerr, (*)ioerr,

68 (*)
i€º
, (*)i€º, (*)
rfsc⁄åﬁ
,

69 (*)0x0, (*)
i⁄uŒ
, 0 },

73 (*)
rÊöô
, (*)
i€º
, (*)
rÊ˛o£
,

74 (*)
rÊªad
, (*)
rÊwrôe
, (*)
rÊ£ek
,

75 (*)
rÊgëc
, (*)
rÊputc
, (*)
i€º
,

76 (*)0x0, (*)
i⁄uŒ
, 0 },

80 (*)
rÊöô
, (*)
i€º
, (*)
rÊ˛o£
,

81 (*)
rÊªad
, (*)
rÊwrôe
, (*)
rÊ£ek
,

82 (*)
rÊgëc
, (*)
rÊputc
, (*)
i€º
,

83 (*)0x0, (*)
i⁄uŒ
, 0 },

87 (*)
rÊöô
, (*)
i€º
, (*)
rÊ˛o£
,

88 (*)
rÊªad
, (*)
rÊwrôe
, (*)
rÊ£ek
,

89 (*)
rÊgëc
, (*)
rÊputc
, (*)
i€º
,

90 (*)0x0, (*)
i⁄uŒ
, 0 },

94 (*)
rÊöô
, (*)
i€º
, (*)
rÊ˛o£
,

95 (*)
rÊªad
, (*)
rÊwrôe
, (*)
rÊ£ek
,

96 (*)
rÊgëc
, (*)
rÊputc
, (*)
i€º
,

97 (*)0x0, (*)
i⁄uŒ
, 0 },

101 (*)
rÊöô
, (*)
i€º
, (*)
rÊ˛o£
,

102 (*)
rÊªad
, (*)
rÊwrôe
, (*)
rÊ£ek
,

103 (*)
rÊgëc
, (*)
rÊputc
, (*)
i€º
,

104 (*)0x0, (*)
i⁄uŒ
, 0 },

108 (*)
rÊöô
, (*)
i€º
, (*)
rÊ˛o£
,

109 (*)
rÊªad
, (*)
rÊwrôe
, (*)
rÊ£ek
,

110 (*)
rÊgëc
, (*)
rÊputc
, (*)
i€º
,

111 (*)0x0, (*)
i⁄uŒ
, 0 },

115 (*)
rÊöô
, (*)
i€º
, (*)
rÊ˛o£
,

116 (*)
rÊªad
, (*)
rÊwrôe
, (*)
rÊ£ek
,

117 (*)
rÊgëc
, (*)
rÊputc
, (*)
i€º
,

118 (*)0x0, (*)
i⁄uŒ
, 0 },

122 (*)
rÊöô
, (*)
i€º
, (*)
rÊ˛o£
,

123 (*)
rÊªad
, (*)
rÊwrôe
, (*)
rÊ£ek
,

124 (*)
rÊgëc
, (*)
rÊputc
, (*)
i€º
,

125 (*)0x0, (*)
i⁄uŒ
, 0 },

129 (*)
rÊöô
, (*)
i€º
, (*)
rÊ˛o£
,

130 (*)
rÊªad
, (*)
rÊwrôe
, (*)
rÊ£ek
,

131 (*)
rÊgëc
, (*)
rÊputc
, (*)
i€º
,

132 (*)0x0, (*)
i⁄uŒ
, 0 },

136 (*)
rÊöô
, (*)
i€º
, (*)
rÊ˛o£
,

137 (*)
rÊªad
, (*)
rÊwrôe
, (*)
rÊ£ek
,

138 (*)
rÊgëc
, (*)
rÊputc
, (*)
i€º
,

139 (*)0x0, (*)
i⁄uŒ
, 0 },

143 (*)
lfsöô
, (*)
lfs›í
, (*)
i€º
,

144 (*)
i€º
, (*)ioerr, (*)ioerr,

145 (*)
i€º
, (*)ioerr, (*)ioerr,

146 (*)0x0, (*)
i⁄uŒ
, 0 },

150 (*)
lÊöô
, (*)
i€º
, (*)
lÊ˛o£
,

151 (*)
lÊªad
, (*)
lÊwrôe
, (*)
lÊ£ek
,

152 (*)
lÊgëc
, (*)
lÊputc
, (*)
lÊc⁄åﬁ
,

153 (*)0x0, (*)
i⁄uŒ
, 0 },

157 (*)
lÊöô
, (*)
i€º
, (*)
lÊ˛o£
,

158 (*)
lÊªad
, (*)
lÊwrôe
, (*)
lÊ£ek
,

159 (*)
lÊgëc
, (*)
lÊputc
, (*)
lÊc⁄åﬁ
,

160 (*)0x0, (*)
i⁄uŒ
, 0 },

164 (*)
lÊöô
, (*)
i€º
, (*)
lÊ˛o£
,

165 (*)
lÊªad
, (*)
lÊwrôe
, (*)
lÊ£ek
,

166 (*)
lÊgëc
, (*)
lÊputc
, (*)
lÊc⁄åﬁ
,

167 (*)0x0, (*)
i⁄uŒ
, 0 },

171 (*)
lÊöô
, (*)
i€º
, (*)
lÊ˛o£
,

172 (*)
lÊªad
, (*)
lÊwrôe
, (*)
lÊ£ek
,

173 (*)
lÊgëc
, (*)
lÊputc
, (*)
lÊc⁄åﬁ
,

174 (*)0x0, (*)
i⁄uŒ
, 0 },

178 (*)
lÊöô
, (*)
i€º
, (*)
lÊ˛o£
,

179 (*)
lÊªad
, (*)
lÊwrôe
, (*)
lÊ£ek
,

180 (*)
lÊgëc
, (*)
lÊputc
, (*)
lÊc⁄åﬁ
,

181 (*)0x0, (*)
i⁄uŒ
, 0 },

185 (*)
lÊöô
, (*)
i€º
, (*)
lÊ˛o£
,

186 (*)
lÊªad
, (*)
lÊwrôe
, (*)
lÊ£ek
,

187 (*)
lÊgëc
, (*)
lÊputc
, (*)
lÊc⁄åﬁ
,

188 (*)0x0, (*)
i⁄uŒ
, 0 }

	@config/conf.h

6 
	sdíåy
 {

7 
öt32
 
	mdvnum
;

8 
öt32
 
	mdvmö‹
;

9 *
	mdv«me
;

10 
devˇŒ
 (*
dvöô
Ë(
	mdíåy
 *);

11 
devˇŒ
 (*
dv›í
Ë(
	mdíåy
 *, *, *);

12 
devˇŒ
 (*
dv˛o£
)(
	mdíåy
 *);

13 
devˇŒ
 (*
dvªad
Ë(
	mdíåy
 *, *, 
	muöt32
);

14 
devˇŒ
 (*
dvwrôe
)(
	mdíåy
 *, *, 
	muöt32
);

15 
devˇŒ
 (*
dv£ek
Ë(
	mdíåy
 *, 
	möt32
);

16 
devˇŒ
 (*
dvgëc
Ë(
	mdíåy
 *);

17 
devˇŒ
 (*
dvputc
Ë(
	mdíåy
 *, );

18 
devˇŒ
 (*
dv˙é
Ë(
	mdíåy
 *, 
	möt32
, int32, int32);

19 *
	mdvc§
;

20 (*
	mdvöå
)();

21 
byã
 
	mdvúq
;

24 
díåy
 
devèb
[];

28 
	#CONSOLE
 0

	)

29 
	#NULLDEV
 1

	)

30 
	#ETHER0
 2

	)

31 
	#NAMESPACE
 3

	)

32 
	#RDISK
 4

	)

33 
	#RAM0
 5

	)

34 
	#RFILESYS
 6

	)

35 
	#RFILE0
 7

	)

36 
	#RFILE1
 8

	)

37 
	#RFILE2
 9

	)

38 
	#RFILE3
 10

	)

39 
	#RFILE4
 11

	)

40 
	#RFILE5
 12

	)

41 
	#RFILE6
 13

	)

42 
	#RFILE7
 14

	)

43 
	#RFILE8
 15

	)

44 
	#RFILE9
 16

	)

45 
	#LFILESYS
 17

	)

46 
	#LFILE0
 18

	)

47 
	#LFILE1
 19

	)

48 
	#LFILE2
 20

	)

49 
	#LFILE3
 21

	)

50 
	#LFILE4
 22

	)

51 
	#LFILE5
 23

	)

55 
	#NnuŒ
 1

	)

56 
	#Nây
 1

	)

57 
	#Nëh
 1

	)

58 
	#Nrds
 1

	)

59 
	#Nøm
 1

	)

60 
	#Nrfs
 1

	)

61 
	#NrÊ
 10

	)

62 
	#Nlfs
 1

	)

63 
	#NlÊ
 6

	)

64 
	#N«m
 1

	)

66 
	#NDEVS
 24

	)

71 
	#NPROC
 100

	)

72 
	#NSEM
 100

	)

73 
	#IRQBASE
 32

	)

74 
	#IRQ_TIMER
 
IRQ_HW5


	)

75 
	#IRQ_ATH_MISC
 
IRQ_HW4


	)

76 
	#CLKFREQ
 200000000

	)

78 
	#LF_DISK_DEV
 
RAM0


	)

	@config/config.l

2 
löe˘r
;

3 
brkcou¡
;

4 
	gskùpög
;

6 
OCT
 0[0-7]*

7 
DEC
 [1-9][0-9]*

8 
HEX
 0x[0-9a-
fA
-
F
]+

9 
ID
 [
a
-
z_A
-
Z
][a-z_A-
Z0
-9]*

10 %% /* 
	$yyÀx
 */

11 "/*" { 
skùpög
 = 1; }

12 "*/" { 
skùpög
 = 0; }

13 "%%" { i‡(! 
skùpög
)

14 i‡(++
brkcou¡
 >= 2)

17 {  
DEFBRK
; } }

18 ":" { i‡(! 
skùpög
Ë 
COLON
; }

19 {
OCT
} { i‡(! 
skùpög
Ë 
INTEGER
; }

20 {
DEC
} { i‡(! 
skùpög
Ë 
INTEGER
; }

21 {
HEX
} { i‡(! 
skùpög
Ë 
INTEGER
; }

22 
is
 { i‡(! 
skùpög
Ë 
IS
; }

23 
⁄
 { i‡(! 
skùpög
Ë 
ON
; }

25 -?
öå
 { i‡(! 
skùpög
Ë 
INTR
; }

26 -?
c§
 { i‡(! 
skùpög
Ë 
CSR
; }

27 -?
úq
 { i‡(! 
skùpög
Ë 
IRQ
; }

28 -?
i
 { i‡(! 
skùpög
Ë 
INIT
; }

29 -?
o
 { i‡(! 
skùpög
Ë 
OPEN
; }

30 -?
c
 { i‡(! 
skùpög
Ë 
CLOSE
; }

31 -?
r
 { i‡(! 
skùpög
Ë 
READ
; }

32 -?
g
 { i‡(! 
skùpög
Ë 
GETC
; }

33 -?
p
 { i‡(! 
skùpög
Ë 
PUTC
; }

34 -?
w
 { i‡(! 
skùpög
Ë 
WRITE
; }

35 -?
s
 { i‡(! 
skùpög
Ë 
SEEK
; }

36 -?
n
 { i‡(! 
skùpög
Ë 
CONTROL
; }

37 [ \
t
]+ ;

38 "\n" { 
löe˘r
++; }

39 {
ID
} { i‡(! 
skùpög
Ë 
IDENT
; }

40 . { i‡(! 
skùpög
Ë 
yyãxt
[0]; }

	@config/config.y

12 %
tokí
 
DEFBRK
 
IFBRK
 
COLON
 
OCTAL
 
INTEGER
 
IDENT
 
CSR
 
IRQ
 
INTR
 
INIT
 
OPEN


13 
CLOSE
 
READ
 
WRITE
 
SEEK
 
CONTROL
 
IS
 
ON
 
GETC
 
PUTC


15 
	~<°dlib.h
>

16 
	~<°dio.h
>

17 
	~<°rög.h
>

18 
	~<˘y≥.h
>

20 *
yyãxt
;

28 #i‚de‡
YY_TYPEDEF_YY_SIZE_T


29 
	#YY_TYPEDEF_YY_SIZE_T


	)

30 
	tyy_size_t
;

33 
yyÀng
;

42 
	#NIL
 (
dev_ít
 *)0x00

	)

44 
	#CONFC
 "c⁄f.c"

	)

45 
	#CONFH
 "c⁄f.h"

	)

46 
	#CONFHREF
 "<c⁄f.h>"

	)

47 
	#INFILE
 "C⁄figuøti⁄"

	)

48 
	#MAXNAME
 16

	)

50 
	#NDEVS
 250

	)

51 
	#NTYPES
 250

	)

53 
	glöe˘r
 = 1;

55 
FILE
 *
	gc⁄fc
;

56 
FILE
 *
	gc⁄fh
;

58 
	gbrkcou¡
 = 0;

60 *
	gdoög
 = "deviceÅype declarations";

62 
	sdev_ít
 {

63 
	m«me
[
MAXNAME
];

64 
	mäame
[
MAXNAME
];

65 
	mis⁄
[
MAXNAME
];

66 
	mtödex
;

67 
	mc§
;

68 
	múq
;

69 
	möå
[
MAXNAME
];

70 
	möô
[
MAXNAME
];

71 
	m›í
[
MAXNAME
];

72 
	m˛o£
[
MAXNAME
];

73 
	mªad
[
MAXNAME
];

74 
	mwrôe
[
MAXNAME
];

75 
	mc⁄åﬁ
[
MAXNAME
];

76 
	m£ek
[
MAXNAME
];

77 
	mgëc
[
MAXNAME
];

78 
	mputc
[
MAXNAME
];

79 
	mmö‹
;

84 
dev_ít
 
	gdty≥s
[
NTYPES
];

85 
	g¡y≥s
 = 0;

87 
dev_ít
 
	gdevs
[
NDEVS
];

88 
	gndevs
 = 0;

90 *
	gdev°ab
[] = {

110 
NULL


113 
	gßvóârid
[
MAXNAME
];

121 
add©å
(, );

122 
addt⁄
(*);

123 
c⁄fig_©oi
(*, );

124 
devisid
(*);

125 
dev⁄id
(*);

126 
gë©åid
(*);

127 
√wdev
(*);

128 
√wty≥
(*);

129 
yyîr‹
(*);

130 
yyÀx
();

135 %% /* 
	$yy∑r£
 */ 
	`yyÀx
()

142 
c⁄figuøti⁄
: 
devty≥s
 
DEFBRK
 
devi˚s


151 
devty≥s
: { 
doög
 = "device definitions"; }

152 | 
devty≥s
 
devty≥


155 
devty≥
: 
äame
 
COLON
 
dev_éi°


158 
äame
: 
IDENT
 { 
$$
 = 
	`√wty≥
(
yyãxt
); }

161 
dev_éi°
: 
thódî
 
©å_li°


162 | 
dev_éi°
 
thódî
 
©å_li°


165 
thódî
: 
ON
 
t⁄id
 { 
$$
 = 
$2
; }

168 
t⁄id
: 
IDENT
 { 
$$
 = 
	`addt⁄
(
yyãxt
); }

171 
©å_li°
:

172 | 
©å_li°
 
©å


175 
©å
: 
CSR
 
numbî
 { 
	`add©å
(CSR, 
$2
); }

176 | 
IRQ
 
numbî
 { 
	`add©å
(IRQ, 
$2
); }

177 | 
INTR
 
id
 { 
	`add©å
(INTR, 0); }

178 | 
OPEN
 
id
 { 
	`add©å
(OPEN, 0); }

179 | 
CLOSE
 
id
 { 
	`add©å
(CLOSE, 0); }

180 | 
INIT
 
id
 { 
	`add©å
(INIT, 0); }

181 | 
GETC
 
id
 { 
	`add©å
(GETC, 0); }

182 | 
PUTC
 
id
 { 
	`add©å
(PUTC, 0); }

183 | 
READ
 
id
 { 
	`add©å
(READ, 0); }

184 | 
WRITE
 
id
 { 
	`add©å
(WRITE, 0); }

185 | 
SEEK
 
id
 { 
	`add©å
(SEEK, 0); }

186 | 
CONTROL
 
id
 { 
	`add©å
(CONTROL, 0); }

189 
id
: 
IDENT
 { 
$$
 = 0; 
	`gë©åid
(
yyãxt
); }

192 
numbî
: 
INTEGER
 { 
$$
 = 
	`c⁄fig_©oi
(
yyãxt
, 
yyÀng
); }

202 
devi˚s
: { 
doög
 = "interfaceÅypes"; }

203 | 
devi˚s
 
devi˚


206 
devi˚
: 
dhódî
 
©å_li°


209 
dhódî
: 
d«me
 
devis
 
dev⁄


212 
d«me
: 
IDENT
 { 
	`√wdev
(
yyãxt
); }

215 
devis
: 
IS
 
devisid


218 
devisid
: 
IDENT
 { 
	`devisid
(
yyãxt
); }

221 
dev⁄
: 
ON
 
dev⁄id


224 
dev⁄id
: 
IDENT
 { 
	`dev⁄id
(
yyãxt
); }

227 
	}
%%

229 
	~"Àx.yy.c
"

240 
	$maö
(
¨gc
, **
¨gv
) {

241 
n
, 
i
, 
j
, 
l
, 
fcou¡
;

242 
dev_ít
 *
s
;

243 
vîbo£
 = 0;

244 *
p
;

245 
c
;

247 i‡–
¨gc
 > 1 && (
	`°∫cmp
("-v", 
¨gv
[1], 2) == 0) ) {

248 
¨gc
--;

249 
¨gv
++;

250 
vîbo£
++;

253 i‡–
¨gc
 > 4 ) {

254 
	`Ârötf
(
°dîr
, "use: config [-v] [input_file] [conf.c] [conf.h]\n");

255 
	`exô
(1);

258 i‡(
vîbo£
Ë{ 
	`¥ötf
("Opening input file...\n"); }

260 i‡(
¨gc
 >= 2) {

261 i‡(
	`‰e›í
(
¨gv
[1], "r", 
°dö
Ë=
NULL
) {

262 
	`Ârötf
(
°dîr
, "C™'à›í %s\n", 
¨gv
[1]);

263 
	`exô
(1);

267 i‡(
	`‰e›í
(
INFILE
, "r", 
°dö
Ë=
NULL
) {

268 
	`Ârötf
(
°dîr
, "C™'à›í %s\n", 
INFILE
);

269 
	`exô
(1);

280 i‡(
vîbo£
Ë{ 
	`¥ötf
("Parsing configuration specs...\n"); }

282 i‡–(
n
 = 
	`yy∑r£
()Ë!0 ) { 
	`exô
(n); }

286 i‡(
vîbo£
Ë{ 
	`¥ötf
("Opening output files...\n"); }

288 i‡(
¨gc
 >= 3) {

289 i‡–(
c⁄fc
 = 
	`f›í
(
¨gv
[2],"w"ËË=
NULL
) {

290 
	`Ârötf
(
°dîr
, "C™'àwrôê⁄ %s\n", 
¨gv
[2]);

291 
	`exô
(1);

295 i‡–(
c⁄fc
 = 
	`f›í
(
CONFC
,"w"ËË=
NULL
) {

296 
	`Ârötf
(
°dîr
, "C™'àwrôê⁄ %s\n", 
CONFC
);

297 
	`exô
(1);

301 i‡(
¨gc
 >= 4) {

302 i‡–(
c⁄fh
 = 
	`f›í
(
¨gv
[3],"w"ËË=
NULL
) {

303 
	`Ârötf
(
°dîr
, "C™'àwrôê⁄ %s\n", 
¨gv
[3]);

304 
	`exô
(1);

308 i‡–(
c⁄fh
 = 
	`f›í
(
CONFH
,"w"ËË=
NULL
) {

309 
	`Ârötf
(
°dîr
, "C™'àwrôê⁄ %s\n", 
CONFH
);

310 
	`exô
(1);

321 
	`Ârötf
(
c⁄fh
, "/* conf.h (GENERATED FILE; DO NOT EDIT) */\n\n");

323 i‡(
vîbo£
Ë{ 
	`¥ötf
("Writing output...\n"); }

325 
	`Ârötf
(
c⁄fh
, "/* Device switchÅable declarations */\n\n");

327 
i
 = 0; (
p
 = 
dev°ab
[i]Ë!
NULL
; i++) {

328 
	`Ârötf
(
c⁄fh
, "%s\n", 
p
);

331 
	`Ârötf
(
c⁄fh
, "\n");

335 
	`Ârötf
(
c⁄fh
, "/* DeviceÇame definitions */\n\n");

336 
i
 = 0; i<
ndevs
; i++) {

337 
s
 = &
devs
[
i
];

338 
	`Ârötf
(
c⁄fh
, "#define %-20s%2d\t/*Åype %-8s */\n",

339 
s
->
«me
, 
i
, s->
äame
);

341 
	`Ârötf
(
c⁄fh
, "\n");

345 
	`Ârötf
(
c⁄fh
, "/* Control block sizes */\n\n");

346 
i
 = 0; i < 
¡y≥s
; i++) {

347 
s
 = &
dty≥s
[
i
];

348 i‡(
s
->
mö‹
 > 0) {

349 
	`Ârötf
(
c⁄fh
, "#define\tN%s\t%d\n",

350 
s
->
äame
, s->
mö‹
);

354 
	`Ârötf
(
c⁄fh
, "\n");

356 i‡(
ndevs
 > 0Ë{ 
	`Ârötf
(
c⁄fh
, "#define NDEVS %d\n",Çdevs); }

360 i‡(
brkcou¡
 >4 && 
vîbo£
) {

361 
	`¥ötf
("C›yög deföôi⁄†tÿ%s...\n", 
CONFH
);

364 i‡(
brkcou¡
 >= 2) {

365  (
c
 = 
	`öput
()) > 0) {

366 
	`putc
(
c
, 
c⁄fh
);

369 
	`f˛o£
(
c⁄fh
);

379 
	`Ârötf
(
c⁄fc
, "/* conf.c (GENERATED FILE; DO NOT EDIT) */\n\n");

380 
	`Ârötf
(
c⁄fc
, "#include <xinu.h>\n\n");

381 
	`Ârötf
(
c⁄fc
, "\n");

383 
	`Ârötf
(
c⁄fc
, "extern\tdevcall\tioerr(void);\n");

384 
	`Ârötf
(
c⁄fc
, "extern\tdevcall\tionull(void);\n\n");

387 
	`Ârötf
(
c⁄fc
, "/* Device independent I/O switch */\n\n");

388 i‡(
ndevs
 > 0)

390 
	`Ârötf
(
c⁄fc
, "struct dentry devtab[NDEVS] =\n{\n");

391 
	`Ârötf
(
c⁄fc
, "%s\n%s\n%s\n%s\n%s\n%s\n%s\n%s\n\n",

402 
i
=0; i<
ndevs
; i++) {

403 
s
 = &
devs
[
i
];

404 
	`Ârötf
(
c⁄fc
, "/* %†i†%†*/\n", 
s
->
«me
, s->
äame
);

405 
	`Ârötf
(
c⁄fc
, "\t{ %d, %d, \"%s\",\n", 
i
, 
s
->
mö‹
, s->
«me
);

406 
	`Ârötf
(
c⁄fc
, "\t (void *)%s, (void *)%s, (void *)%s,\n",

407 
s
->
öô
, s->
›í
, s->
˛o£
);

408 
	`Ârötf
(
c⁄fc
, "\t (void *)%s, (void *)%s, (void *)%s,\n",

409 
s
->
ªad
, s->
wrôe
, s->
£ek
);

410 
	`Ârötf
(
c⁄fc
, "\t (void *)%s, (void *)%s, (void *)%s,\n",

411 
s
->
gëc
, s->
putc
, s->
c⁄åﬁ
);

412 
	`Ârötf
(
c⁄fc
, "\t (void *)0x%x, (void *)%s, %d }",

413 
s
->
c§
, s->
öå
, s->
úq
);

414 i‡(
i
< 
ndevs
-1) {

415 
	`Ârötf
(
c⁄fc
, ",\n\n");

417 
	`Ârötf
(
c⁄fc
, "\n};");

422 
	`Ârötf
(
c⁄fc
, "\n");

423 
	`f˛o£
(
c⁄fc
);

426 i‡(
vîbo£
) {

427 
	`¥ötf
("C⁄figuøti⁄ com∂ëe. Numbî o‡devs=%d:\n", 
ndevs
);

428 
i
=0; i<
ndevs
; i++) {

429 
s
 = &
devs
[
i
];

430 
	`¥ötf
("Devi˚ %†(⁄ %s)\n", 
s
->
«me
, s->
is⁄
);

431 
	`¥ötf
(" csr=0x%04x, irq=0x%04x, minor=%d\n",

432 
s
->
c§
, s->
úq
, s->
mö‹
);

435 
	}
}

445 
	$add©å
(
tok
, 
vÆ
) {

446 
dev_ít
 *
s
;

447 *
c
;

449 i‡(
brkcou¡
 == 0) {

451 
s
 = &
dty≥s
[
¡y≥s
-1];

454 
s
 = &
devs
[
ndevs
-1];

457 
tok
) {

458 
CSR
: 
s
->
c§
 = 
vÆ
; ;

459 
IRQ
: 
s
->
úq
 = 
vÆ
; ;

460 
INTR
: 
	`°r˝y
(
s
->
öå
, 
ßvóârid
); ;

461 
READ
: 
	`°r˝y
(
s
->
ªad
, 
ßvóârid
); ;

462 
WRITE
: 
	`°r˝y
(
s
->
wrôe
,
ßvóârid
); ;

463 
GETC
: 
	`°r˝y
(
s
->
gëc
, 
ßvóârid
); ;

464 
PUTC
: 
	`°r˝y
(
s
->
putc
, 
ßvóârid
); ;

465 
OPEN
: 
	`°r˝y
(
s
->
›í
, 
ßvóârid
); ;

466 
CLOSE
: 
	`°r˝y
(
s
->
˛o£
,
ßvóârid
); ;

467 
INIT
: 
	`°r˝y
(
s
->
öô
, 
ßvóârid
); ;

468 
SEEK
: 
	`°r˝y
(
s
->
£ek
, 
ßvóârid
); ;

469 
CONTROL
: 
	`°r˝y
(
s
->
c⁄åﬁ
,
ßvóârid
); ;

470 : 
	`Ârötf
(
°dîr
, "InternalÉrror 1\n");

472 
	}
}

481 
	$addt⁄
(*
t⁄id
) {

482 
cuºty≥
;

484 i‡(
	`°æí
(
t⁄id
Ë>
MAXNAME
) {

485 
	`Ârötf
(
°dîr
,"string %s isÅooÜong onÜine %d\n",

486 
t⁄id
, 
löe˘r
);

487 
	`exô
(1);

489 
cuºty≥
 = 
¡y≥s
 - 1;

490 
	`°r˝y
(
dty≥s
[
cuºty≥
].
is⁄
, 
t⁄id
);

492  
cuºty≥
;

493 
	}
}

503 
	$c⁄fig_©oi
(*
p
, 
Àn
) {

504 
ba£
, 
rv
;

506 i‡(*
p
 == '0')

508 ++
p
;

509 --
Àn
;

510 i‡(*
p
 == 'x' || *p == 'X')

512 ++
p
; --
Àn
;

513 
ba£
 = 16;

517 
ba£
 = 8;

522 
ba£
 = 10;

525 
rv
 = 0;

526 ; 
Àn
 > 0; ++
p
, --len)

528 
rv
 *
ba£
;

529 i‡(
	`isdigô
(*
p
)Ë{ 
rv
 += *p - '0'; }

530 i‡(
	`isuµî
(*
p
)Ë{ 
rv
 += *p - 'A' + 10; }

531 { 
rv
 +*
p
 - 'a' + 10; }

534  
rv
;

535 
	}
}

543 
	$devisid
(*
äame
) {

544 
cuºdev
;

545 
i
;

547 i‡(
	`°æí
(
äame
Ë>
MAXNAME
) {

548 
	`Ârötf
(
°dîr
,"string %s isÅooÜong onÜine %d\n",

549 
äame
, 
löe˘r
);

550 
	`exô
(1);

554 
i
=0; i<
¡y≥s
; i++) {

555 i‡(
	`°rcmp
(
äame
, 
dty≥s
[
i
].tname) == 0) {

559 i‡(
i
 >
¡y≥s
) {

560 
	`Ârötf
(
°dîr
, "IllegalÅypeÇame %s onÜine %d\n",

561 
äame
, 
löe˘r
);

562 
	`exô
(1);

564 
cuºdev
 = 
ndevs
 - 1;

565 
	`°r˝y
(
devs
[
cuºdev
].
äame
,Åname);

568 
	}
}

578 
	$dev⁄id
(*
⁄«me
) {

579 
cuºdev
;

580 
i
;

581 
dev_ít
 *
d±r
;

582 
dev_ít
 *
çå
;

583 
tmp
[
MAXNAME
];

586 i‡(
	`°æí
(
⁄«me
Ë>
MAXNAME
) {

587 
	`Ârötf
(
°dîr
,"string %s isÅooÜong onÜine %d\n",

588 
⁄«me
, 
löe˘r
);

589 
	`exô
(1);

591 i‡(
ndevs
 <=0) {

592 
	`Ârötf
(
°dîr
,"InternalÉrror 3\n");

593 
	`exô
(1);

595 
cuºdev
 = 
ndevs
 - 1;

596 
d±r
 = &
devs
[
cuºdev
];

598 
	`°r˝y
(
d±r
->
is⁄
, 
⁄«me
);

602 
i
=0; i<
¡y≥s
; i++) {

603 
çå
 = &
dty≥s
[
i
];

604 i‡–(
	`°rcmp
(
d±r
->
äame
,
çå
->tname) == 0 ) &&

605 (
	`°rcmp
(
d±r
->
is⁄
, 
çå
->ison) == 0 ) ){

611 
	`°r˝y
(
tmp
, 
d±r
->
«me
);

612 
	`bc›y
 (
çå
, 
d±r
, (
dev_ít
));

615 
çå
->
mö‹
++;

616 
	`°r˝y
(
d±r
->
«me
, 
tmp
);

621 
	`Ârötf
(
°dîr
, "IÀagÆ devi˚ s≥cifiˇti⁄ o¿löê%d\n", 
löe˘r
);

622 
	`exô
(1);

623 
	}
}

632 
	$gë©åid
(*
°r
) {

634 i‡(
	`°æí
(
°r
Ë>
MAXNAME
) {

635 
	`Ârötf
(
°dîr
,"atribute string %s isÅooÜong onÜine %d\n",

636 
°r
, 
löe˘r
);

637 
	`exô
(1);

639 
	`°r˝y
(
ßvóârid
, 
°r
);

641 
	}
}

650 
	$√wdev
(*
«me
) {

652 
dev_ít
 *
d±r
;

653 
i
;

655 i‡(
ndevs
 >
NDEVS
) {

656 
	`Ârötf
(
°dîr
,"Toÿm™y devi˚†⁄Üöê%d", 
löe˘r
);

657 
	`exô
(1);

659 i‡(
	`°æí
(
«me
Ë>
MAXNAME
) {

660 
	`Ârötf
(
°dîr
,"DeviceÇame %s isÅooÜong onÜine %d\n",

661 
«me
, 
löe˘r
);

662 
	`exô
(1);

667 
i
=0; i<
ndevs
; i++) {

668 i‡(
	`°rcmp
(
«me
, 
devs
[
i
].name) == 0) {

669 
	`Ârötf
(
°dîr
, "Duplicate deviceÇame %s onÜine %d\n",

670 
«me
, 
löe˘r
);

671 
	`exô
(1);

675 
d±r
 = &
devs
[
ndevs
];

679 
	`bzîo
((*)
d±r
, (
dev_ít
));

680 
	`°r˝y
(
d±r
->
«me
,Çame);

681 
ndevs
++;

683 
	}
}

692 
	$√wty≥
(*
«me
) {

694 
dev_ít
 *
d±r
;

695 
i
;

697 i‡(
¡y≥s
 >
NTYPES
) {

698 
	`Ârötf
(
°dîr
,"Toÿm™yÅy≥†⁄Üöê%d", 
löe˘r
);

699 
	`exô
(1);

701 i‡(
	`°æí
(
«me
Ë>
MAXNAME
) {

702 
	`Ârötf
(
°dîr
,"TypeÇame %s isÅooÜong onÜine %d\n",

703 
«me
, 
löe˘r
);

704 
	`exô
(1);

709 
i
=0; i<
¡y≥s
; i++) {

710 i‡(
	`°rcmp
(
«me
, 
dty≥s
[
i
].
äame
) == 0) {

711 
	`Ârötf
(
°dîr
, "DuplicateÅypeÇame %s onÜine %d\n",

712 
«me
, 
löe˘r
);

713 
	`exô
(1);

717 
d±r
 = &
dty≥s
[
¡y≥s
];

721 
	`bzîo
((*)
d±r
, (
dev_ít
));

722 
	`°r˝y
(
d±r
->
äame
, 
«me
);

723 
	`°∫˝y
(
d±r
->
öå
, "ioerr", 5);

724 
	`°∫˝y
(
d±r
->
öô
, "ioerr", 5);

725 
	`°∫˝y
(
d±r
->
›í
, "ioerr", 5);

726 
	`°∫˝y
(
d±r
->
˛o£
, "ioerr", 5);

727 
	`°∫˝y
(
d±r
->
ªad
, "ioerr", 5);

728 
	`°∫˝y
(
d±r
->
wrôe
, "ioerr", 5);

729 
	`°∫˝y
(
d±r
->
c⁄åﬁ
, "ioerr", 5);

730 
	`°∫˝y
(
d±r
->
£ek
, "ioerr", 5);

731 
	`°∫˝y
(
d±r
->
gëc
, "ioerr", 5);

732 
	`°∫˝y
(
d±r
->
putc
, "ioerr", 5);

734  
¡y≥s
++;

735 
	}
}

744 
	$yyîr‹
(*
s
) {

746 
	`Ârötf
(
°dîr
, "Sy¡axÉº‹ i¿%†⁄Üöê%d\n", 
doög
, 
löe˘r
);

747 
	}
}

	@config/lex.yy.c

4 
	#YY_INT_ALIGNED
 

	)

8 
	#FLEX_SCANNER


	)

9 
	#YY_FLEX_MAJOR_VERSION
 2

	)

10 
	#YY_FLEX_MINOR_VERSION
 6

	)

11 
	#YY_FLEX_SUBMINOR_VERSION
 4

	)

12 #i‡
YY_FLEX_SUBMINOR_VERSION
 > 0

13 
	#FLEX_BETA


	)

19 
	~<°dio.h
>

20 
	~<°rög.h
>

21 
	~<î∫o.h
>

22 
	~<°dlib.h
>

28 #i‚de‡
FLEXINT_H


29 
	#FLEXINT_H


	)

33 #i‡
deföed
 (
__STDC_VERSION__
) && __STDC_VERSION__ >= 199901L

38 #i‚de‡
__STDC_LIMIT_MACROS


39 
	#__STDC_LIMIT_MACROS
 1

	)

42 
	~<öây≥s.h
>

43 
öt8_t
 
	tÊex_öt8_t
;

44 
uöt8_t
 
	tÊex_uöt8_t
;

45 
öt16_t
 
	tÊex_öt16_t
;

46 
uöt16_t
 
	tÊex_uöt16_t
;

47 
öt32_t
 
	tÊex_öt32_t
;

48 
uöt32_t
 
	tÊex_uöt32_t
;

50 sig√d 
	tÊex_öt8_t
;

51 
	tÊex_öt16_t
;

52 
	tÊex_öt32_t
;

53 
	tÊex_uöt8_t
;

54 
	tÊex_uöt16_t
;

55 
	tÊex_uöt32_t
;

58 #i‚de‡
INT8_MIN


59 
	#INT8_MIN
 (-128)

	)

61 #i‚de‡
INT16_MIN


62 
	#INT16_MIN
 (-32767-1)

	)

64 #i‚de‡
INT32_MIN


65 
	#INT32_MIN
 (-2147483647-1)

	)

67 #i‚de‡
INT8_MAX


68 
	#INT8_MAX
 (127)

	)

70 #i‚de‡
INT16_MAX


71 
	#INT16_MAX
 (32767)

	)

73 #i‚de‡
INT32_MAX


74 
	#INT32_MAX
 (2147483647)

	)

76 #i‚de‡
UINT8_MAX


77 
	#UINT8_MAX
 (255U)

	)

79 #i‚de‡
UINT16_MAX


80 
	#UINT16_MAX
 (65535U)

	)

82 #i‚de‡
UINT32_MAX


83 
	#UINT32_MAX
 (4294967295U)

	)

86 #i‚de‡
SIZE_MAX


87 
	#SIZE_MAX
 (~(
size_t
)0)

	)

97 
	#yyc⁄°
 c⁄°

	)

99 #i‡
deföed
(
__GNUC__
) && __GNUC__ >= 3

100 
	#yyn‹ëu∫
 
	`__©åibuã__
((
__n‹ëu∫__
))

	)

102 
	#yyn‹ëu∫


	)

106 
	#YY_NULL
 0

	)

111 
	#YY_SC_TO_UI
(
c
Ë((
YY_CHAR
Ë(c))

	)

117 
	#BEGIN
 (
yy_°¨t
Ë1 + 2 *

	)

122 
	#YY_START
 (((
yy_°¨t
Ë- 1Ë/ 2)

	)

123 
	#YYSTATE
 
YY_START


	)

125 
	#YY_STATE_EOF
(
°©e
Ë(
YY_END_OF_BUFFER
 + sèã + 1)

	)

127 
	#YY_NEW_FILE
 
	`yyª°¨t
–
yyö
 )

	)

128 
	#YY_END_OF_BUFFER_CHAR
 0

	)

131 #i‚de‡
YY_BUF_SIZE


132 #ifde‡
__ü64__


137 
	#YY_BUF_SIZE
 32768

	)

139 
	#YY_BUF_SIZE
 16384

	)

145 
	#YY_STATE_BUF_SIZE
 ((
YY_BUF_SIZE
 + 2Ë* (
yy_°©e_ty≥
))

	)

147 #i‚de‡
YY_TYPEDEF_YY_BUFFER_STATE


148 
	#YY_TYPEDEF_YY_BUFFER_STATE


	)

149 
yy_buf„r_°©e
 *
	tYY_BUFFER_STATE
;

152 #i‚de‡
YY_TYPEDEF_YY_SIZE_T


153 
	#YY_TYPEDEF_YY_SIZE_T


	)

154 
size_t
 
	tyy_size_t
;

157 
yyÀng
;

159 
FILE
 *
yyö
, *
yyout
;

161 
	#EOB_ACT_CONTINUE_SCAN
 0

	)

162 
	#EOB_ACT_END_OF_FILE
 1

	)

163 
	#EOB_ACT_LAST_MATCH
 2

	)

165 
	#YY_LESS_LINENO
(
n
)

	)

166 
	#YY_LINENO_REWIND_TO
(
±r
)

	)

169 
	#yyÀss
(
n
) \

173 
yyÀss_ma¸o_¨g
 = (
n
); \

174 
	`YY_LESS_LINENO
(
yyÀss_ma¸o_¨g
);\

175 *
yy_˝
 = (
yy_hﬁd_ch¨
); \

176 
YY_RESTORE_YY_MORE_OFFSET
 \

177 (
yy_c_buf_p
Ë
yy_˝
 = 
yy_bp
 + 
yyÀss_ma¸o_¨g
 - 
YY_MORE_ADJ
; \

178 
YY_DO_BEFORE_ACTION
; \

180  0 )

	)

181 
	#u≈ut
(
c
Ë
	`yyu≈ut
–c, (
yyãxt_±r
Ë)

	)

183 #i‚de‡
YY_STRUCT_YY_BUFFER_STATE


184 
	#YY_STRUCT_YY_BUFFER_STATE


	)

185 
	syy_buf„r_°©e


187 
FILE
 *
	myy_öput_fûe
;

189 *
	myy_ch_buf
;

190 *
	myy_buf_pos
;

195 
	myy_buf_size
;

200 
	myy_n_ch¨s
;

206 
	myy_is_our_buf„r
;

213 
	myy_is_öãø˘ive
;

219 
	myy_©_bﬁ
;

221 
	myy_bs_löío
;

222 
	myy_bs_cﬁumn
;

227 
	myy_fûl_buf„r
;

229 
	myy_buf„r_°©us
;

231 
	#YY_BUFFER_NEW
 0

	)

232 
	#YY_BUFFER_NORMAL
 1

	)

243 
	#YY_BUFFER_EOF_PENDING
 2

	)

249 
size_t
 
	gyy_buf„r_°ack_t›
 = 0;

250 
size_t
 
	gyy_buf„r_°ack_max
 = 0;

251 
YY_BUFFER_STATE
 * 
	gyy_buf„r_°ack
 = 
NULL
;

259 
	#YY_CURRENT_BUFFER
 ( (
yy_buf„r_°ack
) \

260 ? (
yy_buf„r_°ack
)[(
yy_buf„r_°ack_t›
)] \

261 : 
NULL
)

	)

265 
	#YY_CURRENT_BUFFER_LVALUE
 (
yy_buf„r_°ack
)[(
yy_buf„r_°ack_t›
)]

	)

268 
	gyy_hﬁd_ch¨
;

269 
	gyy_n_ch¨s
;

270 
	gyyÀng
;

273 *
	gyy_c_buf_p
 = 
NULL
;

274 
	gyy_öô
 = 0;

275 
	gyy_°¨t
 = 0;

280 
	gyy_did_buf„r_swôch_⁄_eof
;

282 
yyª°¨t
 ( 
FILE
 *
öput_fûe
 );

283 
yy_swôch_to_buf„r
 ( 
YY_BUFFER_STATE
 
√w_buf„r
 );

284 
YY_BUFFER_STATE
 
yy_¸óã_buf„r
 ( 
FILE
 *
fûe
, 
size
 );

285 
yy_dñëe_buf„r
 ( 
YY_BUFFER_STATE
 
b
 );

286 
yy_Êush_buf„r
 ( 
YY_BUFFER_STATE
 
b
 );

287 
yypush_buf„r_°©e
 ( 
YY_BUFFER_STATE
 
√w_buf„r
 );

288 
yyp›_buf„r_°©e
 ( );

290 
yyísuª_buf„r_°ack
 ( );

291 
yy_lﬂd_buf„r_°©e
 ( );

292 
yy_öô_buf„r
 ( 
YY_BUFFER_STATE
 
b
, 
FILE
 *
fûe
 );

293 
	#YY_FLUSH_BUFFER
 
	`yy_Êush_buf„r
–
YY_CURRENT_BUFFER
 )

	)

295 
YY_BUFFER_STATE
 
yy_sˇn_buf„r
 ( *
ba£
, 
yy_size_t
 
size
 );

296 
YY_BUFFER_STATE
 
yy_sˇn_°rög
 ( c⁄° *
yy_°r
 );

297 
YY_BUFFER_STATE
 
yy_sˇn_byãs
 ( c⁄° *
byãs
, 
Àn
 );

299 *
yyÆloc
 ( 
yy_size_t
 );

300 *
yyªÆloc
 ( *, 
yy_size_t
 );

301 
yy‰ì
 ( * );

303 
	#yy_√w_buf„r
 
yy_¸óã_buf„r


	)

304 
	#yy_£t_öãø˘ive
(
is_öãø˘ive
) \

306 i‡–! 
YY_CURRENT_BUFFER
 ){ \

307 
	`yyísuª_buf„r_°ack
 (); \

308 
YY_CURRENT_BUFFER_LVALUE
 = \

309 
	`yy_¸óã_buf„r
–
yyö
, 
YY_BUF_SIZE
 ); \

311 
YY_CURRENT_BUFFER_LVALUE
->
yy_is_öãø˘ive
 = 
is_öãø˘ive
; \

312 }

	)

313 
	#yy_£t_bﬁ
(
©_bﬁ
) \

315 i‡–! 
YY_CURRENT_BUFFER
 ){\

316 
	`yyísuª_buf„r_°ack
 (); \

317 
YY_CURRENT_BUFFER_LVALUE
 = \

318 
	`yy_¸óã_buf„r
–
yyö
, 
YY_BUF_SIZE
 ); \

320 
YY_CURRENT_BUFFER_LVALUE
->
yy_©_bﬁ
 = 
©_bﬁ
; \

321 }

	)

322 
	#YY_AT_BOL
(Ë(
YY_CURRENT_BUFFER_LVALUE
->
yy_©_bﬁ
)

	)

324 
Êex_uöt8_t
 
	tYY_CHAR
;

326 
FILE
 *
	gyyö
 = 
NULL
, *
	gyyout
 = NULL;

328 
	tyy_°©e_ty≥
;

330 
yylöío
;

331 
	gyylöío
 = 1;

333 *
yyãxt
;

334 #ifde‡
yyãxt_±r


335 #unde‡
yyãxt_±r


337 
	#yyãxt_±r
 
yyãxt


	)

339 
yy_°©e_ty≥
 
yy_gë_¥evious_°©e
 ( );

340 
yy_°©e_ty≥
 
yy_åy_NUL_å™s
 ( yy_°©e_ty≥ 
cuºít_°©e
 );

341 
yy_gë_√xt_buf„r
 ( );

342 
yyn‹ëu∫
 
yy_Áèl_îr‹
 ( c⁄° * 
msg
 );

347 
	#YY_DO_BEFORE_ACTION
 \

348 (
yyãxt_±r
Ë
yy_bp
; \

349 
yyÀng
 = (Ë(
yy_˝
 - 
yy_bp
); \

350 (
yy_hﬁd_ch¨
Ë*
yy_˝
; \

351 *
yy_˝
 = '\0'; \

352 (
yy_c_buf_p
Ë
yy_˝
;

	)

353 
	#YY_NUM_RULES
 27

	)

354 
	#YY_END_OF_BUFFER
 28

	)

357 
	syy_å™s_öfo


359 
Êex_öt32_t
 
	myy_vîify
;

360 
Êex_öt32_t
 
	myy_nxt
;

362 c⁄° 
Êex_öt16_t
 
	gyy_ac˚±
[60] =

372 c⁄° 
YY_CHAR
 
	gyy_ec
[256] =

404 c⁄° 
YY_CHAR
 
	gyy_mëa
[27] =

411 c⁄° 
Êex_öt16_t
 
	gyy_ba£
[62] =

422 c⁄° 
Êex_öt16_t
 
	gyy_def
[62] =

433 c⁄° 
Êex_öt16_t
 
	gyy_nxt
[99] =

448 c⁄° 
Êex_öt16_t
 
	gyy_chk
[99] =

463 
yy_°©e_ty≥
 
	gyy_œ°_ac˚±ög_°©e
;

464 *
	gyy_œ°_ac˚±ög_˝os
;

466 
yy_Êex_debug
;

467 
	gyy_Êex_debug
 = 0;

472 
	#REJECT
 
ªje˘_u£d_but_nŸ_dëe˘ed


	)

473 
	#yym‹e
(Ë
yym‹e_u£d_but_nŸ_dëe˘ed


	)

474 
	#YY_MORE_ADJ
 0

	)

475 
	#YY_RESTORE_YY_MORE_OFFSET


	)

476 *
	gyyãxt
;

479 
löe˘r
;

480 
brkcou¡
;

481 
	gskùpög
;

485 
	#INITIAL
 0

	)

487 #i‚de‡
YY_NO_UNISTD_H


492 
	~<uni°d.h
>

495 #i‚de‡
YY_EXTRA_TYPE


496 
	#YY_EXTRA_TYPE
 *

	)

499 
yy_öô_globÆs
 ( );

504 
yyÀx_de°roy
 ( );

506 
yygë_debug
 ( );

508 
yy£t_debug
 ( 
debug_Êag
 );

510 
YY_EXTRA_TYPE
 
yygë_exåa
 ( );

512 
yy£t_exåa
 ( 
YY_EXTRA_TYPE
 
u£r_deföed
 );

514 
FILE
 *
yygë_ö
 ( );

516 
yy£t_ö
 ( 
FILE
 * 
_ö_°r
 );

518 
FILE
 *
yygë_out
 ( );

520 
yy£t_out
 ( 
FILE
 * 
_out_°r
 );

522 
yygë_Àng
 ( );

524 *
yygë_ãxt
 ( );

526 
yygë_löío
 ( );

528 
yy£t_löío
 ( 
_löe_numbî
 );

534 #i‚de‡
YY_SKIP_YYWRAP


535 #ifde‡
__˝lu•lus


536 "C" 
yywøp
 ( );

538 
yywøp
 ( );

542 #i‚de‡
YY_NO_UNPUT


544 
yyu≈ut
 ( 
c
, *
buf_±r
 );

548 #i‚de‡
yyãxt_±r


549 
yy_Êex_°∫˝y
 ( *, const *, );

552 #ifde‡
YY_NEED_STRLEN


553 
yy_Êex_°æí
 ( const * );

556 #i‚de‡
YY_NO_INPUT


557 #ifde‡
__˝lu•lus


558 
yyöput
 ( );

560 
öput
 ( );

566 #i‚de‡
YY_READ_BUF_SIZE


567 #ifde‡
__ü64__


569 
	#YY_READ_BUF_SIZE
 16384

	)

571 
	#YY_READ_BUF_SIZE
 8192

	)

576 #i‚de‡
ECHO


580 
	#ECHO
 dÿ{ i‡(
	`fwrôe
–
yyãxt
, (
size_t
Ë
yyÀng
, 1, 
yyout
 )Ë{} } 0)

	)

586 #i‚de‡
YY_INPUT


587 
	#YY_INPUT
(
buf
,
ªsu…
,
max_size
) \

588 i‡–
YY_CURRENT_BUFFER_LVALUE
->
yy_is_öãø˘ive
 ) \

590 
c
 = '*'; \

591 
n
; \

592  
n
 = 0;Ç < 
max_size
 && \

593 (
c
 = 
	`gëc
–
yyö
 )Ë!
EOF
 && c !'\n'; ++
n
 ) \

594 
buf
[
n
] = (Ë
c
; \

595 i‡–
c
 == '\n' ) \

596 
buf
[
n
++] = (Ë
c
; \

597 i‡–
c
 =
EOF
 && 
	`„º‹
–
yyö
 ) ) \

598 
	`YY_FATAL_ERROR
( "input in flex scanner failed" ); \

599 
ªsu…
 = 
n
; \

603 
î∫o
=0; \

604  (
ªsu…
 = (Ë
	`‰ód
(
buf
, 1, (
yy_size_t
Ë
max_size
, 
yyö
)Ë=0 && 
	`„º‹
(yyin)) \

606 if–
î∫o
 !
EINTR
) \

608 
	`YY_FATAL_ERROR
( "input in flex scanner failed" ); \

611 
î∫o
=0; \

612 
	`˛óªº
(
yyö
); \

616 

	)

623 #i‚de‡
yyãrmö©e


624 
	#yyãrmö©e
(Ë 
YY_NULL


	)

628 #i‚de‡
YY_START_STACK_INCR


629 
	#YY_START_STACK_INCR
 25

	)

633 #i‚de‡
YY_FATAL_ERROR


634 
	#YY_FATAL_ERROR
(
msg
Ë
	`yy_Áèl_îr‹
–msg )

	)

642 #i‚de‡
YY_DECL


643 
	#YY_DECL_IS_OURS
 1

	)

645 
yyÀx
 ();

647 
	#YY_DECL
 
	`yyÀx
 ()

	)

653 #i‚de‡
YY_USER_ACTION


654 
	#YY_USER_ACTION


	)

658 #i‚de‡
YY_BREAK


659 
	#YY_BREAK
 ;

	)

662 
	#YY_RULE_SETUP
 \

663 
YY_USER_ACTION


	)

667 
	gYY_DECL


669 
yy_°©e_ty≥
 
	gyy_cuºít_°©e
;

670 *
	gyy_˝
, *
	gyy_bp
;

671 
	gyy_a˘
;

673 i‡–!(
	gyy_öô
) )

675 (
	gyy_öô
) = 1;

677 #ifde‡
YY_USER_INIT


678 
	gYY_USER_INIT
;

681 i‡–! (
	gyy_°¨t
) )

682 (
	gyy_°¨t
) = 1;

684 i‡–! 
	gyyö
 )

685 
	gyyö
 = 
°dö
;

687 i‡–! 
	gyyout
 )

688 
	gyyout
 = 
°dout
;

690 i‡–! 
	gYY_CURRENT_BUFFER
 ) {

691 
yyísuª_buf„r_°ack
 ();

692 
	gYY_CURRENT_BUFFER_LVALUE
 =

693 
yy_¸óã_buf„r
–
yyö
, 
YY_BUF_SIZE
 );

696 
yy_lﬂd_buf„r_°©e
( );

706 
	gyy_˝
 = (
yy_c_buf_p
);

709 *
	gyy_˝
 = (
yy_hﬁd_ch¨
);

714 
	gyy_bp
 = 
yy_˝
;

716 
	gyy_cuºít_°©e
 = (
yy_°¨t
);

717 
	gyy_m©ch
:

720 
YY_CHAR
 
yy_c
 = 
yy_ec
[
YY_SC_TO_UI
(*
yy_˝
)] ;

721 i‡–
	gyy_ac˚±
[
yy_cuºít_°©e
] )

723 (
	gyy_œ°_ac˚±ög_°©e
Ë
yy_cuºít_°©e
;

724 (
	gyy_œ°_ac˚±ög_˝os
Ë
yy_˝
;

726  
	gyy_chk
[
yy_ba£
[
yy_cuºít_°©e
] + 
	gyy_c
] != yy_current_state )

728 
yy_cuºít_°©e
 = (Ë
yy_def
[yy_current_state];

729 i‡–
	gyy_cuºít_°©e
 >= 60 )

730 
yy_c
 = 
yy_mëa
[yy_c];

732 
	gyy_cuºít_°©e
 = 
yy_nxt
[
yy_ba£
[
yy_cuºít_°©e
] + 
yy_c
];

733 ++
	gyy_˝
;

735  
	gyy_ba£
[
yy_cuºít_°©e
] != 72 );

737 
	gyy_föd_a˘i⁄
:

738 
yy_a˘
 = 
yy_ac˚±
[
yy_cuºít_°©e
];

739 i‡–
	gyy_a˘
 == 0 )

741 
yy_˝
 = (
yy_œ°_ac˚±ög_˝os
);

742 
	gyy_cuºít_°©e
 = (
yy_œ°_ac˚±ög_°©e
);

743 
	gyy_a˘
 = 
yy_ac˚±
[
yy_cuºít_°©e
];

746 
	gYY_DO_BEFORE_ACTION
;

748 
	gdo_a˘i⁄
:

750  
yy_a˘
 )

754 *
yy_˝
 = (
yy_hﬁd_ch¨
);

755 
	gyy_˝
 = (
yy_œ°_ac˚±ög_˝os
);

756 
	gyy_cuºít_°©e
 = (
yy_œ°_ac˚±ög_°©e
);

757 
	gyy_föd_a˘i⁄
;

760 
YY_RULE_SETUP


762 { 
skùpög
 = 1; }

763 
YY_BREAK


765 
YY_RULE_SETUP


767 { 
skùpög
 = 0; }

768 
YY_BREAK


770 
YY_RULE_SETUP


772 { i‡(! 
skùpög
)

773 i‡(++
brkcou¡
 >= 2)

776 {  
	gDEFBRK
; } }

777 
YY_BREAK


779 
YY_RULE_SETUP


781 { i‡(! 
skùpög
Ë 
COLON
; }

782 
YY_BREAK


784 
YY_RULE_SETUP


786 { i‡(! 
skùpög
Ë 
INTEGER
; }

787 
YY_BREAK


789 
YY_RULE_SETUP


791 { i‡(! 
skùpög
Ë 
INTEGER
; }

792 
YY_BREAK


794 
YY_RULE_SETUP


796 { i‡(! 
skùpög
Ë 
INTEGER
; }

797 
YY_BREAK


799 
YY_RULE_SETUP


801 { i‡(! 
skùpög
Ë 
IS
; }

802 
YY_BREAK


804 
YY_RULE_SETUP


806 { i‡(! 
skùpög
Ë 
ON
; }

807 
YY_BREAK


809 
YY_RULE_SETUP


812 
YY_BREAK


814 
YY_RULE_SETUP


816 { i‡(! 
skùpög
Ë 
INTR
; }

817 
YY_BREAK


819 
YY_RULE_SETUP


821 { i‡(! 
skùpög
Ë 
CSR
; }

822 
YY_BREAK


824 
YY_RULE_SETUP


826 { i‡(! 
skùpög
Ë 
IRQ
; }

827 
YY_BREAK


829 
YY_RULE_SETUP


831 { i‡(! 
skùpög
Ë 
INIT
; }

832 
YY_BREAK


834 
YY_RULE_SETUP


836 { i‡(! 
skùpög
Ë 
OPEN
; }

837 
YY_BREAK


839 
YY_RULE_SETUP


841 { i‡(! 
skùpög
Ë 
CLOSE
; }

842 
YY_BREAK


844 
YY_RULE_SETUP


846 { i‡(! 
skùpög
Ë 
READ
; }

847 
YY_BREAK


849 
YY_RULE_SETUP


851 { i‡(! 
skùpög
Ë 
GETC
; }

852 
YY_BREAK


854 
YY_RULE_SETUP


856 { i‡(! 
skùpög
Ë 
PUTC
; }

857 
YY_BREAK


859 
YY_RULE_SETUP


861 { i‡(! 
skùpög
Ë 
WRITE
; }

862 
YY_BREAK


864 
YY_RULE_SETUP


866 { i‡(! 
skùpög
Ë 
SEEK
; }

867 
YY_BREAK


869 
YY_RULE_SETUP


871 { i‡(! 
skùpög
Ë 
CONTROL
; }

872 
YY_BREAK


874 
YY_RULE_SETUP


877 
YY_BREAK


880 
YY_RULE_SETUP


882 { 
löe˘r
++; }

883 
YY_BREAK


885 
YY_RULE_SETUP


887 { i‡(! 
skùpög
Ë 
IDENT
; }

888 
YY_BREAK


890 
YY_RULE_SETUP


892 { i‡(! 
skùpög
Ë 
yyãxt
[0]; }

893 
YY_BREAK


895 
YY_RULE_SETUP


897 
ECHO
;

898 
	gYY_BREAK


900 
YY_STATE_EOF
(
INITIAL
):

901 
yyãrmö©e
();

903 
	gYY_END_OF_BUFFER
:

906 
yy_amou¡_of_m©ched_ãxt
 = (Ë(
yy_˝
 - (
yyãxt_±r
)) - 1;

909 *
	gyy_˝
 = (
yy_hﬁd_ch¨
);

910 
YY_RESTORE_YY_MORE_OFFSET


912 i‡–
	gYY_CURRENT_BUFFER_LVALUE
->
	gyy_buf„r_°©us
 =
YY_BUFFER_NEW
 )

923 (
yy_n_ch¨s
Ë
YY_CURRENT_BUFFER_LVALUE
->yy_n_chars;

924 
	gYY_CURRENT_BUFFER_LVALUE
->
	gyy_öput_fûe
 = 
yyö
;

925 
	gYY_CURRENT_BUFFER_LVALUE
->
	gyy_buf„r_°©us
 = 
YY_BUFFER_NORMAL
;

935 i‡–(
	gyy_c_buf_p
Ë<&
YY_CURRENT_BUFFER_LVALUE
->
yy_ch_buf
[(
yy_n_ch¨s
)] )

937 
yy_°©e_ty≥
 
yy_√xt_°©e
;

939 (
	gyy_c_buf_p
Ë(
yyãxt_±r
Ë+ 
yy_amou¡_of_m©ched_ãxt
;

941 
	gyy_cuºít_°©e
 = 
yy_gë_¥evious_°©e
( );

952 
	gyy_√xt_°©e
 = 
yy_åy_NUL_å™s
–
yy_cuºít_°©e
 );

954 
	gyy_bp
 = (
yyãxt_±r
Ë+ 
YY_MORE_ADJ
;

956 i‡–
	gyy_√xt_°©e
 )

959 
	gyy_˝
 = ++(
yy_c_buf_p
);

960 
	gyy_cuºít_°©e
 = 
yy_√xt_°©e
;

961 
	gyy_m©ch
;

966 
	gyy_˝
 = (
yy_c_buf_p
);

967 
	gyy_föd_a˘i⁄
;

971  
yy_gë_√xt_buf„r
( ) )

973 
	gEOB_ACT_END_OF_FILE
:

975 (
yy_did_buf„r_swôch_⁄_eof
) = 0;

977 i‡–
yywøp
( ) )

988 (
	gyy_c_buf_p
Ë(
yyãxt_±r
Ë+ 
YY_MORE_ADJ
;

990 
	gyy_a˘
 = 
YY_STATE_EOF
(
YY_START
);

991 
	gdo_a˘i⁄
;

996 i‡–! (
	gyy_did_buf„r_swôch_⁄_eof
) )

997 
	gYY_NEW_FILE
;

1002 
	gEOB_ACT_CONTINUE_SCAN
:

1003 (
yy_c_buf_p
) =

1004 (
yyãxt_±r
Ë+ 
yy_amou¡_of_m©ched_ãxt
;

1006 
	gyy_cuºít_°©e
 = 
yy_gë_¥evious_°©e
( );

1008 
	gyy_˝
 = (
yy_c_buf_p
);

1009 
	gyy_bp
 = (
yyãxt_±r
Ë+ 
YY_MORE_ADJ
;

1010 
	gyy_m©ch
;

1012 
	gEOB_ACT_LAST_MATCH
:

1013 (
yy_c_buf_p
) =

1014 &
YY_CURRENT_BUFFER_LVALUE
->
yy_ch_buf
[(
yy_n_ch¨s
)];

1016 
	gyy_cuºít_°©e
 = 
yy_gë_¥evious_°©e
( );

1018 
	gyy_˝
 = (
yy_c_buf_p
);

1019 
	gyy_bp
 = (
yyãxt_±r
Ë+ 
YY_MORE_ADJ
;

1020 
	gyy_föd_a˘i⁄
;

1026 
YY_FATAL_ERROR
(

1040 
	$yy_gë_√xt_buf„r
 ()

1042 *
de°
 = 
YY_CURRENT_BUFFER_LVALUE
->
yy_ch_buf
;

1043 *
sour˚
 = (
yyãxt_±r
);

1044 
numbî_to_move
, 
i
;

1045 
ªt_vÆ
;

1047 i‡–(
yy_c_buf_p
Ë> &
YY_CURRENT_BUFFER_LVALUE
->
yy_ch_buf
[(
yy_n_ch¨s
) + 1] )

1048 
	`YY_FATAL_ERROR
(

1051 i‡–
YY_CURRENT_BUFFER_LVALUE
->
yy_fûl_buf„r
 == 0 )

1053 i‡–(
yy_c_buf_p
Ë- (
yyãxt_±r
Ë- 
YY_MORE_ADJ
 == 1 )

1058  
EOB_ACT_END_OF_FILE
;

1066  
EOB_ACT_LAST_MATCH
;

1073 
numbî_to_move
 = (Ë((
yy_c_buf_p
Ë- (
yyãxt_±r
) - 1);

1075  
i
 = 0; i < 
numbî_to_move
; ++i )

1076 *(
de°
++Ë*(
sour˚
++);

1078 i‡–
YY_CURRENT_BUFFER_LVALUE
->
yy_buf„r_°©us
 =
YY_BUFFER_EOF_PENDING
 )

1082 
YY_CURRENT_BUFFER_LVALUE
->
yy_n_ch¨s
 = (yy_n_chars) = 0;

1086 
num_to_ªad
 =

1087 
YY_CURRENT_BUFFER_LVALUE
->
yy_buf_size
 - 
numbî_to_move
 - 1;

1089  
num_to_ªad
 <= 0 )

1093 
YY_BUFFER_STATE
 
b
 = 
YY_CURRENT_BUFFER_LVALUE
;

1095 
yy_c_buf_p_off£t
 =

1096 (Ë((
yy_c_buf_p
Ë- 
b
->
yy_ch_buf
);

1098 i‡–
b
->
yy_is_our_buf„r
 )

1100 
√w_size
 = 
b
->
yy_buf_size
 * 2;

1102 i‡–
√w_size
 <= 0 )

1103 
b
->
yy_buf_size
 += b->yy_buf_size / 8;

1105 
b
->
yy_buf_size
 *= 2;

1107 
b
->
yy_ch_buf
 = (*)

1109 
	`yyªÆloc
–(*Ë
b
->
yy_ch_buf
,

1110 (
yy_size_t
Ë(
b
->
yy_buf_size
 + 2) );

1114 
b
->
yy_ch_buf
 = 
NULL
;

1116 i‡–! 
b
->
yy_ch_buf
 )

1117 
	`YY_FATAL_ERROR
(

1120 (
yy_c_buf_p
Ë&
b
->
yy_ch_buf
[
yy_c_buf_p_off£t
];

1122 
num_to_ªad
 = 
YY_CURRENT_BUFFER_LVALUE
->
yy_buf_size
 -

1123 
numbî_to_move
 - 1;

1127 i‡–
num_to_ªad
 > 
YY_READ_BUF_SIZE
 )

1128 
num_to_ªad
 = 
YY_READ_BUF_SIZE
;

1131 
	`YY_INPUT
–(&
YY_CURRENT_BUFFER_LVALUE
->
yy_ch_buf
[
numbî_to_move
]),

1132 (
yy_n_ch¨s
), 
num_to_ªad
 );

1134 
YY_CURRENT_BUFFER_LVALUE
->
yy_n_ch¨s
 = (yy_n_chars);

1137 i‡–(
yy_n_ch¨s
) == 0 )

1139 i‡–
numbî_to_move
 =
YY_MORE_ADJ
 )

1141 
ªt_vÆ
 = 
EOB_ACT_END_OF_FILE
;

1142 
	`yyª°¨t
–
yyö
 );

1147 
ªt_vÆ
 = 
EOB_ACT_LAST_MATCH
;

1148 
YY_CURRENT_BUFFER_LVALUE
->
yy_buf„r_°©us
 =

1149 
YY_BUFFER_EOF_PENDING
;

1154 
ªt_vÆ
 = 
EOB_ACT_CONTINUE_SCAN
;

1156 i‡(((
yy_n_ch¨s
Ë+ 
numbî_to_move
Ë> 
YY_CURRENT_BUFFER_LVALUE
->
yy_buf_size
) {

1158 
√w_size
 = (
yy_n_ch¨s
Ë+ 
numbî_to_move
 + ((yy_n_chars) >> 1);

1159 
YY_CURRENT_BUFFER_LVALUE
->
yy_ch_buf
 = (*Ë
	`yyªÆloc
(

1160 (*Ë
YY_CURRENT_BUFFER_LVALUE
->
yy_ch_buf
, (
yy_size_t
Ë
√w_size
 );

1161 i‡–! 
YY_CURRENT_BUFFER_LVALUE
->
yy_ch_buf
 )

1162 
	`YY_FATAL_ERROR
( "out of dynamic memory in yy_get_next_buffer()" );

1164 
YY_CURRENT_BUFFER_LVALUE
->
yy_buf_size
 = (Ë(
√w_size
 - 2);

1167 (
yy_n_ch¨s
Ë+
numbî_to_move
;

1168 
YY_CURRENT_BUFFER_LVALUE
->
yy_ch_buf
[(
yy_n_ch¨s
)] = 
YY_END_OF_BUFFER_CHAR
;

1169 
YY_CURRENT_BUFFER_LVALUE
->
yy_ch_buf
[(
yy_n_ch¨s
Ë+ 1] = 
YY_END_OF_BUFFER_CHAR
;

1171 (
yyãxt_±r
Ë&
YY_CURRENT_BUFFER_LVALUE
->
yy_ch_buf
[0];

1173  
ªt_vÆ
;

1174 
	}
}

1178 
yy_°©e_ty≥
 
	$yy_gë_¥evious_°©e
 ()

1180 
yy_°©e_ty≥
 
yy_cuºít_°©e
;

1181 *
yy_˝
;

1183 
yy_cuºít_°©e
 = (
yy_°¨t
);

1185  
yy_˝
 = (
yyãxt_±r
Ë+ 
YY_MORE_ADJ
; yy_˝ < (
yy_c_buf_p
); ++yy_cp )

1187 
YY_CHAR
 
yy_c
 = (*
yy_˝
 ? 
yy_ec
[
	`YY_SC_TO_UI
(*yy_cp)] : 1);

1188 i‡–
yy_ac˚±
[
yy_cuºít_°©e
] )

1190 (
yy_œ°_ac˚±ög_°©e
Ë
yy_cuºít_°©e
;

1191 (
yy_œ°_ac˚±ög_˝os
Ë
yy_˝
;

1193  
yy_chk
[
yy_ba£
[
yy_cuºít_°©e
] + 
yy_c
] != yy_current_state )

1195 
yy_cuºít_°©e
 = (Ë
yy_def
[yy_current_state];

1196 i‡–
yy_cuºít_°©e
 >= 60 )

1197 
yy_c
 = 
yy_mëa
[yy_c];

1199 
yy_cuºít_°©e
 = 
yy_nxt
[
yy_ba£
[yy_cuºít_°©e] + 
yy_c
];

1202  
yy_cuºít_°©e
;

1203 
	}
}

1210 
yy_°©e_ty≥
 
	$yy_åy_NUL_å™s
 (
yy_°©e_ty≥
 
yy_cuºít_°©e
 )

1212 
yy_is_jam
;

1213 *
yy_˝
 = (
yy_c_buf_p
);

1215 
YY_CHAR
 
yy_c
 = 1;

1216 i‡–
yy_ac˚±
[
yy_cuºít_°©e
] )

1218 (
yy_œ°_ac˚±ög_°©e
Ë
yy_cuºít_°©e
;

1219 (
yy_œ°_ac˚±ög_˝os
Ë
yy_˝
;

1221  
yy_chk
[
yy_ba£
[
yy_cuºít_°©e
] + 
yy_c
] != yy_current_state )

1223 
yy_cuºít_°©e
 = (Ë
yy_def
[yy_current_state];

1224 i‡–
yy_cuºít_°©e
 >= 60 )

1225 
yy_c
 = 
yy_mëa
[yy_c];

1227 
yy_cuºít_°©e
 = 
yy_nxt
[
yy_ba£
[yy_cuºít_°©e] + 
yy_c
];

1228 
yy_is_jam
 = (
yy_cuºít_°©e
 == 59);

1230  
yy_is_jam
 ? 0 : 
yy_cuºít_°©e
;

1231 
	}
}

1233 #i‚de‡
YY_NO_UNPUT


1235 
	$yyu≈ut
 (
c
, * 
yy_bp
 )

1237 *
yy_˝
;

1239 
yy_˝
 = (
yy_c_buf_p
);

1242 *
yy_˝
 = (
yy_hﬁd_ch¨
);

1244 i‡–
yy_˝
 < 
YY_CURRENT_BUFFER_LVALUE
->
yy_ch_buf
 + 2 )

1247 
numbî_to_move
 = (
yy_n_ch¨s
) + 2;

1248 *
de°
 = &
YY_CURRENT_BUFFER_LVALUE
->
yy_ch_buf
[

1249 
YY_CURRENT_BUFFER_LVALUE
->
yy_buf_size
 + 2];

1250 *
sour˚
 =

1251 &
YY_CURRENT_BUFFER_LVALUE
->
yy_ch_buf
[
numbî_to_move
];

1253  
sour˚
 > 
YY_CURRENT_BUFFER_LVALUE
->
yy_ch_buf
 )

1254 *--
de°
 = *--
sour˚
;

1256 
yy_˝
 +(Ë(
de°
 - 
sour˚
);

1257 
yy_bp
 +(Ë(
de°
 - 
sour˚
);

1258 
YY_CURRENT_BUFFER_LVALUE
->
yy_n_ch¨s
 =

1259 (
yy_n_ch¨s
Ë(Ë
YY_CURRENT_BUFFER_LVALUE
->
yy_buf_size
;

1261 i‡–
yy_˝
 < 
YY_CURRENT_BUFFER_LVALUE
->
yy_ch_buf
 + 2 )

1262 
	`YY_FATAL_ERROR
( "flex scannerÖush-back overflow" );

1265 *--
yy_˝
 = (Ë
c
;

1267 (
yyãxt_±r
Ë
yy_bp
;

1268 (
yy_hﬁd_ch¨
Ë*
yy_˝
;

1269 (
yy_c_buf_p
Ë
yy_˝
;

1270 
	}
}

1274 #i‚de‡
YY_NO_INPUT


1275 #ifde‡
__˝lu•lus


1276 
	$yyöput
 ()

1278 
	$öput
 ()

1282 
c
;

1284 *(
yy_c_buf_p
Ë(
yy_hﬁd_ch¨
);

1286 i‡–*(
yy_c_buf_p
Ë=
YY_END_OF_BUFFER_CHAR
 )

1292 i‡–(
yy_c_buf_p
Ë< &
YY_CURRENT_BUFFER_LVALUE
->
yy_ch_buf
[(
yy_n_ch¨s
)] )

1294 *(
yy_c_buf_p
) = '\0';

1298 
off£t
 = (Ë((
yy_c_buf_p
Ë- (
yyãxt_±r
));

1299 ++(
yy_c_buf_p
);

1301  
	`yy_gë_√xt_buf„r
( ) )

1303 
EOB_ACT_LAST_MATCH
:

1315 
	`yyª°¨t
–
yyö
 );

1319 
EOB_ACT_END_OF_FILE
:

1321 i‡–
	`yywøp
( ) )

1324 i‡–! (
yy_did_buf„r_swôch_⁄_eof
) )

1325 
YY_NEW_FILE
;

1326 #ifde‡
__˝lu•lus


1327  
	`yyöput
();

1329  
	`öput
();

1333 
EOB_ACT_CONTINUE_SCAN
:

1334 (
yy_c_buf_p
Ë(
yyãxt_±r
Ë+ 
off£t
;

1340 
c
 = *(*Ë(
yy_c_buf_p
);

1341 *(
yy_c_buf_p
) = '\0';

1342 (
yy_hﬁd_ch¨
Ë*++(
yy_c_buf_p
);

1344  
c
;

1345 
	}
}

1353 
	$yyª°¨t
 (
FILE
 * 
öput_fûe
 )

1356 i‡–! 
YY_CURRENT_BUFFER
 ){

1357 
	`yyísuª_buf„r_°ack
 ();

1358 
YY_CURRENT_BUFFER_LVALUE
 =

1359 
	`yy_¸óã_buf„r
–
yyö
, 
YY_BUF_SIZE
 );

1362 
	`yy_öô_buf„r
–
YY_CURRENT_BUFFER
, 
öput_fûe
 );

1363 
	`yy_lﬂd_buf„r_°©e
( );

1364 
	}
}

1370 
	$yy_swôch_to_buf„r
 (
YY_BUFFER_STATE
 
√w_buf„r
 )

1378 
	`yyísuª_buf„r_°ack
 ();

1379 i‡–
YY_CURRENT_BUFFER
 =
√w_buf„r
 )

1382 i‡–
YY_CURRENT_BUFFER
 )

1385 *(
yy_c_buf_p
Ë(
yy_hﬁd_ch¨
);

1386 
YY_CURRENT_BUFFER_LVALUE
->
yy_buf_pos
 = (
yy_c_buf_p
);

1387 
YY_CURRENT_BUFFER_LVALUE
->
yy_n_ch¨s
 = (yy_n_chars);

1390 
YY_CURRENT_BUFFER_LVALUE
 = 
√w_buf„r
;

1391 
	`yy_lﬂd_buf„r_°©e
( );

1398 (
yy_did_buf„r_swôch_⁄_eof
) = 1;

1399 
	}
}

1401 
	$yy_lﬂd_buf„r_°©e
 ()

1403 (
yy_n_ch¨s
Ë
YY_CURRENT_BUFFER_LVALUE
->yy_n_chars;

1404 (
yyãxt_±r
Ë(
yy_c_buf_p
Ë
YY_CURRENT_BUFFER_LVALUE
->
yy_buf_pos
;

1405 
yyö
 = 
YY_CURRENT_BUFFER_LVALUE
->
yy_öput_fûe
;

1406 (
yy_hﬁd_ch¨
Ë*(
yy_c_buf_p
);

1407 
	}
}

1415 
YY_BUFFER_STATE
 
	$yy_¸óã_buf„r
 (
FILE
 * 
fûe
, 
size
 )

1417 
YY_BUFFER_STATE
 
b
;

1419 
b
 = (
YY_BUFFER_STATE
Ë
	`yyÆloc
––
yy_buf„r_°©e
 ) );

1420 i‡–! 
b
 )

1421 
	`YY_FATAL_ERROR
( "out of dynamic memory in yy_create_buffer()" );

1423 
b
->
yy_buf_size
 = 
size
;

1428 
b
->
yy_ch_buf
 = (*Ë
	`yyÆloc
–(
yy_size_t
Ë(b->
yy_buf_size
 + 2) );

1429 i‡–! 
b
->
yy_ch_buf
 )

1430 
	`YY_FATAL_ERROR
( "out of dynamic memory in yy_create_buffer()" );

1432 
b
->
yy_is_our_buf„r
 = 1;

1434 
	`yy_öô_buf„r
–
b
, 
fûe
 );

1436  
b
;

1437 
	}
}

1443 
	$yy_dñëe_buf„r
 (
YY_BUFFER_STATE
 
b
 )

1446 i‡–! 
b
 )

1449 i‡–
b
 =
YY_CURRENT_BUFFER
 )

1450 
YY_CURRENT_BUFFER_LVALUE
 = (
YY_BUFFER_STATE
) 0;

1452 i‡–
b
->
yy_is_our_buf„r
 )

1453 
	`yy‰ì
–(*Ë
b
->
yy_ch_buf
 );

1455 
	`yy‰ì
–(*Ë
b
 );

1456 
	}
}

1462 
	$yy_öô_buf„r
 (
YY_BUFFER_STATE
 
b
, 
FILE
 * 
fûe
 )

1465 
€ºno
 = 
î∫o
;

1467 
	`yy_Êush_buf„r
–
b
 );

1469 
b
->
yy_öput_fûe
 = 
fûe
;

1470 
b
->
yy_fûl_buf„r
 = 1;

1476 i‡(
b
 !
YY_CURRENT_BUFFER
){

1477 
b
->
yy_bs_löío
 = 1;

1478 
b
->
yy_bs_cﬁumn
 = 0;

1481 
b
->
yy_is_öãø˘ive
 = 
fûe
 ? (
	`ißây
–
	`fûío
(file) ) > 0) : 0;

1483 
î∫o
 = 
€ºno
;

1484 
	}
}

1490 
	$yy_Êush_buf„r
 (
YY_BUFFER_STATE
 
b
 )

1492 i‡–! 
b
 )

1495 
b
->
yy_n_ch¨s
 = 0;

1501 
b
->
yy_ch_buf
[0] = 
YY_END_OF_BUFFER_CHAR
;

1502 
b
->
yy_ch_buf
[1] = 
YY_END_OF_BUFFER_CHAR
;

1504 
b
->
yy_buf_pos
 = &b->
yy_ch_buf
[0];

1506 
b
->
yy_©_bﬁ
 = 1;

1507 
b
->
yy_buf„r_°©us
 = 
YY_BUFFER_NEW
;

1509 i‡–
b
 =
YY_CURRENT_BUFFER
 )

1510 
	`yy_lﬂd_buf„r_°©e
( );

1511 
	}
}

1519 
	$yypush_buf„r_°©e
 (
YY_BUFFER_STATE
 
√w_buf„r
 )

1521 i‡(
√w_buf„r
 =
NULL
)

1524 
	`yyísuª_buf„r_°ack
();

1527 i‡–
YY_CURRENT_BUFFER
 )

1530 *(
yy_c_buf_p
Ë(
yy_hﬁd_ch¨
);

1531 
YY_CURRENT_BUFFER_LVALUE
->
yy_buf_pos
 = (
yy_c_buf_p
);

1532 
YY_CURRENT_BUFFER_LVALUE
->
yy_n_ch¨s
 = (yy_n_chars);

1536 i‡(
YY_CURRENT_BUFFER
)

1537 (
yy_buf„r_°ack_t›
)++;

1538 
YY_CURRENT_BUFFER_LVALUE
 = 
√w_buf„r
;

1541 
	`yy_lﬂd_buf„r_°©e
( );

1542 (
yy_did_buf„r_swôch_⁄_eof
) = 1;

1543 
	}
}

1549 
	$yyp›_buf„r_°©e
 ()

1551 i‡(!
YY_CURRENT_BUFFER
)

1554 
	`yy_dñëe_buf„r
(
YY_CURRENT_BUFFER
 );

1555 
YY_CURRENT_BUFFER_LVALUE
 = 
NULL
;

1556 i‡((
yy_buf„r_°ack_t›
) > 0)

1557 --(
yy_buf„r_°ack_t›
);

1559 i‡(
YY_CURRENT_BUFFER
) {

1560 
	`yy_lﬂd_buf„r_°©e
( );

1561 (
yy_did_buf„r_swôch_⁄_eof
) = 1;

1563 
	}
}

1568 
	$yyísuª_buf„r_°ack
 ()

1570 
yy_size_t
 
num_to_Æloc
;

1572 i‡(!(
yy_buf„r_°ack
)) {

1578 
num_to_Æloc
 = 1;

1579 (
yy_buf„r_°ack
Ë(
yy_buf„r_°©e
**)
yyÆloc


1580 (
num_to_Æloc
 * (
yy_buf„r_°©e
*)

1582 i‡–! (
yy_buf„r_°ack
) )

1583 
	`YY_FATAL_ERROR
( "out of dynamic memory in yyensure_buffer_stack()" );

1585 
	`mem£t
((
yy_buf„r_°ack
), 0, 
num_to_Æloc
 * (
yy_buf„r_°©e
*));

1587 (
yy_buf„r_°ack_max
Ë
num_to_Æloc
;

1588 (
yy_buf„r_°ack_t›
) = 0;

1592 i‡((
yy_buf„r_°ack_t›
Ë>((
yy_buf„r_°ack_max
)) - 1){

1595 
yy_size_t
 
grow_size
 = 8 ;

1597 
num_to_Æloc
 = (
yy_buf„r_°ack_max
Ë+ 
grow_size
;

1598 (
yy_buf„r_°ack
Ë(
yy_buf„r_°©e
**)
yyªÆloc


1599 ((
yy_buf„r_°ack
),

1600 
num_to_Æloc
 * (
yy_buf„r_°©e
*)

1602 i‡–! (
yy_buf„r_°ack
) )

1603 
	`YY_FATAL_ERROR
( "out of dynamic memory in yyensure_buffer_stack()" );

1606 
	`mem£t
((
yy_buf„r_°ack
Ë+ (
yy_buf„r_°ack_max
), 0, 
grow_size
 * (
yy_buf„r_°©e
*));

1607 (
yy_buf„r_°ack_max
Ë
num_to_Æloc
;

1609 
	}
}

1617 
YY_BUFFER_STATE
 
	$yy_sˇn_buf„r
 (* 
ba£
, 
yy_size_t
 
size
 )

1619 
YY_BUFFER_STATE
 
b
;

1621 i‡–
size
 < 2 ||

1622 
ba£
[
size
-2] !
YY_END_OF_BUFFER_CHAR
 ||

1623 
ba£
[
size
-1] !
YY_END_OF_BUFFER_CHAR
 )

1625  
NULL
;

1627 
b
 = (
YY_BUFFER_STATE
Ë
	`yyÆloc
––
yy_buf„r_°©e
 ) );

1628 i‡–! 
b
 )

1629 
	`YY_FATAL_ERROR
( "out of dynamic memory in yy_scan_buffer()" );

1631 
b
->
yy_buf_size
 = (Ë(
size
 - 2);

1632 
b
->
yy_buf_pos
 = b->
yy_ch_buf
 = 
ba£
;

1633 
b
->
yy_is_our_buf„r
 = 0;

1634 
b
->
yy_öput_fûe
 = 
NULL
;

1635 
b
->
yy_n_ch¨s
 = b->
yy_buf_size
;

1636 
b
->
yy_is_öãø˘ive
 = 0;

1637 
b
->
yy_©_bﬁ
 = 1;

1638 
b
->
yy_fûl_buf„r
 = 0;

1639 
b
->
yy_buf„r_°©us
 = 
YY_BUFFER_NEW
;

1641 
	`yy_swôch_to_buf„r
–
b
 );

1643  
b
;

1644 
	}
}

1654 
YY_BUFFER_STATE
 
	$yy_sˇn_°rög
 (c⁄° * 
yy°r
 )

1657  
	`yy_sˇn_byãs
–
yy°r
, (Ë
	`°æí
(yystr) );

1658 
	}
}

1667 
YY_BUFFER_STATE
 
	$yy_sˇn_byãs
 (c⁄° * 
yybyãs
, 
_yybyãs_Àn
 )

1669 
YY_BUFFER_STATE
 
b
;

1670 *
buf
;

1671 
yy_size_t
 
n
;

1672 
i
;

1675 
n
 = (
yy_size_t
Ë(
_yybyãs_Àn
 + 2);

1676 
buf
 = (*Ë
	`yyÆloc
–
n
 );

1677 i‡–! 
buf
 )

1678 
	`YY_FATAL_ERROR
( "out of dynamic memory in yy_scan_bytes()" );

1680  
i
 = 0; i < 
_yybyãs_Àn
; ++i )

1681 
buf
[
i
] = 
yybyãs
[i];

1683 
buf
[
_yybyãs_Àn
] = buf[_yybyãs_Àn+1] = 
YY_END_OF_BUFFER_CHAR
;

1685 
b
 = 
	`yy_sˇn_buf„r
–
buf
, 
n
 );

1686 i‡–! 
b
 )

1687 
	`YY_FATAL_ERROR
( "bad buffer in yy_scan_bytes()" );

1692 
b
->
yy_is_our_buf„r
 = 1;

1694  
b
;

1695 
	}
}

1697 #i‚de‡
YY_EXIT_FAILURE


1698 
	#YY_EXIT_FAILURE
 2

	)

1701 
yyn‹ëu∫
 
	$yy_Áèl_îr‹
 (c⁄° * 
msg
 )

1703 
	`Ârötf
–
°dîr
, "%s\n", 
msg
 );

1704 
	`exô
–
YY_EXIT_FAILURE
 );

1705 
	}
}

1709 #unde‡
yyÀss


1710 
	#yyÀss
(
n
) \

1714 
yyÀss_ma¸o_¨g
 = (
n
); \

1715 
	`YY_LESS_LINENO
(
yyÀss_ma¸o_¨g
);\

1716 
yyãxt
[
yyÀng
] = (
yy_hﬁd_ch¨
); \

1717 (
yy_c_buf_p
Ë
yyãxt
 + 
yyÀss_ma¸o_¨g
; \

1718 (
yy_hﬁd_ch¨
Ë*(
yy_c_buf_p
); \

1719 *(
yy_c_buf_p
) = '\0'; \

1720 
yyÀng
 = 
yyÀss_ma¸o_¨g
; \

1722  0 )

	)

1729 
	$yygë_löío
 ()

1732  
yylöío
;

1733 
	}
}

1738 
FILE
 *
	$yygë_ö
 ()

1740  
yyö
;

1741 
	}
}

1746 
FILE
 *
	$yygë_out
 ()

1748  
yyout
;

1749 
	}
}

1754 
	$yygë_Àng
 ()

1756  
yyÀng
;

1757 
	}
}

1763 *
	$yygë_ãxt
 ()

1765  
yyãxt
;

1766 
	}
}

1772 
	$yy£t_löío
 (
_löe_numbî
 )

1775 
yylöío
 = 
_löe_numbî
;

1776 
	}
}

1784 
	$yy£t_ö
 (
FILE
 * 
_ö_°r
 )

1786 
yyö
 = 
_ö_°r
 ;

1787 
	}
}

1789 
	$yy£t_out
 (
FILE
 * 
_out_°r
 )

1791 
yyout
 = 
_out_°r
 ;

1792 
	}
}

1794 
	$yygë_debug
 ()

1796  
yy_Êex_debug
;

1797 
	}
}

1799 
	$yy£t_debug
 (
_bdebug
 )

1801 
yy_Êex_debug
 = 
_bdebug
 ;

1802 
	}
}

1804 
	$yy_öô_globÆs
 ()

1810 (
yy_buf„r_°ack
Ë
NULL
;

1811 (
yy_buf„r_°ack_t›
) = 0;

1812 (
yy_buf„r_°ack_max
) = 0;

1813 (
yy_c_buf_p
Ë
NULL
;

1814 (
yy_öô
) = 0;

1815 (
yy_°¨t
) = 0;

1818 #ifde‡
YY_STDINIT


1819 
yyö
 = 
°dö
;

1820 
yyout
 = 
°dout
;

1822 
yyö
 = 
NULL
;

1823 
yyout
 = 
NULL
;

1830 
	}
}

1833 
	$yyÀx_de°roy
 ()

1837 
YY_CURRENT_BUFFER
){

1838 
	`yy_dñëe_buf„r
–
YY_CURRENT_BUFFER
 );

1839 
YY_CURRENT_BUFFER_LVALUE
 = 
NULL
;

1840 
	`yyp›_buf„r_°©e
();

1844 
	`yy‰ì
((
yy_buf„r_°ack
) );

1845 (
yy_buf„r_°ack
Ë
NULL
;

1849 
	`yy_öô_globÆs
( );

1852 
	}
}

1858 #i‚de‡
yyãxt_±r


1859 
	$yy_Êex_°∫˝y
 (* 
s1
, c⁄° * 
s2
, 
n
 )

1862 
i
;

1863  
i
 = 0; i < 
n
; ++i )

1864 
s1
[
i
] = 
s2
[i];

1865 
	}
}

1868 #ifde‡
YY_NEED_STRLEN


1869 
	$yy_Êex_°æí
 (c⁄° * 
s
 )

1871 
n
;

1872  
n
 = 0; 
s
[n]; ++n )

1875  
n
;

1876 
	}
}

1879 *
	$yyÆloc
 (
yy_size_t
 
size
 )

1881  
	`mÆloc
(
size
);

1882 
	}
}

1884 *
	$yyªÆloc
 (* 
±r
, 
yy_size_t
 
size
 )

1894  
	`ªÆloc
(
±r
, 
size
);

1895 
	}
}

1897 
	$yy‰ì
 (* 
±r
 )

1899 
	`‰ì
–(*Ë
±r
 );

1900 
	}
}

1902 
	#YYTABLES_NAME
 "yyèbÀs"

	)

	@config/y.tab.c

44 
	#YYBISON
 1

	)

47 
	#YYBISON_VERSION
 "3.0.4"

	)

50 
	#YYSKELETON_NAME
 "yacc.c"

	)

53 
	#YYPURE
 0

	)

56 
	#YYPUSH
 0

	)

59 
	#YYPULL
 1

	)

67 
	~<°dlib.h
>

68 
	~<°dio.h
>

69 
	~<°rög.h
>

70 
	~<˘y≥.h
>

72 *
yyãxt
;

80 #i‚de‡
YY_TYPEDEF_YY_SIZE_T


81 
	#YY_TYPEDEF_YY_SIZE_T


	)

82 
	tyy_size_t
;

85 
yyÀng
;

94 
	#NIL
 (
dev_ít
 *)0x00

	)

96 
	#CONFC
 "c⁄f.c"

	)

97 
	#CONFH
 "c⁄f.h"

	)

98 
	#CONFHREF
 "<c⁄f.h>"

	)

99 
	#INFILE
 "C⁄figuøti⁄"

	)

100 
	#MAXNAME
 16

	)

102 
	#NDEVS
 250

	)

103 
	#NTYPES
 250

	)

105 
	glöe˘r
 = 1;

107 
FILE
 *
	gc⁄fc
;

108 
FILE
 *
	gc⁄fh
;

110 
	gbrkcou¡
 = 0;

112 *
	gdoög
 = "deviceÅype declarations";

114 
	sdev_ít
 {

115 
	m«me
[
MAXNAME
];

116 
	mäame
[
MAXNAME
];

117 
	mis⁄
[
MAXNAME
];

118 
	mtödex
;

119 
	mc§
;

120 
	múq
;

121 
	möå
[
MAXNAME
];

122 
	möô
[
MAXNAME
];

123 
	m›í
[
MAXNAME
];

124 
	m˛o£
[
MAXNAME
];

125 
	mªad
[
MAXNAME
];

126 
	mwrôe
[
MAXNAME
];

127 
	mc⁄åﬁ
[
MAXNAME
];

128 
	m£ek
[
MAXNAME
];

129 
	mgëc
[
MAXNAME
];

130 
	mputc
[
MAXNAME
];

131 
	mmö‹
;

136 
dev_ít
 
	gdty≥s
[
NTYPES
];

137 
	g¡y≥s
 = 0;

139 
dev_ít
 
	gdevs
[
NDEVS
];

140 
	gndevs
 = 0;

142 *
	gdev°ab
[] = {

162 
NULL


165 
	gßvóârid
[
MAXNAME
];

173 
add©å
(, );

174 
addt⁄
(*);

175 
c⁄fig_©oi
(*, );

176 
devisid
(*);

177 
dev⁄id
(*);

178 
gë©åid
(*);

179 
√wdev
(*);

180 
√wty≥
(*);

181 
yyîr‹
(*);

182 
yyÀx
();

188 #i‚de‡
YY_NULLPTR


189 #i‡
deföed
 
__˝lu•lus
 && 201103L <= __cplusplus

190 
	#YY_NULLPTR
 
nuŒ±r


	)

192 
	#YY_NULLPTR
 0

	)

197 #ifde‡
YYERROR_VERBOSE


198 #unde‡
YYERROR_VERBOSE


199 
	#YYERROR_VERBOSE
 1

	)

201 
	#YYERROR_VERBOSE
 0

	)

206 #i‚de‡
YYDEBUG


207 
	#YYDEBUG
 0

	)

209 #i‡
YYDEBUG


210 
yydebug
;

214 #i‚de‡
YYTOKENTYPE


215 
	#YYTOKENTYPE


	)

216 
	eyytokíty≥


218 
	mDEFBRK
 = 258,

219 
	mIFBRK
 = 259,

220 
	mCOLON
 = 260,

221 
	mOCTAL
 = 261,

222 
	mINTEGER
 = 262,

223 
	mIDENT
 = 263,

224 
	mCSR
 = 264,

225 
	mIRQ
 = 265,

226 
	mINTR
 = 266,

227 
	mINIT
 = 267,

228 
	mOPEN
 = 268,

229 
	mCLOSE
 = 269,

230 
	mREAD
 = 270,

231 
	mWRITE
 = 271,

232 
	mSEEK
 = 272,

233 
	mCONTROL
 = 273,

234 
	mIS
 = 274,

235 
	mON
 = 275,

236 
	mGETC
 = 276,

237 
	mPUTC
 = 277

241 
	#DEFBRK
 258

	)

242 
	#IFBRK
 259

	)

243 
	#COLON
 260

	)

244 
	#OCTAL
 261

	)

245 
	#INTEGER
 262

	)

246 
	#IDENT
 263

	)

247 
	#CSR
 264

	)

248 
	#IRQ
 265

	)

249 
	#INTR
 266

	)

250 
	#INIT
 267

	)

251 
	#OPEN
 268

	)

252 
	#CLOSE
 269

	)

253 
	#READ
 270

	)

254 
	#WRITE
 271

	)

255 
	#SEEK
 272

	)

256 
	#CONTROL
 273

	)

257 
	#IS
 274

	)

258 
	#ON
 275

	)

259 
	#GETC
 276

	)

260 
	#PUTC
 277

	)

263 #i‡! 
deföed
 
YYSTYPE
 && ! deföed 
YYSTYPE_IS_DECLARED


264 
	tYYSTYPE
;

265 
	#YYSTYPE_IS_TRIVIAL
 1

	)

266 
	#YYSTYPE_IS_DECLARED
 1

	)

270 
YYSTYPE
 
yylvÆ
;

272 
yy∑r£
 ();

284 #ifde‡
YYTYPE_UINT8


285 
YYTYPE_UINT8
 
	tyyty≥_uöt8
;

287 
	tyyty≥_uöt8
;

290 #ifde‡
YYTYPE_INT8


291 
YYTYPE_INT8
 
	tyyty≥_öt8
;

293 sig√d 
	tyyty≥_öt8
;

296 #ifde‡
YYTYPE_UINT16


297 
YYTYPE_UINT16
 
	tyyty≥_uöt16
;

299 
	tyyty≥_uöt16
;

302 #ifde‡
YYTYPE_INT16


303 
YYTYPE_INT16
 
	tyyty≥_öt16
;

305 
	tyyty≥_öt16
;

308 #i‚de‡
YYSIZE_T


309 #ifde‡
__SIZE_TYPE__


310 
	#YYSIZE_T
 
__SIZE_TYPE__


	)

311 #ñi‡
deföed
 
size_t


312 
	#YYSIZE_T
 
size_t


	)

313 #ñi‡! 
deföed
 
YYSIZE_T


314 
	~<°ddef.h
>

315 
	#YYSIZE_T
 
size_t


	)

317 
	#YYSIZE_T
 

	)

321 
	#YYSIZE_MAXIMUM
 ((
YYSIZE_T
Ë-1)

	)

323 #i‚de‡
YY_


324 #i‡
deföed
 
YYENABLE_NLS
 && YYENABLE_NLS

325 #i‡
ENABLE_NLS


326 
	~<liböé.h
>

327 
	#YY_
(
Msgid
Ë
	`dgëãxt
 ("bis⁄-ru¡ime", Msgid)

	)

330 #i‚de‡
YY_


331 
	#YY_
(
Msgid
Ë
	)
Msgid

335 #i‚de‡
YY_ATTRIBUTE


336 #i‡(
deföed
 
__GNUC__
 \

337 && (2 < 
	g__GNUC__
 || (__GNUC__ =2 && 96 <
__GNUC_MINOR__
))) \

338 || 
deföed
 
__SUNPRO_C
 && 0x5110 <= __SUNPRO_C

339 
	#YY_ATTRIBUTE
(
S≥c
Ë
	`__©åibuã__
(S≥c)

	)

341 
	#YY_ATTRIBUTE
(
S≥c
Ë

	)

345 #i‚de‡
YY_ATTRIBUTE_PURE


346 
	#YY_ATTRIBUTE_PURE
 
	`YY_ATTRIBUTE
 ((
__puª__
))

	)

349 #i‚de‡
YY_ATTRIBUTE_UNUSED


350 
	#YY_ATTRIBUTE_UNUSED
 
	`YY_ATTRIBUTE
 ((
__unu£d__
))

	)

353 #i‡!
deföed
 
_N‹ëu∫
 \

354 && (!
deföed
 
__STDC_VERSION__
 || __STDC_VERSION__ < 201112)

355 #i‡
deföed
 
_MSC_VER
 && 1200 <= _MSC_VER

356 
	#_N‹ëu∫
 
	`__de˛•ec
 (
n‹ëu∫
)

	)

358 
	#_N‹ëu∫
 
	`YY_ATTRIBUTE
 ((
__n‹ëu∫__
))

	)

363 #i‡! 
deföed
 
löt
 || deföed 
__GNUC__


364 
	#YYUSE
(
E
Ë((Ë(E))

	)

366 
	#YYUSE
(
E
Ë

	)

369 #i‡
deföed
 
__GNUC__
 && 407 <__GNUC__ * 100 + 
__GNUC_MINOR__


371 
	#YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN
 \

372 
	`_Pøgma
 ("GCC diagnosticÖush") \

373 
	`_Pøgma
 ("GCC diagnostic ignored \"-Wuninitialized\"")\

374 
	`_Pøgma
 ("GCC dügno°i¯ign‹ed \"-Wmaybe-unöôülized\"")

	)

375 
	#YY_IGNORE_MAYBE_UNINITIALIZED_END
 \

376 
	`_Pøgma
 ("GCC dügno°i¯p›")

	)

378 
	#YY_INITIAL_VALUE
(
VÆue
Ë
	)
Value

380 #i‚de‡
YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN


381 
	#YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN


	)

382 
	#YY_IGNORE_MAYBE_UNINITIALIZED_END


	)

384 #i‚de‡
YY_INITIAL_VALUE


385 
	#YY_INITIAL_VALUE
(
VÆue
Ë

	)

389 #i‡! 
deföed
 
yyovîÊow
 || 
YYERROR_VERBOSE


393 #ifde‡
YYSTACK_USE_ALLOCA


394 #i‡
YYSTACK_USE_ALLOCA


395 #ifde‡
__GNUC__


396 
	#YYSTACK_ALLOC
 
__buûtö_Æloˇ


	)

397 #ñi‡
deföed
 
__BUILTIN_VA_ARG_INCR


398 
	~<Æloˇ.h
>

399 #ñi‡
deföed
 
_AIX


400 
	#YYSTACK_ALLOC
 
__Æloˇ


	)

401 #ñi‡
deföed
 
_MSC_VER


402 
	~<mÆloc.h
>

403 
	#Æloˇ
 
_Æloˇ


	)

405 
	#YYSTACK_ALLOC
 
Æloˇ


	)

406 #i‡! 
deföed
 
_ALLOCA_H
 && ! deföed 
EXIT_SUCCESS


407 
	~<°dlib.h
>

409 #i‚de‡
EXIT_SUCCESS


410 
	#EXIT_SUCCESS
 0

	)

417 #ifde‡
YYSTACK_ALLOC


419 
	#YYSTACK_FREE
(
På
Ëdÿ{ ; } 0)

	)

420 #i‚de‡
YYSTACK_ALLOC_MAXIMUM


425 
	#YYSTACK_ALLOC_MAXIMUM
 4032

	)

428 
	#YYSTACK_ALLOC
 
YYMALLOC


	)

429 
	#YYSTACK_FREE
 
YYFREE


	)

430 #i‚de‡
YYSTACK_ALLOC_MAXIMUM


431 
	#YYSTACK_ALLOC_MAXIMUM
 
YYSIZE_MAXIMUM


	)

433 #i‡(
deföed
 
__˝lu•lus
 && ! deföed 
EXIT_SUCCESS
 \

434 && ! ((
deföed
 
	gYYMALLOC
 || deföed 
	gmÆloc
) \

435 && (
deföed
 
	gYYFREE
 || deföed 
	g‰ì
)))

436 
	~<°dlib.h
>

437 #i‚de‡
EXIT_SUCCESS


438 
	#EXIT_SUCCESS
 0

	)

441 #i‚de‡
YYMALLOC


442 
	#YYMALLOC
 
mÆloc


	)

443 #i‡! 
deföed
 
mÆloc
 && ! deföed 
EXIT_SUCCESS


444 *
mÆloc
 (
YYSIZE_T
);

447 #i‚de‡
YYFREE


448 
	#YYFREE
 
‰ì


	)

449 #i‡! 
deföed
 
‰ì
 && ! deföed 
EXIT_SUCCESS


450 
‰ì
 (*);

457 #i‡(! 
deföed
 
yyovîÊow
 \

458 && (! 
deföed
 
	g__˝lu•lus
 \

459 || (
deföed
 
	gYYSTYPE_IS_TRIVIAL
 && YYSTYPE_IS_TRIVIAL)))

462 
	uyyÆloc


464 
yyty≥_öt16
 
	myyss_Æloc
;

465 
YYSTYPE
 
	myyvs_Æloc
;

469 
	#YYSTACK_GAP_MAXIMUM
 ( (
yyÆloc
Ë- 1)

	)

473 
	#YYSTACK_BYTES
(
N
) \

474 ((
N
Ë* ( (
yyty≥_öt16
Ë+  (
YYSTYPE
)) \

475 + 
YYSTACK_GAP_MAXIMUM
)

	)

477 
	#YYCOPY_NEEDED
 1

	)

484 
	#YYSTACK_RELOCATE
(
Sèck_Æloc
, 
Sèck
) \

487 
YYSIZE_T
 
yy√wbyãs
; \

488 
	`YYCOPY
 (&
yy±r
->
Sèck_Æloc
, 
Sèck
, 
yysize
); \

489 
Sèck
 = &
yy±r
->
Sèck_Æloc
; \

490 
yy√wbyãs
 = 
yy°acksize
 *  (*
Sèck
Ë+ 
YYSTACK_GAP_MAXIMUM
; \

491 
yy±r
 +
yy√wbyãs
 /  (*yyptr); \

493 0)

	)

497 #i‡
deföed
 
YYCOPY_NEEDED
 && YYCOPY_NEEDED

500 #i‚de‡
YYCOPY


501 #i‡
deföed
 
__GNUC__
 && 1 < __GNUC__

502 
	#YYCOPY
(
D°
, 
Src
, 
Cou¡
) \

503 
	`__buûtö_mem˝y
 (
D°
, 
Src
, (
Cou¡
Ë*  (*(Src)))

	)

505 
	#YYCOPY
(
D°
, 
Src
, 
Cou¡
) \

508 
YYSIZE_T
 
yyi
; \

509 
yyi
 = 0; yyò< (
Cou¡
); yyi++) \

510 (
D°
)[
yyi
] = (
Src
)[yyi]; \

512 0)

	)

518 
	#YYFINAL
 3

	)

520 
	#YYLAST
 39

	)

523 
	#YYNTOKENS
 23

	)

525 
	#YYNNTS
 20

	)

527 
	#YYNRULES
 35

	)

529 
	#YYNSTATES
 58

	)

533 
	#YYUNDEFTOK
 2

	)

534 
	#YYMAXUTOK
 277

	)

536 
	#YYTRANSLATE
(
YYX
) \

537 ((Ë(
YYX
Ë<
YYMAXUTOK
 ? 
yyå™¶©e
[YYX] : 
YYUNDEFTOK
)

	)

541 c⁄° 
yyty≥_uöt8
 
	gyyå™¶©e
[] =

573 #i‡
YYDEBUG


575 c⁄° 
yyty≥_uöt8
 
	gyyæöe
[] =

584 #i‡
YYDEBUG
 || 
YYERROR_VERBOSE
 || 0

587 c⁄° *c⁄° 
	gyyäame
[] =

594 "devi˚", "dhódî", "d«me", "devis", "devisid", "dev⁄", "dev⁄id", 
YY_NULLPTR


598 #ifde‡
YYPRINT


601 c⁄° 
yyty≥_uöt16
 
	gyytoknum
[] =

609 
	#YYPACT_NINF
 -14

	)

611 
	#yy∑˘_vÆue_is_deÁu…
(
Yy°©e
) \

612 (!!((
Yy°©e
Ë=(-14)))

	)

614 
	#YYTABLE_NINF
 -1

	)

616 
	#yyèbÀ_vÆue_is_îr‹
(
YyèbÀ_vÆue
) \

617 0

	)

621 c⁄° 
yyty≥_öt8
 
	gyy∑˘
[] =

634 c⁄° 
yyty≥_uöt8
 
	gyydeÁ˘
[] =

645 c⁄° 
yyty≥_öt8
 
	gyypgŸo
[] =

652 c⁄° 
yyty≥_öt8
 
	gyydefgŸo
[] =

661 c⁄° 
yyty≥_uöt8
 
	gyyèbÀ
[] =

669 c⁄° 
yyty≥_öt8
 
	gyycheck
[] =

679 c⁄° 
yyty≥_uöt8
 
	gyy°os
[] =

690 c⁄° 
yyty≥_uöt8
 
	gyyr1
[] =

699 c⁄° 
yyty≥_uöt8
 
	gyyr2
[] =

708 
	#yyîrok
 (
yyîr°©us
 = 0)

	)

709 
	#yy˛órö
 (
yych¨
 = 
YYEMPTY
)

	)

710 
	#YYEMPTY
 (-2)

	)

711 
	#YYEOF
 0

	)

713 
	#YYACCEPT
 
yyac˚±œb


	)

714 
	#YYABORT
 
yyab‹éab


	)

715 
	#YYERROR
 
yyîr‹œb


	)

718 
	#YYRECOVERING
(Ë(!!
yyîr°©us
)

	)

720 
	#YYBACKUP
(
Tokí
, 
VÆue
) \

722 i‡(
yych¨
 =
YYEMPTY
) \

724 
yych¨
 = (
Tokí
); \

725 
yylvÆ
 = (
VÆue
); \

726 
	`YYPOPSTACK
 (
yyÀn
); \

727 
yy°©e
 = *
yys•
; \

728 
yybackup
; \

732 
	`yyîr‹
 (
	`YY_
("syntaxÉrror: cannot back up")); \

733 
YYERROR
; \

735 0)

	)

738 
	#YYTERROR
 1

	)

739 
	#YYERRCODE
 256

	)

744 #i‡
YYDEBUG


746 #i‚de‡
YYFPRINTF


747 
	~<°dio.h
>

748 
	#YYFPRINTF
 
Ârötf


	)

751 
	#YYDPRINTF
(
Args
) \

753 i‡(
yydebug
) \

754 
YYFPRINTF
 
Args
; \

755 } 0)

	)

758 #i‚de‡
YY_LOCATION_PRINT


759 
	#YY_LOCATION_PRINT
(
Fûe
, 
Loc
Ë((Ë0)

	)

763 
	#YY_SYMBOL_PRINT
(
TôÀ
, 
Ty≥
, 
VÆue
, 
Loˇti⁄
) \

765 i‡(
yydebug
) \

767 
	`YYFPRINTF
 (
°dîr
, "%†", 
TôÀ
); \

768 
	`yy_symbﬁ_¥öt
 (
°dîr
, \

769 
Ty≥
, 
VÆue
); \

770 
	`YYFPRINTF
 (
°dîr
, "\n"); \

772 } 0)

	)

780 
	$yy_symbﬁ_vÆue_¥öt
 (
FILE
 *
yyouçut
, 
yyty≥
, 
YYSTYPE
 c⁄° * c⁄° 
yyvÆuï
)

782 
FILE
 *
yyo
 = 
yyouçut
;

783 
	`YYUSE
 (
yyo
);

784 i‡(!
yyvÆuï
)

786 #ifde‡
YYPRINT


787 i‡(
yyty≥
 < 
YYNTOKENS
)

788 
	`YYPRINT
 (
yyouçut
, 
yytoknum
[
yyty≥
], *
yyvÆuï
);

790 
	`YYUSE
 (
yyty≥
);

791 
	}
}

799 
	$yy_symbﬁ_¥öt
 (
FILE
 *
yyouçut
, 
yyty≥
, 
YYSTYPE
 c⁄° * c⁄° 
yyvÆuï
)

801 
	`YYFPRINTF
 (
yyouçut
, "%s %s (",

802 
yyty≥
 < 
YYNTOKENS
 ? "tokí" : "¡îm", 
yyäame
[yytype]);

804 
	`yy_symbﬁ_vÆue_¥öt
 (
yyouçut
, 
yyty≥
, 
yyvÆuï
);

805 
	`YYFPRINTF
 (
yyouçut
, ")");

806 
	}
}

814 
	$yy_°ack_¥öt
 (
yyty≥_öt16
 *
yybŸtom
, yyty≥_öt16 *
yyt›
)

816 
	`YYFPRINTF
 (
°dîr
, "StackÇow");

817 ; 
yybŸtom
 <
yyt›
; yybottom++)

819 
yybŸ
 = *
yybŸtom
;

820 
	`YYFPRINTF
 (
°dîr
, " %d", 
yybŸ
);

822 
	`YYFPRINTF
 (
°dîr
, "\n");

823 
	}
}

825 
	#YY_STACK_PRINT
(
BŸtom
, 
T›
) \

827 i‡(
yydebug
) \

828 
	`yy_°ack_¥öt
 ((
BŸtom
), (
T›
)); \

829 } 0)

	)

837 
	$yy_ªdu˚_¥öt
 (
yyty≥_öt16
 *
yys•
, 
YYSTYPE
 *
yyv•
, 
yyruÀ
)

839 
yy o
 = 
yyæöe
[
yyruÀ
];

840 
yyƒhs
 = 
yyr2
[
yyruÀ
];

841 
yyi
;

842 
	`YYFPRINTF
 (
°dîr
, "Reducing stack byÑule %d (line %lu):\n",

843 
yyruÀ
 - 1, 
yy o
);

845 
yyi
 = 0; yyò< 
yyƒhs
; yyi++)

847 
	`YYFPRINTF
 (
°dîr
, " $%d = ", 
yyi
 + 1);

848 
	`yy_symbﬁ_¥öt
 (
°dîr
,

849 
yy°os
[
yys•
[
yyi
 + 1 - 
yyƒhs
]],

850 &(
yyv•
[(
yyi
 + 1Ë- (
yyƒhs
)])

852 
	`YYFPRINTF
 (
°dîr
, "\n");

854 
	}
}

856 
	#YY_REDUCE_PRINT
(
RuÀ
) \

858 i‡(
yydebug
) \

859 
	`yy_ªdu˚_¥öt
 (
yys•
, 
yyv•
, 
RuÀ
); \

860 } 0)

	)

864 
	gyydebug
;

866 
	#YYDPRINTF
(
Args
)

	)

867 
	#YY_SYMBOL_PRINT
(
TôÀ
, 
Ty≥
, 
VÆue
, 
Loˇti⁄
)

	)

868 
	#YY_STACK_PRINT
(
BŸtom
, 
T›
)

	)

869 
	#YY_REDUCE_PRINT
(
RuÀ
)

	)

874 #i‚de‡
YYINITDEPTH


875 
	#YYINITDEPTH
 200

	)

885 #i‚de‡
YYMAXDEPTH


886 
	#YYMAXDEPTH
 10000

	)

890 #i‡
YYERROR_VERBOSE


892 #i‚de‡
yy°æí


893 #i‡
deföed
 
__GLIBC__
 && deföed 
_STRING_H


894 
	#yy°æí
 
°æí


	)

897 
YYSIZE_T


898 
	$yy°æí
 (c⁄° *
yy°r
)

900 
YYSIZE_T
 
yyÀn
;

901 
yyÀn
 = 0; 
yy°r
[yylen]; yylen++)

903  
yyÀn
;

904 
	}
}

908 #i‚de‡
yy°p˝y


909 #i‡
deföed
 
__GLIBC__
 && deföed 
_STRING_H
 && deföed 
_GNU_SOURCE


910 
	#yy°p˝y
 
°p˝y


	)

915 
	$yy°p˝y
 (*
yyde°
, c⁄° *
yy§c
)

917 *
yyd
 = 
yyde°
;

918 c⁄° *
yys
 = 
yy§c
;

920 (*
yyd
++ = *
yys
++) != '\0')

923  
yyd
 - 1;

924 
	}
}

928 #i‚de‡
yyäamîr


936 
YYSIZE_T


937 
	$yyäamîr
 (*
yyªs
, c⁄° *
yy°r
)

939 i‡(*
yy°r
 == '"')

941 
YYSIZE_T
 
yyn
 = 0;

942 c⁄° *
yyp
 = 
yy°r
;

945 *++
yyp
)

949 
do_nŸ_°rù_quŸes
;

952 i‡(*++
yyp
 != '\\')

953 
do_nŸ_°rù_quŸes
;

956 i‡(
yyªs
)

957 
yyªs
[
yyn
] = *
yyp
;

958 
yyn
++;

962 i‡(
yyªs
)

963 
yyªs
[
yyn
] = '\0';

964  
yyn
;

966 
do_nŸ_°rù_quŸes
: ;

969 i‡(! 
yyªs
)

970  
	`yy°æí
 (
yy°r
);

972  
	`yy°p˝y
 (
yyªs
, 
yy°r
) - yyres;

973 
	}
}

985 
	$yysy¡ax_îr‹
 (
YYSIZE_T
 *
yymsg_Æloc
, **
yymsg
,

986 
yyty≥_öt16
 *
yys•
, 
yytokí
)

988 
YYSIZE_T
 
yysize0
 = 
	`yyäamîr
 (
YY_NULLPTR
, 
yyäame
[
yytokí
]);

989 
YYSIZE_T
 
yysize
 = 
yysize0
;

990 íum { 
YYERROR_VERBOSE_ARGS_MAXIMUM
 = 5 };

992 c⁄° *
yyf‹m©
 = 
YY_NULLPTR
;

994 c⁄° *
yy¨g
[
YYERROR_VERBOSE_ARGS_MAXIMUM
];

997 
yycou¡
 = 0;

1022 i‡(
yytokí
 !
YYEMPTY
)

1024 
yyn
 = 
yy∑˘
[*
yys•
];

1025 
yy¨g
[
yycou¡
++] = 
yyäame
[
yytokí
];

1026 i‡(!
	`yy∑˘_vÆue_is_deÁu…
 (
yyn
))

1031 
yyxbegö
 = 
yyn
 < 0 ? -yyn : 0;

1033 
yychecklim
 = 
YYLAST
 - 
yyn
 + 1;

1034 
yyxíd
 = 
yychecklim
 < 
YYNTOKENS
 ? yychecklim : YYNTOKENS;

1035 
yyx
;

1037 
yyx
 = 
yyxbegö
; yyx < 
yyxíd
; ++yyx)

1038 i‡(
yycheck
[
yyx
 + 
yyn
] =yyx && yyx !
YYTERROR


1039 && !
	`yyèbÀ_vÆue_is_îr‹
 (
yyèbÀ
[
yyx
 + 
yyn
]))

1041 i‡(
yycou¡
 =
YYERROR_VERBOSE_ARGS_MAXIMUM
)

1043 
yycou¡
 = 1;

1044 
yysize
 = 
yysize0
;

1047 
yy¨g
[
yycou¡
++] = 
yyäame
[
yyx
];

1049 
YYSIZE_T
 
yysize1
 = 
yysize
 + 
	`yyäamîr
 (
YY_NULLPTR
, 
yyäame
[
yyx
]);

1050 i‡(! (
yysize
 <
yysize1


1051 && 
yysize1
 <
YYSTACK_ALLOC_MAXIMUM
))

1053 
yysize
 = 
yysize1
;

1059 
yycou¡
)

1061 
	#YYCASE_
(
N
, 
S
) \

1062 
N
: \

1063 
yyf‹m©
 = 
S
; \

1064 

	)

1065 
	`YYCASE_
(0, 
	`YY_
("syntaxÉrror"));

1066 
	`YYCASE_
(1, 
	`YY_
("syntaxÉrror, unexpected %s"));

1067 
	`YYCASE_
(2, 
	`YY_
("syntaxÉrror, unexpected %s,Éxpecting %s"));

1068 
	`YYCASE_
(3, 
	`YY_
("syntaxÉrror, unexpected %s,Éxpecting %s or %s"));

1069 
	`YYCASE_
(4, 
	`YY_
("syntaxÉrror, unexpected %s,Éxpecting %s or %s or %s"));

1070 
	`YYCASE_
(5, 
	`YY_
("syntaxÉrror, unexpected %s,Éxpecting %s or %s or %s or %s"));

1071 #unde‡
YYCASE_


1075 
YYSIZE_T
 
yysize1
 = 
yysize
 + 
	`yy°æí
 (
yyf‹m©
);

1076 i‡(! (
yysize
 <
yysize1
 && yysize1 <
YYSTACK_ALLOC_MAXIMUM
))

1078 
yysize
 = 
yysize1
;

1081 i‡(*
yymsg_Æloc
 < 
yysize
)

1083 *
yymsg_Æloc
 = 2 * 
yysize
;

1084 i‡(! (
yysize
 <*
yymsg_Æloc


1085 && *
yymsg_Æloc
 <
YYSTACK_ALLOC_MAXIMUM
))

1086 *
yymsg_Æloc
 = 
YYSTACK_ALLOC_MAXIMUM
;

1094 *
yyp
 = *
yymsg
;

1095 
yyi
 = 0;

1096 (*
yyp
 = *
yyf‹m©
) != '\0')

1097 i‡(*
yyp
 ='%' && 
yyf‹m©
[1] ='s' && 
yyi
 < 
yycou¡
)

1099 
yyp
 +
	`yyäamîr
 (yyp, 
yy¨g
[
yyi
++]);

1100 
yyf‹m©
 += 2;

1104 
yyp
++;

1105 
yyf‹m©
++;

1109 
	}
}

1117 
	$yyde°ru˘
 (c⁄° *
yymsg
, 
yyty≥
, 
YYSTYPE
 *
yyvÆuï
)

1119 
	`YYUSE
 (
yyvÆuï
);

1120 i‡(!
yymsg
)

1121 
yymsg
 = "Deleting";

1122 
	`YY_SYMBOL_PRINT
 (
yymsg
, 
yyty≥
, 
yyvÆuï
, 
yyloˇti⁄p
);

1124 
YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN


1125 
	`YYUSE
 (
yyty≥
);

1126 
YY_IGNORE_MAYBE_UNINITIALIZED_END


1127 
	}
}

1133 
	gyych¨
;

1136 
YYSTYPE
 
	gyylvÆ
;

1138 
	gyy√ºs
;

1146 
	$yy∑r£
 ()

1148 
yy°©e
;

1150 
yyîr°©us
;

1160 
yyty≥_öt16
 
yysß
[
YYINITDEPTH
];

1161 
yyty≥_öt16
 *
yyss
;

1162 
yyty≥_öt16
 *
yys•
;

1165 
YYSTYPE
 
yyvß
[
YYINITDEPTH
];

1166 
YYSTYPE
 *
yyvs
;

1167 
YYSTYPE
 *
yyv•
;

1169 
YYSIZE_T
 
yy°acksize
;

1171 
yyn
;

1172 
yyªsu…
;

1174 
yytokí
 = 0;

1177 
YYSTYPE
 
yyvÆ
;

1179 #i‡
YYERROR_VERBOSE


1181 
yymsgbuf
[128];

1182 *
yymsg
 = 
yymsgbuf
;

1183 
YYSIZE_T
 
yymsg_Æloc
 =  
yymsgbuf
;

1186 
	#YYPOPSTACK
(
N
Ë(
yyv•
 -(N), 
yys•
 -(N))

	)

1190 
yyÀn
 = 0;

1192 
yys•
 = 
yyss
 = 
yysß
;

1193 
yyv•
 = 
yyvs
 = 
yyvß
;

1194 
yy°acksize
 = 
YYINITDEPTH
;

1196 
	`YYDPRINTF
 ((
°dîr
, "StartingÖarse\n"));

1198 
yy°©e
 = 0;

1199 
yyîr°©us
 = 0;

1200 
yy√ºs
 = 0;

1201 
yych¨
 = 
YYEMPTY
;

1202 
yy£t°©e
;

1207 
yy√w°©e
:

1210 
yys•
++;

1212 
yy£t°©e
:

1213 *
yys•
 = 
yy°©e
;

1215 i‡(
yyss
 + 
yy°acksize
 - 1 <
yys•
)

1218 
YYSIZE_T
 
yysize
 = 
yys•
 - 
yyss
 + 1;

1220 #ifde‡
yyovîÊow


1225 
YYSTYPE
 *
yyvs1
 = 
yyvs
;

1226 
yyty≥_öt16
 *
yyss1
 = 
yyss
;

1232 
	`yyovîÊow
 (
	`YY_
("memoryÉxhausted"),

1233 &
yyss1
, 
yysize
 *  (*
yys•
),

1234 &
yyvs1
, 
yysize
 *  (*
yyv•
),

1235 &
yy°acksize
);

1237 
yyss
 = 
yyss1
;

1238 
yyvs
 = 
yyvs1
;

1241 #i‚de‡
YYSTACK_RELOCATE


1242 
yyexhau°edœb
;

1245 i‡(
YYMAXDEPTH
 <
yy°acksize
)

1246 
yyexhau°edœb
;

1247 
yy°acksize
 *= 2;

1248 i‡(
YYMAXDEPTH
 < 
yy°acksize
)

1249 
yy°acksize
 = 
YYMAXDEPTH
;

1252 
yyty≥_öt16
 *
yyss1
 = 
yyss
;

1253 
yyÆloc
 *
yy±r
 =

1254 (
yyÆloc
 *Ë
	`YYSTACK_ALLOC
 (
	`YYSTACK_BYTES
 (
yy°acksize
));

1255 i‡(! 
yy±r
)

1256 
yyexhau°edœb
;

1257 
	`YYSTACK_RELOCATE
 (
yyss_Æloc
, 
yyss
);

1258 
	`YYSTACK_RELOCATE
 (
yyvs_Æloc
, 
yyvs
);

1259 #unde‡
YYSTACK_RELOCATE


1260 i‡(
yyss1
 !
yysß
)

1261 
	`YYSTACK_FREE
 (
yyss1
);

1266 
yys•
 = 
yyss
 + 
yysize
 - 1;

1267 
yyv•
 = 
yyvs
 + 
yysize
 - 1;

1269 
	`YYDPRINTF
 ((
°dîr
, "Stack size increasedÅo %lu\n",

1270 (Ë
yy°acksize
));

1272 i‡(
yyss
 + 
yy°acksize
 - 1 <
yys•
)

1273 
YYABORT
;

1276 
	`YYDPRINTF
 ((
°dîr
, "E¡îög sèã %d\n", 
yy°©e
));

1278 i‡(
yy°©e
 =
YYFINAL
)

1279 
YYACCEPT
;

1281 
yybackup
;

1286 
yybackup
:

1292 
yyn
 = 
yy∑˘
[
yy°©e
];

1293 i‡(
	`yy∑˘_vÆue_is_deÁu…
 (
yyn
))

1294 
yydeÁu…
;

1299 i‡(
yych¨
 =
YYEMPTY
)

1301 
	`YYDPRINTF
 ((
°dîr
, "ReadingáÅoken: "));

1302 
yych¨
 = 
	`yyÀx
 ();

1305 i‡(
yych¨
 <
YYEOF
)

1307 
yych¨
 = 
yytokí
 = 
YYEOF
;

1308 
	`YYDPRINTF
 ((
°dîr
, "NowátÉnd of input.\n"));

1312 
yytokí
 = 
	`YYTRANSLATE
 (
yych¨
);

1313 
	`YY_SYMBOL_PRINT
 ("Nexàtokí is", 
yytokí
, &
yylvÆ
, &
yyŒoc
);

1318 
yyn
 +
yytokí
;

1319 i‡(
yyn
 < 0 || 
YYLAST
 < yy¿|| 
yycheck
[yyn] !
yytokí
)

1320 
yydeÁu…
;

1321 
yyn
 = 
yyèbÀ
[yyn];

1322 i‡(
yyn
 <= 0)

1324 i‡(
	`yyèbÀ_vÆue_is_îr‹
 (
yyn
))

1325 
yyîæab
;

1326 
yyn
 = -yyn;

1327 
yyªdu˚
;

1332 i‡(
yyîr°©us
)

1333 
yyîr°©us
--;

1336 
	`YY_SYMBOL_PRINT
 ("Shi·ög", 
yytokí
, &
yylvÆ
, &
yyŒoc
);

1339 
yych¨
 = 
YYEMPTY
;

1341 
yy°©e
 = 
yyn
;

1342 
YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN


1343 *++
yyv•
 = 
yylvÆ
;

1344 
YY_IGNORE_MAYBE_UNINITIALIZED_END


1346 
yy√w°©e
;

1352 
yydeÁu…
:

1353 
yyn
 = 
yydeÁ˘
[
yy°©e
];

1354 i‡(
yyn
 == 0)

1355 
yyîæab
;

1356 
yyªdu˚
;

1362 
yyªdu˚
:

1364 
yyÀn
 = 
yyr2
[
yyn
];

1374 
yyvÆ
 = 
yyv•
[1-
yyÀn
];

1377 
	`YY_REDUCE_PRINT
 (
yyn
);

1378 
yyn
)

1382 { 
doög
 = "device definitions"; }

1388 { (
yyvÆ
Ë
	`√wty≥
(
yyãxt
); }

1394 { (
yyvÆ
Ë(
yyv•
[0]); }

1400 { (
yyvÆ
Ë
	`addt⁄
(
yyãxt
); }

1406 { 
	`add©å
(
CSR
, (
yyv•
[0])); }

1412 { 
	`add©å
(
IRQ
, (
yyv•
[0])); }

1418 { 
	`add©å
(
INTR
, 0); }

1424 { 
	`add©å
(
OPEN
, 0); }

1430 { 
	`add©å
(
CLOSE
, 0); }

1436 { 
	`add©å
(
INIT
, 0); }

1442 { 
	`add©å
(
GETC
, 0); }

1448 { 
	`add©å
(
PUTC
, 0); }

1454 { 
	`add©å
(
READ
, 0); }

1460 { 
	`add©å
(
WRITE
, 0); }

1466 { 
	`add©å
(
SEEK
, 0); }

1472 { 
	`add©å
(
CONTROL
, 0); }

1478 { (
yyvÆ
Ë0; 
	`gë©åid
(
yyãxt
); }

1484 { (
yyvÆ
Ë
	`c⁄fig_©oi
(
yyãxt
, 
yyÀng
); }

1490 { 
doög
 = "interfaceÅypes"; }

1496 { 
	`√wdev
(
yyãxt
); }

1502 { 
	`devisid
(
yyãxt
); }

1508 { 
	`dev⁄id
(
yyãxt
); }

1527 
	`YY_SYMBOL_PRINT
 ("-> $$ =", 
yyr1
[
yyn
], &
yyvÆ
, &
yyloc
);

1529 
	`YYPOPSTACK
 (
yyÀn
);

1530 
yyÀn
 = 0;

1531 
	`YY_STACK_PRINT
 (
yyss
, 
yys•
);

1533 *++
yyv•
 = 
yyvÆ
;

1539 
yyn
 = 
yyr1
[yyn];

1541 
yy°©e
 = 
yypgŸo
[
yyn
 - 
YYNTOKENS
] + *
yys•
;

1542 i‡(0 <
yy°©e
 && yy°©ê<
YYLAST
 && 
yycheck
[yy°©e] =*
yys•
)

1543 
yy°©e
 = 
yyèbÀ
[yystate];

1545 
yy°©e
 = 
yydefgŸo
[
yyn
 - 
YYNTOKENS
];

1547 
yy√w°©e
;

1553 
yyîæab
:

1556 
yytokí
 = 
yych¨
 =
YYEMPTY
 ? YYEMPTY : 
	`YYTRANSLATE
 (yychar);

1559 i‡(!
yyîr°©us
)

1561 ++
yy√ºs
;

1562 #i‡! 
YYERROR_VERBOSE


1563 
	`yyîr‹
 (
	`YY_
("syntaxÉrror"));

1565 
	#YYSYNTAX_ERROR
 
	`yysy¡ax_îr‹
 (&
yymsg_Æloc
, &
yymsg
, \

1566 
yys•
, 
yytokí
)

	)

1568 c⁄° *
yymsgp
 = 
	`YY_
("syntaxÉrror");

1569 
yysy¡ax_îr‹_°©us
;

1570 
yysy¡ax_îr‹_°©us
 = 
YYSYNTAX_ERROR
;

1571 i‡(
yysy¡ax_îr‹_°©us
 == 0)

1572 
yymsgp
 = 
yymsg
;

1573 i‡(
yysy¡ax_îr‹_°©us
 == 1)

1575 i‡(
yymsg
 !
yymsgbuf
)

1576 
	`YYSTACK_FREE
 (
yymsg
);

1577 
yymsg
 = (*Ë
	`YYSTACK_ALLOC
 (
yymsg_Æloc
);

1578 i‡(!
yymsg
)

1580 
yymsg
 = 
yymsgbuf
;

1581 
yymsg_Æloc
 =  
yymsgbuf
;

1582 
yysy¡ax_îr‹_°©us
 = 2;

1586 
yysy¡ax_îr‹_°©us
 = 
YYSYNTAX_ERROR
;

1587 
yymsgp
 = 
yymsg
;

1590 
	`yyîr‹
 (
yymsgp
);

1591 i‡(
yysy¡ax_îr‹_°©us
 == 2)

1592 
yyexhau°edœb
;

1594 #unde‡
YYSYNTAX_ERROR


1600 i‡(
yyîr°©us
 == 3)

1605 i‡(
yych¨
 <
YYEOF
)

1608 i‡(
yych¨
 =
YYEOF
)

1609 
YYABORT
;

1613 
	`yyde°ru˘
 ("Error: discarding",

1614 
yytokí
, &
yylvÆ
);

1615 
yych¨
 = 
YYEMPTY
;

1621 
yyîæab1
;

1627 
yyîr‹œb
:

1633 
yyîr‹œb
;

1637 
	`YYPOPSTACK
 (
yyÀn
);

1638 
yyÀn
 = 0;

1639 
	`YY_STACK_PRINT
 (
yyss
, 
yys•
);

1640 
yy°©e
 = *
yys•
;

1641 
yyîæab1
;

1647 
yyîæab1
:

1648 
yyîr°©us
 = 3;

1652 
yyn
 = 
yy∑˘
[
yy°©e
];

1653 i‡(!
	`yy∑˘_vÆue_is_deÁu…
 (
yyn
))

1655 
yyn
 +
YYTERROR
;

1656 i‡(0 <
yyn
 && yy¿<
YYLAST
 && 
yycheck
[yyn] =
YYTERROR
)

1658 
yyn
 = 
yyèbÀ
[yyn];

1659 i‡(0 < 
yyn
)

1665 i‡(
yys•
 =
yyss
)

1666 
YYABORT
;

1669 
	`yyde°ru˘
 ("Error:Öopping",

1670 
yy°os
[
yy°©e
], 
yyv•
);

1671 
	`YYPOPSTACK
 (1);

1672 
yy°©e
 = *
yys•
;

1673 
	`YY_STACK_PRINT
 (
yyss
, 
yys•
);

1676 
YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN


1677 *++
yyv•
 = 
yylvÆ
;

1678 
YY_IGNORE_MAYBE_UNINITIALIZED_END


1682 
	`YY_SYMBOL_PRINT
 ("Shi·ög", 
yy°os
[
yyn
], 
yyv•
, 
yyl•
);

1684 
yy°©e
 = 
yyn
;

1685 
yy√w°©e
;

1691 
yyac˚±œb
:

1692 
yyªsu…
 = 0;

1693 
yyªtu∫
;

1698 
yyab‹éab
:

1699 
yyªsu…
 = 1;

1700 
yyªtu∫
;

1702 #i‡!
deföed
 
yyovîÊow
 || 
YYERROR_VERBOSE


1706 
yyexhau°edœb
:

1707 
	`yyîr‹
 (
	`YY_
("memoryÉxhausted"));

1708 
yyªsu…
 = 2;

1712 
yyªtu∫
:

1713 i‡(
yych¨
 !
YYEMPTY
)

1717 
yytokí
 = 
	`YYTRANSLATE
 (
yych¨
);

1718 
	`yyde°ru˘
 ("Cleanup: discardingÜookahead",

1719 
yytokí
, &
yylvÆ
);

1723 
	`YYPOPSTACK
 (
yyÀn
);

1724 
	`YY_STACK_PRINT
 (
yyss
, 
yys•
);

1725 
yys•
 !
yyss
)

1727 
	`yyde°ru˘
 ("Cleanup:Öopping",

1728 
yy°os
[*
yys•
], 
yyv•
);

1729 
	`YYPOPSTACK
 (1);

1731 #i‚de‡
yyovîÊow


1732 i‡(
yyss
 !
yysß
)

1733 
	`YYSTACK_FREE
 (
yyss
);

1735 #i‡
YYERROR_VERBOSE


1736 i‡(
yymsg
 !
yymsgbuf
)

1737 
	`YYSTACK_FREE
 (
yymsg
);

1739  
yyªsu…
;

1740 
	}
}

1744 
	~"Àx.yy.c
"

1755 
	$maö
(
¨gc
, **
¨gv
) {

1756 
n
, 
i
, 
j
, 
l
, 
fcou¡
;

1757 
dev_ít
 *
s
;

1758 
vîbo£
 = 0;

1759 *
p
;

1760 
c
;

1762 i‡–
¨gc
 > 1 && (
	`°∫cmp
("-v", 
¨gv
[1], 2) == 0) ) {

1763 
¨gc
--;

1764 
¨gv
++;

1765 
vîbo£
++;

1768 i‡–
¨gc
 > 4 ) {

1769 
	`Ârötf
(
°dîr
, "use: config [-v] [input_file] [conf.c] [conf.h]\n");

1770 
	`exô
(1);

1773 i‡(
vîbo£
Ë{ 
	`¥ötf
("Opening input file...\n"); }

1775 i‡(
¨gc
 >= 2) {

1776 i‡(
	`‰e›í
(
¨gv
[1], "r", 
°dö
Ë=
NULL
) {

1777 
	`Ârötf
(
°dîr
, "C™'à›í %s\n", 
¨gv
[1]);

1778 
	`exô
(1);

1782 i‡(
	`‰e›í
(
INFILE
, "r", 
°dö
Ë=
NULL
) {

1783 
	`Ârötf
(
°dîr
, "C™'à›í %s\n", 
INFILE
);

1784 
	`exô
(1);

1795 i‡(
vîbo£
Ë{ 
	`¥ötf
("Parsing configuration specs...\n"); }

1797 i‡–(
n
 = 
	`yy∑r£
()Ë!0 ) { 
	`exô
(n); }

1801 i‡(
vîbo£
Ë{ 
	`¥ötf
("Opening output files...\n"); }

1803 i‡(
¨gc
 >= 3) {

1804 i‡–(
c⁄fc
 = 
	`f›í
(
¨gv
[2],"w"ËË=
NULL
) {

1805 
	`Ârötf
(
°dîr
, "C™'àwrôê⁄ %s\n", 
¨gv
[2]);

1806 
	`exô
(1);

1810 i‡–(
c⁄fc
 = 
	`f›í
(
CONFC
,"w"ËË=
NULL
) {

1811 
	`Ârötf
(
°dîr
, "C™'àwrôê⁄ %s\n", 
CONFC
);

1812 
	`exô
(1);

1816 i‡(
¨gc
 >= 4) {

1817 i‡–(
c⁄fh
 = 
	`f›í
(
¨gv
[3],"w"ËË=
NULL
) {

1818 
	`Ârötf
(
°dîr
, "C™'àwrôê⁄ %s\n", 
¨gv
[3]);

1819 
	`exô
(1);

1823 i‡–(
c⁄fh
 = 
	`f›í
(
CONFH
,"w"ËË=
NULL
) {

1824 
	`Ârötf
(
°dîr
, "C™'àwrôê⁄ %s\n", 
CONFH
);

1825 
	`exô
(1);

1836 
	`Ârötf
(
c⁄fh
, "/* conf.h (GENERATED FILE; DO NOT EDIT) */\n\n");

1838 i‡(
vîbo£
Ë{ 
	`¥ötf
("Writing output...\n"); }

1840 
	`Ârötf
(
c⁄fh
, "/* Device switchÅable declarations */\n\n");

1842 
i
 = 0; (
p
 = 
dev°ab
[i]Ë!
NULL
; i++) {

1843 
	`Ârötf
(
c⁄fh
, "%s\n", 
p
);

1846 
	`Ârötf
(
c⁄fh
, "\n");

1850 
	`Ârötf
(
c⁄fh
, "/* DeviceÇame definitions */\n\n");

1851 
i
 = 0; i<
ndevs
; i++) {

1852 
s
 = &
devs
[
i
];

1853 
	`Ârötf
(
c⁄fh
, "#define %-20s%2d\t/*Åype %-8s */\n",

1854 
s
->
«me
, 
i
, s->
äame
);

1856 
	`Ârötf
(
c⁄fh
, "\n");

1860 
	`Ârötf
(
c⁄fh
, "/* Control block sizes */\n\n");

1861 
i
 = 0; i < 
¡y≥s
; i++) {

1862 
s
 = &
dty≥s
[
i
];

1863 i‡(
s
->
mö‹
 > 0) {

1864 
	`Ârötf
(
c⁄fh
, "#define\tN%s\t%d\n",

1865 
s
->
äame
, s->
mö‹
);

1869 
	`Ârötf
(
c⁄fh
, "\n");

1871 i‡(
ndevs
 > 0Ë{ 
	`Ârötf
(
c⁄fh
, "#define NDEVS %d\n",Çdevs); }

1875 i‡(
brkcou¡
 >4 && 
vîbo£
) {

1876 
	`¥ötf
("C›yög deföôi⁄†tÿ%s...\n", 
CONFH
);

1879 i‡(
brkcou¡
 >= 2) {

1880  (
c
 = 
	`öput
()) > 0) {

1881 
	`putc
(
c
, 
c⁄fh
);

1884 
	`f˛o£
(
c⁄fh
);

1894 
	`Ârötf
(
c⁄fc
, "/* conf.c (GENERATED FILE; DO NOT EDIT) */\n\n");

1895 
	`Ârötf
(
c⁄fc
, "#include <xinu.h>\n\n");

1896 
	`Ârötf
(
c⁄fc
, "\n");

1898 
	`Ârötf
(
c⁄fc
, "extern\tdevcall\tioerr(void);\n");

1899 
	`Ârötf
(
c⁄fc
, "extern\tdevcall\tionull(void);\n\n");

1902 
	`Ârötf
(
c⁄fc
, "/* Device independent I/O switch */\n\n");

1903 i‡(
ndevs
 > 0)

1905 
	`Ârötf
(
c⁄fc
, "struct dentry devtab[NDEVS] =\n{\n");

1906 
	`Ârötf
(
c⁄fc
, "%s\n%s\n%s\n%s\n%s\n%s\n%s\n%s\n\n",

1917 
i
=0; i<
ndevs
; i++) {

1918 
s
 = &
devs
[
i
];

1919 
	`Ârötf
(
c⁄fc
, "/* %†i†%†*/\n", 
s
->
«me
, s->
äame
);

1920 
	`Ârötf
(
c⁄fc
, "\t{ %d, %d, \"%s\",\n", 
i
, 
s
->
mö‹
, s->
«me
);

1921 
	`Ârötf
(
c⁄fc
, "\t (void *)%s, (void *)%s, (void *)%s,\n",

1922 
s
->
öô
, s->
›í
, s->
˛o£
);

1923 
	`Ârötf
(
c⁄fc
, "\t (void *)%s, (void *)%s, (void *)%s,\n",

1924 
s
->
ªad
, s->
wrôe
, s->
£ek
);

1925 
	`Ârötf
(
c⁄fc
, "\t (void *)%s, (void *)%s, (void *)%s,\n",

1926 
s
->
gëc
, s->
putc
, s->
c⁄åﬁ
);

1927 
	`Ârötf
(
c⁄fc
, "\t (void *)0x%x, (void *)%s, %d }",

1928 
s
->
c§
, s->
öå
, s->
úq
);

1929 i‡(
i
< 
ndevs
-1) {

1930 
	`Ârötf
(
c⁄fc
, ",\n\n");

1932 
	`Ârötf
(
c⁄fc
, "\n};");

1937 
	`Ârötf
(
c⁄fc
, "\n");

1938 
	`f˛o£
(
c⁄fc
);

1941 i‡(
vîbo£
) {

1942 
	`¥ötf
("C⁄figuøti⁄ com∂ëe. Numbî o‡devs=%d:\n", 
ndevs
);

1943 
i
=0; i<
ndevs
; i++) {

1944 
s
 = &
devs
[
i
];

1945 
	`¥ötf
("Devi˚ %†(⁄ %s)\n", 
s
->
«me
, s->
is⁄
);

1946 
	`¥ötf
(" csr=0x%04x, irq=0x%04x, minor=%d\n",

1947 
s
->
c§
, s->
úq
, s->
mö‹
);

1950 
	}
}

1960 
	$add©å
(
tok
, 
vÆ
) {

1961 
dev_ít
 *
s
;

1962 *
c
;

1964 i‡(
brkcou¡
 == 0) {

1966 
s
 = &
dty≥s
[
¡y≥s
-1];

1969 
s
 = &
devs
[
ndevs
-1];

1972 
tok
) {

1973 
CSR
: 
s
->
c§
 = 
vÆ
; ;

1974 
IRQ
: 
s
->
úq
 = 
vÆ
; ;

1975 
INTR
: 
	`°r˝y
(
s
->
öå
, 
ßvóârid
); ;

1976 
READ
: 
	`°r˝y
(
s
->
ªad
, 
ßvóârid
); ;

1977 
WRITE
: 
	`°r˝y
(
s
->
wrôe
,
ßvóârid
); ;

1978 
GETC
: 
	`°r˝y
(
s
->
gëc
, 
ßvóârid
); ;

1979 
PUTC
: 
	`°r˝y
(
s
->
putc
, 
ßvóârid
); ;

1980 
OPEN
: 
	`°r˝y
(
s
->
›í
, 
ßvóârid
); ;

1981 
CLOSE
: 
	`°r˝y
(
s
->
˛o£
,
ßvóârid
); ;

1982 
INIT
: 
	`°r˝y
(
s
->
öô
, 
ßvóârid
); ;

1983 
SEEK
: 
	`°r˝y
(
s
->
£ek
, 
ßvóârid
); ;

1984 
CONTROL
: 
	`°r˝y
(
s
->
c⁄åﬁ
,
ßvóârid
); ;

1985 : 
	`Ârötf
(
°dîr
, "InternalÉrror 1\n");

1987 
	}
}

1996 
	$addt⁄
(*
t⁄id
) {

1997 
cuºty≥
;

1999 i‡(
	`°æí
(
t⁄id
Ë>
MAXNAME
) {

2000 
	`Ârötf
(
°dîr
,"string %s isÅooÜong onÜine %d\n",

2001 
t⁄id
, 
löe˘r
);

2002 
	`exô
(1);

2004 
cuºty≥
 = 
¡y≥s
 - 1;

2005 
	`°r˝y
(
dty≥s
[
cuºty≥
].
is⁄
, 
t⁄id
);

2007  
cuºty≥
;

2008 
	}
}

2018 
	$c⁄fig_©oi
(*
p
, 
Àn
) {

2019 
ba£
, 
rv
;

2021 i‡(*
p
 == '0')

2023 ++
p
;

2024 --
Àn
;

2025 i‡(*
p
 == 'x' || *p == 'X')

2027 ++
p
; --
Àn
;

2028 
ba£
 = 16;

2032 
ba£
 = 8;

2037 
ba£
 = 10;

2040 
rv
 = 0;

2041 ; 
Àn
 > 0; ++
p
, --len)

2043 
rv
 *
ba£
;

2044 i‡(
	`isdigô
(*
p
)Ë{ 
rv
 += *p - '0'; }

2045 i‡(
	`isuµî
(*
p
)Ë{ 
rv
 += *p - 'A' + 10; }

2046 { 
rv
 +*
p
 - 'a' + 10; }

2049  
rv
;

2050 
	}
}

2058 
	$devisid
(*
äame
) {

2059 
cuºdev
;

2060 
i
;

2062 i‡(
	`°æí
(
äame
Ë>
MAXNAME
) {

2063 
	`Ârötf
(
°dîr
,"string %s isÅooÜong onÜine %d\n",

2064 
äame
, 
löe˘r
);

2065 
	`exô
(1);

2069 
i
=0; i<
¡y≥s
; i++) {

2070 i‡(
	`°rcmp
(
äame
, 
dty≥s
[
i
].tname) == 0) {

2074 i‡(
i
 >
¡y≥s
) {

2075 
	`Ârötf
(
°dîr
, "IllegalÅypeÇame %s onÜine %d\n",

2076 
äame
, 
löe˘r
);

2077 
	`exô
(1);

2079 
cuºdev
 = 
ndevs
 - 1;

2080 
	`°r˝y
(
devs
[
cuºdev
].
äame
,Åname);

2083 
	}
}

2093 
	$dev⁄id
(*
⁄«me
) {

2094 
cuºdev
;

2095 
i
;

2096 
dev_ít
 *
d±r
;

2097 
dev_ít
 *
çå
;

2098 
tmp
[
MAXNAME
];

2101 i‡(
	`°æí
(
⁄«me
Ë>
MAXNAME
) {

2102 
	`Ârötf
(
°dîr
,"string %s isÅooÜong onÜine %d\n",

2103 
⁄«me
, 
löe˘r
);

2104 
	`exô
(1);

2106 i‡(
ndevs
 <=0) {

2107 
	`Ârötf
(
°dîr
,"InternalÉrror 3\n");

2108 
	`exô
(1);

2110 
cuºdev
 = 
ndevs
 - 1;

2111 
d±r
 = &
devs
[
cuºdev
];

2113 
	`°r˝y
(
d±r
->
is⁄
, 
⁄«me
);

2117 
i
=0; i<
¡y≥s
; i++) {

2118 
çå
 = &
dty≥s
[
i
];

2119 i‡–(
	`°rcmp
(
d±r
->
äame
,
çå
->tname) == 0 ) &&

2120 (
	`°rcmp
(
d±r
->
is⁄
, 
çå
->ison) == 0 ) ){

2126 
	`°r˝y
(
tmp
, 
d±r
->
«me
);

2127 
	`bc›y
 (
çå
, 
d±r
, (
dev_ít
));

2130 
çå
->
mö‹
++;

2131 
	`°r˝y
(
d±r
->
«me
, 
tmp
);

2136 
	`Ârötf
(
°dîr
, "IÀagÆ devi˚ s≥cifiˇti⁄ o¿löê%d\n", 
löe˘r
);

2137 
	`exô
(1);

2138 
	}
}

2147 
	$gë©åid
(*
°r
) {

2149 i‡(
	`°æí
(
°r
Ë>
MAXNAME
) {

2150 
	`Ârötf
(
°dîr
,"atribute string %s isÅooÜong onÜine %d\n",

2151 
°r
, 
löe˘r
);

2152 
	`exô
(1);

2154 
	`°r˝y
(
ßvóârid
, 
°r
);

2156 
	}
}

2165 
	$√wdev
(*
«me
) {

2167 
dev_ít
 *
d±r
;

2168 
i
;

2170 i‡(
ndevs
 >
NDEVS
) {

2171 
	`Ârötf
(
°dîr
,"Toÿm™y devi˚†⁄Üöê%d", 
löe˘r
);

2172 
	`exô
(1);

2174 i‡(
	`°æí
(
«me
Ë>
MAXNAME
) {

2175 
	`Ârötf
(
°dîr
,"DeviceÇame %s isÅooÜong onÜine %d\n",

2176 
«me
, 
löe˘r
);

2177 
	`exô
(1);

2182 
i
=0; i<
ndevs
; i++) {

2183 i‡(
	`°rcmp
(
«me
, 
devs
[
i
].name) == 0) {

2184 
	`Ârötf
(
°dîr
, "Duplicate deviceÇame %s onÜine %d\n",

2185 
«me
, 
löe˘r
);

2186 
	`exô
(1);

2190 
d±r
 = &
devs
[
ndevs
];

2194 
	`bzîo
((*)
d±r
, (
dev_ít
));

2195 
	`°r˝y
(
d±r
->
«me
,Çame);

2196 
ndevs
++;

2198 
	}
}

2207 
	$√wty≥
(*
«me
) {

2209 
dev_ít
 *
d±r
;

2210 
i
;

2212 i‡(
¡y≥s
 >
NTYPES
) {

2213 
	`Ârötf
(
°dîr
,"Toÿm™yÅy≥†⁄Üöê%d", 
löe˘r
);

2214 
	`exô
(1);

2216 i‡(
	`°æí
(
«me
Ë>
MAXNAME
) {

2217 
	`Ârötf
(
°dîr
,"TypeÇame %s isÅooÜong onÜine %d\n",

2218 
«me
, 
löe˘r
);

2219 
	`exô
(1);

2224 
i
=0; i<
¡y≥s
; i++) {

2225 i‡(
	`°rcmp
(
«me
, 
dty≥s
[
i
].
äame
) == 0) {

2226 
	`Ârötf
(
°dîr
, "DuplicateÅypeÇame %s onÜine %d\n",

2227 
«me
, 
löe˘r
);

2228 
	`exô
(1);

2232 
d±r
 = &
dty≥s
[
¡y≥s
];

2236 
	`bzîo
((*)
d±r
, (
dev_ít
));

2237 
	`°r˝y
(
d±r
->
äame
, 
«me
);

2238 
	`°∫˝y
(
d±r
->
öå
, "ioerr", 5);

2239 
	`°∫˝y
(
d±r
->
öô
, "ioerr", 5);

2240 
	`°∫˝y
(
d±r
->
›í
, "ioerr", 5);

2241 
	`°∫˝y
(
d±r
->
˛o£
, "ioerr", 5);

2242 
	`°∫˝y
(
d±r
->
ªad
, "ioerr", 5);

2243 
	`°∫˝y
(
d±r
->
wrôe
, "ioerr", 5);

2244 
	`°∫˝y
(
d±r
->
c⁄åﬁ
, "ioerr", 5);

2245 
	`°∫˝y
(
d±r
->
£ek
, "ioerr", 5);

2246 
	`°∫˝y
(
d±r
->
gëc
, "ioerr", 5);

2247 
	`°∫˝y
(
d±r
->
putc
, "ioerr", 5);

2249  
¡y≥s
++;

2250 
	}
}

2259 
	$yyîr‹
(*
s
) {

2261 
	`Ârötf
(
°dîr
, "Sy¡axÉº‹ i¿%†⁄Üöê%d\n", 
doög
, 
löe˘r
);

2262 
	}
}

	@device/eth/ethcontrol.c

3 
	~<xöu.h
>

9 
devˇŒ
 
	$ëhc⁄åﬁ
 (

10 
díåy
 *
dev±r
,

11 
öt32
 
func
,

12 
öt32
 
¨g1
,

13 
öt32
 
¨g2


16 
ëhcblk
 *
ëh±r
;

17 
öt32
 
ªtvÆ
 = 
OK
;

19 
ëh±r
 = &
ëhîèb
[
dev±r
->
dvmö‹
];

21 
func
) {

25 
ETH_CTRL_GET_MAC
:

26 
	`mem˝y
((
byã
 *)
¨g1
, 
ëh±r
->
devAddªss
,

27 
ETH_ADDR_LEN
);

32 
ETH_CTRL_ADD_MCAST
:

33 
ªtvÆ
 = 
	`ëhmˇ°_add
(
ëh±r
, (
byã
 *)
¨g1
);

38 
ETH_CTRL_REMOVE_MCAST
:

39 
ªtvÆ
 = 
	`ëhmˇ°_ªmove
(
ëh±r
, (
byã
 *)
¨g1
);

43  
SYSERR
;

46  
ªtvÆ
;

47 
	}
}

	@device/eth/ethhandler.c

3 
	~<xöu.h
>

9 
	$ëhh™dÀr
 (

10 
öt32
 
¨g


13 
díåy
 *
dev±r
;

14 
ëhcblk
 *
ëh±r
;

15 
ëh_q_c§eg
 *
c§±r
;

16 
ëh_q_tx_desc
 *
tdes˝å
;

17 
ëh_q_rx_desc
 *
rdes˝å
;

18 vﬁ©ûê
uöt32
 
§
;

19 
öt32
 
cou¡
;

20 
öt32
 
cuº_rögsize
;

22 
dev±r
 = (
díåy
 *)
¨g
;

23 
ëh±r
 = &
ëhîèb
[
dev±r
->
dvmö‹
];

25 
c§±r
 = (
ëh_q_c§eg
 *)
ëh±r
->
c§
;

29 
§
 = 
c§±r
->sr;

33 if((
c§±r
->
§
 & 
ETH_QUARK_SR_NIS
) == 0) {

39 
c§±r
->
§
 = sr;

43 i‡(
§
 & 
ETH_QUARK_SR_TI
) {

47 
tdes˝å
 = (
ëh_q_tx_desc
 *)
ëh±r
->
txRög
 +

48 
ëh±r
->
txHód
;

52 
cou¡
 = 
	`£mcou¡
(
ëh±r
->
o£m
);

54 if(
cou¡
 < 0) {

55 
cuº_rögsize
 = 
ëh±r
->
txRögSize
;

58 
cuº_rögsize
 = 
ëh±r
->
txRögSize
 - 
cou¡
;

63 
cou¡
 = 0;

67 
cuº_rögsize
 > 0) {

71 if(
tdes˝å
->
˘æ°©
 & 
ETH_QUARK_TDCS_OWN
) {

77 
cou¡
++;

81 
cuº_rögsize
--;

85 
tdes˝å
 += 1;

89 
ëh±r
->
txHód
 += 1;

90 if(
ëh±r
->
txHód
 >ëh±r->
txRögSize
) {

91 
ëh±r
->
txHód
 = 0;

92 
tdes˝å
 = (
ëh_q_tx_desc
 *)

93 
ëh±r
->
txRög
;

100 
	`sig« 
(
ëh±r
->
o£m
, 
cou¡
);

103 if(
§
 & 
ETH_QUARK_SR_RI
) {

107 
rdes˝å
 = (
ëh_q_rx_desc
 *)
ëh±r
->
rxRög
 +

108 
ëh±r
->
rxTaû
;

110 
cou¡
 = 0;

115 
cou¡
 <
ëh±r
->
rxRögSize
) {

119 if(
rdes˝å
->
°©us
 & 
ETH_QUARK_RDST_OWN
) {

124 
cou¡
++;

128 
rdes˝å
 += 1;

132 
ëh±r
->
rxTaû
 += 1;

133 if(
ëh±r
->
rxTaû
 >ëh±r->
rxRögSize
) {

134 
ëh±r
->
rxTaû
 = 0;

135 
rdes˝å
 = (
ëh_q_rx_desc
 *)

136 
ëh±r
->
rxRög
;

143 
	`sig« 
(
ëh±r
->
i£m
, 
cou¡
);

147 
	}
}

	@device/eth/ethinit.c

3 
	~<xöu.h
>

5 
ëhcblk
 
	gëhîèb
[1];

11 
uöt16
 
	$ëh_phy_ªad
 (

12 vﬁ©ûê
ëh_q_c§eg
 *
c§±r
,

13 
uöt32
 
ªgnum


16 
uöt32
 
ªåõs
;

20 
c§±r
->
gmiür
 & 
ETH_QUARK_GMIIAR_GB
);

24 
c§±r
->
gmiür
 =

26 (
ªgnum
 << 6) |

27 (
ETH_QUARK_GMIIAR_CR
) |

28 (
ETH_QUARK_GMIIAR_GB
);

32 
ªåõs
 = 0;

33 
c§±r
->
gmiür
 & 
ETH_QUARK_GMIIAR_GB
) {

34 
	`DELAY
(
ETH_QUARK_INIT_DELAY
);

35 if((++
ªåõs
Ë> 
ETH_QUARK_MAX_RETRIES
)

41  (
uöt16
)
c§±r
->
gmiidr
;

42 
	}
}

48 
	$ëh_phy_wrôe
 (

49 vﬁ©ûê
ëh_q_c§eg
 *
c§±r
,

50 
uöt32
 
ªgnum
,

51 
uöt16
 
vÆue


54 
uöt32
 
ªåõs
;

58 
c§±r
->
gmiür
 & 
ETH_QUARK_GMIIAR_GB
);

62 
c§±r
->
gmiidr
 = (
uöt32
)
vÆue
;

66 
c§±r
->
gmiür
 =

68 (
ªgnum
 << 6) |

69 (
ETH_QUARK_GMIIAR_CR
) |

70 (
ETH_QUARK_GMIIAR_GW
) |

71 (
ETH_QUARK_GMIIAR_GB
);

75 
ªåõs
 = 0;

76 
c§±r
->
gmiür
 & 
ETH_QUARK_GMIIAR_GB
) {

77 
	`DELAY
(
ETH_QUARK_INIT_DELAY
);

78 if((++
ªåõs
Ë> 
ETH_QUARK_MAX_RETRIES
)

81 
	}
}

87 
öt32
 
	$ëh_phy_ª£t
 (

88 vﬁ©ûê
ëh_q_c§eg
 *
c§±r


91 
uöt16
 
vÆue
;

92 
uöt32
 
ªåõs
;

96 
vÆue
 = 
	`ëh_phy_ªad
(
c§±r
, 0);

100 
	`ëh_phy_wrôe
(
c§±r
, 0, (
vÆue
 | 0x8000));

104 
ªåõs
 = 0;

105 
	`ëh_phy_ªad
(
c§±r
, 0) & 0x8000) {

106 
	`DELAY
(
ETH_QUARK_INIT_DELAY
);

107 if((++
ªåõs
Ë> 
ETH_QUARK_MAX_RETRIES
)

108  
SYSERR
;

113 
vÆue
 = 
	`ëh_phy_ªad
(
c§±r
, 1);

114 if(
vÆue
 & 0x0008) {

118 
ªåõs
 = 0;

119 (
	`ëh_phy_ªad
(
c§±r
, 1) & 0x0020) == 0) {

120 
	`DELAY
(
ETH_QUARK_INIT_DELAY
);

121 if((++
ªåõs
Ë> 
ETH_QUARK_MAX_RETRIES
)

122  
SYSERR
;

128 
ªåõs
 = 0;

129 (
	`ëh_phy_ªad
(
c§±r
, 1) & 0x0004) == 0) {

130 
	`DELAY
(
ETH_QUARK_INIT_DELAY
);

131 if((++
ªåõs
Ë> 
ETH_QUARK_MAX_RETRIES
)

132  
SYSERR
;

135 
	`DELAY
(100000);

137 
	`k¥ötf
("\nEthernet Link is Up\n");

139  
OK
;

140 
	}
}

146 
öt32
 
	$ëhöô
 (

147 
díåy
 *
dev±r


150 
ëhcblk
 *
ëh±r
;

151 vﬁ©ûê
ëh_q_c§eg
 *
c§±r
;

152 
ëh_q_tx_desc
 *
tx_descs
;

153 
ëh_q_rx_desc
 *
rx_descs
;

154 
√çackë
 *
pkçå
;

155 *
ãm±r
;

156 
uöt32
 
bmr
;

157 
uöt32
 
ªåõs
;

158 
öt32
 
ªtvÆ
;

159 
öt32
 
i
;

161 
ëh±r
 = &
ëhîèb
[
dev±r
->
dvmö‹
];

163 
ëh±r
->
c§
 = (
ëh_q_c§eg
 *)
dev±r
->
dvc§
;

164 
c§±r
 = (
ëh_q_c§eg
 *)
ëh±r
->
c§
;

167 
	`pci_wrôe_c⁄fig_w‹d
(
ëh±r
->
pcidev
, 0x4, 0x0006);

170 
ªtvÆ
 = 
	`ëh_phy_ª£t
(
c§±r
);

171 if(
ªtvÆ
 =
SYSERR
) {

172  
SYSERR
;

176 
c§±r
->
bmr
 |
ETH_QUARK_BMR_SWR
;

179 
ªåõs
 = 0;

180 
c§±r
->
bmr
 & 
ETH_QUARK_BMR_SWR
) {

181 
	`DELAY
(
ETH_QUARK_INIT_DELAY
);

182 if((++
ªåõs
Ë> 
ETH_QUARK_MAX_RETRIES
)

183  
SYSERR
;

186 
bmr
 = 
c§±r
->bmr;

187 
bmr
 &~(
ETH_QUARK_BMR_PBL_MASK
 | 
ETH_QUARK_BMR_MB
);

188 
bmr
 |
ETH_QUARK_BMR_PBL16
 |

189 
ETH_QUARK_BMR_FB
 |

190 
ETH_QUARK_BMR_RIX
;

191 
c§±r
->
bmr
 = bmr;

194 
c§±r
->
omr
 |
ETH_QUARK_OMR_TSF
 | 
ETH_QUARK_OMR_OSF
;

197 
	`pci_£t_ivec
(
ëh±r
->
pcidev
, 
dev±r
->
dvúq
,

198 
dev±r
->
dvöå
, (
öt32
)devptr);

201 
c§±r
->
mac¸
 |(
ETH_QUARK_MACCR_RMIISPD100
 |

202 
ETH_QUARK_MACCR_DM
);

205 
c§±r
->
mmc¸
 |
ETH_QUARK_MMC_CNTFREEZ
 | 
ETH_QUARK_MMC_CNTRST
;

208 
	`gë_qu¨k_pd©_íåy_d©a_by_id
(
QUARK_MAC1_ID
,

209 (*)(
ëh±r
->
devAddªss
), 
ETH_ADDR_LEN
);

211 
	`k¥ötf
("MACáddress is %02x:%02x:%02x:%02x:%02x:%02x\n",

212 0xff&
ëh±r
->
devAddªss
[0],

213 0xff&
ëh±r
->
devAddªss
[1],

214 0xff&
ëh±r
->
devAddªss
[2],

215 0xff&
ëh±r
->
devAddªss
[3],

216 0xff&
ëh±r
->
devAddªss
[4],

217 0xff&
ëh±r
->
devAddªss
[5]);

221 
c§±r
->
maˇddr0l
 = (
uöt32
)(*((uöt32 *)
ëh±r
->
devAddªss
));

222 
c§±r
->
maˇddr0h
 = ((
uöt32
)

223 (*((
uöt16
 *)(
ëh±r
->
devAddªss
 + 4))) | 0x80000000);

225 
ëh±r
->
txRögSize
 = 
ETH_QUARK_TX_RING_SIZE
;

228 
ãm±r
 = (*)
	`gëmem
((
ëh_q_tx_desc
) *

229 (
ëh±r
->
txRögSize
+1));

230 if(()
ãm±r
 =
SYSERR
) {

231  
SYSERR
;

233 
	`mem£t
(
ãm±r
, 0, (
ëh_q_tx_desc
) *

234 (
ëh±r
->
txRögSize
+1));

237 
ëh±r
->
txRög
 = (*)(((
uöt32
)
ãm±r
 + 3) & (~3));

240 
ëh±r
->
txBufs
 = (*)
	`gëmem
(
ETH_BUF_SIZE
 *

241 (
ëh±r
->
txRögSize
+1));

242 if(()
ëh±r
->
txBufs
 =
SYSERR
) {

243  
SYSERR
;

245 
ëh±r
->
txBufs
 = (*)(((
uöt32
)ethptr->txBufs + 3) & (~3));

248 
tx_descs
 = (
ëh_q_tx_desc
 *)
ëh±r
->
txRög
;

249 
pkçå
 = (
√çackë
 *)
ëh±r
->
txBufs
;

252 
i
 = 0; i < 
ëh±r
->
txRögSize
; i++) {

253 
tx_descs
[
i
].
buf„r1
 = (
uöt32
)(
pkçå
 + i);

257 
ëh±r
->
o£m
 = 
	`£m¸óã
”th±r->
txRögSize
);

258 if(()
ëh±r
->
o£m
 =
SYSERR
) {

259  
SYSERR
;

262 
ëh±r
->
rxRögSize
 = 
ETH_QUARK_RX_RING_SIZE
;

265 
ãm±r
 = (*)
	`gëmem
((
ëh_q_rx_desc
) *

266 (
ëh±r
->
rxRögSize
+1));

267 if(()
ãm±r
 =
SYSERR
) {

268  
SYSERR
;

270 
	`mem£t
(
ãm±r
, 0, (
ëh_q_rx_desc
) *

271 (
ëh±r
->
rxRögSize
+1));

274 
ëh±r
->
rxRög
 = (
ëh_q_rx_desc
 *)

275 (((
uöt32
)
ãm±r
 + 3) & (~3));

278 
ëh±r
->
rxBufs
 = (*)
	`gëmem
(
ETH_BUF_SIZE
 *

279 (
ëh±r
->
rxRögSize
+1));

280 if(()
ëh±r
->
rxBufs
 =
SYSERR
) {

281  
SYSERR
;

285 
ëh±r
->
rxBufs
 = (*)(((
uöt32
)ethptr->rxBufs + 3) & (~3));

288 
rx_descs
 = (
ëh_q_rx_desc
 *)
ëh±r
->
rxRög
;

291 
pkçå
 = (
√çackë
 *)
ëh±r
->
rxBufs
;

294 
i
 = 0; i < 
ëh±r
->
rxRögSize
; i++) {

296 
rx_descs
[
i
].
°©us
 = 
ETH_QUARK_RDST_OWN
;

297 
rx_descs
[
i
].
buf1size
 = (
uöt32
)
ETH_BUF_SIZE
;

298 
rx_descs
[
i
].
buf„r1
 = (
uöt32
)(
pkçå
 + i);

302 
rx_descs
[
ëh±r
->
rxRögSize
-1].
buf1size
 |(
ETH_QUARK_RDCTL1_RER
);

305 
ëh±r
->
i£m
 = 
	`£m¸óã
(0);

306 if(()
ëh±r
->
i£m
 =
SYSERR
) {

307  
SYSERR
;

311 
c§±r
->
õr
 = ( 
ETH_QUARK_IER_NIE
 |

312 
ETH_QUARK_IER_TIE
 |

313 
ETH_QUARK_IER_RIE
 );

316 
c§±r
->
tdœ
 = (
uöt32
)
ëh±r
->
txRög
;

319 
c§±r
->
rdœ
 = (
uöt32
)
ëh±r
->
rxRög
;

322 
c§±r
->
mac¸
 |(
ETH_QUARK_MACCR_TE
 | 
ETH_QUARK_MACCR_RE
);

325 
c§±r
->
omr
 |(
ETH_QUARK_OMR_ST
 | 
ETH_QUARK_OMR_SR
);

327  
OK
;

329 
	}
}

	@device/eth/ethmcast.c

3 
	~<xöu.h
>

9 
öt32
 
	$ëhmˇ°_add
 (

10 
ëhcblk
 *
ëh±r
,

11 
byã
 
addr
[
ETH_ADDR_LEN
]

14 
öt16
 
mˇ°_cou¡
;

16 
ëh_q_c§eg
 *
c§±r
 = (ëh_q_c§eg *)
ëh±r
->
c§
;

20 
c§±r
->
macff
 |= 0x00000010;

24 
mˇ°_cou¡
 = 
ëh±r
->
ed_mcc
;

28 if(
mˇ°_cou¡
 < 
ETH_NUM_MCAST
){

29 
	`mem˝y
(
ëh±r
->
ed_mˇ
[
mˇ°_cou¡
],
addr
,
ETH_ADDR_LEN
);

30 
mˇ°_cou¡
++;

31 
ëh±r
->
ed_mcc
 = 
mˇ°_cou¡
;

32  
OK
;

34  
SYSERR
;

36 
	}
}

42 
öt32
 
	$ëhmˇ°_ªmove
 (

43 
ëhcblk
 *
ëh±r
,

44 
byã
 
addr
[
ETH_ADDR_LEN
]

47 
öt16
 
mˇ°_cou¡
;

48 
öt32
 
i
, 
j
;

50 
mˇ°_cou¡
 = 
ëh±r
->
ed_mcc
;

54 
i
 = 0; i < 
mˇ°_cou¡
; i++) {

55 i‡(
	`memcmp
(
addr
, 
ëh±r
->
ed_mˇ
[
i
], 
ETH_ADDR_LEN
) ==0) {

59 
j
 = 
i
; j < 
mˇ°_cou¡
; j++) {

60 
	`mem˝y
(
ëh±r
->
ed_mˇ
[
j
],

61 
ëh±r
->
ed_mˇ
[
j
+1],
ETH_ADDR_LEN
);

62 
	`mem£t
(
ëh±r
->
ed_mˇ
[
j
+1],'0',

63 
ETH_ADDR_LEN
);

69 if(
i
 < 
mˇ°_cou¡
) {

73 
mˇ°_cou¡
--;

74 
ëh±r
->
ed_mcc
 = 
mˇ°_cou¡
;

75  
OK
;

77  
SYSERR
;

79 
	}
}

	@device/eth/ethread.c

3 
	~<xöu.h
>

9 
devˇŒ
 
	$ëhªad
 (

10 
díåy
 *
dev±r
,

11 *
buf
,

12 
öt32
 
Àn


15 
ëhcblk
 *
ëh±r
;

16 
ëh_q_rx_desc
 *
rdes˝å
;

17 
√çackë
 *
pkçå
;

18 
öt32
 
£gÀn
 = 0;

19 
öt32
 
‰amñí
 = 0;

20 
öt32
 
c›yÀn
 = 0;

21 *
˝å
;

22 
boﬁ8
 
fú°
, 
œ°
;

23 
boﬁ8
 
vÆid_addr
;

24 
öt32
 
i
;

26 
ëh±r
 = &
ëhîèb
[
dev±r
->
dvmö‹
];

28 
pkçå
 = (
√çackë
 *)
buf
;

34 
	`waô
(
ëh±r
->
i£m
);

38 
rdes˝å
 = (
ëh_q_rx_desc
 *)
ëh±r
->
rxRög
 +

39 
ëh±r
->
rxHód
;

43 
fú°
 = (
rdes˝å
->
°©us
 & 
ETH_QUARK_RDST_FS
) != 0;

44 
œ°
 = (
rdes˝å
->
°©us
 & 
ETH_QUARK_RDST_LS
) != 0;

46 if(
fú°
) {

50 
˝å
 = 
buf
;

51 
£gÀn
 = 
‰amñí
 = 
c›yÀn
 = 0;

56 
£gÀn
 = (
rdes˝å
->
°©us
 >> 16) & 0x3FFF;

58 if(
œ°
) {

63 
£gÀn
 -
‰amñí
;

68 
‰amñí
 +
£gÀn
;

72 
c›yÀn
 = 
£gÀn
;

73 if(
‰amñí
 > 
Àn
) {

74 
c›yÀn
 -(
‰amñí
 - 
Àn
);

79 if(
c›yÀn
 > 0) {

80 
	`mem˝y
(
˝å
, (*)
rdes˝å
->
buf„r1
,

81 (
uöt32
)
c›yÀn
);

82 
˝å
 +
c›yÀn
;

85 if(
œ°
) {

89 if(!
	`memcmp
(
pkçå
->
√t_ëhd°
,

90 
ëh±r
->
devAddªss
, 6)) {

91 
vÆid_addr
 = 
TRUE
;

95 } if(!
	`memcmp
(
pkçå
->
√t_ëhd°
,

96 
NëD©a
.
ëhbˇ°
,6)) {

97 
vÆid_addr
 = 
TRUE
;

102 
vÆid_addr
 = 
FALSE
;

103 
i
 = 0; i < (
ëh±r
->
ed_mcc
); i++) {

104 if(
	`memcmp
(
pkçå
->
√t_ëhd°
,

105 
ëh±r
->
ed_mˇ
[
i
], 6) == 0){

106 
vÆid_addr
 = 
TRUE
;

115 
ëh±r
->
rxHód
 += 1;

116 if(
ëh±r
->
rxHód
 >
ETH_QUARK_RX_RING_SIZE
) {

117 
ëh±r
->
rxHód
 = 0;

122 
rdes˝å
->
buf1size
 = 
ETH_BUF_SIZE
;

126 if(
ëh±r
->
rxHód
 == 0) {

127 
rdes˝å
->
rd˘l1
 |(
ETH_QUARK_RDCTL1_RER
);

132 
rdes˝å
->
°©us
 = 
ETH_QUARK_RDST_OWN
;

134 if(
vÆid_addr
 =
TRUE
) {

141  (
‰amñí
 > 
Àn
) ?Üen : framelen;

143 
	}
}

	@device/eth/ethwrite.c

3 
	~<xöu.h
>

9 
devˇŒ
 
	$ëhwrôe
 (

10 
díåy
 *
dev±r
,

11 *
buf
,

12 
öt32
 
Àn


15 
ëhcblk
 *
ëh±r
;

16 
ëh_q_c§eg
 *
c§±r
;

17 vﬁ©ûê
ëh_q_tx_desc
 *
des˝å
;

18 
uöt32
 
i
;

20 
ëh±r
 = &
ëhîèb
[
dev±r
->
dvmö‹
];

22 
c§±r
 = (
ëh_q_c§eg
 *)
ëh±r
->
c§
;

26 
	`waô
(
ëh±r
->
o£m
);

30 
des˝å
 = (
ëh_q_tx_desc
 *)
ëh±r
->
txRög
 +Éth±r->
txTaû
;

34 
ëh±r
->
txTaû
 += 1;

35 if(
ëh±r
->
txTaû
 >ëh±r->
txRögSize
) {

36 
ëh±r
->
txTaû
 = 0;

41 
des˝å
->
buf1size
 = 
Àn
;

45 
i
 = 0; i < 
Àn
; i++) {

46 *((*)
des˝å
->
buf„r1
 + 
i
Ë*((*)
buf
 + i);

51 if(
ëh±r
->
txTaû
 == 0) {

52 
des˝å
->
˘æ°©
 = 
ETH_QUARK_TDCS_TER
;

54 
des˝å
->
˘æ°©
 = 0;

59 
des˝å
->
˘æ°©
 |=

60 (
ETH_QUARK_TDCS_OWN
 |

61 
ETH_QUARK_TDCS_IC
 |

62 
ETH_QUARK_TDCS_LS
 |

63 
ETH_QUARK_TDCS_FS
);

67 
c§±r
->
çdr
 = 1;

69  
OK
;

70 
	}
}

	@device/lfs/lfdballoc.c

3 
	~<xöu.h
>

5 
	#DFILL
 '+'

	)

12 
dbid32
 
	$lfdbÆloc
 (

13 
lfdb‰ì
 *
dbuff


16 
dbid32
 
dnum
;

17 
öt32
 
ªtvÆ
;

21 
dnum
 = 
Lf_d©a
.
lf_dú
.
lfd_d‰ì
;

22 i‡(
dnum
 =
LF_DNULL
) {

23 
	`∑nic
("out of data blocks");

25 
ªtvÆ
 = 
	`ªad
(
Lf_d©a
.
lf_dskdev
, (*)
dbuff
, 
dnum
);

26 i‡(
ªtvÆ
 =
SYSERR
) {

27 
	`∑nic
("lfdballoc cannotÑead disk block\n\r");

32 
Lf_d©a
.
lf_dú
.
lfd_d‰ì
 = 
dbuff
->
lf_√xtdb
;

33 
	`wrôe
(
Lf_d©a
.
lf_dskdev
, (*)&Lf_d©a.
lf_dú
, 
LF_AREA_DIR
);

34 
Lf_d©a
.
lf_dúdúty
 = 
FALSE
;

38 
	`mem£t
((*)
dbuff
, 
DFILL
, 
LF_BLKSIZ
);

39  
dnum
;

40 
	}
}

	@device/lfs/lfdbfree.c

3 
	~<xöu.h
>

10 
°©us
 
	$lfdb‰ì
(

11 
did32
 
diskdev
,

12 
dbid32
 
dnum


15 
lfdú
 *
dú±r
;

16 
lfdb‰ì
 
buf
;

18 
dú±r
 = &
Lf_d©a
.
lf_dú
;

19 
buf
.
lf_√xtdb
 = 
dú±r
->
lfd_d‰ì
;

20 
dú±r
->
lfd_d‰ì
 = 
dnum
;

21 
	`wrôe
(
diskdev
, (*)&
buf
, 
dnum
);

22 
	`wrôe
(
diskdev
, (*)
dú±r
, 
LF_AREA_DIR
);

24  
OK
;

25 
	}
}

	@device/lfs/lfflush.c

3 
	~<xöu.h
>

10 
°©us
 
	$lfÊush
 (

11 
lÊcblk
 *
lÂå


15 i‡(
lÂå
->
lf°©e
 =
LF_FREE
) {

16  
SYSERR
;

21 i‡(
Lf_d©a
.
lf_dúdúty
) {

22 
	`wrôe
(
Lf_d©a
.
lf_dskdev
, (*)&Lf_d©a.
lf_dú
,

23 
LF_AREA_DIR
);

24 
Lf_d©a
.
lf_dúdúty
 = 
FALSE
;

29 i‡(
lÂå
->
lfdbdúty
) {

30 
	`wrôe
(
Lf_d©a
.
lf_dskdev
, 
lÂå
->
lfdblock
,ÜÂå->
lfdnum
);

31 
lÂå
->
lfdbdúty
 = 
FALSE
;

36 i‡(
lÂå
->
lfibdúty
) {

37 
	`lfibput
(
Lf_d©a
.
lf_dskdev
, 
lÂå
->
lföum
, &lÂå->
lfiblock
);

38 
lÂå
->
lfibdúty
 = 
FALSE
;

41  
OK
;

42 
	}
}

	@device/lfs/lfgetmode.c

3 
	~<xöu.h
>

9 
öt32
 
	$lfgëmode
 (

10 *
mode


13 
öt32
 
mbôs
;

14 
ch
;

16 
mbôs
 = 0;

24  (
ch
 = *
mode
++Ë!
NULLCH
) {

25 
ch
) {

27 'r': i‡(
mbôs
&
LF_MODE_R
) {

28  
SYSERR
;

30 
mbôs
 |
LF_MODE_R
;

33 'w': i‡(
mbôs
&
LF_MODE_W
) {

34  
SYSERR
;

36 
mbôs
 |
LF_MODE_W
;

39 'o': i‡(
mbôs
&
LF_MODE_O
 || mbôs&
LF_MODE_N
) {

40  
SYSERR
;

42 
mbôs
 |
LF_MODE_O
;

45 'n': i‡(
mbôs
&
LF_MODE_O
 || mbôs&
LF_MODE_N
) {

46  
SYSERR
;

48 
mbôs
 |
LF_MODE_N
;

51 :  
SYSERR
;

57 i‡–(
mbôs
&
LF_MODE_RW
) == 0 ) {

58 
mbôs
 |
LF_MODE_RW
;

60  
mbôs
;

61 
	}
}

	@device/lfs/lfiballoc.c

3 
	~<xöu.h
>

10 
ibid32
 
	$lfibÆloc
 ()

12 
ibid32
 
ibnum
;

13 
lfiblk
 
iblock
;

17 
ibnum
 = 
Lf_d©a
.
lf_dú
.
lfd_i‰ì
;

18 i‡(
ibnum
 =
LF_INULL
) {

19 
	`∑nic
("out of index blocks");

21 
	`lfibgë
(
Lf_d©a
.
lf_dskdev
, 
ibnum
, &
iblock
);

25 
Lf_d©a
.
lf_dú
.
lfd_i‰ì
 = 
iblock
.
ib_√xt
;

29 
	`wrôe
(
Lf_d©a
.
lf_dskdev
, (*Ë&Lf_d©a.
lf_dú
, 
LF_AREA_DIR
);

30 
Lf_d©a
.
lf_dúdúty
 = 
FALSE
;

32  
ibnum
;

33 
	}
}

	@device/lfs/lfibclear.c

3 
	~<xöu.h
>

9 
	$lfib˛ór
(

10 
lfiblk
 *
ib±r
,

11 
öt32
 
off£t


14 
öt32
 
i
;

16 
ib±r
->
ib_off£t
 = 
off£t
;

17 
i
=0 ; i<
LF_IBLEN
 ; i++) {

18 
ib±r
->
ib_dba
[
i
] = 
LF_DNULL
;

20 
ib±r
->
ib_√xt
 = 
LF_INULL
;

22 
	}
}

	@device/lfs/lfibget.c

3 
	~<xöu.h
>

10 
	$lfibgë
(

11 
did32
 
diskdev
,

12 
ibid32
 
öum
,

13 
lfiblk
 *
ibuff


16 *
‰om
, *
to
;

17 
öt32
 
i
;

18 
dbuff
[
LF_BLKSIZ
];

22 
	`ªad
(
diskdev
, 
dbuff
, 
	`ib2£˘
(
öum
));

26 
‰om
 = 
dbuff
 + 
	`ib2di•
(
öum
);

27 
to
 = (*)
ibuff
;

28 
i
=0 ; i<(
lfiblk
) ; i++)

29 *
to
++ = *
‰om
++;

31 
	}
}

	@device/lfs/lfibput.c

3 
	~<xöu.h
>

10 
°©us
 
	$lfibput
(

11 
did32
 
diskdev
,

12 
ibid32
 
öum
,

13 
lfiblk
 *
ibuff


16 
dbid32
 
diskblock
;

17 *
‰om
, *
to
;

18 
öt32
 
i
;

19 
dbuff
[
LF_BLKSIZ
];

23 
diskblock
 = 
	`ib2£˘
(
öum
);

24 
to
 = 
dbuff
 + 
	`ib2di•
(
öum
);

25 
‰om
 = (*)
ibuff
;

29 i‡(
	`ªad
(
diskdev
, 
dbuff
, 
diskblock
Ë=
SYSERR
) {

30  
SYSERR
;

35 
i
=0 ; i<(
lfiblk
) ; i++) {

36 *
to
++ = *
‰om
++;

41 
	`wrôe
(
diskdev
, 
dbuff
, 
diskblock
);

42  
OK
;

43 
	}
}

	@device/lfs/lflclose.c

3 
	~<xöu.h
>

9 
devˇŒ
 
	$lÊ˛o£
 (

10 
díåy
 *
dev±r


13 
lÊcblk
 *
lÂå
;

17 
lÂå
 = &
lÊèb
[
dev±r
->
dvmö‹
];

18 
	`waô
(
lÂå
->
lfmuãx
);

22 i‡(
lÂå
->
lf°©e
 !
LF_USED
) {

23 
	`sig«l
(
lÂå
->
lfmuãx
);

24  
SYSERR
;

29 i‡(
Lf_d©a
.
lf_dúdúty
 || 
lÂå
->
lfdbdúty
 ||ÜÂå->
lfibdúty
) {

30 
	`lfÊush
(
lÂå
);

35 
lÂå
->
lf°©e
 = 
LF_FREE
;

36 
	`sig«l
(
lÂå
->
lfmuãx
);

37  
OK
;

38 
	}
}

	@device/lfs/lflcontrol.c

3 
	~<xöu.h
>

9 
devˇŒ
 
	$lÊc⁄åﬁ
 (

10 
díåy
 *
dev±r
,

11 
öt32
 
func
,

12 
öt32
 
¨g1
,

13 
öt32
 
¨g2


16 
lÊcblk
 *
lÂå
;

17 
öt32
 
ªtvÆ
;

21 
lÂå
 = &
lÊèb
[
dev±r
->
dvmö‹
];

22 
	`waô
(
lÂå
->
lfmuãx
);

26 i‡(
lÂå
->
lf°©e
 !
LF_USED
) {

27 
	`sig«l
(
lÂå
->
lfmuãx
);

28  
SYSERR
;

31 
func
) {

35 
LF_CTL_TRUNC
:

36 
	`waô
(
Lf_d©a
.
lf_muãx
);

37 
ªtvÆ
 = 
	`l·runˇã
(
lÂå
);

38 
	`sig«l
(
Lf_d©a
.
lf_muãx
);

39 
	`sig«l
(
lÂå
->
lfmuãx
);

40  
ªtvÆ
;

43 
	`k¥ötf
("lfc⁄åﬁ: fun˘i⁄ %dÇŸ vÆid\n\r", 
func
);

44 
	`sig«l
(
lÂå
->
lfmuãx
);

45  
SYSERR
;

47 
	}
}

	@device/lfs/lflgetc.c

3 
	~<xöu.h
>

9 
devˇŒ
 
	$lÊgëc
 (

10 
díåy
 *
dev±r


13 
lÊcblk
 *
lÂå
;

14 
ldíåy
 *
ld±r
;

16 
öt32
 
⁄ebyã
;

20 
lÂå
 = &
lÊèb
[
dev±r
->
dvmö‹
];

21 
	`waô
(
lÂå
->
lfmuãx
);

25 i‡(
lÂå
->
lf°©e
 !
LF_USED
) {

26 
	`sig«l
(
lÂå
->
lfmuãx
);

27  
SYSERR
;

32 
ld±r
 = 
lÂå
->
lfdú±r
;

33 i‡(
lÂå
->
lÂos
 >
ld±r
->
ld_size
) {

34 
	`sig«l
(
lÂå
->
lfmuãx
);

35  
EOF
;

41 i‡(
lÂå
->
lfbyã
 >&lÂå->
lfdblock
[
LF_BLKSIZ
]) {

42 
	`lf£tup
(
lÂå
);

48 
⁄ebyã
 = 0xf‡& *
lÂå
->
lfbyã
++;

49 
lÂå
->
lÂos
++;

50 
	`sig«l
(
lÂå
->
lfmuãx
);

51  
⁄ebyã
;

52 
	}
}

	@device/lfs/lflinit.c

3 
	~<xöu.h
>

5 
lÊcblk
 
	glÊèb
[
NlÊ
];

11 
devˇŒ
 
	$lÊöô
 (

12 
díåy
 *
dev±r


15 
lÊcblk
 *
lÂå
;

16 
öt32
 
i
;

18 
lÂå
 = &
lÊèb
[ 
dev±r
->
dvmö‹
 ];

22 
lÂå
->
lf°©e
 = 
LF_FREE
;

23 
lÂå
->
lfdev
 = 
dev±r
->
dvnum
;

24 
lÂå
->
lfmuãx
 = 
	`£m¸óã
(1);

28 
lÂå
->
lfdú±r
 = (
ldíåy
 *Ë
NULL
;

29 
lÂå
->
lÂos
 = 0;

30 
i
=0; i<
LF_NAME_LEN
; i++) {

31 
lÂå
->
l‚ame
[
i
] = 
NULLCH
;

36 
lÂå
->
lföum
 = 
LF_INULL
;

37 
	`mem£t
((*Ë&
lÂå
->
lfiblock
, 
NULLCH
, (
lfiblk
));

38 
lÂå
->
lfdnum
 = 0;

39 
	`mem£t
((*Ë&
lÂå
->
lfdblock
, 
NULLCH
, 
LF_BLKSIZ
);

43 
lÂå
->
lfbyã
 = &lÂå->
lfdblock
[
LF_BLKSIZ
];

44 
lÂå
->
lfibdúty
 =ÜÂå->
lfdbdúty
 = 
FALSE
;

45  
OK
;

46 
	}
}

	@device/lfs/lflputc.c

3 
	~<xöu.h
>

9 
devˇŒ
 
	$lÊputc
 (

10 
díåy
 *
dev±r
,

11 
ch


14 
lÊcblk
 *
lÂå
;

15 
ldíåy
 *
ld±r
;

20 
lÂå
 = &
lÊèb
[
dev±r
->
dvmö‹
];

21 
	`waô
(
lÂå
->
lfmuãx
);

25 i‡(
lÂå
->
lf°©e
 !
LF_USED
) {

26 
	`sig«l
(
lÂå
->
lfmuãx
);

27  
SYSERR
;

33 
ld±r
 = 
lÂå
->
lfdú±r
;

34 i‡(
lÂå
->
lÂos
 > 
ld±r
->
ld_size
) {

35 
	`sig«l
(
lÂå
->
lfmuãx
);

36  
SYSERR
;

41 i‡(
lÂå
->
lfbyã
 >&lÂå->
lfdblock
[
LF_BLKSIZ
]) {

45 
	`lf£tup
(
lÂå
);

51 i‡(
lÂå
->
lÂos
 >
ld±r
->
ld_size
) {

52 
ld±r
->
ld_size
++;

53 
Lf_d©a
.
lf_dúdúty
 = 
TRUE
;

58 *
lÂå
->
lfbyã
++ = 
ch
;

59 
lÂå
->
lÂos
++;

60 
lÂå
->
lfdbdúty
 = 
TRUE
;

62 
	`sig«l
(
lÂå
->
lfmuãx
);

63  
OK
;

64 
	}
}

	@device/lfs/lflread.c

3 
	~<xöu.h
>

9 
devˇŒ
 
	$lÊªad
 (

10 
díåy
 *
dev±r
,

11 *
buff
,

12 
öt32
 
cou¡


15 
uöt32
 
numªad
;

16 
öt32
 
nxtbyã
;

18 i‡(
cou¡
 < 0) {

19  
SYSERR
;

24 
numªad
=0 ;Çumªad < 
cou¡
 ;Çumread++) {

25 
nxtbyã
 = 
	`lÊgëc
(
dev±r
);

26 i‡(
nxtbyã
 =
SYSERR
) {

27  
SYSERR
;

28 } i‡(
nxtbyã
 =
EOF
) {

29 i‡(
numªad
 == 0) {

30  
EOF
;

32  
numªad
;

35 *
buff
++ = (Ë(0xf‡& 
nxtbyã
);

38  
numªad
;

39 
	}
}

	@device/lfs/lflseek.c

3 
	~<xöu.h
>

9 
devˇŒ
 
	$lÊ£ek
 (

10 
díåy
 *
dev±r
,

11 
uöt32
 
off£t


14 
lÊcblk
 *
lÂå
;

18 
lÂå
 = &
lÊèb
[
dev±r
->
dvmö‹
];

19 
	`waô
(
lÂå
->
lfmuãx
);

20 i‡(
lÂå
->
lf°©e
 !
LF_USED
) {

21 
	`sig«l
(
lÂå
->
lfmuãx
);

22  
SYSERR
;

27 i‡(
off£t
 > 
lÂå
->
lfdú±r
->
ld_size
) {

28 
	`sig«l
(
lÂå
->
lfmuãx
);

29  
SYSERR
;

36 
lÂå
->
lÂos
 = 
off£t
;

37 
lÂå
->
lfbyã
 = &lÂå->
lfdblock
[
LF_BLKSIZ
];

39 
	`sig«l
(
lÂå
->
lfmuãx
);

40  
OK
;

41 
	}
}

	@device/lfs/lflwrite.c

3 
	~<xöu.h
>

9 
devˇŒ
 
	$lÊwrôe
 (

10 
díåy
 *
dev±r
,

11 *
buff
,

12 
öt32
 
cou¡


15 
öt32
 
i
;

17 i‡(
cou¡
 < 0) {

18  
SYSERR
;

23 
i
=0; i<
cou¡
; i++) {

24 i‡(
	`lÊputc
(
dev±r
, *
buff
++Ë=
SYSERR
) {

25  
SYSERR
;

28  
cou¡
;

29 
	}
}

	@device/lfs/lfscheck.c

3 
	~<xöu.h
>

4 
	~<ømdisk.h
>

10 
°©us
 
	$lfscheck
 (

11 
lfdú
 *
dú±r


14 
uöt32
 
ªvî£
;

18 i‡–(
dú±r
->
lfd_fsysid
 !
LFS_ID
) ||

19 (
dú±r
->
lfd_Ælzîos
 != 0x00000000) ||

20 (
dú±r
->
lfd_Æl⁄es
 != 0xffffffff) ) {

21  
SYSERR
;

26 
ªvî£
 = ((
LFS_ID
>>24) & 0x000000ff) |

27 ((
LFS_ID
>> 8) & 0x0000ff00) |

28 ((
LFS_ID
<< 8) & 0x00ff0000) |

29 ((
LFS_ID
<<24) & 0xff000000) ;

31 i‡(
dú±r
->
lfd_ªvid
 !
ªvî£
) {

32  
SYSERR
;

36 i‡(
dú±r
->
lfd_nfûes
 < 0){

37  
SYSERR
;

39  
OK
;

40 
	}
}

	@device/lfs/lfsckfmt.c

3 
	~<xöu.h
>

4 
	~<ømdisk.h
>

10 
°©us
 
	$lfsckfmt
 (

11 
did32
 
disk


14 
uöt32
 
ib£˘‹s
;

15 
lfdú
 
dú
;

16 
uöt32
 
dblks
;

17 
lfiblk
 
iblock
;

18 
lfdb‰ì
 
dblock
;

19 
öt32
 
lfiblks
;

20 
öt32
 
ªtvÆ
;

21 
ibid32
 
√xtib
;

22 
dbid32
 
√xtdb
;

26 
ªtvÆ
 = 
	`ªad
(
disk
,(*)&
dú
, 
LF_AREA_DIR
);

27 i‡(
ªtvÆ
 =
SYSERR
) {

28 
	`∑nic
("cannotÑead directory");

30 
	`k¥ötf
("HaveÑead directory from disk device %d\n\r",

31 
disk
);

35 i‡(
	`lfscheck
(&
dú
Ë=
SYSERR
) {

36 
	`∑nic
("directory doesÇot containá Xinu file system");

38 
	`k¥ötf
("Directory correspondsÅoáÜocal Xinu file system\n");

42 
lfiblks
 = 0;

43 
√xtib
 = 
dú
.
lfd_i‰ì
;

44 
	`k¥ötf
("öôü»ödex block i†%d\n\r", 
√xtib
);

45 
√xtib
 !
LF_INULL
) {

46 
lfiblks
++;

47 
	`lfibgë
(
disk
, 
√xtib
, &
iblock
);

48 
√xtib
 = 
iblock
.
ib_√xt
;

50 
ib£˘‹s
 = (
lfiblks
 + 6) /7;

51 
	`k¥ötf
("Found %d index block†(%d se˘‹s)\n\r", 
lfiblks
, 
ib£˘‹s
);

55 
dblks
 = 0;

56 
√xtdb
 = 
dú
.
lfd_d‰ì
;

57 
	`k¥ötf
("öôü»d©®block i†%d\n\r", 
√xtdb
);

58 
√xtdb
 !
LF_DNULL
) {

59 
dblks
++;

60 
	`ªad
(
disk
, (*)&
dblock
, 
√xtdb
);

61 
√xtdb
 = 
dblock
.
lf_√xtdb
;

63 
	`k¥ötf
("Found %d d©®blocks\n\r", 
dblks
);

64  
OK
;

65 
	}
}

	@device/lfs/lfscreate.c

3 
	~<xöu.h
>

4 
	~<ømdisk.h
>

10 
°©us
 
	$lfs¸óã
 (

11 
did32
 
disk
,

12 
ibid32
 
lfiblks
,

13 
uöt32
 
dsiz


16 
uöt32
 
£˘‹s
;

17 
uöt32
 
ib£˘‹s
;

18 
uöt32
 
ib≥r£˘‹
;

19 
lfdú
 
dú
;

20 
uöt32
 
dblks
;

21 
lfiblk
 
iblock
;

22 
lfdb‰ì
 
dblock
;

23 
dbid32
 
dbödex
;

24 
öt32
 
ªtvÆ
;

25 
öt32
 
i
;

29 
£˘‹s
 = 
dsiz
 / 
LF_BLKSIZ
;

33 
ib≥r£˘‹
 = 
LF_BLKSIZ
 / (
lfiblk
);

34 
ib£˘‹s
 = (
lfiblks
+(
ib≥r£˘‹
-1)) / ibpersector;

35 
lfiblks
 = 
ib£˘‹s
 * 
ib≥r£˘‹
;

36 i‡(
ib£˘‹s
 > 
£˘‹s
/2) {

37  
SYSERR
;

42 
	`mem£t
((*)&
dú
, 
NULLCH
, (
lfdú
));

43 
dú
.
lfd_nfûes
 = 0;

44 
dbödex
(
dbid32
)(
ib£˘‹s
 + 1);

45 
dú
.
lfd_d‰ì
 = 
dbödex
;

46 
dblks
 = 
£˘‹s
 - 
ib£˘‹s
 - 1;

47 
ªtvÆ
 = 
	`wrôe
(
disk
,(*)&
dú
, 
LF_AREA_DIR
);

48 i‡(
ªtvÆ
 =
SYSERR
) {

49  
SYSERR
;

54 
	`lfib˛ór
(&
iblock
, 0);

55 
i
=0; i<
lfiblks
-1; i++) {

56 
iblock
.
ib_√xt
 = (
ibid32
)(
i
 + 1);

57 
	`lfibput
(
disk
, 
i
, &
iblock
);

59 
iblock
.
ib_√xt
 = 
LF_INULL
;

60 
	`lfibput
(
disk
, 
i
, &
iblock
);

64 
	`mem£t
((*)&
dblock
, 
NULLCH
, 
LF_BLKSIZ
);

65 
i
=0; i<
dblks
-1; i++) {

66 
dblock
.
lf_√xtdb
 = 
dbödex
 + 1;

67 
	`wrôe
(
disk
, (*)&
dblock
, 
dbödex
);

68 
dbödex
++;

70 
dblock
.
lf_√xtdb
 = 
LF_DNULL
;

71 
	`wrôe
(
disk
, (*)&
dblock
, 
dbödex
);

72 
	`˛o£
(
disk
);

73  
OK
;

74 
	}
}

	@device/lfs/lfsetup.c

3 
	~<xöu.h
>

10 
°©us
 
	$lf£tup
 (

11 
lÊcblk
 *
lÂå


14 
dbid32
 
dnum
;

15 
ibid32
 
ibnum
;

16 
ldíåy
 *
ld±r
;

17 
lfiblk
 *
ib±r
;

18 
uöt32
 
√woff£t
;

20 
öt32
 
dödex
;

26 
	`waô
(
Lf_d©a
.
lf_muãx
);

31 
ld±r
 = 
lÂå
->
lfdú±r
;

32 
ib±r
 = &
lÂå
->
lfiblock
;

36 i‡(
lÂå
->
lfibdúty
 ||ÜÂå->
lfdbdúty
) {

37 
	`lfÊush
(
lÂå
);

39 
ibnum
 = 
lÂå
->
lföum
;

45 i‡(
ibnum
 =
LF_INULL
) {

49 
ibnum
 = 
ld±r
->
ld_ûi°
;

50 i‡(
ibnum
 =
LF_INULL
) {

51 
ibnum
 = 
	`lfibÆloc
();

52 
	`lfib˛ór
(
ib±r
, 0);

53 
ld±r
->
ld_ûi°
 = 
ibnum
;

54 
lÂå
->
lfibdúty
 = 
TRUE
;

56 
	`lfibgë
(
Lf_d©a
.
lf_dskdev
, 
ibnum
, 
ib±r
);

58 
lÂå
->
lföum
 = 
ibnum
;

64 } i‡(
lÂå
->
lÂos
 < 
ib±r
->
ib_off£t
) {

69 
ibnum
 = 
ld±r
->
ld_ûi°
;

70 
	`lfibgë
(
Lf_d©a
.
lf_dskdev
, 
ibnum
, 
ib±r
);

71 
lÂå
->
lföum
 = 
ibnum
;

78 (
lÂå
->
lÂos
 & ~
LF_IMASK
Ë> 
ib±r
->
ib_off£t
 ) {

79 
ibnum
 = 
ib±r
->
ib_√xt
;

80 i‡(
ibnum
 =
LF_INULL
) {

82 
ibnum
 = 
	`lfibÆloc
();

83 
ib±r
->
ib_√xt
 = 
ibnum
;

84 
	`lfibput
(
Lf_d©a
.
lf_dskdev
, 
lÂå
->
lföum
, 
ib±r
);

85 
lÂå
->
lföum
 = 
ibnum
;

86 
√woff£t
 = 
ib±r
->
ib_off£t
 + 
LF_IDATA
;

87 
	`lfib˛ór
(
ib±r
, 
√woff£t
);

88 
lÂå
->
lfibdúty
 = 
TRUE
;

90 
	`lfibgë
(
Lf_d©a
.
lf_dskdev
, 
ibnum
, 
ib±r
);

91 
lÂå
->
lföum
 = 
ibnum
;

93 
lÂå
->
lfdnum
 = 
LF_DNULL
;

100 
dödex
 = (
lÂå
->
lÂos
 & 
LF_IMASK
) >> 9;

105 
dnum
 = 
lÂå
->
lfiblock
.
ib_dba
[
dödex
];

106 i‡(
dnum
 =
LF_DNULL
) {

107 
dnum
 = 
	`lfdbÆloc
((
lfdb‰ì
 *)&
lÂå
->
lfdblock
);

108 
lÂå
->
lfiblock
.
ib_dba
[
dödex
] = 
dnum
;

109 
lÂå
->
lfibdúty
 = 
TRUE
;

110 } i‡–
dnum
 !
lÂå
->
lfdnum
) {

111 
	`ªad
(
Lf_d©a
.
lf_dskdev
, (*)
lÂå
->
lfdblock
, 
dnum
);

112 
lÂå
->
lfdbdúty
 = 
FALSE
;

114 
lÂå
->
lfdnum
 = 
dnum
;

119 
lÂå
->
lfbyã
 = &lÂå->
lfdblock
[lÂå->
lÂos
 & 
LF_DMASK
];

120 
	`sig«l
(
Lf_d©a
.
lf_muãx
);

121  
OK
;

122 
	}
}

	@device/lfs/lfsinit.c

3 
	~<xöu.h
>

5 
lfd©a
 
	gLf_d©a
;

11 
devˇŒ
 
	$lfsöô
 (

12 
díåy
 *
dev±r


17 
Lf_d©a
.
lf_dskdev
 = 
LF_DISK_DEV
;

21 
Lf_d©a
.
lf_muãx
 = 
	`£m¸óã
(1);

25 
	`mem£t
((*)&
Lf_d©a
.
lf_dú
, 
NULLCH
, (
lfdú
));

29 
Lf_d©a
.
lf_dú¥e£¡
 = Lf_d©a.
lf_dúdúty
 = 
FALSE
;

31  
OK
;

32 
	}
}

	@device/lfs/lfsopen.c

3 
	~<xöu.h
>

9 
devˇŒ
 
	$lfs›í
 (

10 
díåy
 *
dev±r
,

11 *
«me
,

12 *
mode


15 
lfdú
 *
dú±r
;

16 *
‰om
, *
to
;

17 *
«m
, *
cmp
;

18 
öt32
 
i
;

19 
did32
 
l‚ext
;

21 
ldíåy
 *
ld±r
;

22 
lÊcblk
 *
lÂå
;

23 
boﬁ8
 
found
;

24 
öt32
 
ªtvÆ
;

25 
öt32
 
mbôs
;

29 
‰om
 = 
«me
;

30 
i
=0; i< 
LF_NAME_LEN
; i++) {

31 i‡(*
‰om
++ =
NULLCH
) {

35 i‡(
i
 >
LF_NAME_LEN
) {

36  
SYSERR
;

41 
mbôs
 = 
	`lfgëmode
(
mode
);

42 i‡(
mbôs
 =
SYSERR
) {

43  
SYSERR
;

48 
l‚ext
 = 
SYSERR
;

49 
i
=0; i<
NlÊ
; i++) {

50 
lÂå
 = &
lÊèb
[
i
];

51 i‡(
lÂå
->
lf°©e
 =
LF_FREE
) {

52 i‡(
l‚ext
 =
SYSERR
) {

53 
l‚ext
 = 
i
;

60 
«m
 = 
«me
;

61 
cmp
 = 
lÂå
->
l‚ame
;

62 *
«m
 !
NULLCH
) {

63 i‡(*
«m
 !*
cmp
) {

66 
«m
++;

67 
cmp
++;

72 i‡–(*
«m
==
NULLCH
Ë&& (*
cmp
 == NULLCH) ) {

73  
SYSERR
;

76 i‡(
l‚ext
 =
SYSERR
) {

77  
SYSERR
;

82 
dú±r
 = &
Lf_d©a
.
lf_dú
;

83 
	`waô
(
Lf_d©a
.
lf_muãx
);

84 i‡(! 
Lf_d©a
.
lf_dú¥e£¡
) {

85 
ªtvÆ
 = 
	`ªad
(
Lf_d©a
.
lf_dskdev
,(*)
dú±r
,
LF_AREA_DIR
);

86 i‡(
ªtvÆ
 =
SYSERR
 ) {

87 
	`sig«l
(
Lf_d©a
.
lf_muãx
);

88  
SYSERR
;

90 i‡(
	`lfscheck
(
dú±r
Ë=
SYSERR
 ) {

91 
	`k¥ötf
("Disk doesÇot containá Xinu file system\n");

92 
	`sig«l
(
Lf_d©a
.
lf_muãx
);

93  
SYSERR
;

95 
Lf_d©a
.
lf_dú¥e£¡
 = 
TRUE
;

100 
found
 = 
FALSE
;

101 
i
=0; i<
dú±r
->
lfd_nfûes
; i++) {

102 
ld±r
 = &
dú±r
->
lfd_fûes
[
i
];

103 
«m
 = 
«me
;

104 
cmp
 = 
ld±r
->
ld_«me
;

105 *
«m
 !
NULLCH
) {

106 i‡(*
«m
 !*
cmp
) {

109 
«m
++;

110 
cmp
++;

112 i‡–(*
«m
==
NULLCH
Ë&& (*
cmp
==NULLCH) ) {

113 
found
 = 
TRUE
;

120 i‡(! 
found
) {

121 i‡(
mbôs
 & 
LF_MODE_O
) {

122 
	`sig«l
(
Lf_d©a
.
lf_muãx
);

123  
SYSERR
;

130 i‡(
dú±r
->
lfd_nfûes
 >
LF_NUM_DIR_ENT
) {

131 
	`sig«l
(
Lf_d©a
.
lf_muãx
);

132  
SYSERR
;

137 
ld±r
 = &
dú±r
->
lfd_fûes
[dú±r->
lfd_nfûes
++];

138 
ld±r
->
ld_size
 = 0;

139 
‰om
 = 
«me
;

140 
to
 = 
ld±r
->
ld_«me
;

141  (*
to
++ = *
‰om
++Ë!
NULLCH
 ) {

144 
ld±r
->
ld_ûi°
 = 
LF_INULL
;

148 } i‡(
mbôs
 & 
LF_MODE_N
) {

149 
	`sig«l
(
Lf_d©a
.
lf_muãx
);

150  
SYSERR
;

155 
lÂå
 = &
lÊèb
[
l‚ext
];

156 
lÂå
->
lf°©e
 = 
LF_USED
;

157 
lÂå
->
lfdú±r
 = 
ld±r
;

158 
lÂå
->
lfmode
 = 
mbôs
 & 
LF_MODE_RW
;

162 
lÂå
->
lÂos
 = 0;

164 
to
 = 
lÂå
->
l‚ame
;

165 
‰om
 = 
«me
;

166  (*
to
++ = *
‰om
++Ë!
NULLCH
 ) {

172 
lÂå
->
lföum
 = 
LF_INULL
;

173 
lÂå
->
lfdnum
 = 
LF_DNULL
;

178 
lÂå
->
lfbyã
 = &lÂå->
lfdblock
[
LF_BLKSIZ
];

179 
lÂå
->
lfibdúty
 = 
FALSE
;

180 
lÂå
->
lfdbdúty
 = 
FALSE
;

182 
	`sig«l
(
Lf_d©a
.
lf_muãx
);

184  
lÂå
->
lfdev
;

185 
	}
}

	@device/lfs/lftruncate.c

3 
	~<xöu.h
>

10 
°©us
 
	$l·runˇã
 (

11 
lÊcblk
 *
lÂå


14 
ldíåy
 *
ld±r
;

15 
lfiblk
 
iblock
;

16 
ibid32
 
i‰ì
;

17 
ibid32
 
fú°ib
;

18 
ibid32
 
√xtib
;

20 
dbid32
 
√xtdb
;

21 
öt32
 
i
;

24 
ld±r
 = 
lÂå
->
lfdú±r
;

25 i‡(
ld±r
->
ld_size
 == 0) {

26  
OK
;

31 i‡–(
lÂå
->
lfibdúty
Ë|| (lÂå->
lfdbdúty
) ) {

32 
	`lfÊush
(
lÂå
);

34 
lÂå
->
lÂos
 = 0;

35 
lÂå
->
lföum
 = 
LF_INULL
;

36 
lÂå
->
lfdnum
 = 
LF_DNULL
;

37 
lÂå
->
lfbyã
 = &lÂå->
lfdblock
[
LF_BLKSIZ
];

41 
i‰ì
 = 
Lf_d©a
.
lf_dú
.
lfd_i‰ì
;

45 
fú°ib
 = 
ld±r
->
ld_ûi°
;

46 
ld±r
->
ld_ûi°
 = 
LF_INULL
;

47 
ld±r
->
ld_size
 = 0;

48 
Lf_d©a
.
lf_dúdúty
 = 
TRUE
;

54 
√xtib
=
fú°ib
;Çextib!=
i‰ì
;Çextib=
iblock
.
ib_√xt
) {

58 
	`lfibgë
(
Lf_d©a
.
lf_dskdev
, 
√xtib
, &
iblock
);

62 
i
=0; i<
LF_IBLEN
; i++) {

66 
√xtdb
 = 
iblock
.
ib_dba
[
i
];

67 i‡(
√xtdb
 !
LF_DNULL
) {

68 
	`lfdb‰ì
(
Lf_d©a
.
lf_dskdev
, 
√xtdb
);

73 
iblock
.
ib_dba
[
i
] = 
LF_DNULL
;

78 
iblock
.
ib_off£t
 = 0;

83 i‡(
iblock
.
ib_√xt
 =
LF_INULL
) {

84 
iblock
.
ib_√xt
 = 
i‰ì
;

89 
	`lfibput
(
Lf_d©a
.
lf_dskdev
, 
√xtib
, &
iblock
);

97 
Lf_d©a
.
lf_dú
.
lfd_i‰ì
 = 
fú°ib
;

101 
Lf_d©a
.
lf_dúdúty
 = 
TRUE
;

103  
OK
;

104 
	}
}

	@device/nam/mount.c

3 
	~<xöu.h
>

9 
sysˇŒ
 
	$mou¡
(

10 *
¥efix
,

11 *
ª∂a˚
,

12 
did32
 
devi˚


15 
ötmask
 
mask
;

16 
nmíåy
 *
«m±r
;

17 
öt32
 
psiz
, 
rsiz
;

18 
öt32
 
i
;

20 
mask
 = 
	`dißbÀ
();

22 
psiz
 = 
	`«mÀn
(
¥efix
, 
NM_PRELEN
);

23 
rsiz
 = 
	`«mÀn
(
ª∂a˚
, 
NM_REPLLEN
);

27 i‡–(
psiz
 =
SYSERR
Ë|| (
rsiz
 == SYSERR) ||

28 (
	`isbaddev
(
devi˚
)Ë|| (
¬ames
 >
NNAMES
) ) {

29 
	`ª°‹e
(
mask
);

30  
SYSERR
;

35 
«m±r
 = &
«mëab
[
¬ames
];

39 
i
=0; i<
psiz
; i++) {

40 
«m±r
->
≈ªfix
[
i
] = *
¥efix
++;

43 
i
=0; i<
rsiz
; i++) {

44 
«m±r
->
ƒïœ˚
[
i
] = *
ª∂a˚
++;

47 
«m±r
->
ndevi˚
 = 
devi˚
;

49 
¬ames
++;

51 
	`ª°‹e
(
mask
);

52  
OK
;

53 
	}
}

60 
öt32
 
	$«mÀn
(

61 *
«me
,

62 
öt32
 
maxÀn


66 
öt32
 
i
;

70 
i
=0; i < 
maxÀn
; i++) {

71 i‡(*
«me
++ =
NULLCH
) {

72  
i
+1;

75  
SYSERR
;

76 
	}
}

	@device/nam/naminit.c

3 
	~<xöu.h
>

5 #i‚def 
RFILESYS


6 
	#RFILESYS
 
SYSERR


	)

9 #i‚def 
FILESYS


10 
	#FILESYS
 
SYSERR


	)

13 #i‚def 
LFILESYS


14 
	#LFILESYS
 
SYSERR


	)

17 
nmíåy
 
	g«mëab
[
NNAMES
];

18 
öt32
 
	g¬ames
;

24 
°©us
 
	$«möô
()

26 
did32
 
i
;

27 
díåy
 *
dev±r
;

28 
tmp°r
[
NM_MAXLEN
];

29 
°©us
 
ªtvÆ
;

30 *
çå
;

31 *
≈å
;

32 
dev¥efix
[] = "/dev/";

33 
öt32
 
Àn
;

34 
ch
;

38 
¬ames
 = 0;

40 
i
=0; i<
NDEVS
 ; i++) {

41 
çå
 = 
tmp°r
;

42 
≈å
 = 
dev¥efix
;

46 
Àn
 = 0;

47 (*
çå
++ = *
≈å
++Ë!
NULLCH
) {

48 
Àn
++;

50 
çå
--;

51 
dev±r
 = &
devèb
[
i
];

52 
≈å
 = 
dev±r
->
dv«me
;

56 ++
Àn
 < 
NM_MAXLEN
) {

57 
ch
 = *
≈å
++;

58 i‡–(
ch
 >= 'A') && (ch <= 'Z')) {

59 
ch
 += 'a' - 'A';

61 i‡–(*
çå
++ = 
ch
Ë=
NULLCH
) {

66 i‡(
Àn
 > 
NM_MAXLEN
) {

67 
	`k¥ötf
("namespace: deviceÇame %sÅooÜong\r\n",

68 
dev±r
->
dv«me
);

72 
ªtvÆ
 = 
	`mou¡
(
tmp°r
, 
NULLSTR
, 
dev±r
->
dvnum
);

73 i‡(
ªtvÆ
 =
SYSERR
) {

74 
	`k¥ötf
("namespace: cannot mount device %d\r\n",

75 
dev±r
->
dv«me
);

82 
	`mou¡
("/dev/nuŒ", "", 
NULLDEV
);

83 
	`mou¡
("/ªmŸe/", "ªmŸe:", 
RFILESYS
);

84 
	`mou¡
("/loˇl/", 
NULLSTR
, 
LFILESYS
);

85 
	`mou¡
("/dev/", 
NULLSTR
, 
SYSERR
);

86 
	`mou¡
("~/", 
NULLSTR
, 
LFILESYS
);

87 
	`mou¡
("/", "roŸ:", 
RFILESYS
);

88 
	`mou¡
("", "", 
LFILESYS
);

90  
OK
;

91 
	}
}

	@device/nam/nammap.c

3 
	~<xöu.h
>

5 
°©us
 
«m˝y
(*, *, 
öt32
);

6 
did32
 
«mª∂
(*, []);

12 
devˇŒ
 
	$«mm≠
(

13 *
«me
,

14 
√w«me
[
NM_MAXLEN
],

15 
did32
 
«mdev


18 
did32
 
√wdev
;

19 
tm≤ame
[
NM_MAXLEN
];

20 
öt32
 
ôî
;

24 i‡(
	`«m˝y
(
tm≤ame
, 
«me
, 
NM_MAXLEN
Ë=
SYSERR
) {

25  
SYSERR
;

31 
ôî
=0; iãr<
¬ames
 ; iter++) {

32 
√wdev
 = 
	`«mª∂
(
tm≤ame
, 
√w«me
);

33 i‡(
√wdev
 !
«mdev
) {

34  
√wdev
;

36 
	`«m˝y
(
tm≤ame
, 
√w«me
, 
NM_MAXLEN
);

38  
SYSERR
;

39 
	}
}

45 
did32
 
	$«mª∂
(

46 *
«me
,

47 
√w«me
[
NM_MAXLEN
]

50 
öt32
 
i
;

51 *
µå
;

52 *
Ωå
;

53 *
›å
;

54 *
≈å
;

55 
ﬁí
;

57 
öt32
 
∂í
;

59 
öt32
 
æí
;

60 
öt32
 
ªmaö
;

61 
nmíåy
 *
«m±r
;

65 
i
=0; i<
¬ames
; i++) {

66 
«m±r
 = &
«mëab
[
i
];

67 
›å
 = 
«me
;

68 
µå
 = 
«m±r
->
≈ªfix
;

72 
∂í
=0; *
µå
 !
NULLCH
 ;Ölen++) {

73 i‡(*
µå
 !*
›å
) {

76 
µå
++;

77 
›å
++;

79 i‡(*
µå
 !
NULLCH
) {

88 
ﬁí
 = 
	`«mÀn
(
«me
 ,
NM_MAXLEN
);

89 
æí
 = 
	`«mÀn
(
«m±r
->
ƒïœ˚
,
NM_MAXLEN
) - 1;

90 
ªmaö
 = 
ﬁí
 - 
∂í
;

91 i‡–(
æí
 + 
ªmaö
Ë> 
NM_MAXLEN
) {

92  (
did32
)
SYSERR
;

99 
≈å
 = 
√w«me
;

100 
Ωå
 = 
«m±r
->
ƒïœ˚
;

101 ; 
æí
>0 ;Ñlen--) {

102 *
≈å
++ = *
Ωå
++;

104 ; 
ªmaö
>0 ;Ñemain--) {

105 *
≈å
++ = *
›å
++;

107  
«m±r
->
ndevi˚
;

109  (
did32
)
SYSERR
;

110 
	}
}

116 
°©us
 
	$«m˝y
(

117 *
√w«me
,

118 *
ﬁd«me
,

119 
öt32
 
buÊí


122 *
≈å
;

123 *
›å
;

124 
öt32
 
˙t
;

126 
≈å
 = 
√w«me
;

127 
›å
 = 
ﬁd«me
;

129 
˙t
=0; c¡<
buÊí
; cnt++) {

130 i‡–(*
≈å
++ = *
›å
++Ë=
NULLCH
) {

131  
OK
;

134  
SYSERR
;

135 
	}
}

	@device/nam/namopen.c

3 
	~<xöu.h
>

9 
devˇŒ
 
	$«m›í
(

10 
díåy
 *
dev±r
,

11 *
«me
,

12 *
mode


15 
√w«me
[
NM_MAXLEN
];

16 
did32
 
√wdev
;

20 
√wdev
 = 
	`«mm≠
(
«me
, 
√w«me
, 
dev±r
->
dvnum
);

22 i‡(
√wdev
 =
SYSERR
) {

23  
SYSERR
;

28  
	`›í
(
√wdev
, 
√w«me
, 
mode
);

29 
	}
}

	@device/ram/ramclose.c

3 
	~<xöu.h
>

9 
devˇŒ
 
	$øm˛o£
 (

10 
díåy
 *
dev±r


13  
OK
;

14 
	}
}

	@device/ram/raminit.c

3 
	~<xöu.h
>

4 
	~<ømdisk.h
>

6 
ømdisk
 
	gRam
;

12 
devˇŒ
 
	$ømöô
 (

13 
díåy
 *
dev±r


16 
	`mem˝y
(
Ram
.
disk
, "hopeless", 8);

17 
	`mem˝y
–&
Ram
.
disk
[8], Ram.disk, 
RM_BLKSIZ
 * 
RM_BLKS
 - 8);

18  
OK
;

19 
	}
}

	@device/ram/ramopen.c

3 
	~<xöu.h
>

10 
devˇŒ
 
	$øm›í
 (

11 
díåy
 *
dev±r
,

12 *
«me
,

13 *
mode


18  
dev±r
->
dvnum
;

19 
	}
}

	@device/ram/ramread.c

3 
	~<xöu.h
>

4 
	~<ømdisk.h
>

10 
devˇŒ
 
	$ømªad
 (

11 
díåy
 *
dev±r
,

12 *
buff
,

13 
öt32
 
blk


16 
öt32
 
bpos
;

18 
bpos
 = 
RM_BLKSIZ
 * 
blk
;

19 
	`mem˝y
(
buff
, &
Ram
.
disk
[
bpos
], 
RM_BLKSIZ
);

20  
OK
;

21 
	}
}

	@device/ram/ramwrite.c

3 
	~<xöu.h
>

4 
	~<ømdisk.h
>

10 
devˇŒ
 
	$ømwrôe
 (

11 
díåy
 *
dev±r
,

12 *
buff
,

13 
öt32
 
blk


16 
öt32
 
bpos
;

18 
bpos
 = 
RM_BLKSIZ
 * 
blk
;

19 
	`mem˝y
(&
Ram
.
disk
[
bpos
], 
buff
, 
RM_BLKSIZ
);

20  
OK
;

21 
	}
}

	@device/rds/rdsbufalloc.c

3 
	~<xöu.h
>

9 
rdbuff
 *
	$rdsbuÁŒoc
 (

10 
rdscblk
 *
rd±r


13 
rdbuff
 *
b±r
;

14 
rdbuff
 *
µå
;

15 
rdbuff
 *
≈å
;

19 
	`waô
(
rd±r
->
rd_avaû£m
);

23 
b±r
 = 
rd±r
->
rd_‰ì
;

25 i‡–
b±r
 !(
rdbuff
 *)
NULL
 ) {

26 
rd±r
->
rd_‰ì
 = 
b±r
->
rd_√xt
;

27  
b±r
;

34 
b±r
 = 
rd±r
->
rd_˘¥ev
;

35 
b±r
 !(
rdbuff
 *Ë&
rd±r
->
rd_ch√xt
) {

36 i‡(
b±r
->
rd_ªf˙t
 <= 0) {

40 
µå
 = 
b±r
->
rd_¥ev
;

41 
≈å
 = 
b±r
->
rd_√xt
;

42 
µå
->
rd_√xt
 = 
≈å
;

43 
≈å
->
rd_¥ev
 = 
µå
;

44  
b±r
;

46 
b±r
 = b±r->
rd_¥ev
;

48 
	`∑nic
("Remote disk cannot findánávailable buffer");

49  (
rdbuff
 *)
SYSERR
;

50 
	}
}

	@device/rds/rdsclose.c

3 
	~<xöu.h
>

9 
devˇŒ
 
	$rds˛o£
 (

10 
díåy
 *
dev±r


13 
rdscblk
 *
rd±r
;

14 
rdbuff
 *
b±r
;

15 
rdbuff
 *
≈å
;

16 
öt32
 
nmoved
;

20 
rd±r
 = &
rd°ab
[
dev±r
->
dvmö‹
];

21 i‡(
rd±r
->
rd_°©e
 !
RD_OPEN
) {

22  
SYSERR
;

27 i‡(
rd±r
->
rd_rh√xt
 !(
rdbuff
 *)&rd±r->
rd_π√xt
) {

28  
SYSERR
;

33 
b±r
 = 
rd±r
->
rd_ch√xt
;

34 
nmoved
 = 0;

35 
b±r
 !(
rdbuff
 *)&
rd±r
->
rd_˘√xt
) {

36 
nmoved
++;

40 
≈å
 = 
b±r
->
rd_√xt
;

41 (
b±r
->
rd_¥ev
)->
rd_√xt
 = 
≈å
;

42 
≈å
->
rd_¥ev
 = 
b±r
->rd_prev;

46 
b±r
->
rd_√xt
 = 
rd±r
->
rd_‰ì
;

48 
rd±r
->
rd_‰ì
 = 
b±r
;

49 
b±r
->
rd_°©us
 = 
RD_INVALID
;

53 
b±r
 = 
≈å
;

58 
rd±r
->
rd_°©e
 = 
RD_FREE
;

59  
OK
;

60 
	}
}

	@device/rds/rdscomm.c

3 
	~<xöu.h
>

11 
°©us
 
	$rdscomm
 (

12 
rd_msg_hdr
 *
msg
,

13 
öt32
 
mÀn
,

14 
rd_msg_hdr
 *
ª∂y
,

15 
öt32
 
æí
,

16 
rdscblk
 *
rd±r


19 
ötmask
 
mask
;

20 
öt32
 
i
;

21 
öt32
 
ªtvÆ
;

22 
öt32
 
£q
;

23 
uöt32
 
loˇlù
;

24 
öt16
 
πy≥
;

25 
boﬁ8
 
xmô
;

26 
öt32
 
¶Ÿ
;

30 
mask
 = 
	`dißbÀ
();

34 i‡–! 
rd±r
->
rd_ªgi°îed
 ) {

35 
¶Ÿ
 = 
	`udp_ªgi°î
(0, 
rd±r
->
rd_£r_p‹t
,

36 
rd±r
->
rd_loc_p‹t
);

37 if(
¶Ÿ
 =
SYSERR
) {

38 
	`ª°‹e
(
mask
);

39  
SYSERR
;

41 
rd±r
->
rd_udp¶Ÿ
 = 
¶Ÿ
;

42 
rd±r
->
rd_ªgi°îed
 = 
TRUE
;

47 i‡–
NëD©a
.
ùvÆid
 =
FALSE
 ) {

48 
loˇlù
 = 
	`gëloˇlù
();

49 if((
öt32
)
loˇlù
 =
SYSERR
) {

50 
	`ª°‹e
(
mask
);

51  
SYSERR
;

54 
	`ª°‹e
(
mask
);

58 
¶Ÿ
 = 
rd±r
->
rd_udp¶Ÿ
;

62 
£q
 = 
rd±r
->
rd_£q
++;

63 
msg
->
rd_£q
 = 
	`ht⁄l
(
£q
);

67 
xmô
 = 
TRUE
;

68 
i
=0; i<
RD_RETRIES
; i++) {

69 i‡(
xmô
) {

73 
ªtvÆ
 = 
	`udp_£ndto
(
¶Ÿ
, 
rd±r
->
rd_£r_ù
,Ñd±r->
rd_£r_p‹t
,

74 (*)
msg
, 
mÀn
);

75 i‡(
ªtvÆ
 =
SYSERR
) {

76 
	`k¥ötf
("Cannot sendÅoÑemote disk server\n\r");

77  
SYSERR
;

80 
xmô
 = 
TRUE
;

85 
ªtvÆ
 = 
	`udp_ªcv
(
¶Ÿ
, (*)
ª∂y
, 
æí
,

86 
RD_TIMEOUT
);

88 i‡(
ªtvÆ
 =
TIMEOUT
) {

90 } i‡(
ªtvÆ
 =
SYSERR
) {

91 
	`k¥ötf
("ErrorÑeadingÑemote diskÑeply\n\r");

92  
SYSERR
;

98 i‡(
	`¡ohl
(
ª∂y
->
rd_£q
Ë< 
£q
) {

99 
xmô
 = 
FALSE
;

100 } i‡(
	`¡ohl
(
ª∂y
->
rd_£q
Ë!
£q
) {

106 
πy≥
 = 
	`¡ohs
(
ª∂y
->
rd_ty≥
);

107 i‡(
πy≥
 !–
	`¡ohs
(
msg
->
rd_ty≥
Ë| 
RD_MSG_RESPONSE
) ) {

113 i‡(
	`¡ohs
(
ª∂y
->
rd_°©us
) != 0) {

114  
SYSERR
;

117  
OK
;

122 
	`k¥ötf
("Timeout onÉxchange withÑemote disk server\n\r");

123  
TIMEOUT
;

124 
	}
}

	@device/rds/rdscontrol.c

3 
	~<xöu.h
>

9 
devˇŒ
 
	$rdsc⁄åﬁ
 (

10 
díåy
 *
dev±r
,

11 
öt32
 
func
,

12 
öt32
 
¨g1
,

13 
öt32
 
¨g2


16 
rdscblk
 *
rd±r
;

17 
rdbuff
 *
b±r
;

19 
rdbuff
 *
µå
;

21 
rd_msg_dªq
 
msg
;

22 
rd_msg_dªs
 
ª•
;

23 *
to
, *
‰om
;

24 
öt32
 
ªtvÆ
;

28 
rd±r
 = &
rd°ab
[
dev±r
->
dvmö‹
];

29 i‡(
rd±r
->
rd_°©e
 !
RD_OPEN
) {

30  
SYSERR
;

35 i‡–! 
rd±r
->
rd_comruns
 ) {

36 
rd±r
->
rd_comruns
 = 
TRUE
;

37 
	`ªsume
(
rd±r
->
rd_com¥oc
);

40 
func
) {

44 
RDS_CTL_SYNC
:

48 
b±r
 = 
	`rdsbuÁŒoc
(
rd±r
);

49 i‡(
b±r
 =(
rdbuff
 *)
SYSERR
) {

50  
SYSERR
;

55 
b±r
->
rd_›
 = 
RD_OP_SYNC
;

56 
b±r
->
rd_ªf˙t
 = 1;

57 
b±r
->
rd_blknum
 = 0;

58 
b±r
->
rd_°©us
 = 
RD_INVALID
;

59 
b±r
->
rd_pid
 = 
	`gëpid
();

63 
µå
 = 
rd±r
->
rd_π¥ev
;

64 
rd±r
->
rd_π¥ev
 = 
b±r
;

65 
b±r
->
rd_√xt
 = 
µå
->rd_next;

66 
b±r
->
rd_¥ev
 = 
µå
;

67 
µå
->
rd_√xt
 = 
b±r
;

71 
	`ªcv˛r
();

75 
	`sig«l
(
rd±r
->
rd_ªq£m
);

79 
b±r
 = (
rdbuff
 *)
	`ª˚ive
();

80 i‡(
b±r
 =(
rdbuff
 *)
SYSERR
) {

81  
SYSERR
;

87 
RDS_CTL_DEL
:

92 
msg
.
rd_ty≥
 = 
	`ht⁄s
(
RD_MSG_DREQ
);

93 
msg
.
rd_°©us
 = 
	`ht⁄s
(0);

94 
msg
.
rd_£q
 = 0;

95 
to
 = 
msg
.
rd_id
;

96 
	`mem£t
(
to
, 
NULLCH
, 
RD_IDLEN
);

97 
‰om
 = 
rd±r
->
rd_id
;

98  (*
to
++ = *
‰om
++Ë!
NULLCH
 ) {

104 
ªtvÆ
 = 
	`rdscomm
((
rd_msg_hdr
 *)&
msg
,

105 (
rd_msg_dªq
),

106 (
rd_msg_hdr
 *)&
ª•
,

107 (
rd_msg_dªs
),

108 
rd±r
);

112 i‡(
ªtvÆ
 =
SYSERR
) {

113  
SYSERR
;

114 } i‡(
ªtvÆ
 =
TIMEOUT
) {

115 
	`k¥ötf
("Timeout duringÑemote file delete\n\r");

116  
SYSERR
;

117 } i‡(
	`¡ohs
(
ª•
.
rd_°©us
) != 0) {

118  
SYSERR
;

123  
	`rds˛o£
(
dev±r
);

126 
	`k¥ötf
("rfsC⁄åﬁ: fun˘i⁄ %dÇŸ vÆid\n\r", 
func
);

127  
SYSERR
;

130  
OK
;

131 
	}
}

	@device/rds/rdsinit.c

3 
	~<xöu.h
>

5 
rdscblk
 
	grd°ab
[
Nrds
];

11 
devˇŒ
 
	$rdsöô
 (

12 
díåy
 *
dev±r


15 
rdscblk
 *
rd±r
;

16 
rdbuff
 *
b±r
;

18 
rdbuff
 *
µå
;

19 
rdbuff
 *
buf„nd
;

20 
uöt32
 
size
;

25 
rd±r
 = &
rd°ab
[
dev±r
->
dvmö‹
];

29 
rd±r
->
rd_°©e
 = 
RD_FREE
;

36 
rd±r
->
rd_com¥oc
 = 
	`¸óã
(
rd•ro˚ss
, 
RD_STACK
, 
RD_PRIO
,

37 "rd•roc", 1, 
rd±r
);

38 i‡(
rd±r
->
rd_com¥oc
 =
SYSERR
) {

39 
	`∑nic
("Cannot createÑemote diskÖrocess");

41 
rd±r
->
rd_comruns
 = 
FALSE
;

43 
rd±r
->
rd_id
[0] = 
NULLCH
;

47 
rd±r
->
rd_£q
 = 1;

51 
rd±r
->
rd_rh√xt
 = (
rdbuff
 *Ë&rd±r->
rd_π√xt
;

52 
rd±r
->
rd_rh¥ev
 = (
rdbuff
 *)
NULL
;

54 
rd±r
->
rd_π√xt
 = (
rdbuff
 *)
NULL
;

55 
rd±r
->
rd_π¥ev
 = (
rdbuff
 *Ë&rd±r->
rd_rh√xt
;

58 
rd±r
->
rd_ch√xt
 = (
rdbuff
 *Ë&rd±r->
rd_˘√xt
;

59 
rd±r
->
rd_ch¥ev
 = (
rdbuff
 *)
NULL
;

61 
rd±r
->
rd_˘√xt
 = (
rdbuff
 *)
NULL
;

62 
rd±r
->
rd_˘¥ev
 = (
rdbuff
 *Ë&rd±r->
rd_ch√xt
;

67 
size
 = (
rdbuff
Ë* 
RD_BUFFS
;

69 
b±r
 = (
rdbuff
 *)
	`gëmem
(
size
);

70 
rd±r
->
rd_‰ì
 = 
b±r
;

72 i‡((
öt32
)
b±r
 =
SYSERR
) {

73 
	`∑nic
("Cannotállocate memory forÑemote disk buffers");

76 
µå
 = (
rdbuff
 *Ë
NULL
;

77 
buf„nd
 = (
rdbuff
 *Ë((*)
b±r
 + 
size
);

78 
b±r
 < 
buf„nd
) {

79 
µå
 = 
b±r
;

80 
b±r
 = (
rdbuff
 *)

81 ((
rdbuff
)+ (*)
b±r
);

82 
µå
->
rd_°©us
 = 
RD_INVALID
;

83 
µå
->
rd_√xt
 = 
b±r
;

85 
µå
->
rd_√xt
 = (
rdbuff
 *Ë
NULL
;

89 
rd±r
->
rd_avaû£m
 = 
	`£m¸óã
(
RD_BUFFS
);

90 
rd±r
->
rd_ªq£m
 = 
	`£m¸óã
(0);

94 i‡–
	`dŸ2ù
(
RD_SERVER_IP
, &
rd±r
->
rd_£r_ù
Ë=
SYSERR
 ) {

95 
	`∑nic
("invalid IPáddress forÑemote disk server");

100 
rd±r
->
rd_£r_p‹t
 = 
RD_SERVER_PORT
;

101 
rd±r
->
rd_loc_p‹t
 = 
RD_LOC_PORT
 + 
dev±r
->
dvmö‹
;

105 
rd±r
->
rd_ªgi°îed
 = 
FALSE
;

107  
OK
;

108 
	}
}

	@device/rds/rdsopen.c

3 
	~<xöu.h
>

10 
devˇŒ
 
	$rds›í
 (

11 
díåy
 *
dev±r
,

12 *
diskid
,

13 *
mode


16 
rdscblk
 *
rd±r
;

17 
rd_msg_‹eq
 
msg
;

18 
rd_msg_‹es
 
ª•
;

19 
öt32
 
ªtvÆ
;

20 
öt32
 
Àn
;

21 *
idto
;

22 *
id‰om
;

24 
rd±r
 = &
rd°ab
[
dev±r
->
dvmö‹
];

28 i‡(
rd±r
->
rd_°©e
 !
RD_FREE
) {

29  
SYSERR
;

31 
rd±r
->
rd_°©e
 = 
RD_PEND
;

35 
idto
 = 
rd±r
->
rd_id
;

36 
id‰om
 = 
diskid
;

37 
Àn
 = 0;

38  (*
idto
++ = *
id‰om
++Ë!
NULLCH
) {

39 
Àn
++;

40 i‡(
Àn
 >
RD_IDLEN
) {

41  
SYSERR
;

47 i‡(
Àn
 == 0) {

48  
SYSERR
;

53 
msg
.
rd_ty≥
 = 
	`ht⁄s
(
RD_MSG_OREQ
);

54 
msg
.
rd_°©us
 = 
	`ht⁄s
(0);

55 
msg
.
rd_£q
 = 0;

56 
idto
 = 
msg
.
rd_id
;

57 
	`mem£t
(
idto
, 
NULLCH
, 
RD_IDLEN
);

59 
id‰om
 = 
diskid
;

60  (*
idto
++ = *
id‰om
++Ë!
NULLCH
 ) {

66 
ªtvÆ
 = 
	`rdscomm
((
rd_msg_hdr
 *)&
msg
,

67 (
rd_msg_‹eq
),

68 (
rd_msg_hdr
 *)&
ª•
,

69 (
rd_msg_‹es
),

70 
rd±r
 );

74 i‡(
ªtvÆ
 =
SYSERR
) {

75 
rd±r
->
rd_°©e
 = 
RD_FREE
;

76  
SYSERR
;

77 } i‡(
ªtvÆ
 =
TIMEOUT
) {

78 
	`k¥ötf
("Timeout duringÑemote file open\n\r");

79 
rd±r
->
rd_°©e
 = 
RD_FREE
;

80  
SYSERR
;

81 } i‡(
	`¡ohs
(
ª•
.
rd_°©us
) != 0) {

82 
rd±r
->
rd_°©e
 = 
RD_FREE
;

83  
SYSERR
;

88 
rd±r
->
rd_°©e
 = 
RD_OPEN
;

92  
dev±r
->
dvnum
;

93 
	}
}

	@device/rds/rdsprocess.c

3 
	~<xöu.h
>

12 
	$rd•ro˚ss
 (

13 
rdscblk
 *
rd±r


16 
rd_msg_wªq
 
msg
;

18 
rd_msg_ºes
 
ª•
;

20 
öt32
 
ªtvÆ
;

21 *
idto
;

22 *
id‰om
;

23 
rdbuff
 *
b±r
;

25 
rdbuff
 *
≈å
;

27 
rdbuff
 *
µå
;

28 
rdbuff
 *
q±r
;

30 
öt32
 
i
;

32 
TRUE
) {

35 
	`waô
(
rd±r
->
rd_ªq£m
);

36 
b±r
 = 
rd±r
->
rd_rh√xt
;

40 
b±r
->
rd_›
) {

42 
RD_OP_READ
:

46 
msg
.
rd_ty≥
 = 
	`ht⁄s
(
RD_MSG_RREQ
);

47 
msg
.
rd_°©us
 = 
	`ht⁄s
(0);

48 
msg
.
rd_£q
 = 0;

49 
idto
 = 
msg
.
rd_id
;

50 
	`mem£t
(
idto
, 
NULLCH
, 
RD_IDLEN
);

51 
id‰om
 = 
rd±r
->
rd_id
;

52  (*
idto
++ = *
id‰om
++Ë!
NULLCH
 ) {

58 
ªtvÆ
 = 
	`rdscomm
((
rd_msg_hdr
 *)&
msg
,

59 (
rd_msg_ºeq
),

60 (
rd_msg_hdr
 *)&
ª•
,

61 (
rd_msg_ºes
),

62 
rd±r
 );

66 i‡–(
ªtvÆ
 =
SYSERR
Ë|| (ªtvÆ =
TIMEOUT
) ||

67 (
	`¡ohs
(
ª•
.
rd_°©us
) != 0) ) {

68 
	`∑nic
("FailedÅo contactÑemote disk server");

73 
i
=0; i<
RD_BLKSIZ
; i++) {

74 
b±r
->
rd_block
[
i
] = 
ª•
.
rd_d©a
[i];

79 
≈å
 = 
b±r
->
rd_√xt
;

80 
µå
 = 
b±r
->
rd_¥ev
;

81 
≈å
->
rd_¥ev
 = 
b±r
->rd_prev;

82 
µå
->
rd_√xt
 = 
b±r
->rd_next;

86 
µå
 = (
rdbuff
 *Ë&
rd±r
->
rd_ch√xt
;

87 
≈å
 = 
µå
->
rd_√xt
;

88 
b±r
->
rd_√xt
 = 
≈å
;

89 
b±r
->
rd_¥ev
 = 
µå
;

90 
µå
->
rd_√xt
 = 
b±r
;

91 
≈å
->
rd_¥ev
 = 
b±r
;

95 
b±r
->
rd_ªf˙t
 = 1;

99 
	`sig«l
(
rd±r
->
rd_avaû£m
);

103 
	`£nd
(
b±r
->
rd_pid
, (
uöt32
)bptr);

108 
q±r
 = 
rd±r
->
rd_rh√xt
;

109 
q±r
 !(
rdbuff
 *)&
rd±r
->
rd_π√xt
) {

110 i‡(
q±r
->
rd_blknum
 =
b±r
->rd_blknum) {

111 
b±r
->
rd_ªf˙t
++;

112 
	`£nd
(
q±r
->
rd_pid
,(
uöt32
)
b±r
);

116 
µå
 = 
q±r
->
rd_¥ev
;

117 
≈å
 = 
q±r
->
rd_√xt
;

118 
µå
->
rd_√xt
 = 
b±r
->rd_next;

119 
≈å
->
rd_¥ev
 = 
b±r
->rd_prev;

123 
q±r
->
rd_√xt
 = 
rd±r
->
rd_‰ì
;

124 
rd±r
->
rd_‰ì
 = 
q±r
;

125 
	`sig«l
(
rd±r
->
rd_avaû£m
);

128 
q±r
 = q±r->
rd_√xt
;

132 
RD_OP_WRITE
:

136 
msg
.
rd_ty≥
 = 
	`ht⁄s
(
RD_MSG_WREQ
);

137 
msg
.
rd_blk
 = 
b±r
->
rd_blknum
;

138 
msg
.
rd_°©us
 = 
	`ht⁄s
(0);

139 
msg
.
rd_£q
 = 0;

140 
idto
 = 
msg
.
rd_id
;

141 
	`mem£t
(
idto
, 
NULLCH
, 
RD_IDLEN
);

142 
id‰om
 = 
rd±r
->
rd_id
;

143  (*
idto
++ = *
id‰om
++Ë!
NULLCH
 ) {

146 
i
=0; i<
RD_BLKSIZ
; i++) {

147 
msg
.
rd_d©a
[
i
] = 
b±r
->
rd_block
[i];

152 
≈å
 = 
b±r
->
rd_√xt
;

153 
µå
 = 
b±r
->
rd_¥ev
;

154 
µå
->
rd_√xt
 = 
≈å
;

155 
≈å
->
rd_¥ev
 = 
µå
;

159 
µå
 = (
rdbuff
 *Ë&
rd±r
->
rd_ch√xt
;

160 
≈å
 = 
µå
->
rd_√xt
;

161 
b±r
->
rd_√xt
 = 
≈å
;

162 
b±r
->
rd_¥ev
 = 
µå
;

163 
µå
->
rd_√xt
 = 
b±r
;

164 
≈å
->
rd_¥ev
 = 
b±r
;

168 
b±r
->
rd_ªf˙t
 = 0;

169 
	`sig«l
(
rd±r
->
rd_avaû£m
);

173 
ªtvÆ
 = 
	`rdscomm
((
rd_msg_hdr
 *)&
msg
,

174 (
rd_msg_wªq
),

175 (
rd_msg_hdr
 *)&
ª•
,

176 (
rd_msg_wªs
),

177 
rd±r
 );

181 i‡–(
ªtvÆ
 =
SYSERR
Ë|| (ªtvÆ =
TIMEOUT
) ||

182 (
	`¡ohs
(
ª•
.
rd_°©us
) != 0) ) {

183 
	`∑nic
("failedÅo contactÑemote disk server");

187 
RD_OP_SYNC
:

191 
	`£nd
(
b±r
->
rd_pid
, 
OK
);

195 
≈å
 = 
b±r
->
rd_√xt
;

196 
µå
 = 
b±r
->
rd_¥ev
;

197 
≈å
->
rd_¥ev
 = 
b±r
->rd_prev;

198 
µå
->
rd_√xt
 = 
b±r
->rd_next;

202 
b±r
->
rd_√xt
 = 
rd±r
->
rd_‰ì
;

203 
rd±r
->
rd_‰ì
 = 
b±r
;

204 
	`sig«l
(
rd±r
->
rd_avaû£m
);

208 
	}
}

	@device/rds/rdsread.c

3 
	~<xöu.h
>

9 
devˇŒ
 
	$rd§ód
 (

10 
díåy
 *
dev±r
,

11 *
buff
,

12 
öt32
 
blk


15 
rdscblk
 *
rd±r
;

16 
rdbuff
 *
b±r
;

18 
rdbuff
 *
≈å
;

20 
rdbuff
 *
µå
;

22 
rdbuff
 *
˝å
;

26 
rd±r
 = &
rd°ab
[
dev±r
->
dvmö‹
];

27 i‡(
rd±r
->
rd_°©e
 !
RD_OPEN
) {

28  
SYSERR
;

33 i‡–! 
rd±r
->
rd_comruns
 ) {

34 
rd±r
->
rd_comruns
 = 
TRUE
;

35 
	`ªsume
(
rd±r
->
rd_com¥oc
);

40 
b±r
 = 
rd±r
->
rd_ch√xt
;

41 
b±r
 !(
rdbuff
 *)&
rd±r
->
rd_˘√xt
) {

42 i‡(
b±r
->
rd_blknum
 =
blk
) {

43 i‡(
b±r
->
rd_°©us
 =
RD_INVALID
) {

46 
	`mem˝y
(
buff
, 
b±r
->
rd_block
, 
RD_BLKSIZ
);

47  
OK
;

49 
b±r
 = b±r->
rd_√xt
;

54 
b±r
 = 
rd±r
->
rd_π¥ev
;

56 
b±r
 !(
rdbuff
 *)&
rd±r
->
rd_rh√xt
) {

57 i‡(
b±r
->
rd_blknum
 =
blk
) {

61 i‡(
b±r
->
rd_›
 =
RD_OP_WRITE
) {

62 
	`mem˝y
(
buff
, 
b±r
->
rd_block
, 
RD_BLKSIZ
);

63  
OK
;

67 
b±r
 = b±r->
rd_¥ev
;

72 
b±r
 = 
	`rdsbuÁŒoc
(
rd±r
);

73 
b±r
->
rd_›
 = 
RD_OP_READ
;

74 
b±r
->
rd_ªf˙t
 = 1;

75 
b±r
->
rd_blknum
 = 
blk
;

76 
b±r
->
rd_°©us
 = 
RD_INVALID
;

77 
b±r
->
rd_pid
 = 
	`gëpid
();

81 
µå
 = 
rd±r
->
rd_π¥ev
;

82 
rd±r
->
rd_π¥ev
 = 
b±r
;

83 
b±r
->
rd_√xt
 = 
µå
->rd_next;

84 
b±r
->
rd_¥ev
 = 
µå
;

85 
µå
->
rd_√xt
 = 
b±r
;

89 
	`ªcv˛r
();

93 
	`sig«l
(
rd±r
->
rd_ªq£m
);

97 
b±r
 = (
rdbuff
 *)
	`ª˚ive
();

98 i‡(
b±r
 =(
rdbuff
 *)
SYSERR
) {

99  
SYSERR
;

101 
	`mem˝y
(
buff
, 
b±r
->
rd_block
, 
RD_BLKSIZ
);

102 
b±r
->
rd_ªf˙t
--;

103 i‡(
b±r
->
rd_ªf˙t
 <= 0) {

109 
˝å
 = 
rd±r
->
rd_ch√xt
;

110 
˝å
 !
b±r
) {

111 i‡(
˝å
->
rd_blknum
 =
blk
) {

115 
µå
 = 
b±r
->
rd_¥ev
;

116 
≈å
 = 
b±r
->
rd_√xt
;

117 
µå
->
rd_√xt
 = 
≈å
;

118 
≈å
->
rd_¥ev
 = 
µå
;

122 
b±r
->
rd_√xt
 = 
rd±r
->
rd_‰ì
;

123 
rd±r
->
rd_‰ì
 = 
b±r
;

126 
˝å
 = c±r->
rd_√xt
;

129  
OK
;

130 
	}
}

	@device/rds/rdswrite.c

3 
	~<xöu.h
>

9 
devˇŒ
 
	$rdswrôe
 (

10 
díåy
 *
dev±r
,

11 *
buff
,

12 
öt32
 
blk


15 
rdscblk
 *
rd±r
;

16 
rdbuff
 *
b±r
;

17 
rdbuff
 *
µå
;

18 
rdbuff
 *
≈å
;

19 
boﬁ8
 
found
;

23 
rd±r
 = &
rd°ab
[
dev±r
->
dvmö‹
];

24 i‡(
rd±r
->
rd_°©e
 !
RD_OPEN
) {

25  
SYSERR
;

30 i‡–! 
rd±r
->
rd_comruns
 ) {

31 
rd±r
->
rd_comruns
 = 
TRUE
;

32 
	`ªsume
(
rd±r
->
rd_com¥oc
);

38 
b±r
 = 
rd±r
->
rd_rh√xt
;

39 
b±r
 !(
rdbuff
 *)&
rd±r
->
rd_π√xt
) {

40 i‡–(
b±r
->
rd_blknum
 =
blk
) &&

41 (
b±r
->
rd_›
 =
RD_OP_WRITE
) ) {

42 
	`mem˝y
(
b±r
->
rd_block
, 
buff
, 
RD_BLKSIZ
);

43  
OK
;

45 
b±r
 = b±r->
rd_√xt
;

50 
b±r
 = 
rd±r
->
rd_ch√xt
;

51 
found
 = 
FALSE
;

52 
b±r
 !(
rdbuff
 *)&
rd±r
->
rd_˘√xt
) {

53 i‡(
b±r
->
rd_blknum
 =
blk
) {

54 i‡(
b±r
->
rd_ªf˙t
 <= 0) {

55 
µå
 = 
b±r
->
rd_¥ev
;

56 
≈å
 = 
b±r
->
rd_√xt
;

61 
µå
->
rd_√xt
 = 
b±r
->rd_next;

62 
≈å
->
rd_¥ev
 = 
b±r
->rd_prev;

63 
	`£mª£t
(
rd±r
->
rd_avaû£m
,

64 
	`£mcou¡
(
rd±r
->
rd_avaû£m
) - 1);

65 
found
 = 
TRUE
;

69 
b±r
 = b±r->
rd_√xt
;

72 i‡–!
found
 ) {

73 
b±r
 = 
	`rdsbuÁŒoc
(
rd±r
);

78 
	`mem˝y
(
b±r
->
rd_block
, 
buff
, 
RD_BLKSIZ
);

79 
b±r
->
rd_›
 = 
RD_OP_WRITE
;

80 
b±r
->
rd_ªf˙t
 = 0;

81 
b±r
->
rd_blknum
 = 
blk
;

82 
b±r
->
rd_°©us
 = 
RD_VALID
;

83 
b±r
->
rd_pid
 = 
	`gëpid
();

87 
µå
 = 
rd±r
->
rd_π¥ev
;

88 
rd±r
->
rd_π¥ev
 = 
b±r
;

89 
b±r
->
rd_√xt
 = 
µå
->rd_next;

90 
b±r
->
rd_¥ev
 = 
µå
;

91 
µå
->
rd_√xt
 = 
b±r
;

95 
	`sig«l
(
rd±r
->
rd_ªq£m
);

96  
OK
;

97 
	}
}

	@device/rfs/rflclose.c

3 
	~<xöu.h
>

9 
devˇŒ
 
	$rÊ˛o£
 (

10 
díåy
 *
dev±r


13 
rÊcblk
 *
rÂå
;

17 
	`waô
(
Rf_d©a
.
rf_muãx
);

21 
rÂå
 = &
rÊèb
[
dev±r
->
dvmö‹
];

22 i‡(
rÂå
->
rf°©e
 =
RF_FREE
) {

23 
	`sig«l
(
Rf_d©a
.
rf_muãx
);

24  
SYSERR
;

29 
rÂå
->
rf°©e
 = 
RF_FREE
;

30 
	`sig«l
(
Rf_d©a
.
rf_muãx
);

31  
OK
;

32 
	}
}

	@device/rfs/rflgetc.c

3 
	~<xöu.h
>

9 
devˇŒ
 
	$rÊgëc
(

10 
díåy
 *
dev±r


13 
ch
;

14 
öt32
 
ªtvÆ
;

16 
ªtvÆ
 = 
	`rÊªad
(
dev±r
, &
ch
, 1);

18 i‡(
ªtvÆ
 != 1) {

19  
SYSERR
;

22  (
devˇŒ
)
ch
;

23 
	}
}

	@device/rfs/rflinit.c

3 
	~<xöu.h
>

5 
rÊcblk
 
	grÊèb
[
NrÊ
];

11 
devˇŒ
 
	$rÊöô
(

12 
díåy
 *
dev±r


15 
rÊcblk
 *
rÊ±r
;

16 
öt32
 
i
;

18 
rÊ±r
 = &
rÊèb
[ 
dev±r
->
dvmö‹
 ];

22 
rÊ±r
->
rf°©e
 = 
RF_FREE
;

23 
rÊ±r
->
rfdev
 = 
dev±r
->
dvnum
;

24 
i
=0; i<
RF_NAMLEN
; i++) {

25 
rÊ±r
->
r‚ame
[
i
] = 
NULLCH
;

27 
rÊ±r
->
rÂos
 =ÑÊ±r->
rfmode
 = 0;

28  
OK
;

29 
	}
}

	@device/rfs/rflputc.c

3 
	~<xöu.h
>

9 
devˇŒ
 
	$rÊputc
(

10 
díåy
 *
dev±r
,

11 
ch


14 i‡(
	`rÊwrôe
(
dev±r
, &
ch
, 1) != 1) {

15  
SYSERR
;

18  
OK
;

19 
	}
}

	@device/rfs/rflread.c

3 
	~<xöu.h
>

9 
devˇŒ
 
	$rÊªad
 (

10 
díåy
 *
dev±r
,

11 *
buff
,

12 
öt32
 
cou¡


15 
rÊcblk
 *
rÂå
;

16 
öt32
 
ªtvÆ
;

17 
rf_msg_ºeq
 
msg
;

18 
rf_msg_ºes
 
ª•
;

19 
öt32
 
i
;

20 *
‰om
, *
to
;

21 
öt32
 
Àn
;

25 
	`waô
(
Rf_d©a
.
rf_muãx
);

29 i‡–(
cou¡
 <0Ë|| (cou¡ > 
RF_DATALEN
) ) {

30 
	`sig«l
(
Rf_d©a
.
rf_muãx
);

31  
SYSERR
;

36 
rÂå
 = &
rÊèb
[
dev±r
->
dvmö‹
];

40 i‡(
rÂå
->
rf°©e
 =
RF_FREE
) {

41 
	`sig«l
(
Rf_d©a
.
rf_muãx
);

42  
SYSERR
;

47 i‡((
rÂå
->
rfmode
 & 
RF_MODE_R
) == 0) {

48 
	`sig«l
(
Rf_d©a
.
rf_muãx
);

49  
SYSERR
;

54 
msg
.
rf_ty≥
 = 
	`ht⁄s
(
RF_MSG_RREQ
);

55 
msg
.
rf_°©us
 = 
	`ht⁄s
(0);

56 
msg
.
rf_£q
 = 0;

57 
‰om
 = 
rÂå
->
r‚ame
;

58 
to
 = 
msg
.
rf_«me
;

59 
	`mem£t
(
to
, 
NULLCH
, 
RF_NAMLEN
);

60 
Àn
 = 0;

61  (*
to
++ = *
‰om
++) ) {

62 i‡(++
Àn
 >
RF_NAMLEN
) {

63 
	`sig«l
(
Rf_d©a
.
rf_muãx
);

64  
SYSERR
;

67 
msg
.
rf_pos
 = 
	`ht⁄l
(
rÂå
->
rÂos
);

68 
msg
.
rf_Àn
 = 
	`ht⁄l
(
cou¡
);

72 
ªtvÆ
 = 
	`rfscomm
((
rf_msg_hdr
 *)&
msg
,

73 (
rf_msg_ºeq
),

74 (
rf_msg_hdr
 *)&
ª•
,

75 (
rf_msg_ºes
) );

79 i‡(
ªtvÆ
 =
SYSERR
) {

80 
	`sig«l
(
Rf_d©a
.
rf_muãx
);

81  
SYSERR
;

82 } i‡(
ªtvÆ
 =
TIMEOUT
) {

83 
	`k¥ötf
("Timeout duringÑemote fileÑead\n");

84 
	`sig«l
(
Rf_d©a
.
rf_muãx
);

85  
SYSERR
;

86 } i‡(
	`¡ohs
(
ª•
.
rf_°©us
) != 0) {

87 
	`sig«l
(
Rf_d©a
.
rf_muãx
);

88  
SYSERR
;

93 
i
=0; i<
	`¡ohl
(
ª•
.
rf_Àn
); i++) {

94 *
buff
++ = 
ª•
.
rf_d©a
[
i
];

96 
rÂå
->
rÂos
 +
	`¡ohl
(
ª•
.
rf_Àn
);

98 
	`sig«l
(
Rf_d©a
.
rf_muãx
);

99  
	`¡ohl
(
ª•
.
rf_Àn
);

100 
	}
}

	@device/rfs/rflseek.c

3 
	~<xöu.h
>

9 
devˇŒ
 
	$rÊ£ek
 (

10 
díåy
 *
dev±r
,

11 
uöt32
 
pos


14 
rÊcblk
 *
rÂå
;

18 
	`waô
(
Rf_d©a
.
rf_muãx
);

22 
rÂå
 = &
rÊèb
[
dev±r
->
dvmö‹
];

23 i‡(
rÂå
->
rf°©e
 =
RF_FREE
) {

24 
	`sig«l
(
Rf_d©a
.
rf_muãx
);

25  
SYSERR
;

30 
rÂå
->
rÂos
 = 
pos
;

31 
	`sig«l
(
Rf_d©a
.
rf_muãx
);

32  
OK
;

33 
	}
}

	@device/rfs/rflwrite.c

3 
	~<xöu.h
>

9 
devˇŒ
 
	$rÊwrôe
 (

10 
díåy
 *
dev±r
,

11 *
buff
,

12 
öt32
 
cou¡


15 
rÊcblk
 *
rÂå
;

16 
öt32
 
ªtvÆ
;

17 
rf_msg_wªq
 
msg
;

18 
rf_msg_wªs
 
ª•
;

19 *
‰om
, *
to
;

20 
i
;

21 
öt32
 
Àn
;

25 
	`waô
(
Rf_d©a
.
rf_muãx
);

29 i‡–(
cou¡
 <0Ë|| (cou¡ > 
RF_DATALEN
) ) {

30 
	`sig«l
(
Rf_d©a
.
rf_muãx
);

31  
SYSERR
;

36 
rÂå
 = &
rÊèb
[
dev±r
->
dvmö‹
];

37 i‡–(
rÂå
->
rf°©e
 =
RF_FREE
) ||

38 ! (
rÂå
->
rfmode
 & 
RF_MODE_W
) ) {

39 
	`sig«l
(
Rf_d©a
.
rf_muãx
);

40  
SYSERR
;

45 
msg
.
rf_ty≥
 = 
	`ht⁄s
(
RF_MSG_WREQ
);

46 
msg
.
rf_°©us
 = 
	`ht⁄s
(0);

47 
msg
.
rf_£q
 = 0;

48 
‰om
 = 
rÂå
->
r‚ame
;

49 
to
 = 
msg
.
rf_«me
;

50 
	`mem£t
(
to
, 
NULLCH
, 
RF_NAMLEN
);

51 
Àn
 = 0;

52  (*
to
++ = *
‰om
++) ) {

53 i‡(++
Àn
 >
RF_NAMLEN
) {

54 
	`sig«l
(
Rf_d©a
.
rf_muãx
);

55  
SYSERR
;

58  (*
to
++ = *
‰om
++) ) {

61 
msg
.
rf_pos
 = 
	`ht⁄l
(
rÂå
->
rÂos
);

62 
msg
.
rf_Àn
 = 
	`ht⁄l
(
cou¡
);

63 
i
=0; i<
cou¡
; i++) {

64 
msg
.
rf_d©a
[
i
] = *
buff
++;

66 
i
 < 
RF_DATALEN
) {

67 
msg
.
rf_d©a
[
i
++] = 
NULLCH
;

72 
ªtvÆ
 = 
	`rfscomm
((
rf_msg_hdr
 *)&
msg
,

73 (
rf_msg_wªq
),

74 (
rf_msg_hdr
 *)&
ª•
,

75 (
rf_msg_wªs
) );

79 i‡(
ªtvÆ
 =
SYSERR
) {

80 
	`sig«l
(
Rf_d©a
.
rf_muãx
);

81  
SYSERR
;

82 } i‡(
ªtvÆ
 =
TIMEOUT
) {

83 
	`k¥ötf
("Timeout duringÑemote fileÑead\n");

84 
	`sig«l
(
Rf_d©a
.
rf_muãx
);

85  
SYSERR
;

86 } i‡(
	`¡ohs
(
ª•
.
rf_°©us
) != 0) {

87 
	`sig«l
(
Rf_d©a
.
rf_muãx
);

88  
SYSERR
;

93 
rÂå
->
rÂos
 +
	`¡ohl
(
ª•
.
rf_Àn
);

95 
	`sig«l
(
Rf_d©a
.
rf_muãx
);

96  
	`¡ohl
(
ª•
.
rf_Àn
);

97 
	}
}

	@device/rfs/rfscomm.c

3 
	~<xöu.h
>

10 
öt32
 
	$rfscomm
 (

11 
rf_msg_hdr
 *
msg
,

12 
öt32
 
mÀn
,

13 
rf_msg_hdr
 *
ª∂y
,

14 
öt32
 
æí


17 
öt32
 
i
;

18 
öt32
 
ªtvÆ
;

19 
öt32
 
£q
;

20 
öt16
 
πy≥
;

21 
öt32
 
¶Ÿ
;

25 i‡–! 
Rf_d©a
.
rf_ªgi°îed
 ) {

26 i‡–(
¶Ÿ
 = 
	`udp_ªgi°î
(
Rf_d©a
.
rf_£r_ù
,

27 
Rf_d©a
.
rf_£r_p‹t
,

28 
Rf_d©a
.
rf_loc_p‹t
)Ë=
SYSERR
) {

29  
SYSERR
;

31 
Rf_d©a
.
rf_udp_¶Ÿ
 = 
¶Ÿ
;

32 
Rf_d©a
.
rf_ªgi°îed
 = 
TRUE
;

37 
£q
 = 
Rf_d©a
.
rf_£q
++;

38 
msg
->
rf_£q
 = 
	`ht⁄l
(
£q
);

42 
i
=0; i<
RF_RETRIES
; i++) {

46 
ªtvÆ
 = 
	`udp_£nd
(
Rf_d©a
.
rf_udp_¶Ÿ
, (*)
msg
,

47 
mÀn
);

48 i‡(
ªtvÆ
 =
SYSERR
) {

49 
	`k¥ötf
("Cannot sendÅoÑemote file server\n");

50  
SYSERR
;

55 
ªtvÆ
 = 
	`udp_ªcv
(
Rf_d©a
.
rf_udp_¶Ÿ
, (*)
ª∂y
,

56 
æí
, 
RF_TIMEOUT
);

58 i‡(
ªtvÆ
 =
TIMEOUT
) {

60 } i‡(
ªtvÆ
 =
SYSERR
) {

61 
	`k¥ötf
("ErrorÑeadingÑemote fileÑeply\n");

62  
SYSERR
;

67 i‡(
	`¡ohl
(
ª∂y
->
rf_£q
Ë!
£q
) {

73 
πy≥
 = 
	`¡ohs
(
ª∂y
->
rf_ty≥
);

74 i‡(
πy≥
 !–
	`¡ohs
(
msg
->
rf_ty≥
Ë| 
RF_MSG_RESPONSE
) ) {

78  
ªtvÆ
;

83 
	`k¥ötf
("Timeout onÉxchange withÑemote file server\n");

84  
TIMEOUT
;

85 
	}
}

	@device/rfs/rfscontrol.c

3 
	~<xöu.h
>

9 
devˇŒ
 
	$rfsc⁄åﬁ
 (

10 
díåy
 *
dev±r
,

11 
öt32
 
func
,

12 
öt32
 
¨g1
,

13 
öt32
 
¨g2


16 
öt32
 
Àn
;

17 
rf_msg_§eq
 
msg
;

18 
rf_msg_§es
 
ª•
;

19 *
to
, *
‰om
;

20 
öt32
 
ªtvÆ
;

24 
	`waô
(
Rf_d©a
.
rf_muãx
);

29 
‰om
 = (*)
¨g1
;

30 
to
 = 
msg
.
rf_«me
;

31 
Àn
 = 0;

32 
	`mem£t
(
to
, 
NULLCH
, 
RF_NAMLEN
);

33  (*
to
++ = *
‰om
++) ) {

34 
Àn
++;

35 i‡(
Àn
 >(
RF_NAMLEN
 - 1) ) {

36 
	`sig«l
(
Rf_d©a
.
rf_muãx
);

37  
SYSERR
;

41 
func
) {

45 
RFS_CTL_DEL
:

46 i‡(
	`rf¢dmsg
(
RF_MSG_DREQ
, (*)
¨g1
Ë=
SYSERR
) {

47 
	`sig«l
(
Rf_d©a
.
rf_muãx
);

48  
SYSERR
;

54 
RFS_CTL_TRUNC
:

55 i‡(
	`rf¢dmsg
(
RF_MSG_TREQ
, (*)
¨g1
Ë=
SYSERR
) {

56 
	`sig«l
(
Rf_d©a
.
rf_muãx
);

57  
SYSERR
;

65 
RFS_CTL_MKDIR
:

66 i‡(
	`rf¢dmsg
(
RF_MSG_MREQ
, (*)
¨g1
Ë=
SYSERR
) {

67 
	`sig«l
(
Rf_d©a
.
rf_muãx
);

68  
SYSERR
;

74 
RFS_CTL_RMDIR
:

75 i‡(
	`rf¢dmsg
(
RF_MSG_XREQ
, (*)
¨g1
Ë=
SYSERR
) {

76 
	`sig«l
(
Rf_d©a
.
rf_muãx
);

77  
SYSERR
;

84 
RFS_CTL_SIZE
:

88 
msg
.
rf_ty≥
 = 
	`ht⁄s
(
RF_MSG_SREQ
);

89 
msg
.
rf_°©us
 = 
	`ht⁄s
(0);

90 
msg
.
rf_£q
 = 0;

94 
ªtvÆ
 = 
	`rfscomm
–(
rf_msg_hdr
 *)&
msg
,

95 (
rf_msg_§eq
),

96 (
rf_msg_hdr
 *)&
ª•
,

97 (
rf_msg_§es
) );

98 i‡–(
ªtvÆ
 =
SYSERR
Ë|| (ªtvÆ =
TIMEOUT
) ) {

99 
	`sig«l
(
Rf_d©a
.
rf_muãx
);

100  
SYSERR
;

102 
	`sig«l
(
Rf_d©a
.
rf_muãx
);

103  
	`¡ohl
(
ª•
.
rf_size
);

107 
	`k¥ötf
("rfsc⁄åﬁ: fun˘i⁄ %dÇŸ vÆid\n", 
func
);

108 
	`sig«l
(
Rf_d©a
.
rf_muãx
);

109  
SYSERR
;

112 
	`sig«l
(
Rf_d©a
.
rf_muãx
);

113  
OK
;

114 
	}
}

	@device/rfs/rfsgetmode.c

3 
	~<xöu.h
>

10 
öt32
 
	$rfsgëmode
 (

11 *
mode


14 
öt32
 
mbôs
;

16 
ch
;

18 
mbôs
 = 0;

26  (
ch
 = *
mode
++Ë!
NULLCH
) {

27 
ch
) {

29 'r': i‡(
mbôs
&
RF_MODE_R
) {

30  
SYSERR
;

32 
mbôs
 |
RF_MODE_R
;

35 'w': i‡(
mbôs
&
RF_MODE_W
) {

36  
SYSERR
;

38 
mbôs
 |
RF_MODE_W
;

41 'o': i‡(
mbôs
&
RF_MODE_O
 || mbôs&
RF_MODE_N
) {

42  
SYSERR
;

44 
mbôs
 |
RF_MODE_O
;

47 'n': i‡(
mbôs
&
RF_MODE_O
 || mbôs&
RF_MODE_N
) {

48  
SYSERR
;

50 
mbôs
 |
RF_MODE_N
;

53 :  
SYSERR
;

59 i‡–(
mbôs
&
RF_MODE_RW
) == 0 ) {

60 
mbôs
 |
RF_MODE_RW
;

62  
mbôs
;

63 
	}
}

	@device/rfs/rfsinit.c

3 
	~<xöu.h
>

5 
rfd©a
 
	gRf_d©a
;

11 
devˇŒ
 
	$rfsöô
(

12 
díåy
 *
dev±r


18 
Rf_d©a
.
rf_£q
 = 1;

22 i‡–
	`dŸ2ù
(
RF_SERVER_IP
, &
Rf_d©a
.
rf_£r_ù
Ë=
SYSERR
 ) {

23 
	`∑nic
("invalid IPáddress forÑemote file server");

25 
Rf_d©a
.
rf_£r_p‹t
 = 
RF_SERVER_PORT
;

26 
Rf_d©a
.
rf_loc_p‹t
 = 
RF_LOC_PORT
;

30 i‡–(
Rf_d©a
.
rf_muãx
 = 
	`£m¸óã
(1)Ë=
SYSERR
 ) {

31 
	`∑nic
("Cannot createÑemote file system semaphore");

36 
Rf_d©a
.
rf_ªgi°îed
 = 
FALSE
;

38  
OK
;

39 
	}
}

	@device/rfs/rfsndmsg.c

3 
	~<xöu.h
>

9 
°©us
 
	$rf¢dmsg
 (

10 
uöt16
 
ty≥
,

11 *
«me


14 
rf_msg_hdr
 
ªq
;

15 
rf_msg_hdr
 
ª•
;

16 
öt32
 
ªtvÆ
;

17 *
to
;

21 
ªq
.
rf_ty≥
 = 
	`ht⁄s
(
ty≥
);

22 
ªq
.
rf_°©us
 = 
	`ht⁄s
(0);

23 
ªq
.
rf_£q
 = 0;

24 
to
 = 
ªq
.
rf_«me
;

25  (*
to
++ = *
«me
++) ) {

31 
ªtvÆ
 = 
	`rfscomm
(&
ªq
, (
rf_msg_hdr
),

32 &
ª•
, (
rf_msg_hdr
) );

36 i‡(
ªtvÆ
 =
SYSERR
) {

37  
SYSERR
;

38 } i‡(
ªtvÆ
 =
TIMEOUT
) {

39 
	`k¥ötf
("Timeout duringÑemote file serveráccess\n");

40  
SYSERR
;

41 } i‡(
	`¡ohl
(
ª•
.
rf_°©us
) != 0) {

42  
SYSERR
;

45  
OK
;

46 
	}
}

	@device/rfs/rfsopen.c

3 
	~<xöu.h
>

10 
devˇŒ
 
	$rfs›í
 (

11 
díåy
 *
dev±r
,

12 *
«me
,

13 *
mode


16 
rÊcblk
 *
rÂå
;

17 
rf_msg_‹eq
 
msg
;

18 
rf_msg_‹es
 
ª•
;

19 
öt32
 
ªtvÆ
;

20 
öt32
 
Àn
;

21 *
≈å
;

22 *
Âå
;

23 
öt32
 
i
;

27 
	`waô
(
Rf_d©a
.
rf_muãx
);

31 
i
=0; i<
NrÊ
; i++) {

32 
rÂå
 = &
rÊèb
[
i
];

33 i‡(
rÂå
->
rf°©e
 =
RF_FREE
) {

37 i‡(
i
 >
NrÊ
) {

38 
	`sig«l
(
Rf_d©a
.
rf_muãx
);

39  
SYSERR
;

44 
≈å
 = 
«me
;

45 
Âå
 = 
rÂå
->
r‚ame
;

46 
Àn
 = 0;

47  (*
Âå
++ = *
≈å
++Ë!
NULLCH
) {

48 
Àn
++;

49 i‡(
Àn
 >
RF_NAMLEN
) {

50 
	`sig«l
(
Rf_d©a
.
rf_muãx
);

51  
SYSERR
;

57 i‡(
Àn
==0) {

58 
	`sig«l
(
Rf_d©a
.
rf_muãx
);

59  
SYSERR
;

64 i‡–(
rÂå
->
rfmode
 = 
	`rfsgëmode
(
mode
)Ë=
SYSERR
 ) {

65 
	`sig«l
(
Rf_d©a
.
rf_muãx
);

66  
SYSERR
;

71 
msg
.
rf_ty≥
 = 
	`ht⁄s
(
RF_MSG_OREQ
);

72 
msg
.
rf_°©us
 = 
	`ht⁄s
(0);

73 
msg
.
rf_£q
 = 0;

74 
≈å
 = 
msg
.
rf_«me
;

75 
	`mem£t
(
≈å
, 
NULLCH
, 
RF_NAMLEN
);

76  (*
≈å
++ = *
«me
++Ë!
NULLCH
 ) {

79 
msg
.
rf_mode
 = 
	`ht⁄l
(
rÂå
->
rfmode
);

83 
ªtvÆ
 = 
	`rfscomm
((
rf_msg_hdr
 *)&
msg
,

84 (
rf_msg_‹eq
),

85 (
rf_msg_hdr
 *)&
ª•
,

86 (
rf_msg_‹es
) );

90 i‡(
ªtvÆ
 =
SYSERR
) {

91 
	`sig«l
(
Rf_d©a
.
rf_muãx
);

92  
SYSERR
;

93 } i‡(
ªtvÆ
 =
TIMEOUT
) {

94 
	`k¥ötf
("Timeout duringÑemote file open\n\r");

95 
	`sig«l
(
Rf_d©a
.
rf_muãx
);

96  
SYSERR
;

97 } i‡(
	`¡ohs
(
ª•
.
rf_°©us
) != 0) {

98 
	`sig«l
(
Rf_d©a
.
rf_muãx
);

99  
SYSERR
;

104 
rÂå
->
rÂos
 = 0;

108 
rÂå
->
rf°©e
 = 
RF_USED
;

112 
	`sig«l
(
Rf_d©a
.
rf_muãx
);

113  
rÂå
->
rfdev
;

114 
	}
}

	@device/tty/ttycontrol.c

3 
	~<xöu.h
>

9 
devˇŒ
 
	$âyc⁄åﬁ
(

10 
díåy
 *
dev±r
,

11 
öt32
 
func
,

12 
öt32
 
¨g1
,

13 
öt32
 
¨g2


16 
âycblk
 *
ty±r
;

17 
ch
;

19 
ty±r
 = &
âyèb
[
dev±r
->
dvmö‹
];

23  
func
 ) {

25 
TC_NEXTC
:

26 
	`waô
(
ty±r
->
tyi£m
);

27 
ch
 = *
ty±r
->
tyôaû
;

28 
	`sig«l
(
ty±r
->
tyi£m
);

29  (
devˇŒ
)
ch
;

31 
TC_MODER
:

32 
ty±r
->
tyimode
 = 
TY_IMRAW
;

33  (
devˇŒ
)
OK
;

35 
TC_MODEC
:

36 
ty±r
->
tyimode
 = 
TY_IMCOOKED
;

37  (
devˇŒ
)
OK
;

39 
TC_MODEK
:

40 
ty±r
->
tyimode
 = 
TY_IMCBREAK
;

41  (
devˇŒ
)
OK
;

43 
TC_ICHARS
:

44 (
	`£mcou¡
(
ty±r
->
tyi£m
));

46 
TC_ECHO
:

47 
ty±r
->
tyõcho
 = 
TRUE
;

48  (
devˇŒ
)
OK
;

50 
TC_NOECHO
:

51 
ty±r
->
tyõcho
 = 
FALSE
;

52  (
devˇŒ
)
OK
;

55  (
devˇŒ
)
SYSERR
;

57 
	}
}

	@device/tty/ttygetc.c

3 
	~<xöu.h
>

9 
devˇŒ
 
	$âygëc
(

10 
díåy
 *
dev±r


13 
ch
;

14 
âycblk
 *
ty±r
;

16 
ty±r
 = &
âyèb
[
dev±r
->
dvmö‹
];

20 
	`waô
(
ty±r
->
tyi£m
);

21 
ch
 = *
ty±r
->
tyihód
++;

25 i‡(
ty±r
->
tyihód
 >&ty±r->
tyibuff
[
TY_IBUFLEN
]) {

26 
ty±r
->
tyihód
 =Åy±r->
tyibuff
;

31 i‡–(
ty±r
->
tyimode
 =
TY_IMCOOKED
Ë&& (ty±r->
tyeof
) &&

32 (
ch
 =
ty±r
->
tyeofch
) ) {

33  (
devˇŒ
)
EOF
;

36  (
devˇŒ
)
ch
;

37 
	}
}

	@device/tty/ttyhandle_in.c

3 
	~<xöu.h
>

5 
loˇl
 
îa£1
(
âycblk
 *, 
u¨t_c§eg
 *);

6 
loˇl
 
echoch
(, 
âycblk
 *, 
u¨t_c§eg
 *);

7 
loˇl
 
ïutc
(, 
âycblk
 *, 
u¨t_c§eg
 *);

13 
	$âyh™dÀ_ö
 (

14 
âycblk
 *
ty±r
,

15 
u¨t_c§eg
 *
c§±r


18 
ch
;

19 
öt32
 
avaû
;

21 
ch
 = 
c§±r
->
buf„r
;

25 
avaû
 = 
	`£mcou¡
(
ty±r
->
tyi£m
);

26 i‡(
avaû
 < 0) {

27 
avaû
 = 0;

32 i‡(
ty±r
->
tyimode
 =
TY_IMRAW
) {

33 i‡(
avaû
 >
TY_IBUFLEN
) {

39 *
ty±r
->
tyôaû
++ = 
ch
;

43 i‡(
ty±r
->
tyôaû
 >&ty±r->
tyibuff
[
TY_IBUFLEN
]) {

44 
ty±r
->
tyôaû
 =Åy±r->
tyibuff
;

48 
	`sig«l
(
ty±r
->
tyi£m
);

54 i‡–(
ch
 =
TY_RETURN
Ë&& 
ty±r
->
tyi¸lf
 ) {

55 
ch
 = 
TY_NEWLINE
;

60 i‡(
ty±r
->
tyoÊow
) {

61 i‡(
ch
 =
ty±r
->
tyo°¨t
) {

62 
ty±r
->
tyohñd
 = 
FALSE
;

63 
	`âykickout
(
c§±r
);

65 } i‡(
ch
 =
ty±r
->
tyo°›
) {

66 
ty±r
->
tyohñd
 = 
TRUE
;

71 
ty±r
->
tyohñd
 = 
FALSE
;

73 i‡(
ty±r
->
tyimode
 =
TY_IMCBREAK
) {

77 i‡(
avaû
 >
TY_IBUFLEN
) {

78 
	`ïutc
(
ty±r
->
tyifuŒc
,Åy±r, 
c§±r
);

80 *
ty±r
->
tyôaû
++ = 
ch
;

84 i‡(
ty±r
->
tyôaû
>=&ty±r->
tyibuff
[
TY_IBUFLEN
]) {

85 
ty±r
->
tyôaû
 =Åy±r->
tyibuff
;

87 i‡(
ty±r
->
tyõcho
) {

88 
	`echoch
(
ch
, 
ty±r
, 
c§±r
);

90 
	`sig«l
(
ty±r
->
tyi£m
);

98 i‡(
ch
 =
ty±r
->
tyikûlc
 &&Åy±r->
tyikûl
) {

99 
ty±r
->
tyôaû
 -ty±r->
tyicurs‹
;

100 i‡(
ty±r
->
tyôaû
 <Åy±r->
tyibuff
) {

101 
ty±r
->
tyôaû
 +
TY_IBUFLEN
;

103 
ty±r
->
tyicurs‹
 = 0;

104 
	`ïutc
(
TY_RETURN
, 
ty±r
, 
c§±r
);

105 
	`ïutc
(
TY_NEWLINE
, 
ty±r
, 
c§±r
);

111 i‡–((
ch
==
ty±r
->
tyõø£c
Ë|| (ch=Òy±r->
tyõø£c2
))

112 && 
ty±r
->
tyõø£
) {

113 i‡(
ty±r
->
tyicurs‹
 > 0) {

114 
ty±r
->
tyicurs‹
--;

115 
	`îa£1
(
ty±r
, 
c§±r
);

122 i‡–(
ch
 =
TY_NEWLINE
Ë|| (ch =
TY_RETURN
) ) {

123 i‡(
ty±r
->
tyõcho
) {

124 
	`echoch
(
ch
, 
ty±r
, 
c§±r
);

126 *
ty±r
->
tyôaû
++ = 
ch
;

127 i‡(
ty±r
->
tyôaû
>=&ty±r->
tyibuff
[
TY_IBUFLEN
]) {

128 
ty±r
->
tyôaû
 =Åy±r->
tyibuff
;

131 
	`sig« 
(
ty±r
->
tyi£m
,Åy±r->
tyicurs‹
 + 1);

132 
ty±r
->
tyicurs‹
 = 0;

139 
avaû
 = 
	`£mcou¡
(
ty±r
->
tyi£m
);

140 i‡(
avaû
 < 0) {

141 
avaû
 = 0;

143 i‡((
avaû
 + 
ty±r
->
tyicurs‹
Ë>
TY_IBUFLEN
-1) {

144 
	`ïutc
(
ty±r
->
tyifuŒc
,Åy±r, 
c§±r
);

151 i‡(
ch
 =
ty±r
->
tyeofch
 &&Åy±r->
tyeof
) {

152 i‡(
ty±r
->
tyõcho
) {

153 
	`echoch
(
ch
, 
ty±r
, 
c§±r
);

155 i‡(
ty±r
->
tyicurs‹
 != 0) {

158 *
ty±r
->
tyôaû
++ = 
ch
;

159 
	`sig«l
(
ty±r
->
tyi£m
);

166 i‡(
ty±r
->
tyõcho
) {

167 
	`echoch
(
ch
, 
ty±r
, 
c§±r
);

172 
ty±r
->
tyicurs‹
++;

173 *
ty±r
->
tyôaû
++ = 
ch
;

177 i‡(
ty±r
->
tyôaû
 >&ty±r->
tyibuff
[
TY_IBUFLEN
]) {

178 
ty±r
->
tyôaû
 =Åy±r->
tyibuff
;

182 
	}
}

188 
loˇl
 
	$îa£1
(

189 
âycblk
 *
ty±r
,

190 
u¨t_c§eg
 *
c§±r


193 
ch
;

195 i‡–(--
ty±r
->
tyôaû
Ë<Åy±r->
tyibuff
) {

196 
ty±r
->
tyôaû
 +
TY_IBUFLEN
;

201 
ch
 = *
ty±r
->
tyôaû
;

202 i‡(
ty±r
->
tyõcho
) {

203 i‡(
ch
 < 
TY_BLANK
 || ch == 0177) {

204 i‡(
ty±r
->
tyevis
) {

205 
	`ïutc
(
TY_BACKSP
, 
ty±r
, 
c§±r
);

206 i‡(
ty±r
->
tyõback
) {

207 
	`ïutc
(
TY_BLANK
, 
ty±r
, 
c§±r
);

208 
	`ïutc
(
TY_BACKSP
, 
ty±r
, 
c§±r
);

211 
	`ïutc
(
TY_BACKSP
, 
ty±r
, 
c§±r
);

212 i‡(
ty±r
->
tyõback
) {

213 
	`ïutc
(
TY_BLANK
, 
ty±r
, 
c§±r
);

214 
	`ïutc
(
TY_BACKSP
, 
ty±r
, 
c§±r
);

217 
	`ïutc
(
TY_BACKSP
, 
ty±r
, 
c§±r
);

218 i‡(
ty±r
->
tyõback
) {

219 
	`ïutc
(
TY_BLANK
, 
ty±r
, 
c§±r
);

220 
	`ïutc
(
TY_BACKSP
, 
ty±r
, 
c§±r
);

225 
	}
}

231 
loˇl
 
	$echoch
(

232 
ch
,

233 
âycblk
 *
ty±r
,

234 
u¨t_c§eg
 *
c§±r


237 i‡((
ch
==
TY_NEWLINE
 || ch==
TY_RETURN
Ë&& 
ty±r
->
tye¸lf
) {

238 
	`ïutc
(
TY_RETURN
, 
ty±r
, 
c§±r
);

239 
	`ïutc
(
TY_NEWLINE
, 
ty±r
, 
c§±r
);

240 } i‡–(
ch
<
TY_BLANK
||ch==0177Ë&& 
ty±r
->
tyevis
) {

241 
	`ïutc
(
TY_UPARROW
, 
ty±r
, 
c§±r
);

242 
	`ïutc
(
ch
+0100, 
ty±r
, 
c§±r
);

244 
	`ïutc
(
ch
, 
ty±r
, 
c§±r
);

246 
	}
}

252 
loˇl
 
	$ïutc
(

253 
ch
,

254 
âycblk
 *
ty±r
,

255 
u¨t_c§eg
 *
c§±r


258 *
ty±r
->
tyëaû
++ = 
ch
;

262 i‡(
ty±r
->
tyëaû
 >&ty±r->
tyebuff
[
TY_EBUFLEN
]) {

263 
ty±r
->
tyëaû
 =Åy±r->
tyebuff
;

265 
	`âykickout
(
c§±r
);

267 
	}
}

	@device/tty/ttyhandle_out.c

3 
	~<xöu.h
>

10 
	$âyh™dÀ_out
(

11 
âycblk
 *
ty±r
,

12 
u¨t_c§eg
 *
c§±r


16 
öt32
 
och¨s
;

18 
öt32
 
avaû
;

19 
öt32
 
u•a˚
;

21 
byã
 
õr
 = 0;

25 i‡(
ty±r
->
tyohñd
) {

31 i‡–(
ty±r
->
tyehód
 =ty±r->
tyëaû
) &&

32 (
	`£mcou¡
(
ty±r
->
tyo£m
Ë>
TY_OBUFLEN
) ) {

33 
õr
 = 
c§±r
->ier;

34 
c§±r
->
õr
 = iî & ~
UART_IER_ETBEI
;

40 
u•a˚
 = 
UART_FIFO_SIZE
;

45  (
u•a˚
>0Ë&& 
ty±r
->
tyehód
 !ty±r->
tyëaû
) {

46 
c§±r
->
buf„r
 = *
ty±r
->
tyehód
++;

47 i‡(
ty±r
->
tyehód
 >&ty±r->
tyebuff
[
TY_EBUFLEN
]) {

48 
ty±r
->
tyehód
 =Åy±r->
tyebuff
;

50 
u•a˚
--;

56 
och¨s
 = 0;

57 
avaû
 = 
TY_OBUFLEN
 - 
	`£mcou¡
(
ty±r
->
tyo£m
);

58  (
u•a˚
>0Ë&& (
avaû
 > 0) ) {

59 
c§±r
->
buf„r
 = *
ty±r
->
tyohód
++;

60 i‡(
ty±r
->
tyohód
 >&ty±r->
tyobuff
[
TY_OBUFLEN
]) {

61 
ty±r
->
tyohód
 =Åy±r->
tyobuff
;

63 
avaû
--;

64 
u•a˚
--;

65 
och¨s
++;

67 i‡(
och¨s
 > 0) {

68 
	`sig« 
(
ty±r
->
tyo£m
, 
och¨s
);

71 
	}
}

	@device/tty/ttyhandler.c

3 
	~<xöu.h
>

9 
	$âyh™dÀr
(

10 
öt32
 
¨g


13 
díåy
 *
dev±r
;

14 
âycblk
 *
ty±r
;

15 
u¨t_c§eg
 *
c§±r
;

16 
byã
 
iú
 = 0;

21 
dev±r
 = (
díåy
 *Ë
¨g
;

22 
c§±r
 = (
u¨t_c§eg
 *Ë
dev±r
->
dvc§
;

26 
ty±r
 = &
âyèb
[ 
dev±r
->
dvmö‹
 ];

31 
iú
 = 
c§±r
->iir;

32 i‡(
iú
 & 
UART_IIR_IRQ
) {

43 
iú
 &
UART_IIR_IDMASK
;

44 
iú
) {

48 
UART_IIR_RLSI
:

53 
UART_IIR_RDA
:

54 
UART_IIR_RTO
:

56 
	`ªsched_˙é
(
DEFER_START
);

60  (
c§±r
->
l§
 & 
UART_LSR_DR
) != 0) {

61 
	`âyh™dÀ_ö
(
ty±r
, 
c§±r
);

64 
	`ªsched_˙é
(
DEFER_STOP
);

70 
UART_IIR_THRE
:

71 
	`âyh™dÀ_out
(
ty±r
, 
c§±r
);

76 
UART_IIR_MSC
:

79 
	}
}

	@device/tty/ttyinit.c

3 
	~<xöu.h
>

5 
âycblk
 
	gâyèb
[
Nây
];

11 
devˇŒ
 
	$âyöô
(

12 
díåy
 *
dev±r


15 
âycblk
 *
ty±r
;

16 
u¨t_c§eg
 *
u±r
;

17 
uöt32
 
pcidev
;

19 
ty±r
 = &
âyèb
[ 
dev±r
->
dvmö‹
 ];

23 
ty±r
->
tyihód
 =Åy±r->
tyôaû
 =

24 &
ty±r
->
tyibuff
[0];

25 
ty±r
->
tyi£m
 = 
	`£m¸óã
(0);

26 
ty±r
->
tyohód
 =Åy±r->
tyŸaû
 =

27 &
ty±r
->
tyobuff
[0];

28 
ty±r
->
tyo£m
 = 
	`£m¸óã
(
TY_OBUFLEN
);

29 
ty±r
->
tyehód
 =Åy±r->
tyëaû
 =

30 &
ty±r
->
tyebuff
[0];

31 
ty±r
->
tyimode
 = 
TY_IMCOOKED
;

32 
ty±r
->
tyõcho
 = 
TRUE
;

33 
ty±r
->
tyõback
 = 
TRUE
;

34 
ty±r
->
tyevis
 = 
TRUE
;

35 
ty±r
->
tye¸lf
 = 
TRUE
;

36 
ty±r
->
tyi¸lf
 = 
TRUE
;

37 
ty±r
->
tyõø£
 = 
TRUE
;

38 
ty±r
->
tyõø£c
 = 
TY_BACKSP
;

39 
ty±r
->
tyõø£c2

TY_BACKSP2
;

40 
ty±r
->
tyeof
 = 
TRUE
;

41 
ty±r
->
tyeofch
 = 
TY_EOFCH
;

42 
ty±r
->
tyikûl
 = 
TRUE
;

43 
ty±r
->
tyikûlc
 = 
TY_KILLCH
;

44 
ty±r
->
tyicurs‹
 = 0;

45 
ty±r
->
tyoÊow
 = 
TRUE
;

46 
ty±r
->
tyohñd
 = 
FALSE
;

47 
ty±r
->
tyo°›
 = 
TY_STOPCH
;

48 
ty±r
->
tyo°¨t
 = 
TY_STRTCH
;

49 
ty±r
->
tyo¸lf
 = 
TRUE
;

50 
ty±r
->
tyifuŒc
 = 
TY_FULLCH
;

55 
pcidev
 = 
	`föd_pci_devi˚
(
INTEL_QUARK_UART_PCI_DID
,

56 
INTEL_QUARK_UART_PCI_VID
,

61 
u±r
 = (
u¨t_c§eg
 *)
dev±r
->
dvc§
;

64 
u±r
->
l¸
 = 
UART_LCR_DLAB
;

65 
u±r
->
dlm
 = 0x00;

66 
u±r
->
dŒ
 = 0x18;

68 
u±r
->
l¸
 = 
UART_LCR_8N1
;

69 
u±r
->
f¸
 = 0x00;

73 
	`pci_£t_ivec
–
pcidev
, 
dev±r
->
dvúq
, dev±r->
dvöå
,

74 (
öt32
)
dev±r
 );

79 
u±r
->
f¸
 = 
UART_FCR_EFIFO
 | 
UART_FCR_RRESET
 |

80 
UART_FCR_TRESET
 | 
UART_FCR_TRIG2
;

84 
	`âykickout
(
u±r
);

85  
OK
;

86 
	}
}

	@device/tty/ttykickout.c

3 
	~<xöu.h
>

10 
	$âykickout
(

11 
u¨t_c§eg
 *
c§±r


16 
c§±r
->
õr
 = 
UART_IER_ERBFI
 | 
UART_IER_ETBEI
;

19 
	}
}

	@device/tty/ttyputc.c

3 
	~<xöu.h
>

9 
devˇŒ
 
	$âyputc
(

10 
díåy
 *
dev±r
,

11 
ch


14 
âycblk
 *
ty±r
;

16 
ty±r
 = &
âyèb
[
dev±r
->
dvmö‹
];

20 i‡–
ch
==
TY_NEWLINE
 && 
ty±r
->
tyo¸lf
 ) {

21 
	`âyputc
(
dev±r
, 
TY_RETURN
);

24 
	`waô
(
ty±r
->
tyo£m
);

25 *
ty±r
->
tyŸaû
++ = 
ch
;

29 i‡(
ty±r
->
tyŸaû
 >&ty±r->
tyobuff
[
TY_OBUFLEN
]) {

30 
ty±r
->
tyŸaû
 =Åy±r->
tyobuff
;

35 
	`âykickout
((
u¨t_c§eg
 *)
dev±r
->
dvc§
);

37  
OK
;

38 
	}
}

	@device/tty/ttyread.c

3 
	~<xöu.h
>

9 
devˇŒ
 
	$âyªad
(

10 
díåy
 *
dev±r
,

11 *
buff
,

12 
öt32
 
cou¡


15 
âycblk
 *
ty±r
;

16 
öt32
 
avaû
;

17 
öt32
 
ƒód
;

18 
öt32
 
fú°ch
;

19 
ch
;

21 i‡(
cou¡
 < 0) {

22  
SYSERR
;

24 
ty±r
&
âyèb
[
dev±r
->
dvmö‹
];

26 i‡(
ty±r
->
tyimode
 !
TY_IMCOOKED
) {

30 i‡(
cou¡
 == 0) {

31 
avaû
 = 
	`£mcou¡
(
ty±r
->
tyi£m
);

32 i‡(
avaû
 == 0) {

35 
cou¡
 = 
avaû
;

38 
ƒód
 = 0;Çªad < 
cou¡
;Çread++) {

39 *
buff
++ = (Ë
	`âygëc
(
dev±r
);

41  
ƒód
;

46 
fú°ch
 = 
	`âygëc
(
dev±r
);

50 i‡(
fú°ch
 =
EOF
) {

51  
EOF
;

56 
ch
 = (Ë
fú°ch
;

57 *
buff
++ = 
ch
;

58 
ƒód
 = 1;

59  (
ƒód
 < 
cou¡
Ë&& (
ch
 !
TY_NEWLINE
) &&

60 (
ch
 !
TY_RETURN
) ) {

61 
ch
 = 
	`âygëc
(
dev±r
);

62 *
buff
++ = 
ch
;

63 
ƒód
++;

65  
ƒód
;

66 
	}
}

	@device/tty/ttywrite.c

3 
	~<xöu.h
>

9 
devˇŒ
 
	$âywrôe
(

10 
díåy
 *
dev±r
,

11 *
buff
,

12 
öt32
 
cou¡


17 i‡(
cou¡
 < 0) {

18  
SYSERR
;

19 } i‡(
cou¡
 == 0){

20  
OK
;

25 ; 
cou¡
>0 ; count--) {

26 
	`âyputc
(
dev±r
, *
buff
++);

28  
OK
;

29 
	}
}

	@hello.c

1 
	~"ö˛ude/sysˇŒ_öãrÁ˚.h
"

3 
maö
();

5 
	$_°¨t
(){

6 
	`maö
();

7 
	}
}

9 
	gi
;

10 * 
	gh™dÀ
;

11 (*
	g±r
)();

12 
	gd©a_£˘i⁄
 = 1;

14 
	$maö
(){

15 
j
=100;

16 
i
= 1;

17 
j
++;

26 
d©a_£˘i⁄
 += 1;

30 
	`sysˇŒ_öãrÁ˚
(2,26,
d©a_£˘i⁄
);

39 
	}
}

	@include/apic.h

5 
	sœpic_c§eg
 {

6 
uöt32
 
	mªs1
[8];

7 
uöt32
 
	mœpic_id
;

8 
uöt32
 
	mªs2
[3];

9 
uöt32
 
	mœpic_vî
;

10 
uöt32
 
	mªs3
[19];

11 
uöt32
 
	mçr
;

12 
uöt32
 
	mªs4
[3];

13 
uöt32
 
	m≠r
;

14 
uöt32
 
	mªs5
[3];

15 
uöt32
 
	mµr
;

16 
uöt32
 
	mªs6
[3];

17 
uöt32
 
	meoi
;

18 
uöt32
 
	mªs7
[3];

19 
uöt32
 
	mºd
;

20 
uöt32
 
	mªs8
[3];

21 
uöt32
 
	mldr
;

22 
uöt32
 
	mªs9
[3];

23 
uöt32
 
	md‰
;

24 
uöt32
 
	mªs10
[3];

25 
uöt32
 
	msivr
;

26 
uöt32
 
	mªs11
[3];

28 
uöt32
 
	mi§
;

29 
uöt32
 
	mªs
[3];

30 } 
	mi§
[8];

32 
uöt32
 
	mtmr
;

33 
uöt32
 
	mªs
[3];

34 } 
	mtmr
[8];

36 
uöt32
 
	múr
;

37 
uöt32
 
	mªs
[3];

38 } 
	múr
[8];

41 vﬁ©ûê
œpic_c§eg
 *
œpic
;

43 
	#LAPIC_BASE_ADDR
 0xFEE00000

	)

45 
	#IOAPIC_IDX_ADDR
 0xFEC00000

	)

46 
	#IOAPIC_WIN_ADDR
 0xFEC00010

	)

	@include/arp.h

5 
	#ARP_HALEN
 6

	)

6 
	#ARP_PALEN
 4

	)

8 
	#ARP_HTYPE
 1

	)

9 
	#ARP_PTYPE
 0x0800

	)

11 
	#ARP_OP_REQ
 1

	)

12 
	#ARP_OP_RPLY
 2

	)

14 
	#ARP_SIZ
 16

	)

16 
	#ARP_RETRY
 3

	)

18 
	#ARP_TIMEOUT
 300

	)

22 
	#AR_FREE
 0

	)

23 
	#AR_PENDING
 1

	)

24 
	#AR_RESOLVED
 2

	)

26 #¥agm®
∑ck
(2)

27 
	s¨µackë
 {

28 
byã
 
	m¨p_ëhd°
[
ETH_ADDR_LEN
];

29 
byã
 
	m¨p_ëh§c
[
ETH_ADDR_LEN
];

30 
uöt16
 
	m¨p_ëhty≥
;

31 
uöt16
 
	m¨p_hty≥
;

32 
uöt16
 
	m¨p_±y≥
;

33 
byã
 
	m¨p_hÀn
;

34 
byã
 
	m¨p_∂í
;

35 
uöt16
 
	m¨p_›
;

36 
byã
 
	m¨p_¢dha
[
ARP_HALEN
];

37 
uöt32
 
	m¨p_¢d∑
;

38 
byã
 
	m¨p_èrha
[
ARP_HALEN
];

39 
uöt32
 
	m¨p_èΩa
;

41 #¥agm®
∑ck
()

43 
	s¨≥¡ry
 {

44 
öt32
 
	m¨°©e
;

45 
uöt32
 
	m¨∑ddr
;

46 
pid32
 
	m¨pid
;

47 
byã
 
	m¨haddr
[
ARP_HALEN
];

50 
¨≥¡ry
 
¨pˇche
[];

	@include/bufpool.h

3 #i‚def 
NBPOOLS


4 
	#NBPOOLS
 20

	)

7 #i‚def 
BP_MAXB


8 
	#BP_MAXB
 8192

	)

11 
	#BP_MINB
 8

	)

12 #i‚def 
BP_MAXN


13 
	#BP_MAXN
 2048

	)

16 
	sb≥¡ry
 {

17 
b≥¡ry
 *
	mb≤ext
;

18 
sid32
 
	mbp£m
;

20 
uöt32
 
	mbpsize
;

23 
b≥¡ry
 
bu·ab
[];

24 
bpid32
 
nbpoﬁs
;

	@include/clock.h

5 
	#CLOCKBASE
 0x40

	)

6 
	#CLOCK0
 
CLOCKBASE


	)

7 
	#CLKCNTL
 (
CLOCKBASE
+3Ë

	)

10 
	#CLKTICKS_PER_SEC
 1000

	)

12 
uöt32
 
˛ktime
;

13 
uöt32
 
cou¡1000
;

15 
qid16
 
¶ìpq
;

16 
uöt32
 
¥ìm±
;

	@include/conf.h

6 
	sdíåy
 {

7 
öt32
 
	mdvnum
;

8 
öt32
 
	mdvmö‹
;

9 *
	mdv«me
;

10 
devˇŒ
 (*
dvöô
Ë(
	mdíåy
 *);

11 
devˇŒ
 (*
dv›í
Ë(
	mdíåy
 *, *, *);

12 
devˇŒ
 (*
dv˛o£
)(
	mdíåy
 *);

13 
devˇŒ
 (*
dvªad
Ë(
	mdíåy
 *, *, 
	muöt32
);

14 
devˇŒ
 (*
dvwrôe
)(
	mdíåy
 *, *, 
	muöt32
);

15 
devˇŒ
 (*
dv£ek
Ë(
	mdíåy
 *, 
	möt32
);

16 
devˇŒ
 (*
dvgëc
Ë(
	mdíåy
 *);

17 
devˇŒ
 (*
dvputc
Ë(
	mdíåy
 *, );

18 
devˇŒ
 (*
dv˙é
Ë(
	mdíåy
 *, 
	möt32
, int32, int32);

19 *
	mdvc§
;

20 (*
	mdvöå
)();

21 
byã
 
	mdvúq
;

24 
díåy
 
devèb
[];

28 
	#CONSOLE
 0

	)

29 
	#NULLDEV
 1

	)

30 
	#ETHER0
 2

	)

31 
	#NAMESPACE
 3

	)

32 
	#RDISK
 4

	)

33 
	#RAM0
 5

	)

34 
	#RFILESYS
 6

	)

35 
	#RFILE0
 7

	)

36 
	#RFILE1
 8

	)

37 
	#RFILE2
 9

	)

38 
	#RFILE3
 10

	)

39 
	#RFILE4
 11

	)

40 
	#RFILE5
 12

	)

41 
	#RFILE6
 13

	)

42 
	#RFILE7
 14

	)

43 
	#RFILE8
 15

	)

44 
	#RFILE9
 16

	)

45 
	#LFILESYS
 17

	)

46 
	#LFILE0
 18

	)

47 
	#LFILE1
 19

	)

48 
	#LFILE2
 20

	)

49 
	#LFILE3
 21

	)

50 
	#LFILE4
 22

	)

51 
	#LFILE5
 23

	)

55 
	#NnuŒ
 1

	)

56 
	#Nây
 1

	)

57 
	#Nëh
 1

	)

58 
	#Nrds
 1

	)

59 
	#Nøm
 1

	)

60 
	#Nrfs
 1

	)

61 
	#NrÊ
 10

	)

62 
	#Nlfs
 1

	)

63 
	#NlÊ
 6

	)

64 
	#N«m
 1

	)

66 
	#NDEVS
 24

	)

71 
	#NPROC
 100

	)

72 
	#NSEM
 100

	)

73 
	#IRQBASE
 32

	)

74 
	#IRQ_TIMER
 
IRQ_HW5


	)

75 
	#IRQ_ATH_MISC
 
IRQ_HW4


	)

76 
	#CLKFREQ
 200000000

	)

78 
	#LF_DISK_DEV
 
RAM0


	)

	@include/ctype.h

7 
	#_U
 0x01

	)

8 
	#_L
 0x02

	)

9 
	#_N
 0x04

	)

10 
	#_S
 0x08

	)

11 
	#_P
 0x10

	)

12 
	#_C
 0x20

	)

13 
	#_X
 0x40

	)

15 c⁄° 
_˘y≥_
[];

17 
	#ißÕha
(
c
Ë((
_˘y≥_
+1)[()c]&(
_U
|
_L
))

	)

18 
	#isuµî
(
c
Ë((
_˘y≥_
+1)[()c]&
_U
)

	)

19 
	#i¶owî
(
c
Ë((
_˘y≥_
+1)[()c]&
_L
)

	)

20 
	#isdigô
(
c
Ë((
_˘y≥_
+1)[()c]&
_N
)

	)

21 
	#isxdigô
(
c
Ë((
_˘y≥_
+1)[()c]&(
_N
|
_X
))

	)

22 
	#is•a˚
(
c
Ë((
_˘y≥_
+1)[()c]&
_S
)

	)

23 
	#i•un˘
(
c
Ë((
_˘y≥_
+1)[()c]&
_P
)

	)

24 
	#iß um
(
c
Ë((
_˘y≥_
+1)[()c]&(
_U
|
_L
|
_N
))

	)

25 
	#i•röt
(
c
Ë((
_˘y≥_
+1)[()c]&(
_P
|
_U
|
_L
|
_N
|
_S
))

	)

26 
	#is˙ål
(
c
Ë((
_˘y≥_
+1)[()c]&
_C
)

	)

27 
	#ißscii
(
c
Ë(()(()(c))<=0x7F)

	)

29 
	#touµî
(
c
Ë((()(c))-'a'+'A')

	)

30 
	#tﬁowî
(
c
Ë((()(c))-'A'+'a')

	)

31 
	#tﬂscii
(
c
Ë((()(c))&0x7F)

	)

33 
	#i£of
(
c
Ë(0x04 =()c)

	)

	@include/date.h

15 
	#¡im2xtim
(
x
Ë((x)-2208988800UË

	)

16 
	#xtim2¡im
(
x
Ë((x)+2208988800UË

	)

20 
	#DATE_DST_OFF
 0

	)

21 
	#DATE_DST_ON
 1

	)

22 
	#DATE_DST_AUTO
 2

	)

26 
	sd©eöfo
 {

27 
uöt32
 
	mdt_boŸ
;

30 
boﬁ8
 
	mdt_boŸvÆid
;

31 
öt32
 
	mdt_daylight
;

33 
öt32
 
	mdt_msize
[12];

34 *
	mdt_m«m
[12];

35 *
	mdt_d«m
[7];

38 
d©eöfo
 
D©e
;

42 
	#i¶óp
(
x
Ë((x)%4==0Ë

	)

43 
	#SECPERDY
 (60*60*24Ë

	)

44 
	#SECPERHR
 (60*60Ë

	)

45 
	#SECPERMN
 (60Ë

	)

49 
	#ZONE_EST
 5

	)

50 
	#ZONE_CST
 6

	)

51 
	#ZONE_MST
 7

	)

52 
	#ZONE_PST
 8

	)

53 
	#TIMEZONE
 
ZONE_EST


	)

57 
	#utim2…im
(
x
Ë((x)-
TIMEZONE
*
SECPERHR
)

	)

58 
	#…im2utim
(
x
Ë((x)+
TIMEZONE
*
SECPERHR
)

	)

60 
	#TIMERPORT
 123

	)

61 
	#TIMELPORT
 53678

	)

63 #i‚def 
TIMESERVER


64 
	#TIMESERVER
 "128.10.19.24"

	)

67 
	#TIMETIMEOUT
 2000

	)

	@include/debug.h

3 
	#DEBUG_ASCII
 0x01

	)

4 
	#DEBUG_HEX
 0x02

	)

6 
hexdump
(*
buf„r
, 
uöt32
 
Àngth
, 
boﬁ8
 
ãxt
);

7 
debugbªak
();

8 
debugªt
();

	@include/delay.h

6 
	#DELAY
(
n
) \

8 
i
 = 0; \

10 
i
 < (
n
 * 100)) i++; \

12 

	)

16 
	#MDELAY
(
n
) \

18 
i
; \

20 
i
=
n
;i>0;i--) { \

21 
	`DELAY
(1000); \

23 }

	)

	@include/device.h

3 
	#DEVNAMLEN
 16

	)

7 
	#isbaddev
(
f
Ë–((fË< 0Ë| ((fË>
NDEVS
Ë)

	)

	@include/dhcp.h

3 
	#DHCP


	)

5 
	#DHCP_RETRY
 5

	)

7 
	#DHCP_PADDING
 0

	)

8 
	#DHCP_SUBNET_MASK
 1

	)

9 
	#DHCP_ROUTER
 3

	)

10 
	#DHCP_DNS_SERVER
 6

	)

11 
	#DHCP_DOMAIN_NAME
 15

	)

12 
	#DHCP_VENDER_OPTIONS
 43

	)

13 
	#DHCP_REQUESTED_IP
 50

	)

14 
	#DHCP_IP_ADDR_LEASE_TIME
 51

	)

15 
	#DHCP_OPTION_OVERLOAD
 52

	)

16 
	#DHCP_MESSAGE_TYPE
 53

	)

17 
	#DHCP_SERVER_ID
 54

	)

18 
	#DHCP_PARAMETER_REQUEST_LIST
 55

	)

19 
	#DHCP_MESSAGE
 56

	)

20 
	#DHCP_MAXIMUM_DHCP_MESSAGE_SIZE
 57

	)

21 
	#DHCP_RENEWAL_TIME_VALUE
 58

	)

22 
	#DHCP_REBINDING_TIME_VALUE
 59

	)

23 
	#DHCP_VENDOR_CLASS_ID
 60

	)

24 
	#DHCP_CLIENT_ID
 61

	)

25 
	#DHCP_TFTP_SERVER_NAME
 66

	)

26 
	#DHCP_BOOTFILE_NAME
 67

	)

27 
	#DHCP_CLIENT_SYS_ARCH
 93

	)

28 
	#DHCP_CLIENT_NET_ID
 94

	)

29 
	#DHCP_CLIENT_MACHINE_ID
 97

	)

30 
	#DHCP_MESSAGE_END
 255

	)

32 #¥agm®
∑ck
(2)

33 
	sdh˝msg
 {

34 
byã
 
	mdc_b›
;

35 
byã
 
	mdc_hty≥
;

36 
byã
 
	mdc_hÀn
;

37 
byã
 
	mdc_h›s
;

38 
uöt32
 
	mdc_xid
;

39 
uöt16
 
	mdc_£cs
;

40 
uöt16
 
	mdc_Êags
;

41 
uöt32
 
	mdc_cù
;

42 
uöt32
 
	mdc_yù
;

43 
uöt32
 
	mdc_sù
;

44 
uöt32
 
	mdc_gù
;

45 
byã
 
	mdc_chaddr
[16];

47 
byã
 
	mdc_boŸp
[192];

49 
byã
 
	m¢ame
[64];

50 
byã
 
	mboŸfûe
[128];

53 
uöt32
 
	mdc_cookõ
;

54 
byã
 
	mdc_›t
[1024];

58 #¥agm®
∑ck
()

	@include/dns.h

5 
	#DNSTIMEOUT
 3000

	)

6 
	#DNSRETRY
 3

	)

7 
	#DNSPORT
 53

	)

8 
	#DNSLPORT
 51525

	)

9 
	#DNSDATASIZ
 500

	)

14 
	sdn•kt
 {

15 
uöt16
 
	mid
;

17 
byã
 
	mrd
:1;

18 
byã
 
	mtc
:1;

19 
byã
 
	mØ
:1;

20 
byã
 
	m›code
:4;

21 
byã
 
	mqr
:1;

24 
byã
 
	mrcode
:4;

25 
byã
 
	mz
:3;

26 
byã
 
	mø
:1;

28 
uöt16
 
	mqucou¡
;

29 
uöt16
 
	m™cou¡
;

30 
uöt16
 
	mnscou¡
;

31 
uöt16
 
	m¨cou¡
;

32 
	md©a
[
DNSDATASIZ
];

37 
	#DNS_QT_A
 1

	)

38 
	#DNS_QT_NS
 2

	)

42 
	#DNS_QC_IN
 1

	)

46 
	sdns_q
 {

47 *
	mq«me
;

48 
uöt16
 *
	mqty≥
;

49 
uöt16
 *
	mq˛ass
;

54 
	sdns_º
 {

55 *
	m∫ame
;

56 
uöt16
 *
	mπy≥
;

57 
uöt16
 *
	mr˛ass
;

58 
uöt32
 *
	mâl
;

59 
uöt16
 *
	mrdÀn
;

60 *
	mrd©a
;

	@include/elf.h

19 #i‚de‡
_ELF_H


20 
	#_ELF_H
 1

	)

22 
	~<„©uªs.h
>

24 
	g__BEGIN_DECLS


28 
	~<°döt.h
>

31 
uöt16_t
 
	tElf32_HÆf
;

32 
uöt16_t
 
	tElf64_HÆf
;

35 
uöt32_t
 
	tElf32_W‹d
;

36 
öt32_t
 
	tElf32_Sw‹d
;

37 
uöt32_t
 
	tElf64_W‹d
;

38 
öt32_t
 
	tElf64_Sw‹d
;

41 
uöt64_t
 
	tElf32_Xw‹d
;

42 
öt64_t
 
	tElf32_Sxw‹d
;

43 
uöt64_t
 
	tElf64_Xw‹d
;

44 
öt64_t
 
	tElf64_Sxw‹d
;

47 
uöt32_t
 
	tElf32_Addr
;

48 
uöt64_t
 
	tElf64_Addr
;

51 
uöt32_t
 
	tElf32_Off
;

52 
uöt64_t
 
	tElf64_Off
;

55 
uöt16_t
 
	tElf32_Se˘i⁄
;

56 
uöt16_t
 
	tElf64_Se˘i⁄
;

59 
Elf32_HÆf
 
	tElf32_Vîsym
;

60 
Elf64_HÆf
 
	tElf64_Vîsym
;

65 
	#EI_NIDENT
 (16)

	)

69 
	me_idít
[
EI_NIDENT
];

70 
Elf32_HÆf
 
	me_ty≥
;

71 
Elf32_HÆf
 
	me_machöe
;

72 
Elf32_W‹d
 
	me_vîsi⁄
;

73 
Elf32_Addr
 
	me_íåy
;

74 
Elf32_Off
 
	me_phoff
;

75 
Elf32_Off
 
	me_shoff
;

76 
Elf32_W‹d
 
	me_Êags
;

77 
Elf32_HÆf
 
	me_ehsize
;

78 
Elf32_HÆf
 
	me_phítsize
;

79 
Elf32_HÆf
 
	me_phnum
;

80 
Elf32_HÆf
 
	me_shítsize
;

81 
Elf32_HÆf
 
	me_shnum
;

82 
Elf32_HÆf
 
	me_sh°∫dx
;

83 } 
	tElf32_Ehdr
;

87 
	me_idít
[
EI_NIDENT
];

88 
Elf64_HÆf
 
	me_ty≥
;

89 
Elf64_HÆf
 
	me_machöe
;

90 
Elf64_W‹d
 
	me_vîsi⁄
;

91 
Elf64_Addr
 
	me_íåy
;

92 
Elf64_Off
 
	me_phoff
;

93 
Elf64_Off
 
	me_shoff
;

94 
Elf64_W‹d
 
	me_Êags
;

95 
Elf64_HÆf
 
	me_ehsize
;

96 
Elf64_HÆf
 
	me_phítsize
;

97 
Elf64_HÆf
 
	me_phnum
;

98 
Elf64_HÆf
 
	me_shítsize
;

99 
Elf64_HÆf
 
	me_shnum
;

100 
Elf64_HÆf
 
	me_sh°∫dx
;

101 } 
	tElf64_Ehdr
;

107 
	#EI_MAG0
 0

	)

108 
	#ELFMAG0
 0x7‡

	)

110 
	#EI_MAG1
 1

	)

111 
	#ELFMAG1
 'E'

	)

113 
	#EI_MAG2
 2

	)

114 
	#ELFMAG2
 'L'

	)

116 
	#EI_MAG3
 3

	)

117 
	#ELFMAG3
 'F'

	)

120 
	#ELFMAG
 "\177ELF"

	)

121 
	#SELFMAG
 4

	)

123 
	#EI_CLASS
 4

	)

124 
	#ELFCLASSNONE
 0

	)

125 
	#ELFCLASS32
 1

	)

126 
	#ELFCLASS64
 2

	)

127 
	#ELFCLASSNUM
 3

	)

129 
	#EI_DATA
 5

	)

130 
	#ELFDATANONE
 0

	)

131 
	#ELFDATA2LSB
 1

	)

132 
	#ELFDATA2MSB
 2

	)

133 
	#ELFDATANUM
 3

	)

135 
	#EI_VERSION
 6

	)

138 
	#EI_OSABI
 7

	)

139 
	#ELFOSABI_NONE
 0

	)

140 
	#ELFOSABI_SYSV
 0

	)

141 
	#ELFOSABI_HPUX
 1

	)

142 
	#ELFOSABI_NETBSD
 2

	)

143 
	#ELFOSABI_GNU
 3

	)

144 
	#ELFOSABI_LINUX
 
ELFOSABI_GNU


	)

145 
	#ELFOSABI_SOLARIS
 6

	)

146 
	#ELFOSABI_AIX
 7

	)

147 
	#ELFOSABI_IRIX
 8

	)

148 
	#ELFOSABI_FREEBSD
 9

	)

149 
	#ELFOSABI_TRU64
 10

	)

150 
	#ELFOSABI_MODESTO
 11

	)

151 
	#ELFOSABI_OPENBSD
 12

	)

152 
	#ELFOSABI_ARM_AEABI
 64

	)

153 
	#ELFOSABI_ARM
 97

	)

154 
	#ELFOSABI_STANDALONE
 255

	)

156 
	#EI_ABIVERSION
 8

	)

158 
	#EI_PAD
 9

	)

162 
	#ET_NONE
 0

	)

163 
	#ET_REL
 1

	)

164 
	#ET_EXEC
 2

	)

165 
	#ET_DYN
 3

	)

166 
	#ET_CORE
 4

	)

167 
	#ET_NUM
 5

	)

168 
	#ET_LOOS
 0x„00

	)

169 
	#ET_HIOS
 0x„f‡

	)

170 
	#ET_LOPROC
 0xff00

	)

171 
	#ET_HIPROC
 0xfff‡

	)

175 
	#EM_NONE
 0

	)

176 
	#EM_M32
 1

	)

177 
	#EM_SPARC
 2

	)

178 
	#EM_386
 3

	)

179 
	#EM_68K
 4

	)

180 
	#EM_88K
 5

	)

181 
	#EM_IAMCU
 6

	)

182 
	#EM_860
 7

	)

183 
	#EM_MIPS
 8

	)

184 
	#EM_S370
 9

	)

185 
	#EM_MIPS_RS3_LE
 10

	)

187 
	#EM_PARISC
 15

	)

189 
	#EM_VPP500
 17

	)

190 
	#EM_SPARC32PLUS
 18

	)

191 
	#EM_960
 19

	)

192 
	#EM_PPC
 20

	)

193 
	#EM_PPC64
 21

	)

194 
	#EM_S390
 22

	)

195 
	#EM_SPU
 23

	)

197 
	#EM_V800
 36

	)

198 
	#EM_FR20
 37

	)

199 
	#EM_RH32
 38

	)

200 
	#EM_RCE
 39

	)

201 
	#EM_ARM
 40

	)

202 
	#EM_FAKE_ALPHA
 41

	)

203 
	#EM_SH
 42

	)

204 
	#EM_SPARCV9
 43

	)

205 
	#EM_TRICORE
 44

	)

206 
	#EM_ARC
 45

	)

207 
	#EM_H8_300
 46

	)

208 
	#EM_H8_300H
 47

	)

209 
	#EM_H8S
 48

	)

210 
	#EM_H8_500
 49

	)

211 
	#EM_IA_64
 50

	)

212 
	#EM_MIPS_X
 51

	)

213 
	#EM_COLDFIRE
 52

	)

214 
	#EM_68HC12
 53

	)

215 
	#EM_MMA
 54

	)

216 
	#EM_PCP
 55

	)

217 
	#EM_NCPU
 56

	)

218 
	#EM_NDR1
 57

	)

219 
	#EM_STARCORE
 58

	)

220 
	#EM_ME16
 59

	)

221 
	#EM_ST100
 60

	)

222 
	#EM_TINYJ
 61

	)

223 
	#EM_X86_64
 62

	)

224 
	#EM_PDSP
 63

	)

225 
	#EM_PDP10
 64

	)

226 
	#EM_PDP11
 65

	)

227 
	#EM_FX66
 66

	)

228 
	#EM_ST9PLUS
 67

	)

229 
	#EM_ST7
 68

	)

230 
	#EM_68HC16
 69

	)

231 
	#EM_68HC11
 70

	)

232 
	#EM_68HC08
 71

	)

233 
	#EM_68HC05
 72

	)

234 
	#EM_SVX
 73

	)

235 
	#EM_ST19
 74

	)

236 
	#EM_VAX
 75

	)

237 
	#EM_CRIS
 76

	)

238 
	#EM_JAVELIN
 77

	)

239 
	#EM_FIREPATH
 78

	)

240 
	#EM_ZSP
 79

	)

241 
	#EM_MMIX
 80

	)

242 
	#EM_HUANY
 81

	)

243 
	#EM_PRISM
 82

	)

244 
	#EM_AVR
 83

	)

245 
	#EM_FR30
 84

	)

246 
	#EM_D10V
 85

	)

247 
	#EM_D30V
 86

	)

248 
	#EM_V850
 87

	)

249 
	#EM_M32R
 88

	)

250 
	#EM_MN10300
 89

	)

251 
	#EM_MN10200
 90

	)

252 
	#EM_PJ
 91

	)

253 
	#EM_OPENRISC
 92

	)

254 
	#EM_ARC_COMPACT
 93

	)

255 
	#EM_XTENSA
 94

	)

256 
	#EM_VIDEOCORE
 95

	)

257 
	#EM_TMM_GPP
 96

	)

258 
	#EM_NS32K
 97

	)

259 
	#EM_TPC
 98

	)

260 
	#EM_SNP1K
 99

	)

261 
	#EM_ST200
 100

	)

262 
	#EM_IP2K
 101

	)

263 
	#EM_MAX
 102

	)

264 
	#EM_CR
 103

	)

265 
	#EM_F2MC16
 104

	)

266 
	#EM_MSP430
 105

	)

267 
	#EM_BLACKFIN
 106

	)

268 
	#EM_SE_C33
 107

	)

269 
	#EM_SEP
 108

	)

270 
	#EM_ARCA
 109

	)

271 
	#EM_UNICORE
 110

	)

272 
	#EM_EXCESS
 111

	)

273 
	#EM_DXP
 112

	)

274 
	#EM_ALTERA_NIOS2
 113

	)

275 
	#EM_CRX
 114

	)

276 
	#EM_XGATE
 115

	)

277 
	#EM_C166
 116

	)

278 
	#EM_M16C
 117

	)

279 
	#EM_DSPIC30F
 118

	)

280 
	#EM_CE
 119

	)

281 
	#EM_M32C
 120

	)

283 
	#EM_TSK3000
 131

	)

284 
	#EM_RS08
 132

	)

285 
	#EM_SHARC
 133

	)

286 
	#EM_ECOG2
 134

	)

287 
	#EM_SCORE7
 135

	)

288 
	#EM_DSP24
 136

	)

289 
	#EM_VIDEOCORE3
 137

	)

290 
	#EM_LATTICEMICO32
 138

	)

291 
	#EM_SE_C17
 139

	)

292 
	#EM_TI_C6000
 140

	)

293 
	#EM_TI_C2000
 141

	)

294 
	#EM_TI_C5500
 142

	)

295 
	#EM_TI_ARP32
 143

	)

296 
	#EM_TI_PRU
 144

	)

298 
	#EM_MMDSP_PLUS
 160

	)

299 
	#EM_CYPRESS_M8C
 161

	)

300 
	#EM_R32C
 162

	)

301 
	#EM_TRIMEDIA
 163

	)

302 
	#EM_QDSP6
 164

	)

303 
	#EM_8051
 165

	)

304 
	#EM_STXP7X
 166

	)

305 
	#EM_NDS32
 167

	)

306 
	#EM_ECOG1X
 168

	)

307 
	#EM_MAXQ30
 169

	)

308 
	#EM_XIMO16
 170

	)

309 
	#EM_MANIK
 171

	)

310 
	#EM_CRAYNV2
 172

	)

311 
	#EM_RX
 173

	)

312 
	#EM_METAG
 174

	)

313 
	#EM_MCST_ELBRUS
 175

	)

314 
	#EM_ECOG16
 176

	)

315 
	#EM_CR16
 177

	)

316 
	#EM_ETPU
 178

	)

317 
	#EM_SLE9X
 179

	)

318 
	#EM_L10M
 180

	)

319 
	#EM_K10M
 181

	)

321 
	#EM_AARCH64
 183

	)

323 
	#EM_AVR32
 185

	)

324 
	#EM_STM8
 186

	)

325 
	#EM_TILE64
 187

	)

326 
	#EM_TILEPRO
 188

	)

327 
	#EM_MICROBLAZE
 189

	)

328 
	#EM_CUDA
 190

	)

329 
	#EM_TILEGX
 191

	)

330 
	#EM_CLOUDSHIELD
 192

	)

331 
	#EM_COREA_1ST
 193

	)

332 
	#EM_COREA_2ND
 194

	)

333 
	#EM_ARC_COMPACT2
 195

	)

334 
	#EM_OPEN8
 196

	)

335 
	#EM_RL78
 197

	)

336 
	#EM_VIDEOCORE5
 198

	)

337 
	#EM_78KOR
 199

	)

338 
	#EM_56800EX
 200

	)

339 
	#EM_BA1
 201

	)

340 
	#EM_BA2
 202

	)

341 
	#EM_XCORE
 203

	)

342 
	#EM_MCHP_PIC
 204

	)

344 
	#EM_KM32
 210

	)

345 
	#EM_KMX32
 211

	)

346 
	#EM_EMX16
 212

	)

347 
	#EM_EMX8
 213

	)

348 
	#EM_KVARC
 214

	)

349 
	#EM_CDP
 215

	)

350 
	#EM_COGE
 216

	)

351 
	#EM_COOL
 217

	)

352 
	#EM_NORC
 218

	)

353 
	#EM_CSR_KALIMBA
 219

	)

354 
	#EM_Z80
 220

	)

355 
	#EM_VISIUM
 221

	)

356 
	#EM_FT32
 222

	)

357 
	#EM_MOXIE
 223

	)

358 
	#EM_AMDGPU
 224

	)

360 
	#EM_RISCV
 243

	)

362 
	#EM_BPF
 247

	)

364 
	#EM_NUM
 248

	)

368 
	#EM_ARC_A5
 
EM_ARC_COMPACT


	)

374 
	#EM_ALPHA
 0x9026

	)

378 
	#EV_NONE
 0

	)

379 
	#EV_CURRENT
 1

	)

380 
	#EV_NUM
 2

	)

386 
Elf32_W‹d
 
	msh_«me
;

387 
Elf32_W‹d
 
	msh_ty≥
;

388 
Elf32_W‹d
 
	msh_Êags
;

389 
Elf32_Addr
 
	msh_addr
;

390 
Elf32_Off
 
	msh_off£t
;

391 
Elf32_W‹d
 
	msh_size
;

392 
Elf32_W‹d
 
	msh_lök
;

393 
Elf32_W‹d
 
	msh_öfo
;

394 
Elf32_W‹d
 
	msh_addølign
;

395 
Elf32_W‹d
 
	msh_ítsize
;

396 } 
	tElf32_Shdr
;

400 
Elf64_W‹d
 
	msh_«me
;

401 
Elf64_W‹d
 
	msh_ty≥
;

402 
Elf64_Xw‹d
 
	msh_Êags
;

403 
Elf64_Addr
 
	msh_addr
;

404 
Elf64_Off
 
	msh_off£t
;

405 
Elf64_Xw‹d
 
	msh_size
;

406 
Elf64_W‹d
 
	msh_lök
;

407 
Elf64_W‹d
 
	msh_öfo
;

408 
Elf64_Xw‹d
 
	msh_addølign
;

409 
Elf64_Xw‹d
 
	msh_ítsize
;

410 } 
	tElf64_Shdr
;

414 
	#SHN_UNDEF
 0

	)

415 
	#SHN_LORESERVE
 0xff00

	)

416 
	#SHN_LOPROC
 0xff00

	)

417 
	#SHN_BEFORE
 0xff00

	)

419 
	#SHN_AFTER
 0xff01

	)

421 
	#SHN_HIPROC
 0xff1‡

	)

422 
	#SHN_LOOS
 0xff20

	)

423 
	#SHN_HIOS
 0xff3‡

	)

424 
	#SHN_ABS
 0xfff1

	)

425 
	#SHN_COMMON
 0xfff2

	)

426 
	#SHN_XINDEX
 0xfff‡

	)

427 
	#SHN_HIRESERVE
 0xfff‡

	)

431 
	#SHT_NULL
 0

	)

432 
	#SHT_PROGBITS
 1

	)

433 
	#SHT_SYMTAB
 2

	)

434 
	#SHT_STRTAB
 3

	)

435 
	#SHT_RELA
 4

	)

436 
	#SHT_HASH
 5

	)

437 
	#SHT_DYNAMIC
 6

	)

438 
	#SHT_NOTE
 7

	)

439 
	#SHT_NOBITS
 8

	)

440 
	#SHT_REL
 9

	)

441 
	#SHT_SHLIB
 10

	)

442 
	#SHT_DYNSYM
 11

	)

443 
	#SHT_INIT_ARRAY
 14

	)

444 
	#SHT_FINI_ARRAY
 15

	)

445 
	#SHT_PREINIT_ARRAY
 16

	)

446 
	#SHT_GROUP
 17

	)

447 
	#SHT_SYMTAB_SHNDX
 18

	)

448 
	#SHT_NUM
 19

	)

449 
	#SHT_LOOS
 0x60000000

	)

450 
	#SHT_GNU_ATTRIBUTES
 0x6ffffff5

	)

451 
	#SHT_GNU_HASH
 0x6ffffff6

	)

452 
	#SHT_GNU_LIBLIST
 0x6ffffff7

	)

453 
	#SHT_CHECKSUM
 0x6ffffff8

	)

454 
	#SHT_LOSUNW
 0x6fffffÁ

	)

455 
	#SHT_SUNW_move
 0x6fffffÁ

	)

456 
	#SHT_SUNW_COMDAT
 0x6ffffffb

	)

457 
	#SHT_SUNW_symöfo
 0x6ffffffc

	)

458 
	#SHT_GNU_vîdef
 0x6ffffffd

	)

459 
	#SHT_GNU_vî√ed
 0x6fffff„

	)

460 
	#SHT_GNU_vîsym
 0x6ffffff‡

	)

461 
	#SHT_HISUNW
 0x6ffffff‡

	)

462 
	#SHT_HIOS
 0x6ffffff‡

	)

463 
	#SHT_LOPROC
 0x70000000

	)

464 
	#SHT_HIPROC
 0x7ffffff‡

	)

465 
	#SHT_LOUSER
 0x80000000

	)

466 
	#SHT_HIUSER
 0x8ffffff‡

	)

470 
	#SHF_WRITE
 (1 << 0Ë

	)

471 
	#SHF_ALLOC
 (1 << 1Ë

	)

472 
	#SHF_EXECINSTR
 (1 << 2Ë

	)

473 
	#SHF_MERGE
 (1 << 4Ë

	)

474 
	#SHF_STRINGS
 (1 << 5Ë

	)

475 
	#SHF_INFO_LINK
 (1 << 6Ë

	)

476 
	#SHF_LINK_ORDER
 (1 << 7Ë

	)

477 
	#SHF_OS_NONCONFORMING
 (1 << 8Ë

	)

479 
	#SHF_GROUP
 (1 << 9Ë

	)

480 
	#SHF_TLS
 (1 << 10Ë

	)

481 
	#SHF_COMPRESSED
 (1 << 11Ë

	)

482 
	#SHF_MASKOS
 0x0ff00000

	)

483 
	#SHF_MASKPROC
 0xf0000000

	)

484 
	#SHF_ORDERED
 (1 << 30Ë

	)

486 
	#SHF_EXCLUDE
 (1U << 31Ë

	)

493 
Elf32_W‹d
 
	mch_ty≥
;

494 
Elf32_W‹d
 
	mch_size
;

495 
Elf32_W‹d
 
	mch_addølign
;

496 } 
	tElf32_Chdr
;

500 
Elf64_W‹d
 
	mch_ty≥
;

501 
Elf64_W‹d
 
	mch_ª£rved
;

502 
Elf64_Xw‹d
 
	mch_size
;

503 
Elf64_Xw‹d
 
	mch_addølign
;

504 } 
	tElf64_Chdr
;

507 
	#ELFCOMPRESS_ZLIB
 1

	)

508 
	#ELFCOMPRESS_LOOS
 0x60000000

	)

509 
	#ELFCOMPRESS_HIOS
 0x6ffffff‡

	)

510 
	#ELFCOMPRESS_LOPROC
 0x70000000

	)

511 
	#ELFCOMPRESS_HIPROC
 0x7ffffff‡

	)

514 
	#GRP_COMDAT
 0x1

	)

520 
Elf32_W‹d
 
	m°_«me
;

521 
Elf32_Addr
 
	m°_vÆue
;

522 
Elf32_W‹d
 
	m°_size
;

523 
	m°_öfo
;

524 
	m°_Ÿhî
;

525 
Elf32_Se˘i⁄
 
	m°_shndx
;

526 } 
	tElf32_Sym
;

530 
Elf64_W‹d
 
	m°_«me
;

531 
	m°_öfo
;

532 
	m°_Ÿhî
;

533 
Elf64_Se˘i⁄
 
	m°_shndx
;

534 
Elf64_Addr
 
	m°_vÆue
;

535 
Elf64_Xw‹d
 
	m°_size
;

536 } 
	tElf64_Sym
;

543 
Elf32_HÆf
 
	msi_boundto
;

544 
Elf32_HÆf
 
	msi_Êags
;

545 } 
	tElf32_Symöfo
;

549 
Elf64_HÆf
 
	msi_boundto
;

550 
Elf64_HÆf
 
	msi_Êags
;

551 } 
	tElf64_Symöfo
;

554 
	#SYMINFO_BT_SELF
 0xfff‡

	)

555 
	#SYMINFO_BT_PARENT
 0xff„

	)

556 
	#SYMINFO_BT_LOWRESERVE
 0xff00

	)

559 
	#SYMINFO_FLG_DIRECT
 0x0001

	)

560 
	#SYMINFO_FLG_PASSTHRU
 0x0002

	)

561 
	#SYMINFO_FLG_COPY
 0x0004

	)

562 
	#SYMINFO_FLG_LAZYLOAD
 0x0008

	)

565 
	#SYMINFO_NONE
 0

	)

566 
	#SYMINFO_CURRENT
 1

	)

567 
	#SYMINFO_NUM
 2

	)

572 
	#ELF32_ST_BIND
(
vÆ
Ë(((Ë(vÆ)Ë>> 4)

	)

573 
	#ELF32_ST_TYPE
(
vÆ
Ë((vÆË& 0xf)

	)

574 
	#ELF32_ST_INFO
(
böd
, 
ty≥
Ë(((bödË<< 4Ë+ (—y≥Ë& 0xf))

	)

577 
	#ELF64_ST_BIND
(
vÆ
Ë
	`ELF32_ST_BIND
 (vÆ)

	)

578 
	#ELF64_ST_TYPE
(
vÆ
Ë
	`ELF32_ST_TYPE
 (vÆ)

	)

579 
	#ELF64_ST_INFO
(
böd
, 
ty≥
Ë
	`ELF32_ST_INFO
 ((böd), (ty≥))

	)

583 
	#STB_LOCAL
 0

	)

584 
	#STB_GLOBAL
 1

	)

585 
	#STB_WEAK
 2

	)

586 
	#STB_NUM
 3

	)

587 
	#STB_LOOS
 10

	)

588 
	#STB_GNU_UNIQUE
 10

	)

589 
	#STB_HIOS
 12

	)

590 
	#STB_LOPROC
 13

	)

591 
	#STB_HIPROC
 15

	)

595 
	#STT_NOTYPE
 0

	)

596 
	#STT_OBJECT
 1

	)

597 
	#STT_FUNC
 2

	)

598 
	#STT_SECTION
 3

	)

599 
	#STT_FILE
 4

	)

600 
	#STT_COMMON
 5

	)

601 
	#STT_TLS
 6

	)

602 
	#STT_NUM
 7

	)

603 
	#STT_LOOS
 10

	)

604 
	#STT_GNU_IFUNC
 10

	)

605 
	#STT_HIOS
 12

	)

606 
	#STT_LOPROC
 13

	)

607 
	#STT_HIPROC
 15

	)

614 
	#STN_UNDEF
 0

	)

619 
	#ELF32_ST_VISIBILITY
(
o
Ë((oË& 0x03)

	)

622 
	#ELF64_ST_VISIBILITY
(
o
Ë
	`ELF32_ST_VISIBILITY
 (o)

	)

625 
	#STV_DEFAULT
 0

	)

626 
	#STV_INTERNAL
 1

	)

627 
	#STV_HIDDEN
 2

	)

628 
	#STV_PROTECTED
 3

	)

635 
Elf32_Addr
 
	mr_off£t
;

636 
Elf32_W‹d
 
	mr_öfo
;

637 } 
	tElf32_Rñ
;

646 
Elf64_Addr
 
	mr_off£t
;

647 
Elf64_Xw‹d
 
	mr_öfo
;

648 } 
	tElf64_Rñ
;

654 
Elf32_Addr
 
	mr_off£t
;

655 
Elf32_W‹d
 
	mr_öfo
;

656 
Elf32_Sw‹d
 
	mr_addíd
;

657 } 
	tElf32_Rña
;

661 
Elf64_Addr
 
	mr_off£t
;

662 
Elf64_Xw‹d
 
	mr_öfo
;

663 
Elf64_Sxw‹d
 
	mr_addíd
;

664 } 
	tElf64_Rña
;

668 
	#ELF32_R_SYM
(
vÆ
Ë((vÆË>> 8)

	)

669 
	#ELF32_R_TYPE
(
vÆ
Ë((vÆË& 0xff)

	)

670 
	#ELF32_R_INFO
(
sym
, 
ty≥
Ë(((symË<< 8Ë+ (—y≥Ë& 0xff))

	)

672 
	#ELF64_R_SYM
(
i
Ë((iË>> 32)

	)

673 
	#ELF64_R_TYPE
(
i
Ë((iË& 0xffffffff)

	)

674 
	#ELF64_R_INFO
(
sym
,
ty≥
Ë((((
Elf64_Xw‹d
Ë(sym)Ë<< 32Ë+ (ty≥))

	)

680 
Elf32_W‹d
 
	mp_ty≥
;

681 
Elf32_Off
 
	mp_off£t
;

682 
Elf32_Addr
 
	mp_vaddr
;

683 
Elf32_Addr
 
	mp_∑ddr
;

684 
Elf32_W‹d
 
	mp_fûesz
;

685 
Elf32_W‹d
 
	mp_memsz
;

686 
Elf32_W‹d
 
	mp_Êags
;

687 
Elf32_W‹d
 
	mp_Æign
;

688 } 
	tElf32_Phdr
;

692 
Elf64_W‹d
 
	mp_ty≥
;

693 
Elf64_W‹d
 
	mp_Êags
;

694 
Elf64_Off
 
	mp_off£t
;

695 
Elf64_Addr
 
	mp_vaddr
;

696 
Elf64_Addr
 
	mp_∑ddr
;

697 
Elf64_Xw‹d
 
	mp_fûesz
;

698 
Elf64_Xw‹d
 
	mp_memsz
;

699 
Elf64_Xw‹d
 
	mp_Æign
;

700 } 
	tElf64_Phdr
;

706 
	#PN_XNUM
 0xffff

	)

710 
	#PT_NULL
 0

	)

711 
	#PT_LOAD
 1

	)

712 
	#PT_DYNAMIC
 2

	)

713 
	#PT_INTERP
 3

	)

714 
	#PT_NOTE
 4

	)

715 
	#PT_SHLIB
 5

	)

716 
	#PT_PHDR
 6

	)

717 
	#PT_TLS
 7

	)

718 
	#PT_NUM
 8

	)

719 
	#PT_LOOS
 0x60000000

	)

720 
	#PT_GNU_EH_FRAME
 0x6474e550

	)

721 
	#PT_GNU_STACK
 0x6474e551

	)

722 
	#PT_GNU_RELRO
 0x6474e552

	)

723 
	#PT_LOSUNW
 0x6fffffÁ

	)

724 
	#PT_SUNWBSS
 0x6fffffÁ

	)

725 
	#PT_SUNWSTACK
 0x6ffffffb

	)

726 
	#PT_HISUNW
 0x6fffffff

	)

727 
	#PT_HIOS
 0x6ffffff‡

	)

728 
	#PT_LOPROC
 0x70000000

	)

729 
	#PT_HIPROC
 0x7ffffff‡

	)

733 
	#PF_X
 (1 << 0Ë

	)

734 
	#PF_W
 (1 << 1Ë

	)

735 
	#PF_R
 (1 << 2Ë

	)

736 
	#PF_MASKOS
 0x0ff00000

	)

737 
	#PF_MASKPROC
 0xf0000000

	)

741 
	#NT_PRSTATUS
 1

	)

742 
	#NT_FPREGSET
 2

	)

743 
	#NT_PRPSINFO
 3

	)

744 
	#NT_PRXREG
 4

	)

745 
	#NT_TASKSTRUCT
 4

	)

746 
	#NT_PLATFORM
 5

	)

747 
	#NT_AUXV
 6

	)

748 
	#NT_GWINDOWS
 7

	)

749 
	#NT_ASRS
 8

	)

750 
	#NT_PSTATUS
 10

	)

751 
	#NT_PSINFO
 13

	)

752 
	#NT_PRCRED
 14

	)

753 
	#NT_UTSNAME
 15

	)

754 
	#NT_LWPSTATUS
 16

	)

755 
	#NT_LWPSINFO
 17

	)

756 
	#NT_PRFPXREG
 20

	)

757 
	#NT_SIGINFO
 0x53494749

	)

759 
	#NT_FILE
 0x46494c45

	)

761 
	#NT_PRXFPREG
 0x46e62b7‡

	)

762 
	#NT_PPC_VMX
 0x100

	)

763 
	#NT_PPC_SPE
 0x101

	)

764 
	#NT_PPC_VSX
 0x102

	)

765 
	#NT_PPC_TAR
 0x103

	)

766 
	#NT_PPC_PPR
 0x104

	)

767 
	#NT_PPC_DSCR
 0x105

	)

768 
	#NT_PPC_EBB
 0x106

	)

769 
	#NT_PPC_PMU
 0x107

	)

770 
	#NT_PPC_TM_CGPR
 0x108

	)

771 
	#NT_PPC_TM_CFPR
 0x109

	)

772 
	#NT_PPC_TM_CVMX
 0x10®

	)

773 
	#NT_PPC_TM_CVSX
 0x10b

	)

774 
	#NT_PPC_TM_SPR
 0x10¯

	)

775 
	#NT_PPC_TM_CTAR
 0x10d

	)

777 
	#NT_PPC_TM_CPPR
 0x10ê

	)

779 
	#NT_PPC_TM_CDSCR
 0x10‡

	)

781 
	#NT_386_TLS
 0x200

	)

782 
	#NT_386_IOPERM
 0x201

	)

783 
	#NT_X86_XSTATE
 0x202

	)

784 
	#NT_S390_HIGH_GPRS
 0x300

	)

785 
	#NT_S390_TIMER
 0x301

	)

786 
	#NT_S390_TODCMP
 0x302

	)

787 
	#NT_S390_TODPREG
 0x303

	)

788 
	#NT_S390_CTRS
 0x304

	)

789 
	#NT_S390_PREFIX
 0x305

	)

790 
	#NT_S390_LAST_BREAK
 0x306

	)

791 
	#NT_S390_SYSTEM_CALL
 0x307

	)

792 
	#NT_S390_TDB
 0x308

	)

793 
	#NT_ARM_VFP
 0x400

	)

794 
	#NT_ARM_TLS
 0x401

	)

795 
	#NT_ARM_HW_BREAK
 0x402

	)

796 
	#NT_ARM_HW_WATCH
 0x403

	)

797 
	#NT_ARM_SYSTEM_CALL
 0x404

	)

798 
	#NT_ARM_SVE
 0x405

	)

803 
	#NT_VERSION
 1

	)

810 
Elf32_Sw‹d
 
	md_èg
;

813 
Elf32_W‹d
 
	md_vÆ
;

814 
Elf32_Addr
 
	md_±r
;

815 } 
	md_un
;

816 } 
	tElf32_Dyn
;

820 
Elf64_Sxw‹d
 
	md_èg
;

823 
Elf64_Xw‹d
 
	md_vÆ
;

824 
Elf64_Addr
 
	md_±r
;

825 } 
	md_un
;

826 } 
	tElf64_Dyn
;

830 
	#DT_NULL
 0

	)

831 
	#DT_NEEDED
 1

	)

832 
	#DT_PLTRELSZ
 2

	)

833 
	#DT_PLTGOT
 3

	)

834 
	#DT_HASH
 4

	)

835 
	#DT_STRTAB
 5

	)

836 
	#DT_SYMTAB
 6

	)

837 
	#DT_RELA
 7

	)

838 
	#DT_RELASZ
 8

	)

839 
	#DT_RELAENT
 9

	)

840 
	#DT_STRSZ
 10

	)

841 
	#DT_SYMENT
 11

	)

842 
	#DT_INIT
 12

	)

843 
	#DT_FINI
 13

	)

844 
	#DT_SONAME
 14

	)

845 
	#DT_RPATH
 15

	)

846 
	#DT_SYMBOLIC
 16

	)

847 
	#DT_REL
 17

	)

848 
	#DT_RELSZ
 18

	)

849 
	#DT_RELENT
 19

	)

850 
	#DT_PLTREL
 20

	)

851 
	#DT_DEBUG
 21

	)

852 
	#DT_TEXTREL
 22

	)

853 
	#DT_JMPREL
 23

	)

854 
	#DT_BIND_NOW
 24

	)

855 
	#DT_INIT_ARRAY
 25

	)

856 
	#DT_FINI_ARRAY
 26

	)

857 
	#DT_INIT_ARRAYSZ
 27

	)

858 
	#DT_FINI_ARRAYSZ
 28

	)

859 
	#DT_RUNPATH
 29

	)

860 
	#DT_FLAGS
 30

	)

861 
	#DT_ENCODING
 32

	)

862 
	#DT_PREINIT_ARRAY
 32

	)

863 
	#DT_PREINIT_ARRAYSZ
 33

	)

864 
	#DT_NUM
 34

	)

865 
	#DT_LOOS
 0x6000000d

	)

866 
	#DT_HIOS
 0x6ffff000

	)

867 
	#DT_LOPROC
 0x70000000

	)

868 
	#DT_HIPROC
 0x7ffffff‡

	)

869 
	#DT_PROCNUM
 
DT_MIPS_NUM


	)

874 
	#DT_VALRNGLO
 0x6ffffd00

	)

875 
	#DT_GNU_PRELINKED
 0x6ffffdf5

	)

876 
	#DT_GNU_CONFLICTSZ
 0x6ffffdf6

	)

877 
	#DT_GNU_LIBLISTSZ
 0x6ffffdf7

	)

878 
	#DT_CHECKSUM
 0x6ffffdf8

	)

879 
	#DT_PLTPADSZ
 0x6ffffdf9

	)

880 
	#DT_MOVEENT
 0x6ffffdÁ

	)

881 
	#DT_MOVESZ
 0x6ffffdfb

	)

882 
	#DT_FEATURE_1
 0x6ffffdf¯

	)

883 
	#DT_POSFLAG_1
 0x6ffffdfd

	)

885 
	#DT_SYMINSZ
 0x6ffffd„

	)

886 
	#DT_SYMINENT
 0x6ffffdf‡

	)

887 
	#DT_VALRNGHI
 0x6ffffdff

	)

888 
	#DT_VALTAGIDX
(
èg
Ë(
DT_VALRNGHI
 - (èg)Ë

	)

889 
	#DT_VALNUM
 12

	)

896 
	#DT_ADDRRNGLO
 0x6fff„00

	)

897 
	#DT_GNU_HASH
 0x6fff„f5

	)

898 
	#DT_TLSDESC_PLT
 0x6fff„f6

	)

899 
	#DT_TLSDESC_GOT
 0x6fff„f7

	)

900 
	#DT_GNU_CONFLICT
 0x6fff„f8

	)

901 
	#DT_GNU_LIBLIST
 0x6fff„f9

	)

902 
	#DT_CONFIG
 0x6fff„Á

	)

903 
	#DT_DEPAUDIT
 0x6fff„fb

	)

904 
	#DT_AUDIT
 0x6fff„f¯

	)

905 
	#DT_PLTPAD
 0x6fff„fd

	)

906 
	#DT_MOVETAB
 0x6fff„„

	)

907 
	#DT_SYMINFO
 0x6fff„f‡

	)

908 
	#DT_ADDRRNGHI
 0x6fff„ff

	)

909 
	#DT_ADDRTAGIDX
(
èg
Ë(
DT_ADDRRNGHI
 - (èg)Ë

	)

910 
	#DT_ADDRNUM
 11

	)

914 
	#DT_VERSYM
 0x6ffffff0

	)

916 
	#DT_RELACOUNT
 0x6ffffff9

	)

917 
	#DT_RELCOUNT
 0x6fffffÁ

	)

920 
	#DT_FLAGS_1
 0x6ffffffb

	)

921 
	#DT_VERDEF
 0x6ffffff¯

	)

923 
	#DT_VERDEFNUM
 0x6ffffffd

	)

924 
	#DT_VERNEED
 0x6fffff„

	)

926 
	#DT_VERNEEDNUM
 0x6ffffff‡

	)

927 
	#DT_VERSIONTAGIDX
(
èg
Ë(
DT_VERNEEDNUM
 - (èg)Ë

	)

928 
	#DT_VERSIONTAGNUM
 16

	)

932 
	#DT_AUXILIARY
 0x7ffffffd

	)

933 
	#DT_FILTER
 0x7ffffff‡

	)

934 
	#DT_EXTRATAGIDX
(
èg
Ë((
Elf32_W‹d
)-((
Elf32_Sw‹d
Ë—agË<<1>>1)-1)

	)

935 
	#DT_EXTRANUM
 3

	)

938 
	#DF_ORIGIN
 0x00000001

	)

939 
	#DF_SYMBOLIC
 0x00000002

	)

940 
	#DF_TEXTREL
 0x00000004

	)

941 
	#DF_BIND_NOW
 0x00000008

	)

942 
	#DF_STATIC_TLS
 0x00000010

	)

946 
	#DF_1_NOW
 0x00000001

	)

947 
	#DF_1_GLOBAL
 0x00000002

	)

948 
	#DF_1_GROUP
 0x00000004

	)

949 
	#DF_1_NODELETE
 0x00000008

	)

950 
	#DF_1_LOADFLTR
 0x00000010

	)

951 
	#DF_1_INITFIRST
 0x00000020

	)

952 
	#DF_1_NOOPEN
 0x00000040

	)

953 
	#DF_1_ORIGIN
 0x00000080

	)

954 
	#DF_1_DIRECT
 0x00000100

	)

955 
	#DF_1_TRANS
 0x00000200

	)

956 
	#DF_1_INTERPOSE
 0x00000400

	)

957 
	#DF_1_NODEFLIB
 0x00000800

	)

958 
	#DF_1_NODUMP
 0x00001000

	)

959 
	#DF_1_CONFALT
 0x00002000

	)

960 
	#DF_1_ENDFILTEE
 0x00004000

	)

961 
	#DF_1_DISPRELDNE
 0x00008000

	)

962 
	#DF_1_DISPRELPND
 0x00010000

	)

963 
	#DF_1_NODIRECT
 0x00020000

	)

964 
	#DF_1_IGNMULDEF
 0x00040000

	)

965 
	#DF_1_NOKSYMS
 0x00080000

	)

966 
	#DF_1_NOHDR
 0x00100000

	)

967 
	#DF_1_EDITED
 0x00200000

	)

968 
	#DF_1_NORELOC
 0x00400000

	)

969 
	#DF_1_SYMINTPOSE
 0x00800000

	)

970 
	#DF_1_GLOBAUDIT
 0x01000000

	)

971 
	#DF_1_SINGLETON
 0x02000000

	)

972 
	#DF_1_STUB
 0x04000000

	)

973 
	#DF_1_PIE
 0x08000000

	)

976 
	#DTF_1_PARINIT
 0x00000001

	)

977 
	#DTF_1_CONFEXP
 0x00000002

	)

980 
	#DF_P1_LAZYLOAD
 0x00000001

	)

981 
	#DF_P1_GROUPPERM
 0x00000002

	)

988 
Elf32_HÆf
 
	mvd_vîsi⁄
;

989 
Elf32_HÆf
 
	mvd_Êags
;

990 
Elf32_HÆf
 
	mvd_ndx
;

991 
Elf32_HÆf
 
	mvd_˙t
;

992 
Elf32_W‹d
 
	mvd_hash
;

993 
Elf32_W‹d
 
	mvd_aux
;

994 
Elf32_W‹d
 
	mvd_√xt
;

996 } 
	tElf32_Vîdef
;

1000 
Elf64_HÆf
 
	mvd_vîsi⁄
;

1001 
Elf64_HÆf
 
	mvd_Êags
;

1002 
Elf64_HÆf
 
	mvd_ndx
;

1003 
Elf64_HÆf
 
	mvd_˙t
;

1004 
Elf64_W‹d
 
	mvd_hash
;

1005 
Elf64_W‹d
 
	mvd_aux
;

1006 
Elf64_W‹d
 
	mvd_√xt
;

1008 } 
	tElf64_Vîdef
;

1012 
	#VER_DEF_NONE
 0

	)

1013 
	#VER_DEF_CURRENT
 1

	)

1014 
	#VER_DEF_NUM
 2

	)

1017 
	#VER_FLG_BASE
 0x1

	)

1018 
	#VER_FLG_WEAK
 0x2

	)

1021 
	#VER_NDX_LOCAL
 0

	)

1022 
	#VER_NDX_GLOBAL
 1

	)

1023 
	#VER_NDX_LORESERVE
 0xff00

	)

1024 
	#VER_NDX_ELIMINATE
 0xff01

	)

1030 
Elf32_W‹d
 
	mvda_«me
;

1031 
Elf32_W‹d
 
	mvda_√xt
;

1033 } 
	tElf32_Vîdaux
;

1037 
Elf64_W‹d
 
	mvda_«me
;

1038 
Elf64_W‹d
 
	mvda_√xt
;

1040 } 
	tElf64_Vîdaux
;

1047 
Elf32_HÆf
 
	mvn_vîsi⁄
;

1048 
Elf32_HÆf
 
	mvn_˙t
;

1049 
Elf32_W‹d
 
	mvn_fûe
;

1051 
Elf32_W‹d
 
	mvn_aux
;

1052 
Elf32_W‹d
 
	mvn_√xt
;

1054 } 
	tElf32_Vî√ed
;

1058 
Elf64_HÆf
 
	mvn_vîsi⁄
;

1059 
Elf64_HÆf
 
	mvn_˙t
;

1060 
Elf64_W‹d
 
	mvn_fûe
;

1062 
Elf64_W‹d
 
	mvn_aux
;

1063 
Elf64_W‹d
 
	mvn_√xt
;

1065 } 
	tElf64_Vî√ed
;

1069 
	#VER_NEED_NONE
 0

	)

1070 
	#VER_NEED_CURRENT
 1

	)

1071 
	#VER_NEED_NUM
 2

	)

1077 
Elf32_W‹d
 
	mv«_hash
;

1078 
Elf32_HÆf
 
	mv«_Êags
;

1079 
Elf32_HÆf
 
	mv«_Ÿhî
;

1080 
Elf32_W‹d
 
	mv«_«me
;

1081 
Elf32_W‹d
 
	mv«_√xt
;

1083 } 
	tElf32_Vî«ux
;

1087 
Elf64_W‹d
 
	mv«_hash
;

1088 
Elf64_HÆf
 
	mv«_Êags
;

1089 
Elf64_HÆf
 
	mv«_Ÿhî
;

1090 
Elf64_W‹d
 
	mv«_«me
;

1091 
Elf64_W‹d
 
	mv«_√xt
;

1093 } 
	tElf64_Vî«ux
;

1097 
	#VER_FLG_WEAK
 0x2

	)

1111 
uöt32_t
 
	ma_ty≥
;

1114 
uöt32_t
 
	ma_vÆ
;

1118 } 
	ma_un
;

1119 } 
	tElf32_auxv_t
;

1123 
uöt64_t
 
	ma_ty≥
;

1126 
uöt64_t
 
	ma_vÆ
;

1130 } 
	ma_un
;

1131 } 
	tElf64_auxv_t
;

1133 
	~<bôs/auxv.h
>

1139 
Elf32_W‹d
 
	mn_«mesz
;

1140 
Elf32_W‹d
 
	mn_descsz
;

1141 
Elf32_W‹d
 
	mn_ty≥
;

1142 } 
	tElf32_Nhdr
;

1146 
Elf64_W‹d
 
	mn_«mesz
;

1147 
Elf64_W‹d
 
	mn_descsz
;

1148 
Elf64_W‹d
 
	mn_ty≥
;

1149 } 
	tElf64_Nhdr
;

1154 
	#ELF_NOTE_SOLARIS
 "SUNW Sﬁ¨is"

	)

1157 
	#ELF_NOTE_GNU
 "GNU"

	)

1163 
	#ELF_NOTE_PAGESIZE_HINT
 1

	)

1174 
	#NT_GNU_ABI_TAG
 1

	)

1175 
	#ELF_NOTE_ABI
 
NT_GNU_ABI_TAG


	)

1179 
	#ELF_NOTE_OS_LINUX
 0

	)

1180 
	#ELF_NOTE_OS_GNU
 1

	)

1181 
	#ELF_NOTE_OS_SOLARIS2
 2

	)

1182 
	#ELF_NOTE_OS_FREEBSD
 3

	)

1190 
	#NT_GNU_HWCAP
 2

	)

1194 
	#NT_GNU_BUILD_ID
 3

	)

1197 
	#NT_GNU_GOLD_VERSION
 4

	)

1200 
	#NT_GNU_PROPERTY_TYPE_0
 5

	)

1203 
	#NOTE_GNU_PROPERTY_SECTION_NAME
 ".nŸe.gnu.¥›îty"

	)

1208 
	#GNU_PROPERTY_STACK_SIZE
 1

	)

1210 
	#GNU_PROPERTY_NO_COPY_ON_PROTECTED
 2

	)

1213 
	#GNU_PROPERTY_LOPROC
 0xc0000000

	)

1215 
	#GNU_PROPERTY_HIPROC
 0xdfffffff

	)

1217 
	#GNU_PROPERTY_LOUSER
 0xe0000000

	)

1219 
	#GNU_PROPERTY_HIUSER
 0xffffffff

	)

1223 
	#GNU_PROPERTY_X86_ISA_1_USED
 0xc0000000

	)

1226 
	#GNU_PROPERTY_X86_ISA_1_NEEDED
 0xc0000001

	)

1228 
	#GNU_PROPERTY_X86_FEATURE_1_AND
 0xc0000002

	)

1230 
	#GNU_PROPERTY_X86_ISA_1_486
 (1U << 0)

	)

1231 
	#GNU_PROPERTY_X86_ISA_1_586
 (1U << 1)

	)

1232 
	#GNU_PROPERTY_X86_ISA_1_686
 (1U << 2)

	)

1233 
	#GNU_PROPERTY_X86_ISA_1_SSE
 (1U << 3)

	)

1234 
	#GNU_PROPERTY_X86_ISA_1_SSE2
 (1U << 4)

	)

1235 
	#GNU_PROPERTY_X86_ISA_1_SSE3
 (1U << 5)

	)

1236 
	#GNU_PROPERTY_X86_ISA_1_SSSE3
 (1U << 6)

	)

1237 
	#GNU_PROPERTY_X86_ISA_1_SSE4_1
 (1U << 7)

	)

1238 
	#GNU_PROPERTY_X86_ISA_1_SSE4_2
 (1U << 8)

	)

1239 
	#GNU_PROPERTY_X86_ISA_1_AVX
 (1U << 9)

	)

1240 
	#GNU_PROPERTY_X86_ISA_1_AVX2
 (1U << 10)

	)

1241 
	#GNU_PROPERTY_X86_ISA_1_AVX512F
 (1U << 11)

	)

1242 
	#GNU_PROPERTY_X86_ISA_1_AVX512CD
 (1U << 12)

	)

1243 
	#GNU_PROPERTY_X86_ISA_1_AVX512ER
 (1U << 13)

	)

1244 
	#GNU_PROPERTY_X86_ISA_1_AVX512PF
 (1U << 14)

	)

1245 
	#GNU_PROPERTY_X86_ISA_1_AVX512VL
 (1U << 15)

	)

1246 
	#GNU_PROPERTY_X86_ISA_1_AVX512DQ
 (1U << 16)

	)

1247 
	#GNU_PROPERTY_X86_ISA_1_AVX512BW
 (1U << 17)

	)

1251 
	#GNU_PROPERTY_X86_FEATURE_1_IBT
 (1U << 0)

	)

1254 
	#GNU_PROPERTY_X86_FEATURE_1_SHSTK
 (1U << 1)

	)

1259 
Elf32_Xw‹d
 
	mm_vÆue
;

1260 
Elf32_W‹d
 
	mm_öfo
;

1261 
Elf32_W‹d
 
	mm_poff£t
;

1262 
Elf32_HÆf
 
	mm_ª≥©
;

1263 
Elf32_HÆf
 
	mm_°ride
;

1264 } 
	tElf32_Move
;

1268 
Elf64_Xw‹d
 
	mm_vÆue
;

1269 
Elf64_Xw‹d
 
	mm_öfo
;

1270 
Elf64_Xw‹d
 
	mm_poff£t
;

1271 
Elf64_HÆf
 
	mm_ª≥©
;

1272 
Elf64_HÆf
 
	mm_°ride
;

1273 } 
	tElf64_Move
;

1276 
	#ELF32_M_SYM
(
öfo
Ë((öfoË>> 8)

	)

1277 
	#ELF32_M_SIZE
(
öfo
Ë((Ë(öfo))

	)

1278 
	#ELF32_M_INFO
(
sym
, 
size
Ë(((symË<< 8Ë+ (Ë(size))

	)

1280 
	#ELF64_M_SYM
(
öfo
Ë
	`ELF32_M_SYM
 (öfo)

	)

1281 
	#ELF64_M_SIZE
(
öfo
Ë
	`ELF32_M_SIZE
 (öfo)

	)

1282 
	#ELF64_M_INFO
(
sym
, 
size
Ë
	`ELF32_M_INFO
 (sym, size)

	)

1288 
	#EF_CPU32
 0x00810000

	)

1292 
	#R_68K_NONE
 0

	)

1293 
	#R_68K_32
 1

	)

1294 
	#R_68K_16
 2

	)

1295 
	#R_68K_8
 3

	)

1296 
	#R_68K_PC32
 4

	)

1297 
	#R_68K_PC16
 5

	)

1298 
	#R_68K_PC8
 6

	)

1299 
	#R_68K_GOT32
 7

	)

1300 
	#R_68K_GOT16
 8

	)

1301 
	#R_68K_GOT8
 9

	)

1302 
	#R_68K_GOT32O
 10

	)

1303 
	#R_68K_GOT16O
 11

	)

1304 
	#R_68K_GOT8O
 12

	)

1305 
	#R_68K_PLT32
 13

	)

1306 
	#R_68K_PLT16
 14

	)

1307 
	#R_68K_PLT8
 15

	)

1308 
	#R_68K_PLT32O
 16

	)

1309 
	#R_68K_PLT16O
 17

	)

1310 
	#R_68K_PLT8O
 18

	)

1311 
	#R_68K_COPY
 19

	)

1312 
	#R_68K_GLOB_DAT
 20

	)

1313 
	#R_68K_JMP_SLOT
 21

	)

1314 
	#R_68K_RELATIVE
 22

	)

1315 
	#R_68K_TLS_GD32
 25

	)

1316 
	#R_68K_TLS_GD16
 26

	)

1317 
	#R_68K_TLS_GD8
 27

	)

1318 
	#R_68K_TLS_LDM32
 28

	)

1319 
	#R_68K_TLS_LDM16
 29

	)

1320 
	#R_68K_TLS_LDM8
 30

	)

1321 
	#R_68K_TLS_LDO32
 31

	)

1322 
	#R_68K_TLS_LDO16
 32

	)

1323 
	#R_68K_TLS_LDO8
 33

	)

1324 
	#R_68K_TLS_IE32
 34

	)

1325 
	#R_68K_TLS_IE16
 35

	)

1326 
	#R_68K_TLS_IE8
 36

	)

1327 
	#R_68K_TLS_LE32
 37

	)

1329 
	#R_68K_TLS_LE16
 38

	)

1331 
	#R_68K_TLS_LE8
 39

	)

1333 
	#R_68K_TLS_DTPMOD32
 40

	)

1334 
	#R_68K_TLS_DTPREL32
 41

	)

1335 
	#R_68K_TLS_TPREL32
 42

	)

1337 
	#R_68K_NUM
 43

	)

1343 
	#R_386_NONE
 0

	)

1344 
	#R_386_32
 1

	)

1345 
	#R_386_PC32
 2

	)

1346 
	#R_386_GOT32
 3

	)

1347 
	#R_386_PLT32
 4

	)

1348 
	#R_386_COPY
 5

	)

1349 
	#R_386_GLOB_DAT
 6

	)

1350 
	#R_386_JMP_SLOT
 7

	)

1351 
	#R_386_RELATIVE
 8

	)

1352 
	#R_386_GOTOFF
 9

	)

1353 
	#R_386_GOTPC
 10

	)

1354 
	#R_386_32PLT
 11

	)

1355 
	#R_386_TLS_TPOFF
 14

	)

1356 
	#R_386_TLS_IE
 15

	)

1358 
	#R_386_TLS_GOTIE
 16

	)

1360 
	#R_386_TLS_LE
 17

	)

1362 
	#R_386_TLS_GD
 18

	)

1364 
	#R_386_TLS_LDM
 19

	)

1367 
	#R_386_16
 20

	)

1368 
	#R_386_PC16
 21

	)

1369 
	#R_386_8
 22

	)

1370 
	#R_386_PC8
 23

	)

1371 
	#R_386_TLS_GD_32
 24

	)

1373 
	#R_386_TLS_GD_PUSH
 25

	)

1374 
	#R_386_TLS_GD_CALL
 26

	)

1376 
	#R_386_TLS_GD_POP
 27

	)

1377 
	#R_386_TLS_LDM_32
 28

	)

1379 
	#R_386_TLS_LDM_PUSH
 29

	)

1380 
	#R_386_TLS_LDM_CALL
 30

	)

1382 
	#R_386_TLS_LDM_POP
 31

	)

1383 
	#R_386_TLS_LDO_32
 32

	)

1384 
	#R_386_TLS_IE_32
 33

	)

1386 
	#R_386_TLS_LE_32
 34

	)

1388 
	#R_386_TLS_DTPMOD32
 35

	)

1389 
	#R_386_TLS_DTPOFF32
 36

	)

1390 
	#R_386_TLS_TPOFF32
 37

	)

1391 
	#R_386_SIZE32
 38

	)

1392 
	#R_386_TLS_GOTDESC
 39

	)

1393 
	#R_386_TLS_DESC_CALL
 40

	)

1396 
	#R_386_TLS_DESC
 41

	)

1400 
	#R_386_IRELATIVE
 42

	)

1401 
	#R_386_GOT32X
 43

	)

1404 
	#R_386_NUM
 44

	)

1410 
	#STT_SPARC_REGISTER
 13

	)

1414 
	#EF_SPARCV9_MM
 3

	)

1415 
	#EF_SPARCV9_TSO
 0

	)

1416 
	#EF_SPARCV9_PSO
 1

	)

1417 
	#EF_SPARCV9_RMO
 2

	)

1418 
	#EF_SPARC_LEDATA
 0x800000

	)

1419 
	#EF_SPARC_EXT_MASK
 0xFFFF00

	)

1420 
	#EF_SPARC_32PLUS
 0x000100

	)

1421 
	#EF_SPARC_SUN_US1
 0x000200

	)

1422 
	#EF_SPARC_HAL_R1
 0x000400

	)

1423 
	#EF_SPARC_SUN_US3
 0x000800

	)

1427 
	#R_SPARC_NONE
 0

	)

1428 
	#R_SPARC_8
 1

	)

1429 
	#R_SPARC_16
 2

	)

1430 
	#R_SPARC_32
 3

	)

1431 
	#R_SPARC_DISP8
 4

	)

1432 
	#R_SPARC_DISP16
 5

	)

1433 
	#R_SPARC_DISP32
 6

	)

1434 
	#R_SPARC_WDISP30
 7

	)

1435 
	#R_SPARC_WDISP22
 8

	)

1436 
	#R_SPARC_HI22
 9

	)

1437 
	#R_SPARC_22
 10

	)

1438 
	#R_SPARC_13
 11

	)

1439 
	#R_SPARC_LO10
 12

	)

1440 
	#R_SPARC_GOT10
 13

	)

1441 
	#R_SPARC_GOT13
 14

	)

1442 
	#R_SPARC_GOT22
 15

	)

1443 
	#R_SPARC_PC10
 16

	)

1444 
	#R_SPARC_PC22
 17

	)

1445 
	#R_SPARC_WPLT30
 18

	)

1446 
	#R_SPARC_COPY
 19

	)

1447 
	#R_SPARC_GLOB_DAT
 20

	)

1448 
	#R_SPARC_JMP_SLOT
 21

	)

1449 
	#R_SPARC_RELATIVE
 22

	)

1450 
	#R_SPARC_UA32
 23

	)

1454 
	#R_SPARC_PLT32
 24

	)

1455 
	#R_SPARC_HIPLT22
 25

	)

1456 
	#R_SPARC_LOPLT10
 26

	)

1457 
	#R_SPARC_PCPLT32
 27

	)

1458 
	#R_SPARC_PCPLT22
 28

	)

1459 
	#R_SPARC_PCPLT10
 29

	)

1460 
	#R_SPARC_10
 30

	)

1461 
	#R_SPARC_11
 31

	)

1462 
	#R_SPARC_64
 32

	)

1463 
	#R_SPARC_OLO10
 33

	)

1464 
	#R_SPARC_HH22
 34

	)

1465 
	#R_SPARC_HM10
 35

	)

1466 
	#R_SPARC_LM22
 36

	)

1467 
	#R_SPARC_PC_HH22
 37

	)

1468 
	#R_SPARC_PC_HM10
 38

	)

1469 
	#R_SPARC_PC_LM22
 39

	)

1470 
	#R_SPARC_WDISP16
 40

	)

1471 
	#R_SPARC_WDISP19
 41

	)

1472 
	#R_SPARC_GLOB_JMP
 42

	)

1473 
	#R_SPARC_7
 43

	)

1474 
	#R_SPARC_5
 44

	)

1475 
	#R_SPARC_6
 45

	)

1476 
	#R_SPARC_DISP64
 46

	)

1477 
	#R_SPARC_PLT64
 47

	)

1478 
	#R_SPARC_HIX22
 48

	)

1479 
	#R_SPARC_LOX10
 49

	)

1480 
	#R_SPARC_H44
 50

	)

1481 
	#R_SPARC_M44
 51

	)

1482 
	#R_SPARC_L44
 52

	)

1483 
	#R_SPARC_REGISTER
 53

	)

1484 
	#R_SPARC_UA64
 54

	)

1485 
	#R_SPARC_UA16
 55

	)

1486 
	#R_SPARC_TLS_GD_HI22
 56

	)

1487 
	#R_SPARC_TLS_GD_LO10
 57

	)

1488 
	#R_SPARC_TLS_GD_ADD
 58

	)

1489 
	#R_SPARC_TLS_GD_CALL
 59

	)

1490 
	#R_SPARC_TLS_LDM_HI22
 60

	)

1491 
	#R_SPARC_TLS_LDM_LO10
 61

	)

1492 
	#R_SPARC_TLS_LDM_ADD
 62

	)

1493 
	#R_SPARC_TLS_LDM_CALL
 63

	)

1494 
	#R_SPARC_TLS_LDO_HIX22
 64

	)

1495 
	#R_SPARC_TLS_LDO_LOX10
 65

	)

1496 
	#R_SPARC_TLS_LDO_ADD
 66

	)

1497 
	#R_SPARC_TLS_IE_HI22
 67

	)

1498 
	#R_SPARC_TLS_IE_LO10
 68

	)

1499 
	#R_SPARC_TLS_IE_LD
 69

	)

1500 
	#R_SPARC_TLS_IE_LDX
 70

	)

1501 
	#R_SPARC_TLS_IE_ADD
 71

	)

1502 
	#R_SPARC_TLS_LE_HIX22
 72

	)

1503 
	#R_SPARC_TLS_LE_LOX10
 73

	)

1504 
	#R_SPARC_TLS_DTPMOD32
 74

	)

1505 
	#R_SPARC_TLS_DTPMOD64
 75

	)

1506 
	#R_SPARC_TLS_DTPOFF32
 76

	)

1507 
	#R_SPARC_TLS_DTPOFF64
 77

	)

1508 
	#R_SPARC_TLS_TPOFF32
 78

	)

1509 
	#R_SPARC_TLS_TPOFF64
 79

	)

1510 
	#R_SPARC_GOTDATA_HIX22
 80

	)

1511 
	#R_SPARC_GOTDATA_LOX10
 81

	)

1512 
	#R_SPARC_GOTDATA_OP_HIX22
 82

	)

1513 
	#R_SPARC_GOTDATA_OP_LOX10
 83

	)

1514 
	#R_SPARC_GOTDATA_OP
 84

	)

1515 
	#R_SPARC_H34
 85

	)

1516 
	#R_SPARC_SIZE32
 86

	)

1517 
	#R_SPARC_SIZE64
 87

	)

1518 
	#R_SPARC_WDISP10
 88

	)

1519 
	#R_SPARC_JMP_IREL
 248

	)

1520 
	#R_SPARC_IRELATIVE
 249

	)

1521 
	#R_SPARC_GNU_VTINHERIT
 250

	)

1522 
	#R_SPARC_GNU_VTENTRY
 251

	)

1523 
	#R_SPARC_REV32
 252

	)

1525 
	#R_SPARC_NUM
 253

	)

1529 
	#DT_SPARC_REGISTER
 0x70000001

	)

1530 
	#DT_SPARC_NUM
 2

	)

1536 
	#EF_MIPS_NOREORDER
 1

	)

1537 
	#EF_MIPS_PIC
 2

	)

1538 
	#EF_MIPS_CPIC
 4

	)

1539 
	#EF_MIPS_XGOT
 8

	)

1540 
	#EF_MIPS_64BIT_WHIRL
 16

	)

1541 
	#EF_MIPS_ABI2
 32

	)

1542 
	#EF_MIPS_ABI_ON32
 64

	)

1543 
	#EF_MIPS_FP64
 512

	)

1544 
	#EF_MIPS_NAN2008
 1024

	)

1545 
	#EF_MIPS_ARCH
 0xf0000000

	)

1549 
	#EF_MIPS_ARCH_1
 0x00000000

	)

1550 
	#EF_MIPS_ARCH_2
 0x10000000

	)

1551 
	#EF_MIPS_ARCH_3
 0x20000000

	)

1552 
	#EF_MIPS_ARCH_4
 0x30000000

	)

1553 
	#EF_MIPS_ARCH_5
 0x40000000

	)

1554 
	#EF_MIPS_ARCH_32
 0x50000000

	)

1555 
	#EF_MIPS_ARCH_64
 0x60000000

	)

1556 
	#EF_MIPS_ARCH_32R2
 0x70000000

	)

1557 
	#EF_MIPS_ARCH_64R2
 0x80000000

	)

1561 
	#E_MIPS_ARCH_1
 
EF_MIPS_ARCH_1


	)

1562 
	#E_MIPS_ARCH_2
 
EF_MIPS_ARCH_2


	)

1563 
	#E_MIPS_ARCH_3
 
EF_MIPS_ARCH_3


	)

1564 
	#E_MIPS_ARCH_4
 
EF_MIPS_ARCH_4


	)

1565 
	#E_MIPS_ARCH_5
 
EF_MIPS_ARCH_5


	)

1566 
	#E_MIPS_ARCH_32
 
EF_MIPS_ARCH_32


	)

1567 
	#E_MIPS_ARCH_64
 
EF_MIPS_ARCH_64


	)

1571 
	#SHN_MIPS_ACOMMON
 0xff00

	)

1572 
	#SHN_MIPS_TEXT
 0xff01

	)

1573 
	#SHN_MIPS_DATA
 0xff02

	)

1574 
	#SHN_MIPS_SCOMMON
 0xff03

	)

1575 
	#SHN_MIPS_SUNDEFINED
 0xff04

	)

1579 
	#SHT_MIPS_LIBLIST
 0x70000000

	)

1580 
	#SHT_MIPS_MSYM
 0x70000001

	)

1581 
	#SHT_MIPS_CONFLICT
 0x70000002

	)

1582 
	#SHT_MIPS_GPTAB
 0x70000003

	)

1583 
	#SHT_MIPS_UCODE
 0x70000004

	)

1584 
	#SHT_MIPS_DEBUG
 0x70000005

	)

1585 
	#SHT_MIPS_REGINFO
 0x70000006

	)

1586 
	#SHT_MIPS_PACKAGE
 0x70000007

	)

1587 
	#SHT_MIPS_PACKSYM
 0x70000008

	)

1588 
	#SHT_MIPS_RELD
 0x70000009

	)

1589 
	#SHT_MIPS_IFACE
 0x7000000b

	)

1590 
	#SHT_MIPS_CONTENT
 0x7000000c

	)

1591 
	#SHT_MIPS_OPTIONS
 0x7000000d

	)

1592 
	#SHT_MIPS_SHDR
 0x70000010

	)

1593 
	#SHT_MIPS_FDESC
 0x70000011

	)

1594 
	#SHT_MIPS_EXTSYM
 0x70000012

	)

1595 
	#SHT_MIPS_DENSE
 0x70000013

	)

1596 
	#SHT_MIPS_PDESC
 0x70000014

	)

1597 
	#SHT_MIPS_LOCSYM
 0x70000015

	)

1598 
	#SHT_MIPS_AUXSYM
 0x70000016

	)

1599 
	#SHT_MIPS_OPTSYM
 0x70000017

	)

1600 
	#SHT_MIPS_LOCSTR
 0x70000018

	)

1601 
	#SHT_MIPS_LINE
 0x70000019

	)

1602 
	#SHT_MIPS_RFDESC
 0x7000001a

	)

1603 
	#SHT_MIPS_DELTASYM
 0x7000001b

	)

1604 
	#SHT_MIPS_DELTAINST
 0x7000001c

	)

1605 
	#SHT_MIPS_DELTACLASS
 0x7000001d

	)

1606 
	#SHT_MIPS_DWARF
 0x7000001ê

	)

1607 
	#SHT_MIPS_DELTADECL
 0x7000001f

	)

1608 
	#SHT_MIPS_SYMBOL_LIB
 0x70000020

	)

1609 
	#SHT_MIPS_EVENTS
 0x70000021

	)

1610 
	#SHT_MIPS_TRANSLATE
 0x70000022

	)

1611 
	#SHT_MIPS_PIXIE
 0x70000023

	)

1612 
	#SHT_MIPS_XLATE
 0x70000024

	)

1613 
	#SHT_MIPS_XLATE_DEBUG
 0x70000025

	)

1614 
	#SHT_MIPS_WHIRL
 0x70000026

	)

1615 
	#SHT_MIPS_EH_REGION
 0x70000027

	)

1616 
	#SHT_MIPS_XLATE_OLD
 0x70000028

	)

1617 
	#SHT_MIPS_PDR_EXCEPTION
 0x70000029

	)

1621 
	#SHF_MIPS_GPREL
 0x10000000

	)

1622 
	#SHF_MIPS_MERGE
 0x20000000

	)

1623 
	#SHF_MIPS_ADDR
 0x40000000

	)

1624 
	#SHF_MIPS_STRINGS
 0x80000000

	)

1625 
	#SHF_MIPS_NOSTRIP
 0x08000000

	)

1626 
	#SHF_MIPS_LOCAL
 0x04000000

	)

1627 
	#SHF_MIPS_NAMES
 0x02000000

	)

1628 
	#SHF_MIPS_NODUPE
 0x01000000

	)

1634 
	#STO_MIPS_DEFAULT
 0x0

	)

1635 
	#STO_MIPS_INTERNAL
 0x1

	)

1636 
	#STO_MIPS_HIDDEN
 0x2

	)

1637 
	#STO_MIPS_PROTECTED
 0x3

	)

1638 
	#STO_MIPS_PLT
 0x8

	)

1639 
	#STO_MIPS_SC_ALIGN_UNUSED
 0xff

	)

1642 
	#STB_MIPS_SPLIT_COMMON
 13

	)

1650 
Elf32_W‹d
 
	mgt_cuºít_g_vÆue
;

1651 
Elf32_W‹d
 
	mgt_unu£d
;

1652 } 
	mgt_hódî
;

1655 
Elf32_W‹d
 
	mgt_g_vÆue
;

1656 
Elf32_W‹d
 
	mgt_byãs
;

1657 } 
	mgt_íåy
;

1658 } 
	tElf32_g±ab
;

1664 
Elf32_W‹d
 
	mri_g¥mask
;

1665 
Elf32_W‹d
 
	mri_˝rmask
[4];

1666 
Elf32_Sw‹d
 
	mri_gp_vÆue
;

1667 } 
	tElf32_RegInfo
;

1673 
	mköd
;

1675 
	msize
;

1676 
Elf32_Se˘i⁄
 
	m£˘i⁄
;

1678 
Elf32_W‹d
 
	möfo
;

1679 } 
	tElf_O±i⁄s
;

1683 
	#ODK_NULL
 0

	)

1684 
	#ODK_REGINFO
 1

	)

1685 
	#ODK_EXCEPTIONS
 2

	)

1686 
	#ODK_PAD
 3

	)

1687 
	#ODK_HWPATCH
 4

	)

1688 
	#ODK_FILL
 5

	)

1689 
	#ODK_TAGS
 6

	)

1690 
	#ODK_HWAND
 7

	)

1691 
	#ODK_HWOR
 8

	)

1695 
	#OEX_FPU_MIN
 0x1‡

	)

1696 
	#OEX_FPU_MAX
 0x1f00

	)

1697 
	#OEX_PAGE0
 0x10000

	)

1698 
	#OEX_SMM
 0x20000

	)

1699 
	#OEX_FPDBUG
 0x40000

	)

1700 
	#OEX_PRECISEFP
 
OEX_FPDBUG


	)

1701 
	#OEX_DISMISS
 0x80000

	)

1703 
	#OEX_FPU_INVAL
 0x10

	)

1704 
	#OEX_FPU_DIV0
 0x08

	)

1705 
	#OEX_FPU_OFLO
 0x04

	)

1706 
	#OEX_FPU_UFLO
 0x02

	)

1707 
	#OEX_FPU_INEX
 0x01

	)

1711 
	#OHW_R4KEOP
 0x1

	)

1712 
	#OHW_R8KPFETCH
 0x2

	)

1713 
	#OHW_R5KEOP
 0x4

	)

1714 
	#OHW_R5KCVTL
 0x8

	)

1716 
	#OPAD_PREFIX
 0x1

	)

1717 
	#OPAD_POSTFIX
 0x2

	)

1718 
	#OPAD_SYMBOL
 0x4

	)

1724 
Elf32_W‹d
 
	mhwp_Êags1
;

1725 
Elf32_W‹d
 
	mhwp_Êags2
;

1726 } 
	tElf_O±i⁄s_Hw
;

1730 
	#OHWA0_R4KEOP_CHECKED
 0x00000001

	)

1731 
	#OHWA1_R4KEOP_CLEAN
 0x00000002

	)

1735 
	#R_MIPS_NONE
 0

	)

1736 
	#R_MIPS_16
 1

	)

1737 
	#R_MIPS_32
 2

	)

1738 
	#R_MIPS_REL32
 3

	)

1739 
	#R_MIPS_26
 4

	)

1740 
	#R_MIPS_HI16
 5

	)

1741 
	#R_MIPS_LO16
 6

	)

1742 
	#R_MIPS_GPREL16
 7

	)

1743 
	#R_MIPS_LITERAL
 8

	)

1744 
	#R_MIPS_GOT16
 9

	)

1745 
	#R_MIPS_PC16
 10

	)

1746 
	#R_MIPS_CALL16
 11

	)

1747 
	#R_MIPS_GPREL32
 12

	)

1749 
	#R_MIPS_SHIFT5
 16

	)

1750 
	#R_MIPS_SHIFT6
 17

	)

1751 
	#R_MIPS_64
 18

	)

1752 
	#R_MIPS_GOT_DISP
 19

	)

1753 
	#R_MIPS_GOT_PAGE
 20

	)

1754 
	#R_MIPS_GOT_OFST
 21

	)

1755 
	#R_MIPS_GOT_HI16
 22

	)

1756 
	#R_MIPS_GOT_LO16
 23

	)

1757 
	#R_MIPS_SUB
 24

	)

1758 
	#R_MIPS_INSERT_A
 25

	)

1759 
	#R_MIPS_INSERT_B
 26

	)

1760 
	#R_MIPS_DELETE
 27

	)

1761 
	#R_MIPS_HIGHER
 28

	)

1762 
	#R_MIPS_HIGHEST
 29

	)

1763 
	#R_MIPS_CALL_HI16
 30

	)

1764 
	#R_MIPS_CALL_LO16
 31

	)

1765 
	#R_MIPS_SCN_DISP
 32

	)

1766 
	#R_MIPS_REL16
 33

	)

1767 
	#R_MIPS_ADD_IMMEDIATE
 34

	)

1768 
	#R_MIPS_PJUMP
 35

	)

1769 
	#R_MIPS_RELGOT
 36

	)

1770 
	#R_MIPS_JALR
 37

	)

1771 
	#R_MIPS_TLS_DTPMOD32
 38

	)

1772 
	#R_MIPS_TLS_DTPREL32
 39

	)

1773 
	#R_MIPS_TLS_DTPMOD64
 40

	)

1774 
	#R_MIPS_TLS_DTPREL64
 41

	)

1775 
	#R_MIPS_TLS_GD
 42

	)

1776 
	#R_MIPS_TLS_LDM
 43

	)

1777 
	#R_MIPS_TLS_DTPREL_HI16
 44

	)

1778 
	#R_MIPS_TLS_DTPREL_LO16
 45

	)

1779 
	#R_MIPS_TLS_GOTTPREL
 46

	)

1780 
	#R_MIPS_TLS_TPREL32
 47

	)

1781 
	#R_MIPS_TLS_TPREL64
 48

	)

1782 
	#R_MIPS_TLS_TPREL_HI16
 49

	)

1783 
	#R_MIPS_TLS_TPREL_LO16
 50

	)

1784 
	#R_MIPS_GLOB_DAT
 51

	)

1785 
	#R_MIPS_COPY
 126

	)

1786 
	#R_MIPS_JUMP_SLOT
 127

	)

1788 
	#R_MIPS_NUM
 128

	)

1792 
	#PT_MIPS_REGINFO
 0x70000000

	)

1793 
	#PT_MIPS_RTPROC
 0x70000001

	)

1794 
	#PT_MIPS_OPTIONS
 0x70000002

	)

1795 
	#PT_MIPS_ABIFLAGS
 0x70000003

	)

1799 
	#PF_MIPS_LOCAL
 0x10000000

	)

1803 
	#DT_MIPS_RLD_VERSION
 0x70000001

	)

1804 
	#DT_MIPS_TIME_STAMP
 0x70000002

	)

1805 
	#DT_MIPS_ICHECKSUM
 0x70000003

	)

1806 
	#DT_MIPS_IVERSION
 0x70000004

	)

1807 
	#DT_MIPS_FLAGS
 0x70000005

	)

1808 
	#DT_MIPS_BASE_ADDRESS
 0x70000006

	)

1809 
	#DT_MIPS_MSYM
 0x70000007

	)

1810 
	#DT_MIPS_CONFLICT
 0x70000008

	)

1811 
	#DT_MIPS_LIBLIST
 0x70000009

	)

1812 
	#DT_MIPS_LOCAL_GOTNO
 0x7000000®

	)

1813 
	#DT_MIPS_CONFLICTNO
 0x7000000b

	)

1814 
	#DT_MIPS_LIBLISTNO
 0x70000010

	)

1815 
	#DT_MIPS_SYMTABNO
 0x70000011

	)

1816 
	#DT_MIPS_UNREFEXTNO
 0x70000012

	)

1817 
	#DT_MIPS_GOTSYM
 0x70000013

	)

1818 
	#DT_MIPS_HIPAGENO
 0x70000014

	)

1819 
	#DT_MIPS_RLD_MAP
 0x70000016

	)

1820 
	#DT_MIPS_DELTA_CLASS
 0x70000017

	)

1821 
	#DT_MIPS_DELTA_CLASS_NO
 0x70000018

	)

1823 
	#DT_MIPS_DELTA_INSTANCE
 0x70000019

	)

1824 
	#DT_MIPS_DELTA_INSTANCE_NO
 0x7000001®

	)

1826 
	#DT_MIPS_DELTA_RELOC
 0x7000001b

	)

1827 
	#DT_MIPS_DELTA_RELOC_NO
 0x7000001¯

	)

1829 
	#DT_MIPS_DELTA_SYM
 0x7000001d

	)

1831 
	#DT_MIPS_DELTA_SYM_NO
 0x7000001ê

	)

1833 
	#DT_MIPS_DELTA_CLASSSYM
 0x70000020

	)

1835 
	#DT_MIPS_DELTA_CLASSSYM_NO
 0x70000021

	)

1837 
	#DT_MIPS_CXX_FLAGS
 0x70000022

	)

1838 
	#DT_MIPS_PIXIE_INIT
 0x70000023

	)

1839 
	#DT_MIPS_SYMBOL_LIB
 0x70000024

	)

1840 
	#DT_MIPS_LOCALPAGE_GOTIDX
 0x70000025

	)

1841 
	#DT_MIPS_LOCAL_GOTIDX
 0x70000026

	)

1842 
	#DT_MIPS_HIDDEN_GOTIDX
 0x70000027

	)

1843 
	#DT_MIPS_PROTECTED_GOTIDX
 0x70000028

	)

1844 
	#DT_MIPS_OPTIONS
 0x70000029

	)

1845 
	#DT_MIPS_INTERFACE
 0x7000002®

	)

1846 
	#DT_MIPS_DYNSTR_ALIGN
 0x7000002b

	)

1847 
	#DT_MIPS_INTERFACE_SIZE
 0x7000002¯

	)

1848 
	#DT_MIPS_RLD_TEXT_RESOLVE_ADDR
 0x7000002d

	)

1850 
	#DT_MIPS_PERF_SUFFIX
 0x7000002ê

	)

1852 
	#DT_MIPS_COMPACT_SIZE
 0x7000002‡

	)

1853 
	#DT_MIPS_GP_VALUE
 0x70000030

	)

1854 
	#DT_MIPS_AUX_DYNAMIC
 0x70000031

	)

1856 
	#DT_MIPS_PLTGOT
 0x70000032

	)

1860 
	#DT_MIPS_RWPLT
 0x70000034

	)

1864 
	#DT_MIPS_RLD_MAP_REL
 0x70000035

	)

1865 
	#DT_MIPS_NUM
 0x36

	)

1869 
	#RHF_NONE
 0

	)

1870 
	#RHF_QUICKSTART
 (1 << 0Ë

	)

1871 
	#RHF_NOTPOT
 (1 << 1Ë

	)

1872 
	#RHF_NO_LIBRARY_REPLACEMENT
 (1 << 2Ë

	)

1873 
	#RHF_NO_MOVE
 (1 << 3)

	)

1874 
	#RHF_SGI_ONLY
 (1 << 4)

	)

1875 
	#RHF_GUARANTEE_INIT
 (1 << 5)

	)

1876 
	#RHF_DELTA_C_PLUS_PLUS
 (1 << 6)

	)

1877 
	#RHF_GUARANTEE_START_INIT
 (1 << 7)

	)

1878 
	#RHF_PIXIE
 (1 << 8)

	)

1879 
	#RHF_DEFAULT_DELAY_LOAD
 (1 << 9)

	)

1880 
	#RHF_REQUICKSTART
 (1 << 10)

	)

1881 
	#RHF_REQUICKSTARTED
 (1 << 11)

	)

1882 
	#RHF_CORD
 (1 << 12)

	)

1883 
	#RHF_NO_UNRES_UNDEF
 (1 << 13)

	)

1884 
	#RHF_RLD_ORDER_SAFE
 (1 << 14)

	)

1890 
Elf32_W‹d
 
	ml_«me
;

1891 
Elf32_W‹d
 
	ml_time_°amp
;

1892 
Elf32_W‹d
 
	ml_checksum
;

1893 
Elf32_W‹d
 
	ml_vîsi⁄
;

1894 
Elf32_W‹d
 
	ml_Êags
;

1895 } 
	tElf32_Lib
;

1899 
Elf64_W‹d
 
	ml_«me
;

1900 
Elf64_W‹d
 
	ml_time_°amp
;

1901 
Elf64_W‹d
 
	ml_checksum
;

1902 
Elf64_W‹d
 
	ml_vîsi⁄
;

1903 
Elf64_W‹d
 
	ml_Êags
;

1904 } 
	tElf64_Lib
;

1909 
	#LL_NONE
 0

	)

1910 
	#LL_EXACT_MATCH
 (1 << 0Ë

	)

1911 
	#LL_IGNORE_INT_VER
 (1 << 1Ë

	)

1912 
	#LL_REQUIRE_MINOR
 (1 << 2)

	)

1913 
	#LL_EXPORTS
 (1 << 3)

	)

1914 
	#LL_DELAY_LOAD
 (1 << 4)

	)

1915 
	#LL_DELTA
 (1 << 5)

	)

1919 
Elf32_Addr
 
	tElf32_C⁄Êi˘
;

1924 
Elf32_HÆf
 
	mvîsi⁄
;

1926 
	miß_Àvñ
;

1928 
	miß_ªv
;

1930 
	mg¥_size
;

1932 
	m˝r1_size
;

1934 
	m˝r2_size
;

1936 
	mÂ_abi
;

1938 
Elf32_W‹d
 
	miß_ext
;

1940 
Elf32_W‹d
 
	ma£s
;

1942 
Elf32_W‹d
 
	mÊags1
;

1943 
Elf32_W‹d
 
	mÊags2
;

1944 } 
	tElf_MIPS_ABIFœgs_v0
;

1948 
	#MIPS_AFL_REG_NONE
 0x00

	)

1949 
	#MIPS_AFL_REG_32
 0x01

	)

1950 
	#MIPS_AFL_REG_64
 0x02

	)

1951 
	#MIPS_AFL_REG_128
 0x03

	)

1955 
	#MIPS_AFL_ASE_DSP
 0x00000001

	)

1956 
	#MIPS_AFL_ASE_DSPR2
 0x00000002

	)

1957 
	#MIPS_AFL_ASE_EVA
 0x00000004

	)

1958 
	#MIPS_AFL_ASE_MCU
 0x00000008

	)

1959 
	#MIPS_AFL_ASE_MDMX
 0x00000010

	)

1960 
	#MIPS_AFL_ASE_MIPS3D
 0x00000020

	)

1961 
	#MIPS_AFL_ASE_MT
 0x00000040

	)

1962 
	#MIPS_AFL_ASE_SMARTMIPS
 0x00000080

	)

1963 
	#MIPS_AFL_ASE_VIRT
 0x00000100

	)

1964 
	#MIPS_AFL_ASE_MSA
 0x00000200

	)

1965 
	#MIPS_AFL_ASE_MIPS16
 0x00000400

	)

1966 
	#MIPS_AFL_ASE_MICROMIPS
 0x00000800

	)

1967 
	#MIPS_AFL_ASE_XPA
 0x00001000

	)

1968 
	#MIPS_AFL_ASE_MASK
 0x00001ff‡

	)

1972 
	#MIPS_AFL_EXT_XLR
 1

	)

1973 
	#MIPS_AFL_EXT_OCTEON2
 2

	)

1974 
	#MIPS_AFL_EXT_OCTEONP
 3

	)

1975 
	#MIPS_AFL_EXT_LOONGSON_3A
 4

	)

1976 
	#MIPS_AFL_EXT_OCTEON
 5

	)

1977 
	#MIPS_AFL_EXT_5900
 6

	)

1978 
	#MIPS_AFL_EXT_4650
 7

	)

1979 
	#MIPS_AFL_EXT_4010
 8

	)

1980 
	#MIPS_AFL_EXT_4100
 9

	)

1981 
	#MIPS_AFL_EXT_3900
 10

	)

1982 
	#MIPS_AFL_EXT_10000
 11

	)

1983 
	#MIPS_AFL_EXT_SB1
 12

	)

1984 
	#MIPS_AFL_EXT_4111
 13

	)

1985 
	#MIPS_AFL_EXT_4120
 14

	)

1986 
	#MIPS_AFL_EXT_5400
 15

	)

1987 
	#MIPS_AFL_EXT_5500
 16

	)

1988 
	#MIPS_AFL_EXT_LOONGSON_2E
 17

	)

1989 
	#MIPS_AFL_EXT_LOONGSON_2F
 18

	)

1992 
	#MIPS_AFL_FLAGS1_ODDSPREG
 1

	)

1998 
	mVÆ_GNU_MIPS_ABI_FP_ANY
 = 0,

2000 
	mVÆ_GNU_MIPS_ABI_FP_DOUBLE
 = 1,

2002 
	mVÆ_GNU_MIPS_ABI_FP_SINGLE
 = 2,

2004 
	mVÆ_GNU_MIPS_ABI_FP_SOFT
 = 3,

2006 
	mVÆ_GNU_MIPS_ABI_FP_OLD_64
 = 4,

2008 
	mVÆ_GNU_MIPS_ABI_FP_XX
 = 5,

2010 
	mVÆ_GNU_MIPS_ABI_FP_64
 = 6,

2012 
	mVÆ_GNU_MIPS_ABI_FP_64A
 = 7,

2014 
	mVÆ_GNU_MIPS_ABI_FP_MAX
 = 7

2021 
	#EF_PARISC_TRAPNIL
 0x00010000

	)

2022 
	#EF_PARISC_EXT
 0x00020000

	)

2023 
	#EF_PARISC_LSB
 0x00040000

	)

2024 
	#EF_PARISC_WIDE
 0x00080000

	)

2025 
	#EF_PARISC_NO_KABP
 0x00100000

	)

2027 
	#EF_PARISC_LAZYSWAP
 0x00400000

	)

2028 
	#EF_PARISC_ARCH
 0x0000fff‡

	)

2032 
	#EFA_PARISC_1_0
 0x020b

	)

2033 
	#EFA_PARISC_1_1
 0x0210

	)

2034 
	#EFA_PARISC_2_0
 0x0214

	)

2038 
	#SHN_PARISC_ANSI_COMMON
 0xff00

	)

2040 
	#SHN_PARISC_HUGE_COMMON
 0xff01

	)

2044 
	#SHT_PARISC_EXT
 0x70000000

	)

2045 
	#SHT_PARISC_UNWIND
 0x70000001

	)

2046 
	#SHT_PARISC_DOC
 0x70000002

	)

2050 
	#SHF_PARISC_SHORT
 0x20000000

	)

2051 
	#SHF_PARISC_HUGE
 0x40000000

	)

2052 
	#SHF_PARISC_SBP
 0x80000000

	)

2056 
	#STT_PARISC_MILLICODE
 13

	)

2058 
	#STT_HP_OPAQUE
 (
STT_LOOS
 + 0x1)

	)

2059 
	#STT_HP_STUB
 (
STT_LOOS
 + 0x2)

	)

2063 
	#R_PARISC_NONE
 0

	)

2064 
	#R_PARISC_DIR32
 1

	)

2065 
	#R_PARISC_DIR21L
 2

	)

2066 
	#R_PARISC_DIR17R
 3

	)

2067 
	#R_PARISC_DIR17F
 4

	)

2068 
	#R_PARISC_DIR14R
 6

	)

2069 
	#R_PARISC_PCREL32
 9

	)

2070 
	#R_PARISC_PCREL21L
 10

	)

2071 
	#R_PARISC_PCREL17R
 11

	)

2072 
	#R_PARISC_PCREL17F
 12

	)

2073 
	#R_PARISC_PCREL14R
 14

	)

2074 
	#R_PARISC_DPREL21L
 18

	)

2075 
	#R_PARISC_DPREL14R
 22

	)

2076 
	#R_PARISC_GPREL21L
 26

	)

2077 
	#R_PARISC_GPREL14R
 30

	)

2078 
	#R_PARISC_LTOFF21L
 34

	)

2079 
	#R_PARISC_LTOFF14R
 38

	)

2080 
	#R_PARISC_SECREL32
 41

	)

2081 
	#R_PARISC_SEGBASE
 48

	)

2082 
	#R_PARISC_SEGREL32
 49

	)

2083 
	#R_PARISC_PLTOFF21L
 50

	)

2084 
	#R_PARISC_PLTOFF14R
 54

	)

2085 
	#R_PARISC_LTOFF_FPTR32
 57

	)

2086 
	#R_PARISC_LTOFF_FPTR21L
 58

	)

2087 
	#R_PARISC_LTOFF_FPTR14R
 62

	)

2088 
	#R_PARISC_FPTR64
 64

	)

2089 
	#R_PARISC_PLABEL32
 65

	)

2090 
	#R_PARISC_PLABEL21L
 66

	)

2091 
	#R_PARISC_PLABEL14R
 70

	)

2092 
	#R_PARISC_PCREL64
 72

	)

2093 
	#R_PARISC_PCREL22F
 74

	)

2094 
	#R_PARISC_PCREL14WR
 75

	)

2095 
	#R_PARISC_PCREL14DR
 76

	)

2096 
	#R_PARISC_PCREL16F
 77

	)

2097 
	#R_PARISC_PCREL16WF
 78

	)

2098 
	#R_PARISC_PCREL16DF
 79

	)

2099 
	#R_PARISC_DIR64
 80

	)

2100 
	#R_PARISC_DIR14WR
 83

	)

2101 
	#R_PARISC_DIR14DR
 84

	)

2102 
	#R_PARISC_DIR16F
 85

	)

2103 
	#R_PARISC_DIR16WF
 86

	)

2104 
	#R_PARISC_DIR16DF
 87

	)

2105 
	#R_PARISC_GPREL64
 88

	)

2106 
	#R_PARISC_GPREL14WR
 91

	)

2107 
	#R_PARISC_GPREL14DR
 92

	)

2108 
	#R_PARISC_GPREL16F
 93

	)

2109 
	#R_PARISC_GPREL16WF
 94

	)

2110 
	#R_PARISC_GPREL16DF
 95

	)

2111 
	#R_PARISC_LTOFF64
 96

	)

2112 
	#R_PARISC_LTOFF14WR
 99

	)

2113 
	#R_PARISC_LTOFF14DR
 100

	)

2114 
	#R_PARISC_LTOFF16F
 101

	)

2115 
	#R_PARISC_LTOFF16WF
 102

	)

2116 
	#R_PARISC_LTOFF16DF
 103

	)

2117 
	#R_PARISC_SECREL64
 104

	)

2118 
	#R_PARISC_SEGREL64
 112

	)

2119 
	#R_PARISC_PLTOFF14WR
 115

	)

2120 
	#R_PARISC_PLTOFF14DR
 116

	)

2121 
	#R_PARISC_PLTOFF16F
 117

	)

2122 
	#R_PARISC_PLTOFF16WF
 118

	)

2123 
	#R_PARISC_PLTOFF16DF
 119

	)

2124 
	#R_PARISC_LTOFF_FPTR64
 120

	)

2125 
	#R_PARISC_LTOFF_FPTR14WR
 123

	)

2126 
	#R_PARISC_LTOFF_FPTR14DR
 124

	)

2127 
	#R_PARISC_LTOFF_FPTR16F
 125

	)

2128 
	#R_PARISC_LTOFF_FPTR16WF
 126

	)

2129 
	#R_PARISC_LTOFF_FPTR16DF
 127

	)

2130 
	#R_PARISC_LORESERVE
 128

	)

2131 
	#R_PARISC_COPY
 128

	)

2132 
	#R_PARISC_IPLT
 129

	)

2133 
	#R_PARISC_EPLT
 130

	)

2134 
	#R_PARISC_TPREL32
 153

	)

2135 
	#R_PARISC_TPREL21L
 154

	)

2136 
	#R_PARISC_TPREL14R
 158

	)

2137 
	#R_PARISC_LTOFF_TP21L
 162

	)

2138 
	#R_PARISC_LTOFF_TP14R
 166

	)

2139 
	#R_PARISC_LTOFF_TP14F
 167

	)

2140 
	#R_PARISC_TPREL64
 216

	)

2141 
	#R_PARISC_TPREL14WR
 219

	)

2142 
	#R_PARISC_TPREL14DR
 220

	)

2143 
	#R_PARISC_TPREL16F
 221

	)

2144 
	#R_PARISC_TPREL16WF
 222

	)

2145 
	#R_PARISC_TPREL16DF
 223

	)

2146 
	#R_PARISC_LTOFF_TP64
 224

	)

2147 
	#R_PARISC_LTOFF_TP14WR
 227

	)

2148 
	#R_PARISC_LTOFF_TP14DR
 228

	)

2149 
	#R_PARISC_LTOFF_TP16F
 229

	)

2150 
	#R_PARISC_LTOFF_TP16WF
 230

	)

2151 
	#R_PARISC_LTOFF_TP16DF
 231

	)

2152 
	#R_PARISC_GNU_VTENTRY
 232

	)

2153 
	#R_PARISC_GNU_VTINHERIT
 233

	)

2154 
	#R_PARISC_TLS_GD21L
 234

	)

2155 
	#R_PARISC_TLS_GD14R
 235

	)

2156 
	#R_PARISC_TLS_GDCALL
 236

	)

2157 
	#R_PARISC_TLS_LDM21L
 237

	)

2158 
	#R_PARISC_TLS_LDM14R
 238

	)

2159 
	#R_PARISC_TLS_LDMCALL
 239

	)

2160 
	#R_PARISC_TLS_LDO21L
 240

	)

2161 
	#R_PARISC_TLS_LDO14R
 241

	)

2162 
	#R_PARISC_TLS_DTPMOD32
 242

	)

2163 
	#R_PARISC_TLS_DTPMOD64
 243

	)

2164 
	#R_PARISC_TLS_DTPOFF32
 244

	)

2165 
	#R_PARISC_TLS_DTPOFF64
 245

	)

2166 
	#R_PARISC_TLS_LE21L
 
R_PARISC_TPREL21L


	)

2167 
	#R_PARISC_TLS_LE14R
 
R_PARISC_TPREL14R


	)

2168 
	#R_PARISC_TLS_IE21L
 
R_PARISC_LTOFF_TP21L


	)

2169 
	#R_PARISC_TLS_IE14R
 
R_PARISC_LTOFF_TP14R


	)

2170 
	#R_PARISC_TLS_TPREL32
 
R_PARISC_TPREL32


	)

2171 
	#R_PARISC_TLS_TPREL64
 
R_PARISC_TPREL64


	)

2172 
	#R_PARISC_HIRESERVE
 255

	)

2176 
	#PT_HP_TLS
 (
PT_LOOS
 + 0x0)

	)

2177 
	#PT_HP_CORE_NONE
 (
PT_LOOS
 + 0x1)

	)

2178 
	#PT_HP_CORE_VERSION
 (
PT_LOOS
 + 0x2)

	)

2179 
	#PT_HP_CORE_KERNEL
 (
PT_LOOS
 + 0x3)

	)

2180 
	#PT_HP_CORE_COMM
 (
PT_LOOS
 + 0x4)

	)

2181 
	#PT_HP_CORE_PROC
 (
PT_LOOS
 + 0x5)

	)

2182 
	#PT_HP_CORE_LOADABLE
 (
PT_LOOS
 + 0x6)

	)

2183 
	#PT_HP_CORE_STACK
 (
PT_LOOS
 + 0x7)

	)

2184 
	#PT_HP_CORE_SHM
 (
PT_LOOS
 + 0x8)

	)

2185 
	#PT_HP_CORE_MMF
 (
PT_LOOS
 + 0x9)

	)

2186 
	#PT_HP_PARALLEL
 (
PT_LOOS
 + 0x10)

	)

2187 
	#PT_HP_FASTBIND
 (
PT_LOOS
 + 0x11)

	)

2188 
	#PT_HP_OPT_ANNOT
 (
PT_LOOS
 + 0x12)

	)

2189 
	#PT_HP_HSL_ANNOT
 (
PT_LOOS
 + 0x13)

	)

2190 
	#PT_HP_STACK
 (
PT_LOOS
 + 0x14)

	)

2192 
	#PT_PARISC_ARCHEXT
 0x70000000

	)

2193 
	#PT_PARISC_UNWIND
 0x70000001

	)

2197 
	#PF_PARISC_SBP
 0x08000000

	)

2199 
	#PF_HP_PAGE_SIZE
 0x00100000

	)

2200 
	#PF_HP_FAR_SHARED
 0x00200000

	)

2201 
	#PF_HP_NEAR_SHARED
 0x00400000

	)

2202 
	#PF_HP_CODE
 0x01000000

	)

2203 
	#PF_HP_MODIFY
 0x02000000

	)

2204 
	#PF_HP_LAZYSWAP
 0x04000000

	)

2205 
	#PF_HP_SBP
 0x08000000

	)

2212 
	#EF_ALPHA_32BIT
 1

	)

2213 
	#EF_ALPHA_CANRELAX
 2

	)

2218 
	#SHT_ALPHA_DEBUG
 0x70000001

	)

2219 
	#SHT_ALPHA_REGINFO
 0x70000002

	)

2223 
	#SHF_ALPHA_GPREL
 0x10000000

	)

2226 
	#STO_ALPHA_NOPV
 0x80

	)

2227 
	#STO_ALPHA_STD_GPLOAD
 0x88

	)

2231 
	#R_ALPHA_NONE
 0

	)

2232 
	#R_ALPHA_REFLONG
 1

	)

2233 
	#R_ALPHA_REFQUAD
 2

	)

2234 
	#R_ALPHA_GPREL32
 3

	)

2235 
	#R_ALPHA_LITERAL
 4

	)

2236 
	#R_ALPHA_LITUSE
 5

	)

2237 
	#R_ALPHA_GPDISP
 6

	)

2238 
	#R_ALPHA_BRADDR
 7

	)

2239 
	#R_ALPHA_HINT
 8

	)

2240 
	#R_ALPHA_SREL16
 9

	)

2241 
	#R_ALPHA_SREL32
 10

	)

2242 
	#R_ALPHA_SREL64
 11

	)

2243 
	#R_ALPHA_GPRELHIGH
 17

	)

2244 
	#R_ALPHA_GPRELLOW
 18

	)

2245 
	#R_ALPHA_GPREL16
 19

	)

2246 
	#R_ALPHA_COPY
 24

	)

2247 
	#R_ALPHA_GLOB_DAT
 25

	)

2248 
	#R_ALPHA_JMP_SLOT
 26

	)

2249 
	#R_ALPHA_RELATIVE
 27

	)

2250 
	#R_ALPHA_TLS_GD_HI
 28

	)

2251 
	#R_ALPHA_TLSGD
 29

	)

2252 
	#R_ALPHA_TLS_LDM
 30

	)

2253 
	#R_ALPHA_DTPMOD64
 31

	)

2254 
	#R_ALPHA_GOTDTPREL
 32

	)

2255 
	#R_ALPHA_DTPREL64
 33

	)

2256 
	#R_ALPHA_DTPRELHI
 34

	)

2257 
	#R_ALPHA_DTPRELLO
 35

	)

2258 
	#R_ALPHA_DTPREL16
 36

	)

2259 
	#R_ALPHA_GOTTPREL
 37

	)

2260 
	#R_ALPHA_TPREL64
 38

	)

2261 
	#R_ALPHA_TPRELHI
 39

	)

2262 
	#R_ALPHA_TPRELLO
 40

	)

2263 
	#R_ALPHA_TPREL16
 41

	)

2265 
	#R_ALPHA_NUM
 46

	)

2268 
	#LITUSE_ALPHA_ADDR
 0

	)

2269 
	#LITUSE_ALPHA_BASE
 1

	)

2270 
	#LITUSE_ALPHA_BYTOFF
 2

	)

2271 
	#LITUSE_ALPHA_JSR
 3

	)

2272 
	#LITUSE_ALPHA_TLS_GD
 4

	)

2273 
	#LITUSE_ALPHA_TLS_LDM
 5

	)

2276 
	#DT_ALPHA_PLTRO
 (
DT_LOPROC
 + 0)

	)

2277 
	#DT_ALPHA_NUM
 1

	)

2282 
	#EF_PPC_EMB
 0x80000000

	)

2285 
	#EF_PPC_RELOCATABLE
 0x00010000

	)

2286 
	#EF_PPC_RELOCATABLE_LIB
 0x00008000

	)

2290 
	#R_PPC_NONE
 0

	)

2291 
	#R_PPC_ADDR32
 1

	)

2292 
	#R_PPC_ADDR24
 2

	)

2293 
	#R_PPC_ADDR16
 3

	)

2294 
	#R_PPC_ADDR16_LO
 4

	)

2295 
	#R_PPC_ADDR16_HI
 5

	)

2296 
	#R_PPC_ADDR16_HA
 6

	)

2297 
	#R_PPC_ADDR14
 7

	)

2298 
	#R_PPC_ADDR14_BRTAKEN
 8

	)

2299 
	#R_PPC_ADDR14_BRNTAKEN
 9

	)

2300 
	#R_PPC_REL24
 10

	)

2301 
	#R_PPC_REL14
 11

	)

2302 
	#R_PPC_REL14_BRTAKEN
 12

	)

2303 
	#R_PPC_REL14_BRNTAKEN
 13

	)

2304 
	#R_PPC_GOT16
 14

	)

2305 
	#R_PPC_GOT16_LO
 15

	)

2306 
	#R_PPC_GOT16_HI
 16

	)

2307 
	#R_PPC_GOT16_HA
 17

	)

2308 
	#R_PPC_PLTREL24
 18

	)

2309 
	#R_PPC_COPY
 19

	)

2310 
	#R_PPC_GLOB_DAT
 20

	)

2311 
	#R_PPC_JMP_SLOT
 21

	)

2312 
	#R_PPC_RELATIVE
 22

	)

2313 
	#R_PPC_LOCAL24PC
 23

	)

2314 
	#R_PPC_UADDR32
 24

	)

2315 
	#R_PPC_UADDR16
 25

	)

2316 
	#R_PPC_REL32
 26

	)

2317 
	#R_PPC_PLT32
 27

	)

2318 
	#R_PPC_PLTREL32
 28

	)

2319 
	#R_PPC_PLT16_LO
 29

	)

2320 
	#R_PPC_PLT16_HI
 30

	)

2321 
	#R_PPC_PLT16_HA
 31

	)

2322 
	#R_PPC_SDAREL16
 32

	)

2323 
	#R_PPC_SECTOFF
 33

	)

2324 
	#R_PPC_SECTOFF_LO
 34

	)

2325 
	#R_PPC_SECTOFF_HI
 35

	)

2326 
	#R_PPC_SECTOFF_HA
 36

	)

2329 
	#R_PPC_TLS
 67

	)

2330 
	#R_PPC_DTPMOD32
 68

	)

2331 
	#R_PPC_TPREL16
 69

	)

2332 
	#R_PPC_TPREL16_LO
 70

	)

2333 
	#R_PPC_TPREL16_HI
 71

	)

2334 
	#R_PPC_TPREL16_HA
 72

	)

2335 
	#R_PPC_TPREL32
 73

	)

2336 
	#R_PPC_DTPREL16
 74

	)

2337 
	#R_PPC_DTPREL16_LO
 75

	)

2338 
	#R_PPC_DTPREL16_HI
 76

	)

2339 
	#R_PPC_DTPREL16_HA
 77

	)

2340 
	#R_PPC_DTPREL32
 78

	)

2341 
	#R_PPC_GOT_TLSGD16
 79

	)

2342 
	#R_PPC_GOT_TLSGD16_LO
 80

	)

2343 
	#R_PPC_GOT_TLSGD16_HI
 81

	)

2344 
	#R_PPC_GOT_TLSGD16_HA
 82

	)

2345 
	#R_PPC_GOT_TLSLD16
 83

	)

2346 
	#R_PPC_GOT_TLSLD16_LO
 84

	)

2347 
	#R_PPC_GOT_TLSLD16_HI
 85

	)

2348 
	#R_PPC_GOT_TLSLD16_HA
 86

	)

2349 
	#R_PPC_GOT_TPREL16
 87

	)

2350 
	#R_PPC_GOT_TPREL16_LO
 88

	)

2351 
	#R_PPC_GOT_TPREL16_HI
 89

	)

2352 
	#R_PPC_GOT_TPREL16_HA
 90

	)

2353 
	#R_PPC_GOT_DTPREL16
 91

	)

2354 
	#R_PPC_GOT_DTPREL16_LO
 92

	)

2355 
	#R_PPC_GOT_DTPREL16_HI
 93

	)

2356 
	#R_PPC_GOT_DTPREL16_HA
 94

	)

2357 
	#R_PPC_TLSGD
 95

	)

2358 
	#R_PPC_TLSLD
 96

	)

2362 
	#R_PPC_EMB_NADDR32
 101

	)

2363 
	#R_PPC_EMB_NADDR16
 102

	)

2364 
	#R_PPC_EMB_NADDR16_LO
 103

	)

2365 
	#R_PPC_EMB_NADDR16_HI
 104

	)

2366 
	#R_PPC_EMB_NADDR16_HA
 105

	)

2367 
	#R_PPC_EMB_SDAI16
 106

	)

2368 
	#R_PPC_EMB_SDA2I16
 107

	)

2369 
	#R_PPC_EMB_SDA2REL
 108

	)

2370 
	#R_PPC_EMB_SDA21
 109

	)

2371 
	#R_PPC_EMB_MRKREF
 110

	)

2372 
	#R_PPC_EMB_RELSEC16
 111

	)

2373 
	#R_PPC_EMB_RELST_LO
 112

	)

2374 
	#R_PPC_EMB_RELST_HI
 113

	)

2375 
	#R_PPC_EMB_RELST_HA
 114

	)

2376 
	#R_PPC_EMB_BIT_FLD
 115

	)

2377 
	#R_PPC_EMB_RELSDA
 116

	)

2380 
	#R_PPC_DIAB_SDA21_LO
 180

	)

2381 
	#R_PPC_DIAB_SDA21_HI
 181

	)

2382 
	#R_PPC_DIAB_SDA21_HA
 182

	)

2383 
	#R_PPC_DIAB_RELSDA_LO
 183

	)

2384 
	#R_PPC_DIAB_RELSDA_HI
 184

	)

2385 
	#R_PPC_DIAB_RELSDA_HA
 185

	)

2388 
	#R_PPC_IRELATIVE
 248

	)

2391 
	#R_PPC_REL16
 249

	)

2392 
	#R_PPC_REL16_LO
 250

	)

2393 
	#R_PPC_REL16_HI
 251

	)

2394 
	#R_PPC_REL16_HA
 252

	)

2398 
	#R_PPC_TOC16
 255

	)

2401 
	#DT_PPC_GOT
 (
DT_LOPROC
 + 0)

	)

2402 
	#DT_PPC_OPT
 (
DT_LOPROC
 + 1)

	)

2403 
	#DT_PPC_NUM
 2

	)

2406 
	#PPC_OPT_TLS
 1

	)

2409 
	#R_PPC64_NONE
 
R_PPC_NONE


	)

2410 
	#R_PPC64_ADDR32
 
R_PPC_ADDR32


	)

2411 
	#R_PPC64_ADDR24
 
R_PPC_ADDR24


	)

2412 
	#R_PPC64_ADDR16
 
R_PPC_ADDR16


	)

2413 
	#R_PPC64_ADDR16_LO
 
R_PPC_ADDR16_LO


	)

2414 
	#R_PPC64_ADDR16_HI
 
R_PPC_ADDR16_HI


	)

2415 
	#R_PPC64_ADDR16_HA
 
R_PPC_ADDR16_HA


	)

2416 
	#R_PPC64_ADDR14
 
R_PPC_ADDR14


	)

2417 
	#R_PPC64_ADDR14_BRTAKEN
 
R_PPC_ADDR14_BRTAKEN


	)

2418 
	#R_PPC64_ADDR14_BRNTAKEN
 
R_PPC_ADDR14_BRNTAKEN


	)

2419 
	#R_PPC64_REL24
 
R_PPC_REL24


	)

2420 
	#R_PPC64_REL14
 
R_PPC_REL14


	)

2421 
	#R_PPC64_REL14_BRTAKEN
 
R_PPC_REL14_BRTAKEN


	)

2422 
	#R_PPC64_REL14_BRNTAKEN
 
R_PPC_REL14_BRNTAKEN


	)

2423 
	#R_PPC64_GOT16
 
R_PPC_GOT16


	)

2424 
	#R_PPC64_GOT16_LO
 
R_PPC_GOT16_LO


	)

2425 
	#R_PPC64_GOT16_HI
 
R_PPC_GOT16_HI


	)

2426 
	#R_PPC64_GOT16_HA
 
R_PPC_GOT16_HA


	)

2428 
	#R_PPC64_COPY
 
R_PPC_COPY


	)

2429 
	#R_PPC64_GLOB_DAT
 
R_PPC_GLOB_DAT


	)

2430 
	#R_PPC64_JMP_SLOT
 
R_PPC_JMP_SLOT


	)

2431 
	#R_PPC64_RELATIVE
 
R_PPC_RELATIVE


	)

2433 
	#R_PPC64_UADDR32
 
R_PPC_UADDR32


	)

2434 
	#R_PPC64_UADDR16
 
R_PPC_UADDR16


	)

2435 
	#R_PPC64_REL32
 
R_PPC_REL32


	)

2436 
	#R_PPC64_PLT32
 
R_PPC_PLT32


	)

2437 
	#R_PPC64_PLTREL32
 
R_PPC_PLTREL32


	)

2438 
	#R_PPC64_PLT16_LO
 
R_PPC_PLT16_LO


	)

2439 
	#R_PPC64_PLT16_HI
 
R_PPC_PLT16_HI


	)

2440 
	#R_PPC64_PLT16_HA
 
R_PPC_PLT16_HA


	)

2442 
	#R_PPC64_SECTOFF
 
R_PPC_SECTOFF


	)

2443 
	#R_PPC64_SECTOFF_LO
 
R_PPC_SECTOFF_LO


	)

2444 
	#R_PPC64_SECTOFF_HI
 
R_PPC_SECTOFF_HI


	)

2445 
	#R_PPC64_SECTOFF_HA
 
R_PPC_SECTOFF_HA


	)

2446 
	#R_PPC64_ADDR30
 37

	)

2447 
	#R_PPC64_ADDR64
 38

	)

2448 
	#R_PPC64_ADDR16_HIGHER
 39

	)

2449 
	#R_PPC64_ADDR16_HIGHERA
 40

	)

2450 
	#R_PPC64_ADDR16_HIGHEST
 41

	)

2451 
	#R_PPC64_ADDR16_HIGHESTA
 42

	)

2452 
	#R_PPC64_UADDR64
 43

	)

2453 
	#R_PPC64_REL64
 44

	)

2454 
	#R_PPC64_PLT64
 45

	)

2455 
	#R_PPC64_PLTREL64
 46

	)

2456 
	#R_PPC64_TOC16
 47

	)

2457 
	#R_PPC64_TOC16_LO
 48

	)

2458 
	#R_PPC64_TOC16_HI
 49

	)

2459 
	#R_PPC64_TOC16_HA
 50

	)

2460 
	#R_PPC64_TOC
 51

	)

2461 
	#R_PPC64_PLTGOT16
 52

	)

2462 
	#R_PPC64_PLTGOT16_LO
 53

	)

2463 
	#R_PPC64_PLTGOT16_HI
 54

	)

2464 
	#R_PPC64_PLTGOT16_HA
 55

	)

2466 
	#R_PPC64_ADDR16_DS
 56

	)

2467 
	#R_PPC64_ADDR16_LO_DS
 57

	)

2468 
	#R_PPC64_GOT16_DS
 58

	)

2469 
	#R_PPC64_GOT16_LO_DS
 59

	)

2470 
	#R_PPC64_PLT16_LO_DS
 60

	)

2471 
	#R_PPC64_SECTOFF_DS
 61

	)

2472 
	#R_PPC64_SECTOFF_LO_DS
 62

	)

2473 
	#R_PPC64_TOC16_DS
 63

	)

2474 
	#R_PPC64_TOC16_LO_DS
 64

	)

2475 
	#R_PPC64_PLTGOT16_DS
 65

	)

2476 
	#R_PPC64_PLTGOT16_LO_DS
 66

	)

2479 
	#R_PPC64_TLS
 67

	)

2480 
	#R_PPC64_DTPMOD64
 68

	)

2481 
	#R_PPC64_TPREL16
 69

	)

2482 
	#R_PPC64_TPREL16_LO
 70

	)

2483 
	#R_PPC64_TPREL16_HI
 71

	)

2484 
	#R_PPC64_TPREL16_HA
 72

	)

2485 
	#R_PPC64_TPREL64
 73

	)

2486 
	#R_PPC64_DTPREL16
 74

	)

2487 
	#R_PPC64_DTPREL16_LO
 75

	)

2488 
	#R_PPC64_DTPREL16_HI
 76

	)

2489 
	#R_PPC64_DTPREL16_HA
 77

	)

2490 
	#R_PPC64_DTPREL64
 78

	)

2491 
	#R_PPC64_GOT_TLSGD16
 79

	)

2492 
	#R_PPC64_GOT_TLSGD16_LO
 80

	)

2493 
	#R_PPC64_GOT_TLSGD16_HI
 81

	)

2494 
	#R_PPC64_GOT_TLSGD16_HA
 82

	)

2495 
	#R_PPC64_GOT_TLSLD16
 83

	)

2496 
	#R_PPC64_GOT_TLSLD16_LO
 84

	)

2497 
	#R_PPC64_GOT_TLSLD16_HI
 85

	)

2498 
	#R_PPC64_GOT_TLSLD16_HA
 86

	)

2499 
	#R_PPC64_GOT_TPREL16_DS
 87

	)

2500 
	#R_PPC64_GOT_TPREL16_LO_DS
 88

	)

2501 
	#R_PPC64_GOT_TPREL16_HI
 89

	)

2502 
	#R_PPC64_GOT_TPREL16_HA
 90

	)

2503 
	#R_PPC64_GOT_DTPREL16_DS
 91

	)

2504 
	#R_PPC64_GOT_DTPREL16_LO_DS
 92

	)

2505 
	#R_PPC64_GOT_DTPREL16_HI
 93

	)

2506 
	#R_PPC64_GOT_DTPREL16_HA
 94

	)

2507 
	#R_PPC64_TPREL16_DS
 95

	)

2508 
	#R_PPC64_TPREL16_LO_DS
 96

	)

2509 
	#R_PPC64_TPREL16_HIGHER
 97

	)

2510 
	#R_PPC64_TPREL16_HIGHERA
 98

	)

2511 
	#R_PPC64_TPREL16_HIGHEST
 99

	)

2512 
	#R_PPC64_TPREL16_HIGHESTA
 100

	)

2513 
	#R_PPC64_DTPREL16_DS
 101

	)

2514 
	#R_PPC64_DTPREL16_LO_DS
 102

	)

2515 
	#R_PPC64_DTPREL16_HIGHER
 103

	)

2516 
	#R_PPC64_DTPREL16_HIGHERA
 104

	)

2517 
	#R_PPC64_DTPREL16_HIGHEST
 105

	)

2518 
	#R_PPC64_DTPREL16_HIGHESTA
 106

	)

2519 
	#R_PPC64_TLSGD
 107

	)

2520 
	#R_PPC64_TLSLD
 108

	)

2521 
	#R_PPC64_TOCSAVE
 109

	)

2524 
	#R_PPC64_ADDR16_HIGH
 110

	)

2525 
	#R_PPC64_ADDR16_HIGHA
 111

	)

2526 
	#R_PPC64_TPREL16_HIGH
 112

	)

2527 
	#R_PPC64_TPREL16_HIGHA
 113

	)

2528 
	#R_PPC64_DTPREL16_HIGH
 114

	)

2529 
	#R_PPC64_DTPREL16_HIGHA
 115

	)

2532 
	#R_PPC64_JMP_IREL
 247

	)

2533 
	#R_PPC64_IRELATIVE
 248

	)

2534 
	#R_PPC64_REL16
 249

	)

2535 
	#R_PPC64_REL16_LO
 250

	)

2536 
	#R_PPC64_REL16_HI
 251

	)

2537 
	#R_PPC64_REL16_HA
 252

	)

2543 
	#EF_PPC64_ABI
 3

	)

2546 
	#DT_PPC64_GLINK
 (
DT_LOPROC
 + 0)

	)

2547 
	#DT_PPC64_OPD
 (
DT_LOPROC
 + 1)

	)

2548 
	#DT_PPC64_OPDSZ
 (
DT_LOPROC
 + 2)

	)

2549 
	#DT_PPC64_OPT
 (
DT_LOPROC
 + 3)

	)

2550 
	#DT_PPC64_NUM
 4

	)

2553 
	#PPC64_OPT_TLS
 1

	)

2554 
	#PPC64_OPT_MULTI_TOC
 2

	)

2555 
	#PPC64_OPT_LOCALENTRY
 4

	)

2558 
	#STO_PPC64_LOCAL_BIT
 5

	)

2559 
	#STO_PPC64_LOCAL_MASK
 (7 << 
STO_PPC64_LOCAL_BIT
)

	)

2560 
	#PPC64_LOCAL_ENTRY_OFFSET
(
Ÿhî
) \

2561 (((1 << (((
Ÿhî
Ë& 
STO_PPC64_LOCAL_MASK
Ë>> 
STO_PPC64_LOCAL_BIT
)Ë>> 2Ë<< 2)

	)

2567 
	#EF_ARM_RELEXEC
 0x01

	)

2568 
	#EF_ARM_HASENTRY
 0x02

	)

2569 
	#EF_ARM_INTERWORK
 0x04

	)

2570 
	#EF_ARM_APCS_26
 0x08

	)

2571 
	#EF_ARM_APCS_FLOAT
 0x10

	)

2572 
	#EF_ARM_PIC
 0x20

	)

2573 
	#EF_ARM_ALIGN8
 0x40

	)

2574 
	#EF_ARM_NEW_ABI
 0x80

	)

2575 
	#EF_ARM_OLD_ABI
 0x100

	)

2576 
	#EF_ARM_SOFT_FLOAT
 0x200

	)

2577 
	#EF_ARM_VFP_FLOAT
 0x400

	)

2578 
	#EF_ARM_MAVERICK_FLOAT
 0x800

	)

2580 
	#EF_ARM_ABI_FLOAT_SOFT
 0x200

	)

2581 
	#EF_ARM_ABI_FLOAT_HARD
 0x400

	)

2586 
	#EF_ARM_SYMSARESORTED
 0x04

	)

2587 
	#EF_ARM_DYNSYMSUSESEGIDX
 0x08

	)

2588 
	#EF_ARM_MAPSYMSFIRST
 0x10

	)

2589 
	#EF_ARM_EABIMASK
 0XFF000000

	)

2592 
	#EF_ARM_BE8
 0x00800000

	)

2593 
	#EF_ARM_LE8
 0x00400000

	)

2595 
	#EF_ARM_EABI_VERSION
(
Êags
Ë((ÊagsË& 
EF_ARM_EABIMASK
)

	)

2596 
	#EF_ARM_EABI_UNKNOWN
 0x00000000

	)

2597 
	#EF_ARM_EABI_VER1
 0x01000000

	)

2598 
	#EF_ARM_EABI_VER2
 0x02000000

	)

2599 
	#EF_ARM_EABI_VER3
 0x03000000

	)

2600 
	#EF_ARM_EABI_VER4
 0x04000000

	)

2601 
	#EF_ARM_EABI_VER5
 0x05000000

	)

2604 
	#STT_ARM_TFUNC
 
STT_LOPROC


	)

2605 
	#STT_ARM_16BIT
 
STT_HIPROC


	)

2608 
	#SHF_ARM_ENTRYSECT
 0x10000000

	)

2609 
	#SHF_ARM_COMDEF
 0x80000000

	)

2613 
	#PF_ARM_SB
 0x10000000

	)

2615 
	#PF_ARM_PI
 0x20000000

	)

2616 
	#PF_ARM_ABS
 0x40000000

	)

2619 
	#PT_ARM_EXIDX
 (
PT_LOPROC
 + 1Ë

	)

2622 
	#SHT_ARM_EXIDX
 (
SHT_LOPROC
 + 1Ë

	)

2623 
	#SHT_ARM_PREEMPTMAP
 (
SHT_LOPROC
 + 2Ë

	)

2624 
	#SHT_ARM_ATTRIBUTES
 (
SHT_LOPROC
 + 3Ë

	)

2629 
	#R_AARCH64_NONE
 0

	)

2632 
	#R_AARCH64_P32_ABS32
 1

	)

2633 
	#R_AARCH64_P32_COPY
 180

	)

2634 
	#R_AARCH64_P32_GLOB_DAT
 181

	)

2635 
	#R_AARCH64_P32_JUMP_SLOT
 182

	)

2636 
	#R_AARCH64_P32_RELATIVE
 183

	)

2637 
	#R_AARCH64_P32_TLS_DTPMOD
 184

	)

2638 
	#R_AARCH64_P32_TLS_DTPREL
 185

	)

2639 
	#R_AARCH64_P32_TLS_TPREL
 186

	)

2640 
	#R_AARCH64_P32_TLSDESC
 187

	)

2641 
	#R_AARCH64_P32_IRELATIVE
 188

	)

2644 
	#R_AARCH64_ABS64
 257

	)

2645 
	#R_AARCH64_ABS32
 258

	)

2646 
	#R_AARCH64_ABS16
 259

	)

2647 
	#R_AARCH64_PREL64
 260

	)

2648 
	#R_AARCH64_PREL32
 261

	)

2649 
	#R_AARCH64_PREL16
 262

	)

2650 
	#R_AARCH64_MOVW_UABS_G0
 263

	)

2651 
	#R_AARCH64_MOVW_UABS_G0_NC
 264

	)

2652 
	#R_AARCH64_MOVW_UABS_G1
 265

	)

2653 
	#R_AARCH64_MOVW_UABS_G1_NC
 266

	)

2654 
	#R_AARCH64_MOVW_UABS_G2
 267

	)

2655 
	#R_AARCH64_MOVW_UABS_G2_NC
 268

	)

2656 
	#R_AARCH64_MOVW_UABS_G3
 269

	)

2657 
	#R_AARCH64_MOVW_SABS_G0
 270

	)

2658 
	#R_AARCH64_MOVW_SABS_G1
 271

	)

2659 
	#R_AARCH64_MOVW_SABS_G2
 272

	)

2660 
	#R_AARCH64_LD_PREL_LO19
 273

	)

2661 
	#R_AARCH64_ADR_PREL_LO21
 274

	)

2662 
	#R_AARCH64_ADR_PREL_PG_HI21
 275

	)

2663 
	#R_AARCH64_ADR_PREL_PG_HI21_NC
 276

	)

2664 
	#R_AARCH64_ADD_ABS_LO12_NC
 277

	)

2665 
	#R_AARCH64_LDST8_ABS_LO12_NC
 278

	)

2666 
	#R_AARCH64_TSTBR14
 279

	)

2667 
	#R_AARCH64_CONDBR19
 280

	)

2668 
	#R_AARCH64_JUMP26
 282

	)

2669 
	#R_AARCH64_CALL26
 283

	)

2670 
	#R_AARCH64_LDST16_ABS_LO12_NC
 284

	)

2671 
	#R_AARCH64_LDST32_ABS_LO12_NC
 285

	)

2672 
	#R_AARCH64_LDST64_ABS_LO12_NC
 286

	)

2673 
	#R_AARCH64_MOVW_PREL_G0
 287

	)

2674 
	#R_AARCH64_MOVW_PREL_G0_NC
 288

	)

2675 
	#R_AARCH64_MOVW_PREL_G1
 289

	)

2676 
	#R_AARCH64_MOVW_PREL_G1_NC
 290

	)

2677 
	#R_AARCH64_MOVW_PREL_G2
 291

	)

2678 
	#R_AARCH64_MOVW_PREL_G2_NC
 292

	)

2679 
	#R_AARCH64_MOVW_PREL_G3
 293

	)

2680 
	#R_AARCH64_LDST128_ABS_LO12_NC
 299

	)

2681 
	#R_AARCH64_MOVW_GOTOFF_G0
 300

	)

2682 
	#R_AARCH64_MOVW_GOTOFF_G0_NC
 301

	)

2683 
	#R_AARCH64_MOVW_GOTOFF_G1
 302

	)

2684 
	#R_AARCH64_MOVW_GOTOFF_G1_NC
 303

	)

2685 
	#R_AARCH64_MOVW_GOTOFF_G2
 304

	)

2686 
	#R_AARCH64_MOVW_GOTOFF_G2_NC
 305

	)

2687 
	#R_AARCH64_MOVW_GOTOFF_G3
 306

	)

2688 
	#R_AARCH64_GOTREL64
 307

	)

2689 
	#R_AARCH64_GOTREL32
 308

	)

2690 
	#R_AARCH64_GOT_LD_PREL19
 309

	)

2691 
	#R_AARCH64_LD64_GOTOFF_LO15
 310

	)

2692 
	#R_AARCH64_ADR_GOT_PAGE
 311

	)

2693 
	#R_AARCH64_LD64_GOT_LO12_NC
 312

	)

2694 
	#R_AARCH64_LD64_GOTPAGE_LO15
 313

	)

2695 
	#R_AARCH64_TLSGD_ADR_PREL21
 512

	)

2696 
	#R_AARCH64_TLSGD_ADR_PAGE21
 513

	)

2697 
	#R_AARCH64_TLSGD_ADD_LO12_NC
 514

	)

2698 
	#R_AARCH64_TLSGD_MOVW_G1
 515

	)

2699 
	#R_AARCH64_TLSGD_MOVW_G0_NC
 516

	)

2700 
	#R_AARCH64_TLSLD_ADR_PREL21
 517

	)

2701 
	#R_AARCH64_TLSLD_ADR_PAGE21
 518

	)

2702 
	#R_AARCH64_TLSLD_ADD_LO12_NC
 519

	)

2703 
	#R_AARCH64_TLSLD_MOVW_G1
 520

	)

2704 
	#R_AARCH64_TLSLD_MOVW_G0_NC
 521

	)

2705 
	#R_AARCH64_TLSLD_LD_PREL19
 522

	)

2706 
	#R_AARCH64_TLSLD_MOVW_DTPREL_G2
 523

	)

2707 
	#R_AARCH64_TLSLD_MOVW_DTPREL_G1
 524

	)

2708 
	#R_AARCH64_TLSLD_MOVW_DTPREL_G1_NC
 525

	)

2709 
	#R_AARCH64_TLSLD_MOVW_DTPREL_G0
 526

	)

2710 
	#R_AARCH64_TLSLD_MOVW_DTPREL_G0_NC
 527

	)

2711 
	#R_AARCH64_TLSLD_ADD_DTPREL_HI12
 528

	)

2712 
	#R_AARCH64_TLSLD_ADD_DTPREL_LO12
 529

	)

2713 
	#R_AARCH64_TLSLD_ADD_DTPREL_LO12_NC
 530

	)

2714 
	#R_AARCH64_TLSLD_LDST8_DTPREL_LO12
 531

	)

2715 
	#R_AARCH64_TLSLD_LDST8_DTPREL_LO12_NC
 532

	)

2716 
	#R_AARCH64_TLSLD_LDST16_DTPREL_LO12
 533

	)

2717 
	#R_AARCH64_TLSLD_LDST16_DTPREL_LO12_NC
 534

	)

2718 
	#R_AARCH64_TLSLD_LDST32_DTPREL_LO12
 535

	)

2719 
	#R_AARCH64_TLSLD_LDST32_DTPREL_LO12_NC
 536

	)

2720 
	#R_AARCH64_TLSLD_LDST64_DTPREL_LO12
 537

	)

2721 
	#R_AARCH64_TLSLD_LDST64_DTPREL_LO12_NC
 538

	)

2722 
	#R_AARCH64_TLSIE_MOVW_GOTTPREL_G1
 539

	)

2723 
	#R_AARCH64_TLSIE_MOVW_GOTTPREL_G0_NC
 540

	)

2724 
	#R_AARCH64_TLSIE_ADR_GOTTPREL_PAGE21
 541

	)

2725 
	#R_AARCH64_TLSIE_LD64_GOTTPREL_LO12_NC
 542

	)

2726 
	#R_AARCH64_TLSIE_LD_GOTTPREL_PREL19
 543

	)

2727 
	#R_AARCH64_TLSLE_MOVW_TPREL_G2
 544

	)

2728 
	#R_AARCH64_TLSLE_MOVW_TPREL_G1
 545

	)

2729 
	#R_AARCH64_TLSLE_MOVW_TPREL_G1_NC
 546

	)

2730 
	#R_AARCH64_TLSLE_MOVW_TPREL_G0
 547

	)

2731 
	#R_AARCH64_TLSLE_MOVW_TPREL_G0_NC
 548

	)

2732 
	#R_AARCH64_TLSLE_ADD_TPREL_HI12
 549

	)

2733 
	#R_AARCH64_TLSLE_ADD_TPREL_LO12
 550

	)

2734 
	#R_AARCH64_TLSLE_ADD_TPREL_LO12_NC
 551

	)

2735 
	#R_AARCH64_TLSLE_LDST8_TPREL_LO12
 552

	)

2736 
	#R_AARCH64_TLSLE_LDST8_TPREL_LO12_NC
 553

	)

2737 
	#R_AARCH64_TLSLE_LDST16_TPREL_LO12
 554

	)

2738 
	#R_AARCH64_TLSLE_LDST16_TPREL_LO12_NC
 555

	)

2739 
	#R_AARCH64_TLSLE_LDST32_TPREL_LO12
 556

	)

2740 
	#R_AARCH64_TLSLE_LDST32_TPREL_LO12_NC
 557

	)

2741 
	#R_AARCH64_TLSLE_LDST64_TPREL_LO12
 558

	)

2742 
	#R_AARCH64_TLSLE_LDST64_TPREL_LO12_NC
 559

	)

2743 
	#R_AARCH64_TLSDESC_LD_PREL19
 560

	)

2744 
	#R_AARCH64_TLSDESC_ADR_PREL21
 561

	)

2745 
	#R_AARCH64_TLSDESC_ADR_PAGE21
 562

	)

2746 
	#R_AARCH64_TLSDESC_LD64_LO12
 563

	)

2747 
	#R_AARCH64_TLSDESC_ADD_LO12
 564

	)

2748 
	#R_AARCH64_TLSDESC_OFF_G1
 565

	)

2749 
	#R_AARCH64_TLSDESC_OFF_G0_NC
 566

	)

2750 
	#R_AARCH64_TLSDESC_LDR
 567

	)

2751 
	#R_AARCH64_TLSDESC_ADD
 568

	)

2752 
	#R_AARCH64_TLSDESC_CALL
 569

	)

2753 
	#R_AARCH64_TLSLE_LDST128_TPREL_LO12
 570

	)

2754 
	#R_AARCH64_TLSLE_LDST128_TPREL_LO12_NC
 571

	)

2755 
	#R_AARCH64_TLSLD_LDST128_DTPREL_LO12
 572

	)

2756 
	#R_AARCH64_TLSLD_LDST128_DTPREL_LO12_NC
 573

	)

2757 
	#R_AARCH64_COPY
 1024

	)

2758 
	#R_AARCH64_GLOB_DAT
 1025

	)

2759 
	#R_AARCH64_JUMP_SLOT
 1026

	)

2760 
	#R_AARCH64_RELATIVE
 1027

	)

2761 
	#R_AARCH64_TLS_DTPMOD
 1028

	)

2762 
	#R_AARCH64_TLS_DTPREL
 1029

	)

2763 
	#R_AARCH64_TLS_TPREL
 1030

	)

2764 
	#R_AARCH64_TLSDESC
 1031

	)

2765 
	#R_AARCH64_IRELATIVE
 1032

	)

2769 
	#R_ARM_NONE
 0

	)

2770 
	#R_ARM_PC24
 1

	)

2772 
	#R_ARM_ABS32
 2

	)

2773 
	#R_ARM_REL32
 3

	)

2774 
	#R_ARM_PC13
 4

	)

2775 
	#R_ARM_ABS16
 5

	)

2776 
	#R_ARM_ABS12
 6

	)

2777 
	#R_ARM_THM_ABS5
 7

	)

2778 
	#R_ARM_ABS8
 8

	)

2779 
	#R_ARM_SBREL32
 9

	)

2780 
	#R_ARM_THM_PC22
 10

	)

2781 
	#R_ARM_THM_PC8
 11

	)

2783 
	#R_ARM_AMP_VCALL9
 12

	)

2784 
	#R_ARM_SWI24
 13

	)

2785 
	#R_ARM_TLS_DESC
 13

	)

2786 
	#R_ARM_THM_SWI8
 14

	)

2787 
	#R_ARM_XPC25
 15

	)

2788 
	#R_ARM_THM_XPC22
 16

	)

2789 
	#R_ARM_TLS_DTPMOD32
 17

	)

2790 
	#R_ARM_TLS_DTPOFF32
 18

	)

2791 
	#R_ARM_TLS_TPOFF32
 19

	)

2792 
	#R_ARM_COPY
 20

	)

2793 
	#R_ARM_GLOB_DAT
 21

	)

2794 
	#R_ARM_JUMP_SLOT
 22

	)

2795 
	#R_ARM_RELATIVE
 23

	)

2796 
	#R_ARM_GOTOFF
 24

	)

2797 
	#R_ARM_GOTPC
 25

	)

2798 
	#R_ARM_GOT32
 26

	)

2799 
	#R_ARM_PLT32
 27

	)

2800 
	#R_ARM_CALL
 28

	)

2801 
	#R_ARM_JUMP24
 29

	)

2803 
	#R_ARM_THM_JUMP24
 30

	)

2804 
	#R_ARM_BASE_ABS
 31

	)

2805 
	#R_ARM_ALU_PCREL_7_0
 32

	)

2806 
	#R_ARM_ALU_PCREL_15_8
 33

	)

2807 
	#R_ARM_ALU_PCREL_23_15
 34

	)

2808 
	#R_ARM_LDR_SBREL_11_0
 35

	)

2809 
	#R_ARM_ALU_SBREL_19_12
 36

	)

2810 
	#R_ARM_ALU_SBREL_27_20
 37

	)

2811 
	#R_ARM_TARGET1
 38

	)

2812 
	#R_ARM_SBREL31
 39

	)

2813 
	#R_ARM_V4BX
 40

	)

2814 
	#R_ARM_TARGET2
 41

	)

2815 
	#R_ARM_PREL31
 42

	)

2816 
	#R_ARM_MOVW_ABS_NC
 43

	)

2817 
	#R_ARM_MOVT_ABS
 44

	)

2818 
	#R_ARM_MOVW_PREL_NC
 45

	)

2819 
	#R_ARM_MOVT_PREL
 46

	)

2820 
	#R_ARM_THM_MOVW_ABS_NC
 47

	)

2821 
	#R_ARM_THM_MOVT_ABS
 48

	)

2823 
	#R_ARM_THM_MOVW_PREL_NC
 49

	)

2825 
	#R_ARM_THM_MOVT_PREL
 50

	)

2827 
	#R_ARM_THM_JUMP19
 51

	)

2829 
	#R_ARM_THM_JUMP6
 52

	)

2831 
	#R_ARM_THM_ALU_PREL_11_0
 53

	)

2833 
	#R_ARM_THM_PC12
 54

	)

2835 
	#R_ARM_ABS32_NOI
 55

	)

2836 
	#R_ARM_REL32_NOI
 56

	)

2837 
	#R_ARM_ALU_PC_G0_NC
 57

	)

2838 
	#R_ARM_ALU_PC_G0
 58

	)

2839 
	#R_ARM_ALU_PC_G1_NC
 59

	)

2840 
	#R_ARM_ALU_PC_G1
 60

	)

2841 
	#R_ARM_ALU_PC_G2
 61

	)

2842 
	#R_ARM_LDR_PC_G1
 62

	)

2843 
	#R_ARM_LDR_PC_G2
 63

	)

2844 
	#R_ARM_LDRS_PC_G0
 64

	)

2846 
	#R_ARM_LDRS_PC_G1
 65

	)

2848 
	#R_ARM_LDRS_PC_G2
 66

	)

2850 
	#R_ARM_LDC_PC_G0
 67

	)

2851 
	#R_ARM_LDC_PC_G1
 68

	)

2852 
	#R_ARM_LDC_PC_G2
 69

	)

2853 
	#R_ARM_ALU_SB_G0_NC
 70

	)

2854 
	#R_ARM_ALU_SB_G0
 71

	)

2855 
	#R_ARM_ALU_SB_G1_NC
 72

	)

2856 
	#R_ARM_ALU_SB_G1
 73

	)

2857 
	#R_ARM_ALU_SB_G2
 74

	)

2858 
	#R_ARM_LDR_SB_G0
 75

	)

2860 
	#R_ARM_LDR_SB_G1
 76

	)

2862 
	#R_ARM_LDR_SB_G2
 77

	)

2864 
	#R_ARM_LDRS_SB_G0
 78

	)

2866 
	#R_ARM_LDRS_SB_G1
 79

	)

2868 
	#R_ARM_LDRS_SB_G2
 80

	)

2870 
	#R_ARM_LDC_SB_G0
 81

	)

2871 
	#R_ARM_LDC_SB_G1
 82

	)

2872 
	#R_ARM_LDC_SB_G2
 83

	)

2873 
	#R_ARM_MOVW_BREL_NC
 84

	)

2875 
	#R_ARM_MOVT_BREL
 85

	)

2877 
	#R_ARM_MOVW_BREL
 86

	)

2879 
	#R_ARM_THM_MOVW_BREL_NC
 87

	)

2881 
	#R_ARM_THM_MOVT_BREL
 88

	)

2883 
	#R_ARM_THM_MOVW_BREL
 89

	)

2885 
	#R_ARM_TLS_GOTDESC
 90

	)

2886 
	#R_ARM_TLS_CALL
 91

	)

2887 
	#R_ARM_TLS_DESCSEQ
 92

	)

2888 
	#R_ARM_THM_TLS_CALL
 93

	)

2889 
	#R_ARM_PLT32_ABS
 94

	)

2890 
	#R_ARM_GOT_ABS
 95

	)

2891 
	#R_ARM_GOT_PREL
 96

	)

2892 
	#R_ARM_GOT_BREL12
 97

	)

2894 
	#R_ARM_GOTOFF12
 98

	)

2896 
	#R_ARM_GOTRELAX
 99

	)

2897 
	#R_ARM_GNU_VTENTRY
 100

	)

2898 
	#R_ARM_GNU_VTINHERIT
 101

	)

2899 
	#R_ARM_THM_PC11
 102

	)

2900 
	#R_ARM_THM_PC9
 103

	)

2902 
	#R_ARM_TLS_GD32
 104

	)

2904 
	#R_ARM_TLS_LDM32
 105

	)

2906 
	#R_ARM_TLS_LDO32
 106

	)

2908 
	#R_ARM_TLS_IE32
 107

	)

2910 
	#R_ARM_TLS_LE32
 108

	)

2912 
	#R_ARM_TLS_LDO12
 109

	)

2914 
	#R_ARM_TLS_LE12
 110

	)

2916 
	#R_ARM_TLS_IE12GP
 111

	)

2918 
	#R_ARM_ME_TOO
 128

	)

2919 
	#R_ARM_THM_TLS_DESCSEQ
 129

	)

2920 
	#R_ARM_THM_TLS_DESCSEQ16
 129

	)

2921 
	#R_ARM_THM_TLS_DESCSEQ32
 130

	)

2922 
	#R_ARM_THM_GOT_BREL12
 131

	)

2924 
	#R_ARM_IRELATIVE
 160

	)

2925 
	#R_ARM_RXPC25
 249

	)

2926 
	#R_ARM_RSBREL32
 250

	)

2927 
	#R_ARM_THM_RPC22
 251

	)

2928 
	#R_ARM_RREL32
 252

	)

2929 
	#R_ARM_RABS22
 253

	)

2930 
	#R_ARM_RPC24
 254

	)

2931 
	#R_ARM_RBASE
 255

	)

2933 
	#R_ARM_NUM
 256

	)

2938 
	#EF_IA_64_MASKOS
 0x0000000‡

	)

2939 
	#EF_IA_64_ABI64
 0x00000010

	)

2940 
	#EF_IA_64_ARCH
 0xff000000

	)

2943 
	#PT_IA_64_ARCHEXT
 (
PT_LOPROC
 + 0Ë

	)

2944 
	#PT_IA_64_UNWIND
 (
PT_LOPROC
 + 1Ë

	)

2945 
	#PT_IA_64_HP_OPT_ANOT
 (
PT_LOOS
 + 0x12)

	)

2946 
	#PT_IA_64_HP_HSL_ANOT
 (
PT_LOOS
 + 0x13)

	)

2947 
	#PT_IA_64_HP_STACK
 (
PT_LOOS
 + 0x14)

	)

2950 
	#PF_IA_64_NORECOV
 0x80000000

	)

2953 
	#SHT_IA_64_EXT
 (
SHT_LOPROC
 + 0Ë

	)

2954 
	#SHT_IA_64_UNWIND
 (
SHT_LOPROC
 + 1Ë

	)

2957 
	#SHF_IA_64_SHORT
 0x10000000

	)

2958 
	#SHF_IA_64_NORECOV
 0x20000000

	)

2961 
	#DT_IA_64_PLT_RESERVE
 (
DT_LOPROC
 + 0)

	)

2962 
	#DT_IA_64_NUM
 1

	)

2965 
	#R_IA64_NONE
 0x00

	)

2966 
	#R_IA64_IMM14
 0x21

	)

2967 
	#R_IA64_IMM22
 0x22

	)

2968 
	#R_IA64_IMM64
 0x23

	)

2969 
	#R_IA64_DIR32MSB
 0x24

	)

2970 
	#R_IA64_DIR32LSB
 0x25

	)

2971 
	#R_IA64_DIR64MSB
 0x26

	)

2972 
	#R_IA64_DIR64LSB
 0x27

	)

2973 
	#R_IA64_GPREL22
 0x2®

	)

2974 
	#R_IA64_GPREL64I
 0x2b

	)

2975 
	#R_IA64_GPREL32MSB
 0x2¯

	)

2976 
	#R_IA64_GPREL32LSB
 0x2d

	)

2977 
	#R_IA64_GPREL64MSB
 0x2ê

	)

2978 
	#R_IA64_GPREL64LSB
 0x2‡

	)

2979 
	#R_IA64_LTOFF22
 0x32

	)

2980 
	#R_IA64_LTOFF64I
 0x33

	)

2981 
	#R_IA64_PLTOFF22
 0x3®

	)

2982 
	#R_IA64_PLTOFF64I
 0x3b

	)

2983 
	#R_IA64_PLTOFF64MSB
 0x3ê

	)

2984 
	#R_IA64_PLTOFF64LSB
 0x3‡

	)

2985 
	#R_IA64_FPTR64I
 0x43

	)

2986 
	#R_IA64_FPTR32MSB
 0x44

	)

2987 
	#R_IA64_FPTR32LSB
 0x45

	)

2988 
	#R_IA64_FPTR64MSB
 0x46

	)

2989 
	#R_IA64_FPTR64LSB
 0x47

	)

2990 
	#R_IA64_PCREL60B
 0x48

	)

2991 
	#R_IA64_PCREL21B
 0x49

	)

2992 
	#R_IA64_PCREL21M
 0x4®

	)

2993 
	#R_IA64_PCREL21F
 0x4b

	)

2994 
	#R_IA64_PCREL32MSB
 0x4¯

	)

2995 
	#R_IA64_PCREL32LSB
 0x4d

	)

2996 
	#R_IA64_PCREL64MSB
 0x4ê

	)

2997 
	#R_IA64_PCREL64LSB
 0x4‡

	)

2998 
	#R_IA64_LTOFF_FPTR22
 0x52

	)

2999 
	#R_IA64_LTOFF_FPTR64I
 0x53

	)

3000 
	#R_IA64_LTOFF_FPTR32MSB
 0x54

	)

3001 
	#R_IA64_LTOFF_FPTR32LSB
 0x55

	)

3002 
	#R_IA64_LTOFF_FPTR64MSB
 0x56

	)

3003 
	#R_IA64_LTOFF_FPTR64LSB
 0x57

	)

3004 
	#R_IA64_SEGREL32MSB
 0x5¯

	)

3005 
	#R_IA64_SEGREL32LSB
 0x5d

	)

3006 
	#R_IA64_SEGREL64MSB
 0x5ê

	)

3007 
	#R_IA64_SEGREL64LSB
 0x5‡

	)

3008 
	#R_IA64_SECREL32MSB
 0x64

	)

3009 
	#R_IA64_SECREL32LSB
 0x65

	)

3010 
	#R_IA64_SECREL64MSB
 0x66

	)

3011 
	#R_IA64_SECREL64LSB
 0x67

	)

3012 
	#R_IA64_REL32MSB
 0x6¯

	)

3013 
	#R_IA64_REL32LSB
 0x6d

	)

3014 
	#R_IA64_REL64MSB
 0x6ê

	)

3015 
	#R_IA64_REL64LSB
 0x6‡

	)

3016 
	#R_IA64_LTV32MSB
 0x74

	)

3017 
	#R_IA64_LTV32LSB
 0x75

	)

3018 
	#R_IA64_LTV64MSB
 0x76

	)

3019 
	#R_IA64_LTV64LSB
 0x77

	)

3020 
	#R_IA64_PCREL21BI
 0x79

	)

3021 
	#R_IA64_PCREL22
 0x7®

	)

3022 
	#R_IA64_PCREL64I
 0x7b

	)

3023 
	#R_IA64_IPLTMSB
 0x80

	)

3024 
	#R_IA64_IPLTLSB
 0x81

	)

3025 
	#R_IA64_COPY
 0x84

	)

3026 
	#R_IA64_SUB
 0x85

	)

3027 
	#R_IA64_LTOFF22X
 0x86

	)

3028 
	#R_IA64_LDXMOV
 0x87

	)

3029 
	#R_IA64_TPREL14
 0x91

	)

3030 
	#R_IA64_TPREL22
 0x92

	)

3031 
	#R_IA64_TPREL64I
 0x93

	)

3032 
	#R_IA64_TPREL64MSB
 0x96

	)

3033 
	#R_IA64_TPREL64LSB
 0x97

	)

3034 
	#R_IA64_LTOFF_TPREL22
 0x9®

	)

3035 
	#R_IA64_DTPMOD64MSB
 0xa6

	)

3036 
	#R_IA64_DTPMOD64LSB
 0xa7

	)

3037 
	#R_IA64_LTOFF_DTPMOD22
 0xØ

	)

3038 
	#R_IA64_DTPREL14
 0xb1

	)

3039 
	#R_IA64_DTPREL22
 0xb2

	)

3040 
	#R_IA64_DTPREL64I
 0xb3

	)

3041 
	#R_IA64_DTPREL32MSB
 0xb4

	)

3042 
	#R_IA64_DTPREL32LSB
 0xb5

	)

3043 
	#R_IA64_DTPREL64MSB
 0xb6

	)

3044 
	#R_IA64_DTPREL64LSB
 0xb7

	)

3045 
	#R_IA64_LTOFF_DTPREL22
 0xb®

	)

3050 
	#EF_SH_MACH_MASK
 0x1f

	)

3051 
	#EF_SH_UNKNOWN
 0x0

	)

3052 
	#EF_SH1
 0x1

	)

3053 
	#EF_SH2
 0x2

	)

3054 
	#EF_SH3
 0x3

	)

3055 
	#EF_SH_DSP
 0x4

	)

3056 
	#EF_SH3_DSP
 0x5

	)

3057 
	#EF_SH4AL_DSP
 0x6

	)

3058 
	#EF_SH3E
 0x8

	)

3059 
	#EF_SH4
 0x9

	)

3060 
	#EF_SH2E
 0xb

	)

3061 
	#EF_SH4A
 0xc

	)

3062 
	#EF_SH2A
 0xd

	)

3063 
	#EF_SH4_NOFPU
 0x10

	)

3064 
	#EF_SH4A_NOFPU
 0x11

	)

3065 
	#EF_SH4_NOMMU_NOFPU
 0x12

	)

3066 
	#EF_SH2A_NOFPU
 0x13

	)

3067 
	#EF_SH3_NOMMU
 0x14

	)

3068 
	#EF_SH2A_SH4_NOFPU
 0x15

	)

3069 
	#EF_SH2A_SH3_NOFPU
 0x16

	)

3070 
	#EF_SH2A_SH4
 0x17

	)

3071 
	#EF_SH2A_SH3E
 0x18

	)

3074 
	#R_SH_NONE
 0

	)

3075 
	#R_SH_DIR32
 1

	)

3076 
	#R_SH_REL32
 2

	)

3077 
	#R_SH_DIR8WPN
 3

	)

3078 
	#R_SH_IND12W
 4

	)

3079 
	#R_SH_DIR8WPL
 5

	)

3080 
	#R_SH_DIR8WPZ
 6

	)

3081 
	#R_SH_DIR8BP
 7

	)

3082 
	#R_SH_DIR8W
 8

	)

3083 
	#R_SH_DIR8L
 9

	)

3084 
	#R_SH_SWITCH16
 25

	)

3085 
	#R_SH_SWITCH32
 26

	)

3086 
	#R_SH_USES
 27

	)

3087 
	#R_SH_COUNT
 28

	)

3088 
	#R_SH_ALIGN
 29

	)

3089 
	#R_SH_CODE
 30

	)

3090 
	#R_SH_DATA
 31

	)

3091 
	#R_SH_LABEL
 32

	)

3092 
	#R_SH_SWITCH8
 33

	)

3093 
	#R_SH_GNU_VTINHERIT
 34

	)

3094 
	#R_SH_GNU_VTENTRY
 35

	)

3095 
	#R_SH_TLS_GD_32
 144

	)

3096 
	#R_SH_TLS_LD_32
 145

	)

3097 
	#R_SH_TLS_LDO_32
 146

	)

3098 
	#R_SH_TLS_IE_32
 147

	)

3099 
	#R_SH_TLS_LE_32
 148

	)

3100 
	#R_SH_TLS_DTPMOD32
 149

	)

3101 
	#R_SH_TLS_DTPOFF32
 150

	)

3102 
	#R_SH_TLS_TPOFF32
 151

	)

3103 
	#R_SH_GOT32
 160

	)

3104 
	#R_SH_PLT32
 161

	)

3105 
	#R_SH_COPY
 162

	)

3106 
	#R_SH_GLOB_DAT
 163

	)

3107 
	#R_SH_JMP_SLOT
 164

	)

3108 
	#R_SH_RELATIVE
 165

	)

3109 
	#R_SH_GOTOFF
 166

	)

3110 
	#R_SH_GOTPC
 167

	)

3112 
	#R_SH_NUM
 256

	)

3118 
	#EF_S390_HIGH_GPRS
 0x00000001

	)

3122 
	#R_390_NONE
 0

	)

3123 
	#R_390_8
 1

	)

3124 
	#R_390_12
 2

	)

3125 
	#R_390_16
 3

	)

3126 
	#R_390_32
 4

	)

3127 
	#R_390_PC32
 5

	)

3128 
	#R_390_GOT12
 6

	)

3129 
	#R_390_GOT32
 7

	)

3130 
	#R_390_PLT32
 8

	)

3131 
	#R_390_COPY
 9

	)

3132 
	#R_390_GLOB_DAT
 10

	)

3133 
	#R_390_JMP_SLOT
 11

	)

3134 
	#R_390_RELATIVE
 12

	)

3135 
	#R_390_GOTOFF32
 13

	)

3136 
	#R_390_GOTPC
 14

	)

3137 
	#R_390_GOT16
 15

	)

3138 
	#R_390_PC16
 16

	)

3139 
	#R_390_PC16DBL
 17

	)

3140 
	#R_390_PLT16DBL
 18

	)

3141 
	#R_390_PC32DBL
 19

	)

3142 
	#R_390_PLT32DBL
 20

	)

3143 
	#R_390_GOTPCDBL
 21

	)

3144 
	#R_390_64
 22

	)

3145 
	#R_390_PC64
 23

	)

3146 
	#R_390_GOT64
 24

	)

3147 
	#R_390_PLT64
 25

	)

3148 
	#R_390_GOTENT
 26

	)

3149 
	#R_390_GOTOFF16
 27

	)

3150 
	#R_390_GOTOFF64
 28

	)

3151 
	#R_390_GOTPLT12
 29

	)

3152 
	#R_390_GOTPLT16
 30

	)

3153 
	#R_390_GOTPLT32
 31

	)

3154 
	#R_390_GOTPLT64
 32

	)

3155 
	#R_390_GOTPLTENT
 33

	)

3156 
	#R_390_PLTOFF16
 34

	)

3157 
	#R_390_PLTOFF32
 35

	)

3158 
	#R_390_PLTOFF64
 36

	)

3159 
	#R_390_TLS_LOAD
 37

	)

3160 
	#R_390_TLS_GDCALL
 38

	)

3162 
	#R_390_TLS_LDCALL
 39

	)

3164 
	#R_390_TLS_GD32
 40

	)

3166 
	#R_390_TLS_GD64
 41

	)

3168 
	#R_390_TLS_GOTIE12
 42

	)

3170 
	#R_390_TLS_GOTIE32
 43

	)

3172 
	#R_390_TLS_GOTIE64
 44

	)

3174 
	#R_390_TLS_LDM32
 45

	)

3176 
	#R_390_TLS_LDM64
 46

	)

3178 
	#R_390_TLS_IE32
 47

	)

3180 
	#R_390_TLS_IE64
 48

	)

3182 
	#R_390_TLS_IEENT
 49

	)

3184 
	#R_390_TLS_LE32
 50

	)

3186 
	#R_390_TLS_LE64
 51

	)

3188 
	#R_390_TLS_LDO32
 52

	)

3190 
	#R_390_TLS_LDO64
 53

	)

3192 
	#R_390_TLS_DTPMOD
 54

	)

3193 
	#R_390_TLS_DTPOFF
 55

	)

3194 
	#R_390_TLS_TPOFF
 56

	)

3196 
	#R_390_20
 57

	)

3197 
	#R_390_GOT20
 58

	)

3198 
	#R_390_GOTPLT20
 59

	)

3199 
	#R_390_TLS_GOTIE20
 60

	)

3201 
	#R_390_IRELATIVE
 61

	)

3203 
	#R_390_NUM
 62

	)

3207 
	#R_CRIS_NONE
 0

	)

3208 
	#R_CRIS_8
 1

	)

3209 
	#R_CRIS_16
 2

	)

3210 
	#R_CRIS_32
 3

	)

3211 
	#R_CRIS_8_PCREL
 4

	)

3212 
	#R_CRIS_16_PCREL
 5

	)

3213 
	#R_CRIS_32_PCREL
 6

	)

3214 
	#R_CRIS_GNU_VTINHERIT
 7

	)

3215 
	#R_CRIS_GNU_VTENTRY
 8

	)

3216 
	#R_CRIS_COPY
 9

	)

3217 
	#R_CRIS_GLOB_DAT
 10

	)

3218 
	#R_CRIS_JUMP_SLOT
 11

	)

3219 
	#R_CRIS_RELATIVE
 12

	)

3220 
	#R_CRIS_16_GOT
 13

	)

3221 
	#R_CRIS_32_GOT
 14

	)

3222 
	#R_CRIS_16_GOTPLT
 15

	)

3223 
	#R_CRIS_32_GOTPLT
 16

	)

3224 
	#R_CRIS_32_GOTREL
 17

	)

3225 
	#R_CRIS_32_PLT_GOTREL
 18

	)

3226 
	#R_CRIS_32_PLT_PCREL
 19

	)

3228 
	#R_CRIS_NUM
 20

	)

3232 
	#R_X86_64_NONE
 0

	)

3233 
	#R_X86_64_64
 1

	)

3234 
	#R_X86_64_PC32
 2

	)

3235 
	#R_X86_64_GOT32
 3

	)

3236 
	#R_X86_64_PLT32
 4

	)

3237 
	#R_X86_64_COPY
 5

	)

3238 
	#R_X86_64_GLOB_DAT
 6

	)

3239 
	#R_X86_64_JUMP_SLOT
 7

	)

3240 
	#R_X86_64_RELATIVE
 8

	)

3241 
	#R_X86_64_GOTPCREL
 9

	)

3243 
	#R_X86_64_32
 10

	)

3244 
	#R_X86_64_32S
 11

	)

3245 
	#R_X86_64_16
 12

	)

3246 
	#R_X86_64_PC16
 13

	)

3247 
	#R_X86_64_8
 14

	)

3248 
	#R_X86_64_PC8
 15

	)

3249 
	#R_X86_64_DTPMOD64
 16

	)

3250 
	#R_X86_64_DTPOFF64
 17

	)

3251 
	#R_X86_64_TPOFF64
 18

	)

3252 
	#R_X86_64_TLSGD
 19

	)

3254 
	#R_X86_64_TLSLD
 20

	)

3256 
	#R_X86_64_DTPOFF32
 21

	)

3257 
	#R_X86_64_GOTTPOFF
 22

	)

3259 
	#R_X86_64_TPOFF32
 23

	)

3260 
	#R_X86_64_PC64
 24

	)

3261 
	#R_X86_64_GOTOFF64
 25

	)

3262 
	#R_X86_64_GOTPC32
 26

	)

3264 
	#R_X86_64_GOT64
 27

	)

3265 
	#R_X86_64_GOTPCREL64
 28

	)

3267 
	#R_X86_64_GOTPC64
 29

	)

3268 
	#R_X86_64_GOTPLT64
 30

	)

3269 
	#R_X86_64_PLTOFF64
 31

	)

3271 
	#R_X86_64_SIZE32
 32

	)

3272 
	#R_X86_64_SIZE64
 33

	)

3273 
	#R_X86_64_GOTPC32_TLSDESC
 34

	)

3274 
	#R_X86_64_TLSDESC_CALL
 35

	)

3276 
	#R_X86_64_TLSDESC
 36

	)

3277 
	#R_X86_64_IRELATIVE
 37

	)

3278 
	#R_X86_64_RELATIVE64
 38

	)

3281 
	#R_X86_64_GOTPCRELX
 41

	)

3284 
	#R_X86_64_REX_GOTPCRELX
 42

	)

3287 
	#R_X86_64_NUM
 43

	)

3291 
	#R_MN10300_NONE
 0

	)

3292 
	#R_MN10300_32
 1

	)

3293 
	#R_MN10300_16
 2

	)

3294 
	#R_MN10300_8
 3

	)

3295 
	#R_MN10300_PCREL32
 4

	)

3296 
	#R_MN10300_PCREL16
 5

	)

3297 
	#R_MN10300_PCREL8
 6

	)

3298 
	#R_MN10300_GNU_VTINHERIT
 7

	)

3299 
	#R_MN10300_GNU_VTENTRY
 8

	)

3300 
	#R_MN10300_24
 9

	)

3301 
	#R_MN10300_GOTPC32
 10

	)

3302 
	#R_MN10300_GOTPC16
 11

	)

3303 
	#R_MN10300_GOTOFF32
 12

	)

3304 
	#R_MN10300_GOTOFF24
 13

	)

3305 
	#R_MN10300_GOTOFF16
 14

	)

3306 
	#R_MN10300_PLT32
 15

	)

3307 
	#R_MN10300_PLT16
 16

	)

3308 
	#R_MN10300_GOT32
 17

	)

3309 
	#R_MN10300_GOT24
 18

	)

3310 
	#R_MN10300_GOT16
 19

	)

3311 
	#R_MN10300_COPY
 20

	)

3312 
	#R_MN10300_GLOB_DAT
 21

	)

3313 
	#R_MN10300_JMP_SLOT
 22

	)

3314 
	#R_MN10300_RELATIVE
 23

	)

3315 
	#R_MN10300_TLS_GD
 24

	)

3316 
	#R_MN10300_TLS_LD
 25

	)

3317 
	#R_MN10300_TLS_LDO
 26

	)

3318 
	#R_MN10300_TLS_GOTIE
 27

	)

3320 
	#R_MN10300_TLS_IE
 28

	)

3322 
	#R_MN10300_TLS_LE
 29

	)

3324 
	#R_MN10300_TLS_DTPMOD
 30

	)

3325 
	#R_MN10300_TLS_DTPOFF
 31

	)

3326 
	#R_MN10300_TLS_TPOFF
 32

	)

3327 
	#R_MN10300_SYM_DIFF
 33

	)

3329 
	#R_MN10300_ALIGN
 34

	)

3331 
	#R_MN10300_NUM
 35

	)

3335 
	#R_M32R_NONE
 0

	)

3336 
	#R_M32R_16
 1

	)

3337 
	#R_M32R_32
 2

	)

3338 
	#R_M32R_24
 3

	)

3339 
	#R_M32R_10_PCREL
 4

	)

3340 
	#R_M32R_18_PCREL
 5

	)

3341 
	#R_M32R_26_PCREL
 6

	)

3342 
	#R_M32R_HI16_ULO
 7

	)

3343 
	#R_M32R_HI16_SLO
 8

	)

3344 
	#R_M32R_LO16
 9

	)

3345 
	#R_M32R_SDA16
 10

	)

3346 
	#R_M32R_GNU_VTINHERIT
 11

	)

3347 
	#R_M32R_GNU_VTENTRY
 12

	)

3349 
	#R_M32R_16_RELA
 33

	)

3350 
	#R_M32R_32_RELA
 34

	)

3351 
	#R_M32R_24_RELA
 35

	)

3352 
	#R_M32R_10_PCREL_RELA
 36

	)

3353 
	#R_M32R_18_PCREL_RELA
 37

	)

3354 
	#R_M32R_26_PCREL_RELA
 38

	)

3355 
	#R_M32R_HI16_ULO_RELA
 39

	)

3356 
	#R_M32R_HI16_SLO_RELA
 40

	)

3357 
	#R_M32R_LO16_RELA
 41

	)

3358 
	#R_M32R_SDA16_RELA
 42

	)

3359 
	#R_M32R_RELA_GNU_VTINHERIT
 43

	)

3360 
	#R_M32R_RELA_GNU_VTENTRY
 44

	)

3361 
	#R_M32R_REL32
 45

	)

3363 
	#R_M32R_GOT24
 48

	)

3364 
	#R_M32R_26_PLTREL
 49

	)

3365 
	#R_M32R_COPY
 50

	)

3366 
	#R_M32R_GLOB_DAT
 51

	)

3367 
	#R_M32R_JMP_SLOT
 52

	)

3368 
	#R_M32R_RELATIVE
 53

	)

3369 
	#R_M32R_GOTOFF
 54

	)

3370 
	#R_M32R_GOTPC24
 55

	)

3371 
	#R_M32R_GOT16_HI_ULO
 56

	)

3373 
	#R_M32R_GOT16_HI_SLO
 57

	)

3375 
	#R_M32R_GOT16_LO
 58

	)

3376 
	#R_M32R_GOTPC_HI_ULO
 59

	)

3378 
	#R_M32R_GOTPC_HI_SLO
 60

	)

3380 
	#R_M32R_GOTPC_LO
 61

	)

3382 
	#R_M32R_GOTOFF_HI_ULO
 62

	)

3384 
	#R_M32R_GOTOFF_HI_SLO
 63

	)

3386 
	#R_M32R_GOTOFF_LO
 64

	)

3387 
	#R_M32R_NUM
 256

	)

3390 
	#R_MICROBLAZE_NONE
 0

	)

3391 
	#R_MICROBLAZE_32
 1

	)

3392 
	#R_MICROBLAZE_32_PCREL
 2

	)

3393 
	#R_MICROBLAZE_64_PCREL
 3

	)

3394 
	#R_MICROBLAZE_32_PCREL_LO
 4

	)

3395 
	#R_MICROBLAZE_64
 5

	)

3396 
	#R_MICROBLAZE_32_LO
 6

	)

3397 
	#R_MICROBLAZE_SRO32
 7

	)

3398 
	#R_MICROBLAZE_SRW32
 8

	)

3399 
	#R_MICROBLAZE_64_NONE
 9

	)

3400 
	#R_MICROBLAZE_32_SYM_OP_SYM
 10

	)

3401 
	#R_MICROBLAZE_GNU_VTINHERIT
 11

	)

3402 
	#R_MICROBLAZE_GNU_VTENTRY
 12

	)

3403 
	#R_MICROBLAZE_GOTPC_64
 13

	)

3404 
	#R_MICROBLAZE_GOT_64
 14

	)

3405 
	#R_MICROBLAZE_PLT_64
 15

	)

3406 
	#R_MICROBLAZE_REL
 16

	)

3407 
	#R_MICROBLAZE_JUMP_SLOT
 17

	)

3408 
	#R_MICROBLAZE_GLOB_DAT
 18

	)

3409 
	#R_MICROBLAZE_GOTOFF_64
 19

	)

3410 
	#R_MICROBLAZE_GOTOFF_32
 20

	)

3411 
	#R_MICROBLAZE_COPY
 21

	)

3412 
	#R_MICROBLAZE_TLS
 22

	)

3413 
	#R_MICROBLAZE_TLSGD
 23

	)

3414 
	#R_MICROBLAZE_TLSLD
 24

	)

3415 
	#R_MICROBLAZE_TLSDTPMOD32
 25

	)

3416 
	#R_MICROBLAZE_TLSDTPREL32
 26

	)

3417 
	#R_MICROBLAZE_TLSDTPREL64
 27

	)

3418 
	#R_MICROBLAZE_TLSGOTTPREL32
 28

	)

3419 
	#R_MICROBLAZE_TLSTPREL32
 29

	)

3422 
	#DT_NIOS2_GP
 0x70000002

	)

3425 
	#R_NIOS2_NONE
 0

	)

3426 
	#R_NIOS2_S16
 1

	)

3427 
	#R_NIOS2_U16
 2

	)

3428 
	#R_NIOS2_PCREL16
 3

	)

3429 
	#R_NIOS2_CALL26
 4

	)

3430 
	#R_NIOS2_IMM5
 5

	)

3431 
	#R_NIOS2_CACHE_OPX
 6

	)

3432 
	#R_NIOS2_IMM6
 7

	)

3433 
	#R_NIOS2_IMM8
 8

	)

3434 
	#R_NIOS2_HI16
 9

	)

3435 
	#R_NIOS2_LO16
 10

	)

3436 
	#R_NIOS2_HIADJ16
 11

	)

3437 
	#R_NIOS2_BFD_RELOC_32
 12

	)

3438 
	#R_NIOS2_BFD_RELOC_16
 13

	)

3439 
	#R_NIOS2_BFD_RELOC_8
 14

	)

3440 
	#R_NIOS2_GPREL
 15

	)

3441 
	#R_NIOS2_GNU_VTINHERIT
 16

	)

3442 
	#R_NIOS2_GNU_VTENTRY
 17

	)

3443 
	#R_NIOS2_UJMP
 18

	)

3444 
	#R_NIOS2_CJMP
 19

	)

3445 
	#R_NIOS2_CALLR
 20

	)

3446 
	#R_NIOS2_ALIGN
 21

	)

3448 
	#R_NIOS2_GOT16
 22

	)

3449 
	#R_NIOS2_CALL16
 23

	)

3450 
	#R_NIOS2_GOTOFF_LO
 24

	)

3451 
	#R_NIOS2_GOTOFF_HA
 25

	)

3452 
	#R_NIOS2_PCREL_LO
 26

	)

3453 
	#R_NIOS2_PCREL_HA
 27

	)

3454 
	#R_NIOS2_TLS_GD16
 28

	)

3455 
	#R_NIOS2_TLS_LDM16
 29

	)

3456 
	#R_NIOS2_TLS_LDO16
 30

	)

3457 
	#R_NIOS2_TLS_IE16
 31

	)

3458 
	#R_NIOS2_TLS_LE16
 32

	)

3459 
	#R_NIOS2_TLS_DTPMOD
 33

	)

3460 
	#R_NIOS2_TLS_DTPREL
 34

	)

3461 
	#R_NIOS2_TLS_TPREL
 35

	)

3462 
	#R_NIOS2_COPY
 36

	)

3463 
	#R_NIOS2_GLOB_DAT
 37

	)

3464 
	#R_NIOS2_JUMP_SLOT
 38

	)

3465 
	#R_NIOS2_RELATIVE
 39

	)

3466 
	#R_NIOS2_GOTOFF
 40

	)

3467 
	#R_NIOS2_CALL26_NOAT
 41

	)

3468 
	#R_NIOS2_GOT_LO
 42

	)

3469 
	#R_NIOS2_GOT_HA
 43

	)

3470 
	#R_NIOS2_CALL_LO
 44

	)

3471 
	#R_NIOS2_CALL_HA
 45

	)

3474 
	#R_TILEPRO_NONE
 0

	)

3475 
	#R_TILEPRO_32
 1

	)

3476 
	#R_TILEPRO_16
 2

	)

3477 
	#R_TILEPRO_8
 3

	)

3478 
	#R_TILEPRO_32_PCREL
 4

	)

3479 
	#R_TILEPRO_16_PCREL
 5

	)

3480 
	#R_TILEPRO_8_PCREL
 6

	)

3481 
	#R_TILEPRO_LO16
 7

	)

3482 
	#R_TILEPRO_HI16
 8

	)

3483 
	#R_TILEPRO_HA16
 9

	)

3484 
	#R_TILEPRO_COPY
 10

	)

3485 
	#R_TILEPRO_GLOB_DAT
 11

	)

3486 
	#R_TILEPRO_JMP_SLOT
 12

	)

3487 
	#R_TILEPRO_RELATIVE
 13

	)

3488 
	#R_TILEPRO_BROFF_X1
 14

	)

3489 
	#R_TILEPRO_JOFFLONG_X1
 15

	)

3490 
	#R_TILEPRO_JOFFLONG_X1_PLT
 16

	)

3491 
	#R_TILEPRO_IMM8_X0
 17

	)

3492 
	#R_TILEPRO_IMM8_Y0
 18

	)

3493 
	#R_TILEPRO_IMM8_X1
 19

	)

3494 
	#R_TILEPRO_IMM8_Y1
 20

	)

3495 
	#R_TILEPRO_MT_IMM15_X1
 21

	)

3496 
	#R_TILEPRO_MF_IMM15_X1
 22

	)

3497 
	#R_TILEPRO_IMM16_X0
 23

	)

3498 
	#R_TILEPRO_IMM16_X1
 24

	)

3499 
	#R_TILEPRO_IMM16_X0_LO
 25

	)

3500 
	#R_TILEPRO_IMM16_X1_LO
 26

	)

3501 
	#R_TILEPRO_IMM16_X0_HI
 27

	)

3502 
	#R_TILEPRO_IMM16_X1_HI
 28

	)

3503 
	#R_TILEPRO_IMM16_X0_HA
 29

	)

3504 
	#R_TILEPRO_IMM16_X1_HA
 30

	)

3505 
	#R_TILEPRO_IMM16_X0_PCREL
 31

	)

3506 
	#R_TILEPRO_IMM16_X1_PCREL
 32

	)

3507 
	#R_TILEPRO_IMM16_X0_LO_PCREL
 33

	)

3508 
	#R_TILEPRO_IMM16_X1_LO_PCREL
 34

	)

3509 
	#R_TILEPRO_IMM16_X0_HI_PCREL
 35

	)

3510 
	#R_TILEPRO_IMM16_X1_HI_PCREL
 36

	)

3511 
	#R_TILEPRO_IMM16_X0_HA_PCREL
 37

	)

3512 
	#R_TILEPRO_IMM16_X1_HA_PCREL
 38

	)

3513 
	#R_TILEPRO_IMM16_X0_GOT
 39

	)

3514 
	#R_TILEPRO_IMM16_X1_GOT
 40

	)

3515 
	#R_TILEPRO_IMM16_X0_GOT_LO
 41

	)

3516 
	#R_TILEPRO_IMM16_X1_GOT_LO
 42

	)

3517 
	#R_TILEPRO_IMM16_X0_GOT_HI
 43

	)

3518 
	#R_TILEPRO_IMM16_X1_GOT_HI
 44

	)

3519 
	#R_TILEPRO_IMM16_X0_GOT_HA
 45

	)

3520 
	#R_TILEPRO_IMM16_X1_GOT_HA
 46

	)

3521 
	#R_TILEPRO_MMSTART_X0
 47

	)

3522 
	#R_TILEPRO_MMEND_X0
 48

	)

3523 
	#R_TILEPRO_MMSTART_X1
 49

	)

3524 
	#R_TILEPRO_MMEND_X1
 50

	)

3525 
	#R_TILEPRO_SHAMT_X0
 51

	)

3526 
	#R_TILEPRO_SHAMT_X1
 52

	)

3527 
	#R_TILEPRO_SHAMT_Y0
 53

	)

3528 
	#R_TILEPRO_SHAMT_Y1
 54

	)

3529 
	#R_TILEPRO_DEST_IMM8_X1
 55

	)

3531 
	#R_TILEPRO_TLS_GD_CALL
 60

	)

3532 
	#R_TILEPRO_IMM8_X0_TLS_GD_ADD
 61

	)

3533 
	#R_TILEPRO_IMM8_X1_TLS_GD_ADD
 62

	)

3534 
	#R_TILEPRO_IMM8_Y0_TLS_GD_ADD
 63

	)

3535 
	#R_TILEPRO_IMM8_Y1_TLS_GD_ADD
 64

	)

3536 
	#R_TILEPRO_TLS_IE_LOAD
 65

	)

3537 
	#R_TILEPRO_IMM16_X0_TLS_GD
 66

	)

3538 
	#R_TILEPRO_IMM16_X1_TLS_GD
 67

	)

3539 
	#R_TILEPRO_IMM16_X0_TLS_GD_LO
 68

	)

3540 
	#R_TILEPRO_IMM16_X1_TLS_GD_LO
 69

	)

3541 
	#R_TILEPRO_IMM16_X0_TLS_GD_HI
 70

	)

3542 
	#R_TILEPRO_IMM16_X1_TLS_GD_HI
 71

	)

3543 
	#R_TILEPRO_IMM16_X0_TLS_GD_HA
 72

	)

3544 
	#R_TILEPRO_IMM16_X1_TLS_GD_HA
 73

	)

3545 
	#R_TILEPRO_IMM16_X0_TLS_IE
 74

	)

3546 
	#R_TILEPRO_IMM16_X1_TLS_IE
 75

	)

3547 
	#R_TILEPRO_IMM16_X0_TLS_IE_LO
 76

	)

3548 
	#R_TILEPRO_IMM16_X1_TLS_IE_LO
 77

	)

3549 
	#R_TILEPRO_IMM16_X0_TLS_IE_HI
 78

	)

3550 
	#R_TILEPRO_IMM16_X1_TLS_IE_HI
 79

	)

3551 
	#R_TILEPRO_IMM16_X0_TLS_IE_HA
 80

	)

3552 
	#R_TILEPRO_IMM16_X1_TLS_IE_HA
 81

	)

3553 
	#R_TILEPRO_TLS_DTPMOD32
 82

	)

3554 
	#R_TILEPRO_TLS_DTPOFF32
 83

	)

3555 
	#R_TILEPRO_TLS_TPOFF32
 84

	)

3556 
	#R_TILEPRO_IMM16_X0_TLS_LE
 85

	)

3557 
	#R_TILEPRO_IMM16_X1_TLS_LE
 86

	)

3558 
	#R_TILEPRO_IMM16_X0_TLS_LE_LO
 87

	)

3559 
	#R_TILEPRO_IMM16_X1_TLS_LE_LO
 88

	)

3560 
	#R_TILEPRO_IMM16_X0_TLS_LE_HI
 89

	)

3561 
	#R_TILEPRO_IMM16_X1_TLS_LE_HI
 90

	)

3562 
	#R_TILEPRO_IMM16_X0_TLS_LE_HA
 91

	)

3563 
	#R_TILEPRO_IMM16_X1_TLS_LE_HA
 92

	)

3565 
	#R_TILEPRO_GNU_VTINHERIT
 128

	)

3566 
	#R_TILEPRO_GNU_VTENTRY
 129

	)

3568 
	#R_TILEPRO_NUM
 130

	)

3572 
	#R_TILEGX_NONE
 0

	)

3573 
	#R_TILEGX_64
 1

	)

3574 
	#R_TILEGX_32
 2

	)

3575 
	#R_TILEGX_16
 3

	)

3576 
	#R_TILEGX_8
 4

	)

3577 
	#R_TILEGX_64_PCREL
 5

	)

3578 
	#R_TILEGX_32_PCREL
 6

	)

3579 
	#R_TILEGX_16_PCREL
 7

	)

3580 
	#R_TILEGX_8_PCREL
 8

	)

3581 
	#R_TILEGX_HW0
 9

	)

3582 
	#R_TILEGX_HW1
 10

	)

3583 
	#R_TILEGX_HW2
 11

	)

3584 
	#R_TILEGX_HW3
 12

	)

3585 
	#R_TILEGX_HW0_LAST
 13

	)

3586 
	#R_TILEGX_HW1_LAST
 14

	)

3587 
	#R_TILEGX_HW2_LAST
 15

	)

3588 
	#R_TILEGX_COPY
 16

	)

3589 
	#R_TILEGX_GLOB_DAT
 17

	)

3590 
	#R_TILEGX_JMP_SLOT
 18

	)

3591 
	#R_TILEGX_RELATIVE
 19

	)

3592 
	#R_TILEGX_BROFF_X1
 20

	)

3593 
	#R_TILEGX_JUMPOFF_X1
 21

	)

3594 
	#R_TILEGX_JUMPOFF_X1_PLT
 22

	)

3595 
	#R_TILEGX_IMM8_X0
 23

	)

3596 
	#R_TILEGX_IMM8_Y0
 24

	)

3597 
	#R_TILEGX_IMM8_X1
 25

	)

3598 
	#R_TILEGX_IMM8_Y1
 26

	)

3599 
	#R_TILEGX_DEST_IMM8_X1
 27

	)

3600 
	#R_TILEGX_MT_IMM14_X1
 28

	)

3601 
	#R_TILEGX_MF_IMM14_X1
 29

	)

3602 
	#R_TILEGX_MMSTART_X0
 30

	)

3603 
	#R_TILEGX_MMEND_X0
 31

	)

3604 
	#R_TILEGX_SHAMT_X0
 32

	)

3605 
	#R_TILEGX_SHAMT_X1
 33

	)

3606 
	#R_TILEGX_SHAMT_Y0
 34

	)

3607 
	#R_TILEGX_SHAMT_Y1
 35

	)

3608 
	#R_TILEGX_IMM16_X0_HW0
 36

	)

3609 
	#R_TILEGX_IMM16_X1_HW0
 37

	)

3610 
	#R_TILEGX_IMM16_X0_HW1
 38

	)

3611 
	#R_TILEGX_IMM16_X1_HW1
 39

	)

3612 
	#R_TILEGX_IMM16_X0_HW2
 40

	)

3613 
	#R_TILEGX_IMM16_X1_HW2
 41

	)

3614 
	#R_TILEGX_IMM16_X0_HW3
 42

	)

3615 
	#R_TILEGX_IMM16_X1_HW3
 43

	)

3616 
	#R_TILEGX_IMM16_X0_HW0_LAST
 44

	)

3617 
	#R_TILEGX_IMM16_X1_HW0_LAST
 45

	)

3618 
	#R_TILEGX_IMM16_X0_HW1_LAST
 46

	)

3619 
	#R_TILEGX_IMM16_X1_HW1_LAST
 47

	)

3620 
	#R_TILEGX_IMM16_X0_HW2_LAST
 48

	)

3621 
	#R_TILEGX_IMM16_X1_HW2_LAST
 49

	)

3622 
	#R_TILEGX_IMM16_X0_HW0_PCREL
 50

	)

3623 
	#R_TILEGX_IMM16_X1_HW0_PCREL
 51

	)

3624 
	#R_TILEGX_IMM16_X0_HW1_PCREL
 52

	)

3625 
	#R_TILEGX_IMM16_X1_HW1_PCREL
 53

	)

3626 
	#R_TILEGX_IMM16_X0_HW2_PCREL
 54

	)

3627 
	#R_TILEGX_IMM16_X1_HW2_PCREL
 55

	)

3628 
	#R_TILEGX_IMM16_X0_HW3_PCREL
 56

	)

3629 
	#R_TILEGX_IMM16_X1_HW3_PCREL
 57

	)

3630 
	#R_TILEGX_IMM16_X0_HW0_LAST_PCREL
 58

	)

3631 
	#R_TILEGX_IMM16_X1_HW0_LAST_PCREL
 59

	)

3632 
	#R_TILEGX_IMM16_X0_HW1_LAST_PCREL
 60

	)

3633 
	#R_TILEGX_IMM16_X1_HW1_LAST_PCREL
 61

	)

3634 
	#R_TILEGX_IMM16_X0_HW2_LAST_PCREL
 62

	)

3635 
	#R_TILEGX_IMM16_X1_HW2_LAST_PCREL
 63

	)

3636 
	#R_TILEGX_IMM16_X0_HW0_GOT
 64

	)

3637 
	#R_TILEGX_IMM16_X1_HW0_GOT
 65

	)

3638 
	#R_TILEGX_IMM16_X0_HW0_PLT_PCREL
 66

	)

3639 
	#R_TILEGX_IMM16_X1_HW0_PLT_PCREL
 67

	)

3640 
	#R_TILEGX_IMM16_X0_HW1_PLT_PCREL
 68

	)

3641 
	#R_TILEGX_IMM16_X1_HW1_PLT_PCREL
 69

	)

3642 
	#R_TILEGX_IMM16_X0_HW2_PLT_PCREL
 70

	)

3643 
	#R_TILEGX_IMM16_X1_HW2_PLT_PCREL
 71

	)

3644 
	#R_TILEGX_IMM16_X0_HW0_LAST_GOT
 72

	)

3645 
	#R_TILEGX_IMM16_X1_HW0_LAST_GOT
 73

	)

3646 
	#R_TILEGX_IMM16_X0_HW1_LAST_GOT
 74

	)

3647 
	#R_TILEGX_IMM16_X1_HW1_LAST_GOT
 75

	)

3648 
	#R_TILEGX_IMM16_X0_HW3_PLT_PCREL
 76

	)

3649 
	#R_TILEGX_IMM16_X1_HW3_PLT_PCREL
 77

	)

3650 
	#R_TILEGX_IMM16_X0_HW0_TLS_GD
 78

	)

3651 
	#R_TILEGX_IMM16_X1_HW0_TLS_GD
 79

	)

3652 
	#R_TILEGX_IMM16_X0_HW0_TLS_LE
 80

	)

3653 
	#R_TILEGX_IMM16_X1_HW0_TLS_LE
 81

	)

3654 
	#R_TILEGX_IMM16_X0_HW0_LAST_TLS_LE
 82

	)

3655 
	#R_TILEGX_IMM16_X1_HW0_LAST_TLS_LE
 83

	)

3656 
	#R_TILEGX_IMM16_X0_HW1_LAST_TLS_LE
 84

	)

3657 
	#R_TILEGX_IMM16_X1_HW1_LAST_TLS_LE
 85

	)

3658 
	#R_TILEGX_IMM16_X0_HW0_LAST_TLS_GD
 86

	)

3659 
	#R_TILEGX_IMM16_X1_HW0_LAST_TLS_GD
 87

	)

3660 
	#R_TILEGX_IMM16_X0_HW1_LAST_TLS_GD
 88

	)

3661 
	#R_TILEGX_IMM16_X1_HW1_LAST_TLS_GD
 89

	)

3663 
	#R_TILEGX_IMM16_X0_HW0_TLS_IE
 92

	)

3664 
	#R_TILEGX_IMM16_X1_HW0_TLS_IE
 93

	)

3665 
	#R_TILEGX_IMM16_X0_HW0_LAST_PLT_PCREL
 94

	)

3666 
	#R_TILEGX_IMM16_X1_HW0_LAST_PLT_PCREL
 95

	)

3667 
	#R_TILEGX_IMM16_X0_HW1_LAST_PLT_PCREL
 96

	)

3668 
	#R_TILEGX_IMM16_X1_HW1_LAST_PLT_PCREL
 97

	)

3669 
	#R_TILEGX_IMM16_X0_HW2_LAST_PLT_PCREL
 98

	)

3670 
	#R_TILEGX_IMM16_X1_HW2_LAST_PLT_PCREL
 99

	)

3671 
	#R_TILEGX_IMM16_X0_HW0_LAST_TLS_IE
 100

	)

3672 
	#R_TILEGX_IMM16_X1_HW0_LAST_TLS_IE
 101

	)

3673 
	#R_TILEGX_IMM16_X0_HW1_LAST_TLS_IE
 102

	)

3674 
	#R_TILEGX_IMM16_X1_HW1_LAST_TLS_IE
 103

	)

3676 
	#R_TILEGX_TLS_DTPMOD64
 106

	)

3677 
	#R_TILEGX_TLS_DTPOFF64
 107

	)

3678 
	#R_TILEGX_TLS_TPOFF64
 108

	)

3679 
	#R_TILEGX_TLS_DTPMOD32
 109

	)

3680 
	#R_TILEGX_TLS_DTPOFF32
 110

	)

3681 
	#R_TILEGX_TLS_TPOFF32
 111

	)

3682 
	#R_TILEGX_TLS_GD_CALL
 112

	)

3683 
	#R_TILEGX_IMM8_X0_TLS_GD_ADD
 113

	)

3684 
	#R_TILEGX_IMM8_X1_TLS_GD_ADD
 114

	)

3685 
	#R_TILEGX_IMM8_Y0_TLS_GD_ADD
 115

	)

3686 
	#R_TILEGX_IMM8_Y1_TLS_GD_ADD
 116

	)

3687 
	#R_TILEGX_TLS_IE_LOAD
 117

	)

3688 
	#R_TILEGX_IMM8_X0_TLS_ADD
 118

	)

3689 
	#R_TILEGX_IMM8_X1_TLS_ADD
 119

	)

3690 
	#R_TILEGX_IMM8_Y0_TLS_ADD
 120

	)

3691 
	#R_TILEGX_IMM8_Y1_TLS_ADD
 121

	)

3693 
	#R_TILEGX_GNU_VTINHERIT
 128

	)

3694 
	#R_TILEGX_GNU_VTENTRY
 129

	)

3696 
	#R_TILEGX_NUM
 130

	)

3699 
	#EF_RISCV_RVC
 0x0001

	)

3700 
	#EF_RISCV_FLOAT_ABI
 0x0006

	)

3701 
	#EF_RISCV_FLOAT_ABI_SOFT
 0x0000

	)

3702 
	#EF_RISCV_FLOAT_ABI_SINGLE
 0x0002

	)

3703 
	#EF_RISCV_FLOAT_ABI_DOUBLE
 0x0004

	)

3704 
	#EF_RISCV_FLOAT_ABI_QUAD
 0x0006

	)

3707 
	#R_RISCV_NONE
 0

	)

3708 
	#R_RISCV_32
 1

	)

3709 
	#R_RISCV_64
 2

	)

3710 
	#R_RISCV_RELATIVE
 3

	)

3711 
	#R_RISCV_COPY
 4

	)

3712 
	#R_RISCV_JUMP_SLOT
 5

	)

3713 
	#R_RISCV_TLS_DTPMOD32
 6

	)

3714 
	#R_RISCV_TLS_DTPMOD64
 7

	)

3715 
	#R_RISCV_TLS_DTPREL32
 8

	)

3716 
	#R_RISCV_TLS_DTPREL64
 9

	)

3717 
	#R_RISCV_TLS_TPREL32
 10

	)

3718 
	#R_RISCV_TLS_TPREL64
 11

	)

3722 
	#R_BPF_NONE
 0

	)

3723 
	#R_BPF_MAP_FD
 1

	)

3727 
	#R_METAG_HIADDR16
 0

	)

3728 
	#R_METAG_LOADDR16
 1

	)

3729 
	#R_METAG_ADDR32
 2

	)

3730 
	#R_METAG_NONE
 3

	)

3731 
	#R_METAG_RELBRANCH
 4

	)

3732 
	#R_METAG_GETSETOFF
 5

	)

3735 
	#R_METAG_REG32OP1
 6

	)

3736 
	#R_METAG_REG32OP2
 7

	)

3737 
	#R_METAG_REG32OP3
 8

	)

3738 
	#R_METAG_REG16OP1
 9

	)

3739 
	#R_METAG_REG16OP2
 10

	)

3740 
	#R_METAG_REG16OP3
 11

	)

3741 
	#R_METAG_REG32OP4
 12

	)

3743 
	#R_METAG_HIOG
 13

	)

3744 
	#R_METAG_LOOG
 14

	)

3746 
	#R_METAG_REL8
 15

	)

3747 
	#R_METAG_REL16
 16

	)

3750 
	#R_METAG_GNU_VTINHERIT
 30

	)

3751 
	#R_METAG_GNU_VTENTRY
 31

	)

3754 
	#R_METAG_HI16_GOTOFF
 32

	)

3755 
	#R_METAG_LO16_GOTOFF
 33

	)

3756 
	#R_METAG_GETSET_GOTOFF
 34

	)

3757 
	#R_METAG_GETSET_GOT
 35

	)

3758 
	#R_METAG_HI16_GOTPC
 36

	)

3759 
	#R_METAG_LO16_GOTPC
 37

	)

3760 
	#R_METAG_HI16_PLT
 38

	)

3761 
	#R_METAG_LO16_PLT
 39

	)

3762 
	#R_METAG_RELBRANCH_PLT
 40

	)

3763 
	#R_METAG_GOTOFF
 41

	)

3764 
	#R_METAG_PLT
 42

	)

3765 
	#R_METAG_COPY
 43

	)

3766 
	#R_METAG_JMP_SLOT
 44

	)

3767 
	#R_METAG_RELATIVE
 45

	)

3768 
	#R_METAG_GLOB_DAT
 46

	)

3771 
	#R_METAG_TLS_GD
 47

	)

3772 
	#R_METAG_TLS_LDM
 48

	)

3773 
	#R_METAG_TLS_LDO_HI16
 49

	)

3774 
	#R_METAG_TLS_LDO_LO16
 50

	)

3775 
	#R_METAG_TLS_LDO
 51

	)

3776 
	#R_METAG_TLS_IE
 52

	)

3777 
	#R_METAG_TLS_IENONPIC
 53

	)

3778 
	#R_METAG_TLS_IENONPIC_HI16
 54

	)

3779 
	#R_METAG_TLS_IENONPIC_LO16
 55

	)

3780 
	#R_METAG_TLS_TPOFF
 56

	)

3781 
	#R_METAG_TLS_DTPMOD
 57

	)

3782 
	#R_METAG_TLS_DTPOFF
 58

	)

3783 
	#R_METAG_TLS_LE
 59

	)

3784 
	#R_METAG_TLS_LE_HI16
 60

	)

3785 
	#R_METAG_TLS_LE_LO16
 61

	)

3787 
	g__END_DECLS


	@include/ether.h

10 
	#ETH_ADDR_LEN
 6

	)

11 
	tEaddr
[
ETH_ADDR_LEN
];

15 
	sëhîPkt
 {

16 
byã
 
	md°
[
ETH_ADDR_LEN
];

17 
byã
 
	m§c
[
ETH_ADDR_LEN
];

18 
uöt16
 
	mty≥
;

19 
byã
 
	md©a
[1];

22 
	#ETH_HDR_LEN
 14

	)

27 
	#ETH_MTU
 1500

	)

28 
	#ETH_VLAN_LEN
 4

	)

29 
	#ETH_CRC_LEN
 4

	)

32 
	#ETH_MAX_PKT_LEN
 ( 
ETH_HDR_LEN
 + 
ETH_VLAN_LEN
 + 
ETH_MTU
 )

	)

34 
	#ETH_BUF_SIZE
 1522

	)

40 
	#ETH_STATE_FREE
 0

	)

41 
	#ETH_STATE_DOWN
 1

	)

42 
	#ETH_STATE_UP
 2

	)

46 
	#ETH_CTRL_GET_MAC
 1

	)

47 
	#ETH_CTRL_ADD_MCAST
 2

	)

48 
	#ETH_CTRL_REMOVE_MCAST
 3

	)

52 
	#ETH_NUM_MCAST
 32

	)

56 
	#ETH_TYPE_3C905C
 1

	)

57 
	#ETH_TYPE_E1000E
 2

	)

58 
	#ETH_TYPE_QUARK_ETH
 3

	)

62 
	sëhcblk
 {

63 
byã
 
	m°©e
;

64 
díåy
 *
	mphy
;

65 
byã
 
	mty≥
;

69 
díåy
 *
	mdev
;

70 *
	mc§
;

71 
uöt32
 
	mpcidev
;

72 
uöt32
 
	mioba£
;

73 
uöt32
 
	mÊashba£
;

74 
uöt32
 
	mmemba£
;

76 *
	mrxRög
;

77 *
	mrxBufs
;

78 
uöt32
 
	mrxHód
;

79 
uöt32
 
	mrxTaû
;

80 
uöt32
 
	mrxRögSize
;

81 
uöt32
 
	mrxIrq
;

83 *
	mtxRög
;

84 *
	mtxBufs
;

85 
uöt32
 
	mtxHód
;

86 
uöt32
 
	mtxTaû
;

87 
uöt32
 
	mtxRögSize
;

88 
uöt32
 
	mtxIrq
;

90 
uöt8
 
	mdevAddªss
[
ETH_ADDR_LEN
];

92 
uöt8
 
	maddrLí
;

93 
uöt16
 
	mmtu
;

95 
uöt32
 
	mîr‹s
;

96 
sid32
 
	mi£m
;

97 
sid32
 
	mo£m
;

98 
uöt16
 
	mi°¨t
;

100 
öt16
 
	möPoﬁ
;

101 
öt16
 
	moutPoﬁ
;

103 
öt16
 
	m¥oms
;

105 
öt16
 
	med_mc£t
;

106 
öt16
 
	med_mcc
;

107 
Eaddr
 
	med_mˇ
[
ETH_NUM_MCAST
];

110 
ëhcblk
 
ëhîèb
[];

	@include/ethloop.h

8 #i‚de‡
_ETHLOOP_H_


9 
	#_ETHLOOP_H_


	)

12 
	#ELOOP_MTU
 1500

	)

13 
	#ELOOP_LINKHDRSIZE
 
ETH_HDR_LEN


	)

15 
	#ELOOP_BUFSIZE
 
ELOOP_MTU
 + 
ELOOP_LINKHDRSIZE


	)

16 
	#ELOOP_NBUF
 100

	)

18 
	#ELOOP_CTRL_GETHOLD
 1

	)

19 
	#ELOOP_CTRL_SETFLAG
 2

	)

20 
	#ELOOP_CTRL_CLRFLAG
 3

	)

22 
	#ELOOP_FLAG_HOLDNXT
 0x01

	)

23 
	#ELOOP_FLAG_DROPNXT
 0x04

	)

24 
	#ELOOP_FLAG_DROPALL
 0x08

	)

26 
	#ELOOP_STATE_FREE
 0

	)

27 
	#ELOOP_STATE_ALLOC
 1

	)

32 
	sëhlo›


34 
	m°©e
;

35 
díåy
 *
	mdev
;

36 
	mpoﬁid
;

37 
byã
 
	mÊags
;

40 
	mödex
;

41 
sid32
 
	m£m
;

42 
	mcou¡
;

43 *
	mbuf„r
[
ELOOP_NBUF
];

44 
	mpkéí
[
ELOOP_NBUF
];

47 
sid32
 
	mh£m
;

48 *
	mhﬁd
;

49 
	mhﬁdÀn
;

52 
uöt32
 
	mnout
;

55 
ëhlo›
 
ño›èb
[];

58 
devˇŒ
 
ëhlo›Inô
(
díåy
 *);

59 
devˇŒ
 
ëhlo›O≥n
(
díåy
 *);

60 
devˇŒ
 
ëhlo›Clo£
(
díåy
 *);

61 
devˇŒ
 
ëhlo›Ród
(
díåy
 *, *, 
uöt32
);

62 
devˇŒ
 
ëhlo›Wrôe
(
díåy
 *, *, 
uöt32
);

63 
devˇŒ
 
ëhlo›C⁄åﬁ
(
díåy
 *, , 
öt32
, int32);

	@include/file.h

5 
	#F_MODE_R
 0x01

	)

6 
	#F_MODE_W
 0x02

	)

7 
	#F_MODE_RW
 0x03

	)

8 
	#F_MODE_N
 0x04

	)

9 
	#F_MODE_O
 0x08

	)

12 
	#F_MODE_NO
 0x0C

	)

16 
	#F_CTL_DEL
 1

	)

17 
	#F_CTL_TRUNC
 2

	)

18 
	#F_CTL_MKDIR
 3

	)

19 
	#F_CTL_RMDIR
 4

	)

20 
	#F_CTL_SIZE
 5

	)

	@include/filesys.h

2 #i‚de‡
NFILE


3 
	#NFILE
 50

	)

6 
	#FILE_FREE
 0

	)

7 
	#FILE_OCCUPIED
 1

	)

9 
	#FILE_UNOPEN
 0

	)

10 
	#FILE_OPEN
 1

	)

12 
	#DL_OPEN
 0

	)

13 
	#DL_CLOSE
 1

	)

15 
	sfûì¡
 {

16 
uöt16
 
	mfûe°©e
;

18 * 
	mfûï©h
;

19 * 
	mfûec⁄ã¡
;

20 
uöt32
 
	mfûesize
;

21 
uöt16
 
	mfûe›í
;

22 
	mlﬂd_¥o˚ss
[
NPROC
];

25 
fûì¡
 
fûëab
[];

	@include/flash.h

11 #i‚de‡
_FLASH_H_


12 
	#_FLASH_H_


	)

15 
	#MAX_LIVE_BLOCKS
 8

	)

16 
	#FLASH_BLK_SIZE
 512

	)

18 
	#FLASH_BLOCK_FREE
 0

	)

19 
	#FLASH_BLOCK_CLEAN
 1

	)

20 
	#FLASH_BLOCK_DIRTY
 2

	)

23 
	#CFE_MIN_BLOCK
 0x0000

	)

24 
	#CFE_MAX_BLOCK
 0x01FF

	)

25 
	#KERNEL_MIN_BLOCK
 0x0200

	)

26 
	#KERNEL_MAX_BLOCK
 0x03FF

	)

27 
	#NVRAM_MIN_BLOCK
 0x1FC0

	)

28 
	#NVRAM_MAX_BLOCK
 0x1FFF

	)

31 
	#FLASH_BLOCK_SIZE
 0x0000

	)

32 
	#FLASH_N_BLOCKS
 0x0001

	)

33 
	#FLASH_SYNC
 0x0002

	)

36 
	#FLASH_WIDEMODE
 1

	)

37 
	#MAX_REGIONS
 8

	)

40 
	#TRX_MAGIC
 0x30524448

	)

43 
	såx_hódî


45 
uöt32
 
	mmagic
;

46 
uöt32
 
	mÀn
;

47 
uöt32
 
	m¸c
;

48 
uöt32
 
	mÊags_vîs
;

49 
uöt32
 
	moff£ts
[3];

53 
	sfûe


55 
uöt32
 
	mÀn
;

56 *
	m«me
;

57 *
	md©a
;

60 
	sÊash_ªgi⁄


62 
uöt32
 
	mnblocks
;

63 
uöt32
 
	mblock_size
;

64 
uöt32
 
	mªgi⁄_°¨t
;

65 
uöt32
 
	mªgi⁄_size
;

68 
	sÊash_block


70 
uöt32
 
	m°¨t_pos
;

71 
uöt32
 
	msize
;

72 
byã
 
	m°©e
;

73 *
	mbuf„r
;

76 
	sÊash


78 
díåy
 *
	mdevi˚
;

79 
byã
 
	mcomm™ds
;

80 
uöt32
 
	mba£
;

81 
sid32
 
	mlock
;

82 
uöt32
 
	msize
;

83 
byã
 
	mmode
;

84 
uöt16
 
	mƒegi⁄s
;

85 
Êash_ªgi⁄
 
	mªgi⁄s
[
MAX_REGIONS
];

87 
uöt32
 
	mlog_size
;

88 
uöt32
 
	m∆og_blocks
;

91 
Êash_block
 
	mîa£_blocks
[
MAX_LIVE_BLOCKS
];

92 
byã
 
	mcuº_block
;

95 
Êash_block
 
bad_block
;

102 
	#CFI_PUT_8
(
addr
,
off£t
,
cmd
) \

103 *((vﬁ©ûê*)((
addr
)+((
off£t
)<<
FLASH_WIDEMODE
)))=(
cmd
)

	)

104 
	#CFI_GET_8
(
addr
,
off£t
) \

105 *((vﬁ©ûê*)((
addr
)+((
off£t
)<<
FLASH_WIDEMODE
)))

	)

108 
	#CFI_QUERY_ADDR
 0x55

	)

109 
	#CFI_QUERY_MODE
 0x98

	)

110 
	#CFI_QUERY_EXIT
 0xFF

	)

112 
	#CFI_MANUFACTURER
 0x00

	)

113 
	#CFI_DEVICE
 0x01

	)

114 
	#CFI_SIGNATURE
 0x10

	)

115 
	#CFI_QUERY_STRING
 0x10

	)

116 
	#CFI_COMMAND_SET
 0x13

	)

117 
	#CFI_DEV_SIZE
 0x27

	)

118 
	#CFI_DEV_INTERFACE
 0x28

	)

119 
	#CFI_MAX_BUFFER
 0x2A

	)

120 
	#CFI_REGION_COUNT
 0x2C

	)

121 
	#CFI_REGION_TAB
 0x2D

	)

124 
	#FLASH_INTEL_ECS
 0x0001

	)

125 
	#FLASH_AMD_SCS
 0x0002

	)

126 
	#FLASH_INTEL_SCS
 0x0003

	)

127 
	#FLASH_AMD_ECS
 0x0004

	)

128 
	#FLASH_MTSU_SCS
 0x0100

	)

129 
	#FLASH_MTSU_ECS
 0x0101

	)

136 
	#INTEL_PUT_8
(
addr
,
byã
) \

137 *((vﬁ©ûê*)(()(
addr
)))=(
byã
)

	)

138 
	#INTEL_GET_8
(
addr
) \

139 *((vﬁ©ûê*)(()(
addr
)))

	)

142 
	#AMD_PUT_8
(
addr
,
byã
) \

143 *((vﬁ©ûê*)(()(
addr
)))=(
byã
)

	)

144 
	#AMD_GET_8
(
addr
) \

145 *((vﬁ©ûê*)(()(
addr
)))

	)

148 
	#INTEL_PUT_16
(
addr
,
w‹d
) \

149 *((vﬁ©ûê
öt16
 *)(()(
addr
)))=(
w‹d
)

	)

150 
	#INTEL_GET_16
(
addr
) \

151 *((vﬁ©ûê
öt16
 *)(()(
addr
)))

	)

154 
	#AMD_PUT_16
(
addr
,
w‹d
) \

155 *((vﬁ©ûê
öt16
 *)(()(
addr
)))=(
w‹d
)

	)

156 
	#AMD_GET_16
(
addr
) \

157 *((vﬁ©ûê
öt16
 *)(()(
addr
)))

	)

161 
	#INTEL_READ
 0xFF

	)

162 
	#INTEL_PROGRAM
 0x40

	)

163 
	#INTEL_ERASE
 0x20

	)

164 
	#INTEL_CONFIRM
 0xD0

	)

165 
	#INTEL_RESUME
 0xD0

	)

166 
	#INTEL_UNLOCK
 0xD0

	)

167 
	#INTEL_SUSPEND
 0xB0

	)

168 
	#INTEL_READ_SR
 0x70

	)

169 
	#INTEL_CLR_SR
 0x50

	)

170 
	#INTEL_READ_ID
 0x90

	)

171 
	#INTEL_BLOCKMOD
 0x60

	)

172 
	#INTEL_LOCK
 0x01

	)

173 
	#INTEL_LOCKDOWN
 0x2F

	)

176 
	#AMD_UNLOCK_CYCLE1
 0xAA

	)

177 
	#AMD_UNLOCK_CYCLE2
 0x55

	)

178 
	#AMD_ERASE_CYCLE3
 0x80

	)

179 
	#AMD_ERASE_CYCLE6
 0x30

	)

180 
	#AMD_PROGRAM_CYCLE3
 0xA0

	)

181 
	#AMD_RESET
 0xF0

	)

182 
	#AMD_READ
 0xFF

	)

183 
	#AMD_BLOCKMOD
 0x60

	)

184 
	#AMD_LOCK
 0x01

	)

185 
	#AMD_CLR_SR
 0x50

	)

188 
	#AMD_REG_CYCLE1
 0x555

	)

189 
	#AMD_REG_CYCLE2
 0x2AA

	)

190 
	#AMD_SR_WSMS
 0x001

	)

193 
	#INTEL_SR_WSMS
 7

	)

194 
	#INTEL_SR_ESS
 6

	)

195 
	#INTEL_SR_ES
 5

	)

196 
	#INTEL_SR_PS
 4

	)

197 
	#INTEL_SR_PSS
 2

	)

198 
	#INTEL_SR_BLS
 1

	)

201 
	#INTEL_ID_MFG
 0x00

	)

202 
	#INTEL_ID_DEV
 0x02

	)

203 
	#INTEL_ID_BLS
 0x04

	)

206 
	#INTEL_S_LOCK
 0x01

	)

207 
	#INTEL_H_LOCK
 0x02

	)

210 
	#AMD_S_LOCK
 0x01

	)

211 
	#AMD_H_LOCK
 0x02

	)

214 
	#FLASH_BLOCK
 0x00

	)

215 
	#FLASH_LOGBLOCK
 0x01

	)

218 
	#FLASH_STATUS
 0x0000

	)

219 
	#FLASH_MODE
 0x0001

	)

220 
	#FLASH_LOCKED
 0x0010

	)

221 
	#FLASH_LOCK
 0x0011

	)

222 
	#FLASH_UNLOCK
 0x0012

	)

223 
	#FLASH_LOCKDOWN
 0x0013

	)

224 
	#FLASH_ERASE_PREP
 0x0014

	)

225 
	#FLASH_RESET
 0x0015

	)

227 
Êash
 
Êashèb
[];

230 
devˇŒ
 
ÊashInô
(
díåy
 *);

231 
devˇŒ
 
ÊashO≥n
(
díåy
 *, 
va_li°
);

232 
devˇŒ
 
ÊashRód
(
díåy
 *, 
byã
 *, 
uöt32
);

233 
devˇŒ
 
ÊashWrôe
(
díåy
 *, 
byã
 *, 
uöt32
);

234 
devˇŒ
 
ÊashSìk
(
díåy
 *, 
uöt32
);

235 
devˇŒ
 
ÊashC⁄åﬁ
(
díåy
 *, 
uöt16
, 
öt32
, int32);

236 
devˇŒ
 
ÊashClo£
(
díåy
 *);

239 
devˇŒ
 
logiˇlRód
(
Êash
 *, 
byã
 *, 
uöt32
);

240 
devˇŒ
 
logiˇlWrôe
(
Êash
 *, 
byã
 *, 
uöt32
);

241 
Êash_block
 
logiˇlM≠
(
Êash
 *, 
uöt32
);

244 
devˇŒ
 
physiˇlRód
(
Êash
 *, 
Êash_block
 *);

245 
devˇŒ
 
physiˇlWrôe
(
Êash
 *, 
Êash_block
 *);

246 
devˇŒ
 
physiˇlEø£
(
Êash
 *, 
Êash_block
 *);

247 
devˇŒ
 
physiˇlC⁄åﬁ
(
Êash
 *, 
Êash_block
 *, 
byã
,

248 
uöt32
);

249 
devˇŒ
 
physiˇlI¡ñRód
(
Êash
 *, 
Êash_block
 *);

250 
devˇŒ
 
physiˇlI¡ñWrôe
(
Êash
 *, 
Êash_block
 *);

251 
devˇŒ
 
physiˇlI¡ñEø£
(
Êash
 *, 
Êash_block
 *);

252 
devˇŒ
 
physiˇlI¡ñC⁄åﬁ
(
Êash
 *, 
Êash_block
 *, 
byã
,

253 
uöt32
);

254 
devˇŒ
 
physiˇlAMDRód
(
Êash
 *, 
Êash_block
 *);

257 
boﬁ
 
vÆid©eTrx
(
fûe
 *);

260 
sysˇŒ
 
¥ötFûeSèts
(
fûe
 *, *, *, , );

261 
sysˇŒ
 
‰ìFûe
(
fûe
 *);

	@include/hpet.h

3 
	#HPET_GC_OE
 0x00000001

	)

4 
	#GPET_GC_LRE
 0x00000002

	)

6 
	#HPET_GIS_T0
 0x00000001

	)

8 
	#HPET_TXCC_IT
 0x00000002

	)

9 
	#HPET_TXCC_IE
 0x00000004

	)

10 
	#HPET_TXCC_TYP
 0x00000008

	)

11 
	#HPET_TXCC_TVS
 0x00000040

	)

15 
	sh≥t_c§eg
 {

16 
uöt32
 
	mgcid_l
;

17 
uöt32
 
	mgcid_u
;

18 
uöt32
 
	mªs1
[2];

19 
uöt32
 
	mgc
;

20 
uöt32
 
	mªs2
[3];

21 
uöt32
 
	mgis
;

22 
uöt32
 
	mªs3
[51];

23 
uöt32
 
	mmcv_l
;

24 
uöt32
 
	mmcv_u
;

25 
uöt32
 
	mªs4
[2];

26 
uöt32
 
	mt0cc_l
;

27 
uöt32
 
	mt0cc_u
;

28 
uöt32
 
	mt0cv_l
;

29 
uöt32
 
	mt0cv_u
;

32 vﬁ©ûê
h≥t_c§eg
 *
h≥t
;

34 
	#HPET_BASE_ADDR
 0xFED00000

	)

	@include/icmp.h

3 
	#ICMP_SLOTS
 10

	)

4 
	#ICMP_QSIZ
 8

	)

8 
	#ICMP_FREE
 0

	)

9 
	#ICMP_USED
 1

	)

10 
	#ICMP_RECV
 2

	)

12 
	#ICMP_HDR_LEN
 8

	)

16 
	#ICMP_ECHOREPLY
 0

	)

17 
	#ICMP_ECHOREQST
 8

	)

21 
	sicm≥¡ry
 {

22 
öt32
 
	mic°©e
;

23 
uöt32
 
	mi¸emù
;

24 
öt32
 
	michód
;

25 
öt32
 
	mi˘aû
;

26 
öt32
 
	miccou¡
;

27 
pid32
 
	mi˝id
;

28 
√çackë
 *
	micqueue
[
ICMP_QSIZ
];

31 
icm≥¡ry
 
icm±ab
[];

	@include/icu.h

3 
	#ICU1
 0x20

	)

4 
	#ICU2
 0xA0

	)

6 
	#OCR
 
ICU1


	)

7 
	#IMR
 (
ICU1
+1Ë

	)

9 
	#EOI
 0x20

	)

	@include/interrupt.h

5 
	#MAX_EXT_IRQS
 97

	)

16 
	#MAX_IRQ_SHARING
 1

	)

22 
	#INT_ENTRY_SIZE
 16

	)

28 
	#INT_NEXT_HAND
 8

	)

33 #i‚def 
ASM


37 
	söt_öfo
 {

38 (*
	möt_h™dÀr
Ë(
	möt32
);

39 
öt32
 
	möt_¨g
;

46 
	söt_íåy
 {

47 
öt_öfo
 
	möt_ôems
[
MAX_IRQ_SHARING
+1];

48 
öt32
 
	mnôems
;

56 
öt_íåy
 
öt_a˘i⁄s
[
MAX_EXT_IRQS
];

60 
uöt16
 
gúmask
;

	@include/ip.h

3 
	#IP_BCAST
 0xfffffff‡

	)

4 
	#IP_THIS
 0xfffffff‡

	)

5 
	#IP_ALLZEROS
 0x00000000

	)

7 
	#IP_ICMP
 1

	)

8 
	#IP_UDP
 17

	)

10 
	#IP_ASIZE
 4

	)

11 
	#IP_HDR_LEN
 20

	)

12 
	#IP_VH
 0x45

	)

14 
	#IP_OQSIZ
 8

	)

18 
	siqíåy
 {

19 
öt32
 
	miqhód
;

20 
öt32
 
	miqèû
;

21 
sid32
 
	miq£m
;

22 
√çackë
 *
	miqbuf
[
IP_OQSIZ
];

25 
iqíåy
 
ùoqueue
;

	@include/kernel.h

5 
	tbyã
;

6 
	tuöt8
;

7 
	töt32
;

8 
	töt16
;

9 
	tuöt32
;

10 
	tuöt16
;

11 
	tuöt64
;

15 
öt32
 
	tsid32
;

16 
öt16
 
	tqid16
;

17 
öt32
 
	tpid32
;

18 
öt32
 
	tdid32
;

19 
öt16
 
	t¥i16
;

20 
uöt32
 
	tumsg32
;

21 
öt32
 
	tbpid32
;

22 
byã
 
	tboﬁ8
;

23 
uöt32
 
	tötmask
;

24 
öt32
 
	tibid32
;

25 
öt32
 
	tdbid32
;

26 
öt32
 
	tuid32
;

30 
öt32
 
	tsysˇŒ
;

31 
öt32
 
	tdevˇŒ
;

32 
öt32
 
	tshñlcmd
;

33 
öt32
 
	t¥o˚ss
;

34 
	töãºu±
;

35 
öt32
 
	t°©us
;

37 
	#loˇl
 

	)

41 
	#FALSE
 0

	)

42 
	#TRUE
 1

	)

46 
	#NULL
 0

	)

47 
	#NULLCH
 '\0'

	)

48 
	#NULLSTR
 ""

	)

52 
	#OK
 ( 1Ë

	)

53 
	#SYSERR
 (-1Ë

	)

54 
	#EOF
 (-2Ë

	)

55 
	#TIMEOUT
 (-3Ë

	)

57 
qid16
 
ªadyli°
;

59 
	#MINSTK
 400

	)

61 
	#CONTEXT
 64

	)

63 
	#QUANTUM
 2

	)

67 
	#NULLSTK
 8192

	)

71 
sysˇŒ
 
k¥ötf
(*
fmt
, ...);

72 
sysˇŒ
 
kputc
(
byã
);

73 
sysˇŒ
 
kgëc
();

	@include/ld.h

1 
	#NHANDLE
 20

	)

3 
	#HANDLE_OPEN
 1

	)

4 
	#HANDLE_CLOSE
 0

	)

6 
sysˇŒ
 
dlsym
 (*, const *);

8 
sysˇŒ
 
dl›í
(*);

10 
sysˇŒ
 
dl˛o£
(*);

12 
sysˇŒ
 
lﬂd›í
(*, );

14 
	sdl_h™dÀ_t
 {

15 
	m°©us
;

16 
pid32
 
	mpid
;

17 * 
	mñf_°¨t
;

18 * 
	mexec
;

19 * 
	msym_syms
;

20 * 
	msym_°rögs
;

21 
	msym_sh_size
;

22 * 
	mdyn_syms
;

23 * 
	mdyn_°rögs
;

24 
	mdyn_sh_size
;

27 
dl_h™dÀ_t
 
h™dÀèb
[];

	@include/lfilesys.h

31 #i‚def 
NlÊ


32 
	#NlÊ
 1

	)

38 #i‚def 
LF_DISK_DEV


39 
	#LF_DISK_DEV
 
SYSERR


	)

42 
	#LF_MODE_R
 
F_MODE_R


	)

43 
	#LF_MODE_W
 
F_MODE_W


	)

44 
	#LF_MODE_RW
 
F_MODE_RW


	)

45 
	#LF_MODE_O
 
F_MODE_O


	)

46 
	#LF_MODE_N
 
F_MODE_N


	)

48 
	#LF_BLKSIZ
 512

	)

49 
	#LF_NAME_LEN
 16

	)

50 
	#LF_NUM_DIR_ENT
 20

	)

52 
	#LF_FREE
 0

	)

53 
	#LF_USED
 1

	)

55 
	#LF_INULL
 (
ibid32
Ë-1

	)

56 
	#LF_DNULL
 (
dbid32
Ë-1

	)

57 
	#LF_IBLEN
 16

	)

58 
	#LF_IDATA
 8192

	)

60 
	#LF_IMASK
 0x00001ff‡

	)

63 
	#LF_DMASK
 0x000001f‡

	)

66 
	#LF_AREA_IB
 1

	)

67 
	#LF_AREA_DIR
 0

	)

71 
	slfiblk
 {

72 
ibid32
 
	mib_√xt
;

73 
uöt32
 
	mib_off£t
;

75 
dbid32
 
	mib_dba
[
LF_IBLEN
];

80 
	#LFS_ID
 0x58696E75

	)

86 
	#ib2£˘
(
ib
Ë(((ib)/7)+
LF_AREA_IB
)

	)

91 
	#ib2di•
(
ib
Ë(((ib)%7)*(
lfiblk
))

	)

96 
	sldíåy
 {

98 
uöt32
 
	mld_size
;

99 
ibid32
 
	mld_ûi°
;

101 
	mld_«me
[
LF_NAME_LEN
];

106 
	slfdb‰ì
 {

107 
dbid32
 
	mlf_√xtdb
;

108 
	mlf_unu£d
[
LF_BLKSIZ
 - (
dbid32
)];

113 #¥agm®
∑ck
(2)

114 
	slfdú
 {

115 
uöt32
 
	mlfd_fsysid
;

116 
öt16
 
	mlfd_vîs
;

117 
öt16
 
	mlfd_subvîs
;

118 
uöt32
 
	mlfd_Ælzîos
;

119 
uöt32
 
	mlfd_Æl⁄es
;

120 
dbid32
 
	mlfd_d‰ì
;

121 
ibid32
 
	mlfd_i‰ì
;

122 
öt32
 
	mlfd_nfûes
;

123 
ldíåy
 
	mlfd_fûes
[
LF_NUM_DIR_ENT
];

124 
uöt32
 
	mlfd_ªvid
;

126 #¥agm®
∑ck
()

130 
	slfd©a
 {

131 
did32
 
	mlf_dskdev
;

132 
sid32
 
	mlf_muãx
;

134 
lfdú
 
	mlf_dú
;

135 
boﬁ8
 
	mlf_dú¥e£¡
;

137 
boﬁ8
 
	mlf_dúdúty
;

142 
	slÊcblk
 {

144 
byã
 
	mlf°©e
;

145 
did32
 
	mlfdev
;

146 
sid32
 
	mlfmuãx
;

147 
ldíåy
 *
	mlfdú±r
;

149 
öt32
 
	mlfmode
;

150 
uöt32
 
	mlÂos
;

152 
	ml‚ame
[
LF_NAME_LEN
];

153 
ibid32
 
	mlföum
;

155 
lfiblk
 
	mlfiblock
;

157 
dbid32
 
	mlfdnum
;

159 
	mlfdblock
[
LF_BLKSIZ
];

161 *
	mlfbyã
;

165 
boﬁ8
 
	mlfibdúty
;

166 
boﬁ8
 
	mlfdbdúty
;

169 
lfd©a
 
Lf_d©a
;

170 
lÊcblk
 
lÊèb
[];

174 
	#LF_CTL_DEL
 
F_CTL_DEL


	)

175 
	#LF_CTL_TRUNC
 
F_CTL_TRUNC


	)

176 
	#LF_CTL_SIZE
 
F_CTL_SIZE


	)

	@include/limits.h

8 #i‚de‡
_LIMITS_H_


9 
	#_LIMITS_H_


	)

11 
	#CHAR_BIT
 8

	)

12 
	#CHAR_MAX
 127

	)

13 
	#CHAR_MIN
 (-128Ë

	)

14 
	#SCHAR_MAX
 127

	)

15 
	#SCHAR_MIN
 (-128Ë

	)

16 
	#UCHAR_MAX
 255

	)

18 
	#INT_MAX
 2147483647

	)

19 
	#INT_MIN
 (-
INT_MAX
-1Ë

	)

20 
	#UINT_MAX
 (2U*
INT_MAX
+1Ë

	)

22 
	#LONG_MAX
 2147483647

	)

23 
	#LONG_MIN
 (-
LONG_MAX
-1Ë

	)

24 
	#ULONG_MAX
 (2UL*
LONG_MAX
+1Ë

	)

26 
	#SHRT_MAX
 32767

	)

27 
	#SHRT_MIN
 (-
SHRT_MAX
-1Ë

	)

28 
	#USHRT_MAX
 65535

	)

	@include/load.h

2 
	slﬂd_t
 {

3 * 
	m_°¨t_addr
;

4 * 
	mld_ãxt_addr
;

5 
	mld_ãxt_size
;

6 * 
	mld_bss_addr
;

7 
	mld_bss_size
;

8 * 
	mld_d©a_addr
;

9 
	mld_d©a_size
;

10 * 
	mexec
;

11 
	msize
;

12 
	m°©us
;

13 
	mautom©ic_lﬂd_°©e
;

14 
	mlﬂd_by
;

19 
	#NLOAD
 10

	)

20 
	#LOAD_OCCUPIED
 0

	)

21 
	#LOAD_FREE
 1

	)

23 
	#AUTOMATIC_ON
 1

	)

24 
	#AUTOMATIC_OFF
 0

	)

26 
lﬂd_t
 
lﬂdèb
[];

	@include/mark.h

3 
	#MAXMARK
 20

	)

5 
öt32
 *(
m¨ks
[]);

6 
öt32
 
nm¨ks
;

7 
sid32
 
mkmuãx
;

8 
öt32
 
	tmemm¨k
[1];

16 
	#nŸm¨ked
(
L
Ë(L[0]<0 || L[0]>=
nm¨ks
 || 
m¨ks
[L[0]]!=L)

	)

	@include/memory.h

3 
	#PAGE_SIZE
 4096

	)

9 
	#roundmb
(
x
Ë(*)–(7 + (
uöt32
)(x)Ë& (~7Ë)

	)

10 
	#åuncmb
(
x
Ë(*)–((
uöt32
)(x)Ë& (~7Ë)

	)

16 
	#‰ì°k
(
p
,
Àn
Ë
	`‰ìmem
((*)((
uöt32
)(p) \

17 - ((
uöt32
)
	`roundmb
(
Àn
)) \

18 + (
uöt32
)(uint32)), \

19 (
uöt32
)
	`roundmb
(
Àn
Ë)

	)

21 
	smemblk
 {

22 
memblk
 *
	mm√xt
;

23 
uöt32
 
	mmÀngth
;

25 
memblk
 
memli°
;

26 *
möhóp
;

27 *
maxhóp
;

32 
ãxt
;

33 
ëext
;

34 
d©a
;

35 
ed©a
;

36 
bss
;

37 
ebss
;

38 
íd
;

	@include/multiboot.h

3 
	smboŸöfo
 {

4 
uöt32
 
	mÊags
;

5 
uöt32
 
	mmem_lowî
;

6 
uöt32
 
	mmem_uµî
;

7 
uöt32
 
	mboŸ_devi˚
;

8 
uöt32
 
	mcmdlöe
;

9 
uöt32
 
	mmods_cou¡
;

10 
uöt32
 
	mmods_addr
;

11 
uöt32
 
	msyms
[4];

12 
uöt32
 
	mmm≠_Àngth
;

13 
uöt32
 
	mmm≠_addr
;

14 
uöt32
 
	mdrives_Àngth
;

15 
uöt32
 
	mdrives_addr
;

16 
uöt32
 
	mc⁄fig_èbÀ
;

17 
uöt32
 
	mboŸ_lﬂdî_«me
;

18 
uöt32
 
	m≠m_èbÀ
;

19 
uöt32
 
	mvbe_c⁄åﬁ_öfo
;

20 
uöt32
 
	mvbe_mode_öfo
;

21 
uöt16
 
	mvbe_mode
;

22 
uöt16
 
	mvbe_öãrÁ˚_£g
;

23 
uöt16
 
	mvbe_öãrÁ˚_off
;

24 
uöt32
 
	mvbe_öãrÁ˚_Àn
;

27 
	smbmªgi⁄
 {

28 
uöt32
 
	msize
;

29 
uöt64
 
	mba£_addr
;

30 
uöt64
 
	mÀngth
;

31 
uöt32
 
	mty≥
;

35 
	#MULTIBOOT_HEADER_MAGIC
 0x1BADB002

	)

38 
	#MULTIBOOT_HEADER_FLAGS
 0x00010003

	)

41 
	#MULTIBOOT_SIGNATURE
 0x2BADB002

	)

44 
	#MULTIBOOT_BOOFINFO_MEM
 0x00000001

	)

47 
	#MULTIBOOT_BOOTINFO_BOOTDEV
 0x00000002

	)

50 
	#MULTIBOOT_BOOTINFO_CMDLINE
 0x00000004

	)

53 
	#MULTIBOOT_BOOTINFO_MODS
 0x00000008

	)

56 
	#MULTIBOOT_BOOTINFO_MMAP
 0x00000040

	)

59 
	#MULTIBOOT_MMAP_TYPE_USABLE
 0x00000001

	)

	@include/name.h

5 
	#NM_PRELEN
 64

	)

6 
	#NM_REPLLEN
 96

	)

7 
	#NM_MAXLEN
 256

	)

8 
	#NNAMES
 40

	)

12 
	snmíåy
 {

13 
	m≈ªfix
[
NM_PRELEN
];

14 
	mƒïœ˚
[
NM_REPLLEN
];

15 
did32
 
	mndevi˚
;

18 
nmíåy
 
«mëab
[];

19 
öt32
 
¬ames
;

	@include/net.h

3 
	#NETSTK
 8192

	)

4 
	#NETPRIO
 500

	)

5 
	#NETBOOTFILE
 128

	)

9 
	#ETH_ARP
 0x0806

	)

10 
	#ETH_IP
 0x0800

	)

11 
	#ETH_IPv6
 0x86DD

	)

15 #¥agm®
∑ck
(2)

16 
	s√çackë
 {

17 
byã
 
	m√t_ëhd°
[
ETH_ADDR_LEN
];

18 
byã
 
	m√t_ëh§c
[
ETH_ADDR_LEN
];

19 
uöt16
 
	m√t_ëhty≥
;

20 
byã
 
	m√t_ùvh
;

21 
byã
 
	m√t_ùtos
;

22 
uöt16
 
	m√t_ùÀn
;

23 
uöt16
 
	m√t_ùid
;

24 
uöt16
 
	m√t_ù‰ag
;

25 
byã
 
	m√t_ùâl
;

26 
byã
 
	m√t_ù¥Ÿo
;

27 
uöt16
 
	m√t_ùcksum
;

28 
uöt32
 
	m√t_ù§c
;

29 
uöt32
 
	m√t_ùd°
;

32 
uöt16
 
	m√t_udp•‹t
;

33 
uöt16
 
	m√t_udpdp‹t
;

34 
uöt16
 
	m√t_ud∂í
;

35 
uöt16
 
	m√t_udpcksum
;

36 
byã
 
	m√t_udpd©a
[1500-28];

39 
byã
 
	m√t_i˘y≥
;

40 
byã
 
	m√t_iccode
;

41 
uöt16
 
	m√t_iccksum
;

42 
uöt16
 
	m√t_icidít
;

43 
uöt16
 
	m√t_ic£q
;

44 
byã
 
	m√t_icd©a
[1500-28];

48 #¥agm®
∑ck
()

50 
	#PACKLEN
 (
√çackë
)

	)

52 
bpid32
 
√tbuÂoﬁ
;

54 
	s√tw‹k
 {

55 
uöt32
 
	mùuˇ°
;

56 
uöt32
 
	mùbˇ°
;

57 
uöt32
 
	mùmask
;

58 
uöt32
 
	mù¥efix
;

59 
uöt32
 
	mùrouãr
;

60 
uöt32
 
	mboŸ£rvî
;

61 
uöt32
 
	mdns£rvî
;

62 
uöt32
 
	m¡p£rvî
;

63 
boﬁ8
 
	mùvÆid
;

64 
byã
 
	mëhuˇ°
[
ETH_ADDR_LEN
];

65 
byã
 
	mëhbˇ°
[
ETH_ADDR_LEN
];

66 
	mboŸfûe
[
NETBOOTFILE
];

69 
√tw‹k
 
NëD©a
;

	@include/old_elf.h

2 
uöt32
 
	tElf32_Addr
;

3 
uöt32
 
	tElf32_HÆf
;

4 
uöt32
 
	tElf32_Off
;

5 
öt32
 
	tElf32_Sw‹d
;

6 
uöt32
 
	tElf32_W‹d
;

9 
	#PT_NULL
 0

	)

10 
	#PT_LOAD
 1

	)

11 
	#PT_DYNAMIC
 2

	)

12 
	#PT_INTERP
 3

	)

13 
	#PT_NOTE
 4

	)

14 
	#PT_SHLIB
 5

	)

15 
	#PT_PHDR
 6

	)

16 
	#PT_TLS
 7

	)

17 
	#PT_LOOS
 0x60000000

	)

18 
	#PT_HIOS
 0x6ffffff‡

	)

19 
	#PT_LOPROC
 0x70000000

	)

20 
	#PT_HIPROC
 0x7fffffff

	)

21 
	#PT_GNU_EH_FRAME
 0x6474e550

	)

23 
	#PT_GNU_STACK
 (
PT_LOOS
 + 0x474e551)

	)

45 
	#PN_XNUM
 0xffff

	)

48 
	#ET_NONE
 0

	)

49 
	#ET_REL
 1

	)

50 
	#ET_EXEC
 2

	)

51 
	#ET_DYN
 3

	)

52 
	#ET_CORE
 4

	)

53 
	#ET_LOPROC
 0xff00

	)

54 
	#ET_HIPROC
 0xffff

	)

57 
	#DT_NULL
 0

	)

58 
	#DT_NEEDED
 1

	)

59 
	#DT_PLTRELSZ
 2

	)

60 
	#DT_PLTGOT
 3

	)

61 
	#DT_HASH
 4

	)

62 
	#DT_STRTAB
 5

	)

63 
	#DT_SYMTAB
 6

	)

64 
	#DT_RELA
 7

	)

65 
	#DT_RELASZ
 8

	)

66 
	#DT_RELAENT
 9

	)

67 
	#DT_STRSZ
 10

	)

68 
	#DT_SYMENT
 11

	)

69 
	#DT_INIT
 12

	)

70 
	#DT_FINI
 13

	)

71 
	#DT_SONAME
 14

	)

72 
	#DT_RPATH
 15

	)

73 
	#DT_SYMBOLIC
 16

	)

74 
	#DT_REL
 17

	)

75 
	#DT_RELSZ
 18

	)

76 
	#DT_RELENT
 19

	)

77 
	#DT_PLTREL
 20

	)

78 
	#DT_DEBUG
 21

	)

79 
	#DT_TEXTREL
 22

	)

80 
	#DT_JMPREL
 23

	)

81 
	#DT_ENCODING
 32

	)

82 
	#OLD_DT_LOOS
 0x60000000

	)

83 
	#DT_LOOS
 0x6000000d

	)

84 
	#DT_HIOS
 0x6ffff000

	)

85 
	#DT_VALRNGLO
 0x6ffffd00

	)

86 
	#DT_VALRNGHI
 0x6ffffdff

	)

87 
	#DT_ADDRRNGLO
 0x6fff„00

	)

88 
	#DT_ADDRRNGHI
 0x6fff„ff

	)

89 
	#DT_VERSYM
 0x6ffffff0

	)

90 
	#DT_RELACOUNT
 0x6ffffff9

	)

91 
	#DT_RELCOUNT
 0x6fffffÁ

	)

92 
	#DT_FLAGS_1
 0x6ffffffb

	)

93 
	#DT_VERDEF
 0x6ffffffc

	)

94 
	#DT_VERDEFNUM
 0x6ffffffd

	)

95 
	#DT_VERNEED
 0x6fffff„

	)

96 
	#DT_VERNEEDNUM
 0x6fffffff

	)

97 
	#OLD_DT_HIOS
 0x6fffffff

	)

98 
	#DT_LOPROC
 0x70000000

	)

99 
	#DT_HIPROC
 0x7fffffff

	)

102 
	#STB_LOCAL
 0

	)

103 
	#STB_GLOBAL
 1

	)

104 
	#STB_WEAK
 2

	)

106 
	#STT_NOTYPE
 0

	)

107 
	#STT_OBJECT
 1

	)

108 
	#STT_FUNC
 2

	)

109 
	#STT_SECTION
 3

	)

110 
	#STT_FILE
 4

	)

111 
	#STT_COMMON
 5

	)

112 
	#STT_TLS
 6

	)

114 
	#ELF_ST_BIND
(
x
Ë((xË>> 4)

	)

115 
	#ELF_ST_TYPE
(
x
Ë(((ËxË& 0xf)

	)

116 
	#ELF32_ST_BIND
(
x
Ë
	`ELF_ST_BIND
(x)

	)

117 
	#ELF32_ST_TYPE
(
x
Ë
	`ELF_ST_TYPE
(x)

	)

118 
	#ELF64_ST_BIND
(
x
Ë
	`ELF_ST_BIND
(x)

	)

119 
	#ELF64_ST_TYPE
(
x
Ë
	`ELF_ST_TYPE
(x)

	)

121 
	sdy«mic
{

122 
Elf32_Sw‹d
 
	md_èg
;

124 
Elf32_Sw‹d
 
	md_vÆ
;

125 
Elf32_Addr
 
	md_±r
;

126 } 
	md_un
;

127 } 
	tElf32_Dyn
;

131 
	#ELF32_R_SYM
(
x
Ë((xË>> 8)

	)

132 
	#ELF32_R_TYPE
(
x
Ë((xË& 0xff)

	)

134 
	#ELF64_R_SYM
(
i
Ë((iË>> 32)

	)

135 
	#ELF64_R_TYPE
(
i
Ë((iË& 0xffffffff)

	)

137 
	sñf32_ªl
 {

138 
Elf32_Addr
 
	mr_off£t
;

139 
Elf32_W‹d
 
	mr_öfo
;

140 } 
	tElf32_Rñ
;

142 
	sñf32_ªœ
{

143 
Elf32_Addr
 
	mr_off£t
;

144 
Elf32_W‹d
 
	mr_öfo
;

145 
Elf32_Sw‹d
 
	mr_addíd
;

146 } 
	tElf32_Rña
;

149 
	sñf32_sym
{

150 
Elf32_W‹d
 
	m°_«me
;

151 
Elf32_Addr
 
	m°_vÆue
;

152 
Elf32_W‹d
 
	m°_size
;

153 
	m°_öfo
;

154 
	m°_Ÿhî
;

155 
Elf32_HÆf
 
	m°_shndx
;

156 } 
	tElf32_Sym
;

159 
	#EI_NIDENT
 16

	)

161 
	sñf32_hdr
{

162 
	me_idít
[
EI_NIDENT
];

163 
Elf32_HÆf
 
	me_ty≥
;

164 
Elf32_HÆf
 
	me_machöe
;

165 
Elf32_W‹d
 
	me_vîsi⁄
;

166 
Elf32_Addr
 
	me_íåy
;

167 
Elf32_Off
 
	me_phoff
;

168 
Elf32_Off
 
	me_shoff
;

169 
Elf32_W‹d
 
	me_Êags
;

170 
Elf32_HÆf
 
	me_ehsize
;

171 
Elf32_HÆf
 
	me_phítsize
;

172 
Elf32_HÆf
 
	me_phnum
;

173 
Elf32_HÆf
 
	me_shítsize
;

174 
Elf32_HÆf
 
	me_shnum
;

175 
Elf32_HÆf
 
	me_sh°∫dx
;

176 } 
	tElf32_Ehdr
;

181 
	#PF_R
 0x4

	)

182 
	#PF_W
 0x2

	)

183 
	#PF_X
 0x1

	)

185 
	sñf32_phdr
{

186 
Elf32_W‹d
 
	mp_ty≥
;

187 
Elf32_Off
 
	mp_off£t
;

188 
Elf32_Addr
 
	mp_vaddr
;

189 
Elf32_Addr
 
	mp_∑ddr
;

190 
Elf32_W‹d
 
	mp_fûesz
;

191 
Elf32_W‹d
 
	mp_memsz
;

192 
Elf32_W‹d
 
	mp_Êags
;

193 
Elf32_W‹d
 
	mp_Æign
;

194 } 
	tElf32_Phdr
;

198 
	#SHT_NULL
 0

	)

199 
	#SHT_PROGBITS
 1

	)

200 
	#SHT_SYMTAB
 2

	)

201 
	#SHT_STRTAB
 3

	)

202 
	#SHT_RELA
 4

	)

203 
	#SHT_HASH
 5

	)

204 
	#SHT_DYNAMIC
 6

	)

205 
	#SHT_NOTE
 7

	)

206 
	#SHT_NOBITS
 8

	)

207 
	#SHT_REL
 9

	)

208 
	#SHT_SHLIB
 10

	)

209 
	#SHT_DYNSYM
 11

	)

210 
	#SHT_NUM
 12

	)

211 
	#SHT_LOPROC
 0x70000000

	)

212 
	#SHT_HIPROC
 0x7fffffff

	)

213 
	#SHT_LOUSER
 0x80000000

	)

214 
	#SHT_HIUSER
 0xffffffff

	)

217 
	#SHF_WRITE
 0x1

	)

218 
	#SHF_ALLOC
 0x2

	)

219 
	#SHF_EXECINSTR
 0x4

	)

220 
	#SHF_RELA_LIVEPATCH
 0x00100000

	)

221 
	#SHF_RO_AFTER_INIT
 0x00200000

	)

222 
	#SHF_MASKPROC
 0xf0000000

	)

225 
	#SHN_UNDEF
 0

	)

226 
	#SHN_LORESERVE
 0xff00

	)

227 
	#SHN_LOPROC
 0xff00

	)

228 
	#SHN_HIPROC
 0xff1f

	)

229 
	#SHN_LIVEPATCH
 0xff20

	)

230 
	#SHN_ABS
 0xfff1

	)

231 
	#SHN_COMMON
 0xfff2

	)

232 
	#SHN_HIRESERVE
 0xffff

	)

234 
	sñf32_shdr
 {

235 
Elf32_W‹d
 
	msh_«me
;

236 
Elf32_W‹d
 
	msh_ty≥
;

237 
Elf32_W‹d
 
	msh_Êags
;

238 
Elf32_Addr
 
	msh_addr
;

239 
Elf32_Off
 
	msh_off£t
;

240 
Elf32_W‹d
 
	msh_size
;

241 
Elf32_W‹d
 
	msh_lök
;

242 
Elf32_W‹d
 
	msh_öfo
;

243 
Elf32_W‹d
 
	msh_addølign
;

244 
Elf32_W‹d
 
	msh_ítsize
;

245 } 
	tElf32_Shdr
;

248 
	#EI_MAG0
 0

	)

249 
	#EI_MAG1
 1

	)

250 
	#EI_MAG2
 2

	)

251 
	#EI_MAG3
 3

	)

252 
	#EI_CLASS
 4

	)

253 
	#EI_DATA
 5

	)

254 
	#EI_VERSION
 6

	)

255 
	#EI_OSABI
 7

	)

256 
	#EI_PAD
 8

	)

258 
	#ELFMAG0
 0x7‡

	)

259 
	#ELFMAG1
 'E'

	)

260 
	#ELFMAG2
 'L'

	)

261 
	#ELFMAG3
 'F'

	)

262 
	#ELFMAG
 "\177ELF"

	)

263 
	#SELFMAG
 4

	)

265 
	#ELFCLASSNONE
 0

	)

266 
	#ELFCLASS32
 1

	)

267 
	#ELFCLASS64
 2

	)

268 
	#ELFCLASSNUM
 3

	)

270 
	#ELFDATANONE
 0

	)

271 
	#ELFDATA2LSB
 1

	)

272 
	#ELFDATA2MSB
 2

	)

274 
	#EV_NONE
 0

	)

275 
	#EV_CURRENT
 1

	)

276 
	#EV_NUM
 2

	)

278 
	#ELFOSABI_NONE
 0

	)

279 
	#ELFOSABI_LINUX
 3

	)

281 #i‚de‡
ELF_OSABI


282 
	#ELF_OSABI
 
ELFOSABI_NONE


	)

290 
	#NT_PRSTATUS
 1

	)

291 
	#NT_PRFPREG
 2

	)

292 
	#NT_PRPSINFO
 3

	)

293 
	#NT_TASKSTRUCT
 4

	)

294 
	#NT_AUXV
 6

	)

299 
	#NT_SIGINFO
 0x53494749

	)

300 
	#NT_FILE
 0x46494c45

	)

301 
	#NT_PRXFPREG
 0x46e62b7‡

	)

302 
	#NT_PPC_VMX
 0x100

	)

303 
	#NT_PPC_SPE
 0x101

	)

304 
	#NT_PPC_VSX
 0x102

	)

305 
	#NT_PPC_TAR
 0x103

	)

306 
	#NT_PPC_PPR
 0x104

	)

307 
	#NT_PPC_DSCR
 0x105

	)

308 
	#NT_PPC_EBB
 0x106

	)

309 
	#NT_PPC_PMU
 0x107

	)

310 
	#NT_PPC_TM_CGPR
 0x108

	)

311 
	#NT_PPC_TM_CFPR
 0x109

	)

312 
	#NT_PPC_TM_CVMX
 0x10®

	)

313 
	#NT_PPC_TM_CVSX
 0x10b

	)

314 
	#NT_PPC_TM_SPR
 0x10¯

	)

315 
	#NT_PPC_TM_CTAR
 0x10d

	)

316 
	#NT_PPC_TM_CPPR
 0x10ê

	)

317 
	#NT_PPC_TM_CDSCR
 0x10‡

	)

318 
	#NT_PPC_PKEY
 0x110

	)

319 
	#NT_386_TLS
 0x200

	)

320 
	#NT_386_IOPERM
 0x201

	)

321 
	#NT_X86_XSTATE
 0x202

	)

322 
	#NT_S390_HIGH_GPRS
 0x300

	)

323 
	#NT_S390_TIMER
 0x301

	)

324 
	#NT_S390_TODCMP
 0x302

	)

325 
	#NT_S390_TODPREG
 0x303

	)

326 
	#NT_S390_CTRS
 0x304

	)

327 
	#NT_S390_PREFIX
 0x305

	)

328 
	#NT_S390_LAST_BREAK
 0x306

	)

329 
	#NT_S390_SYSTEM_CALL
 0x307

	)

330 
	#NT_S390_TDB
 0x308

	)

331 
	#NT_S390_VXRS_LOW
 0x309

	)

332 
	#NT_S390_VXRS_HIGH
 0x30®

	)

333 
	#NT_S390_GS_CB
 0x30b

	)

334 
	#NT_S390_GS_BC
 0x30¯

	)

335 
	#NT_S390_RI_CB
 0x30d

	)

336 
	#NT_ARM_VFP
 0x400

	)

337 
	#NT_ARM_TLS
 0x401

	)

338 
	#NT_ARM_HW_BREAK
 0x402

	)

339 
	#NT_ARM_HW_WATCH
 0x403

	)

340 
	#NT_ARM_SYSTEM_CALL
 0x404

	)

341 
	#NT_ARM_SVE
 0x405

	)

342 
	#NT_ARM_PAC_MASK
 0x406

	)

343 
	#NT_ARM_PACA_KEYS
 0x407

	)

344 
	#NT_ARM_PACG_KEYS
 0x408

	)

345 
	#NT_ARC_V2
 0x600

	)

346 
	#NT_VMCOREDD
 0x700

	)

347 
	#NT_MIPS_DSP
 0x800

	)

348 
	#NT_MIPS_FP_MODE
 0x801

	)

349 
	#NT_MIPS_MSA
 0x802

	)

352 
	sñf32_nŸe
 {

353 
Elf32_W‹d
 
	mn_«mesz
;

354 
Elf32_W‹d
 
	mn_descsz
;

355 
Elf32_W‹d
 
	mn_ty≥
;

356 } 
	tElf32_Nhdr
;

	@include/pci.h

6 
	#PCI_MAX_BUSES
 256

	)

7 
	#PCI_DEVICES_PER_BUS
 32

	)

8 
	#PCI_FUNCTIONS_PER_DEVICE
 8

	)

9 
	#PCI_BUS_MASK
 (
PCI_MAX_BUSES
 - 1)

	)

10 
	#PCI_DEV_MASK
 (
PCI_DEVICES_PER_BUS
 - 1)

	)

11 
	#PCI_FUNC_MASK
 (
PCI_FUNCTIONS_PER_DEVICE
 - 1)

	)

12 
	#PCIE_BYTES_PER_FUNCTION
 0x1000

	)

13 
	#PCIE_BYTES_PER_DEVICE
 (
PCIE_BYTES_PER_FUNCTION
 * \

14 
PCI_FUNCTIONS_PER_DEVICE
)

	)

15 
	#PCIE_BYTES_PER_BUS
 (
PCIE_BYTES_PER_DEVICE
 * \

16 
PCI_DEVICES_PER_BUS
)

	)

18 
	#PCI_BARS_PER_HEADER
 6

	)

20 
	#PCI_HEADER_TYPE0_SIZE
 0x40

	)

21 
	#PCI_HDR_TYPE_MULTIFCN
 (1 << 7)

	)

23 
	#PCI_BUS_SHIFT
 16

	)

24 
	#PCI_DEV_SHIFT
 3

	)

27 
	#PCI_BAR_REGION_TYPE_IO_MASK
 1

	)

28 
	#PCI_BAR_LOCATABLE_1MB_MASK
 2

	)

29 
	#PCI_BAR_LOCATABLE_64B_MASK
 4

	)

30 
	#PCI_BAR_LOCATABLE_PREFETCH
 8

	)

31 
	#PCI_BAR_BASE_ADDRESS_MASK
 0xfffffff0

	)

33 #i‚de‡
off£tof


34 
	#off£tof
(
ty≥
, 
membî
Ë(()(()&(—y≥ *)0)->membî))

	)

39 
__©åibuã__
 ((
__∑cked__
)Ë
	gpci_c⁄fig_hódî
 {

41 
	gvíd‹ID
;

42 
	gdevi˚ID
;

43 
	gcomm™d
;

44 
	g°©us
;

45 
	gªvID
;

46 
	g¥ogIF
;

47 
	gsubCœss
;

48 
	g˛assCode
;

49 
	g˛Size
;

50 
	gœãncyTimî
;

51 
	ghódîTy≥
;

52 
	gBIST
;

53 
	gb¨s
[
PCI_BARS_PER_HEADER
];

54 
	gˇrdbusCISPå
;

55 
	gsubsy°emVíd‹ID
;

56 
	gsubsy°emID
;

57 
	gex∑nsi⁄ROMAddr
;

58 
	gˇ∑bûôõsPå
;

59 
	gª£rved0
;

60 
	gª£rved1
;

61 
	gª£rved2
;

62 
	gª£rved3
;

63 
	göãºu±Löe
;

64 
	göãºu±Pö
;

65 
	gmöGø¡
;

66 
	gmaxL©ícy
;

69 
pci_öô
();

70 
föd_pci_devi˚
(
öt32
, int32, int32);

71 
ëh_pd
* 
ëh_txrög
;

72 
ëh_pd
* 
ëh_rxrög
;

74 
pci_ªad_c⁄fig_byã
(
uöt32
, , *);

75 
pci_ªad_c⁄fig_w‹d
(
uöt32
, , 
uöt16
 *);

76 
pci_ªad_c⁄fig_dw‹d
(
uöt32
, , uint32 *);

77 
pci_wrôe_c⁄fig_byã
(
uöt32
, , );

78 
pci_wrôe_c⁄fig_w‹d
(
uöt32
, , 
uöt16
);

79 
pci_wrôe_c⁄fig_dw‹d
(
uöt32
, , uint32);

80 
pci_gë_dev_mmio_ba£_addr
(
uöt32
, , **);

81 
öt32
 
pci_£t_ivec
(
uöt32
, int32, *, int32);

	@include/ports.h

3 
	#NPORTS
 30

	)

4 
	#PT_MSGS
 100

	)

5 
	#PT_FREE
 1

	)

6 
	#PT_LIMBO
 2

	)

7 
	#PT_ALLOC
 3

	)

9 
	s±node
 {

10 
uöt32
 
	m±msg
;

11 
±node
 *
	m±√xt
;

14 
	s±íåy
 {

15 
sid32
 
	m±s£m
;

16 
sid32
 
	m±r£m
;

17 
uöt16
 
	m±°©e
;

18 
uöt16
 
	m±max˙t
;

19 
öt32
 
	m±£q
;

20 
±node
 *
	m±hód
;

21 
±node
 *
	m±èû
;

24 
±node
 *
±‰ì
;

25 
±íåy
 
p‹âab
[];

26 
öt32
 
±√xtid
;

29 
	#isbadp‹t
(
p‹tid
Ë–’‹tid)<0 || (p‹tid)>=
NPORTS
 )

	)

	@include/process.h

5 #i‚de‡
NPROC


6 
	#NPROC
 8

	)

11 
	#PR_FREE
 0

	)

12 
	#PR_CURR
 1

	)

13 
	#PR_READY
 2

	)

14 
	#PR_RECV
 3

	)

15 
	#PR_SLEEP
 4

	)

16 
	#PR_SUSP
 5

	)

17 
	#PR_WAIT
 6

	)

18 
	#PR_RECTIM
 7

	)

22 
	#PNMLEN
 16

	)

23 
	#NULLPROC
 0

	)

27 
	#INITSTK
 65536

	)

28 
	#INITPRIO
 20

	)

29 
	#INITRET
 
u£ºë


	)

33 
	#isbadpid
(
x
Ë–((
pid32
)(x) < 0) || \

34 ((
pid32
)(
x
Ë>
NPROC
) || \

35 (
¥o˘ab
[(
x
)].
¥°©e
 =
PR_FREE
))

	)

39 
	#NDESC
 5

	)

43 
	s¥o˚¡
 {

44 
uöt16
 
	m¥°©e
;

45 
¥i16
 
	m¥¥io
;

46 *
	m¥°k±r
;

47 *
	m¥°kba£
;

48 
uöt32
 
	m¥°kÀn
;

49 
	m¥«me
[
PNMLEN
];

50 
sid32
 
	m¥£m
;

51 
pid32
 
	m¥∑ª¡
;

52 
umsg32
 
	m¥msg
;

53 
boﬁ8
 
	m¥hasmsg
;

54 
öt16
 
	m¥desc
[
NDESC
];

58 
	#STACKMAGIC
 0x0A0AAAA9

	)

60 
¥o˚¡
 
¥o˘ab
[];

61 
öt32
 
¥cou¡
;

62 
pid32
 
cuºpid
;

	@include/prototypes.h

2 
°©us
 
add¨gs
(
pid32
, 
öt32
, int32[], int32,*, *);

5 
¨p_öô
();

6 
°©us
 
¨p_ªsﬁve
(
uöt32
, 
byã
[]);

7 
¨p_ö
(
¨µackë
 *);

8 
öt32
 
¨p_Æloc
();

9 
¨p_¡oh
(
¨µackë
 *);

10 
¨p_ht⁄
(
¨µackë
 *);

13 
°©us
 
ascd©e
(
uöt32
, *);

16 
°©us
 
buföô
();

19 
¥i16
 
ch¥io
(
pid32
,Öri16);

22 
uöt32
 
˛kcou¡
();

25 
öãºu±
 
˛kh™dÀr
(
öt32
);

28 
˛köô
();

31 
˛kdi•
();

34 
sysˇŒöô
();

37 
sysˇŒ
 
sysˇŒh™dÀr
(
öt32
, *);

40 
sysˇŒdi•
();

43 
sysˇŒ
 
˛o£
(
did32
);

46 
sysˇŒ
 
c⁄åﬁ
(
did32
, 
öt32
, int32, int32);

49 
pid32
 
¸óã
(*, 
uöt32
, 
¥i16
, *, uint32, ...);

52 
˘xsw
(*, *);

55 
uöt32
 
gëloˇlù
();

58 
uöt32
 
dn¶ookup
(*);

61 
uöt32
 
dŸ2ù
(*, uint32 *);

64 
öt32
 
ëhöô
(
díåy
 *);

67 
öãºu±
 
ëhh™dÀr
(
öt32
);

70 
devˇŒ
 
ëhc⁄åﬁ
(
díåy
 *, 
öt32
, int32, int32);

73 
ëhdi•©ch
();

76 
öt32
 
ëhmˇ°_add
(
ëhcblk
 *, 
byã
[]);

77 
öt32
 
ëhmˇ°_ªmove
(
ëhcblk
 *, 
byã
[]);

80 
devˇŒ
 
ëhªad
(
díåy
 *, *, 
öt32
);

83 
devˇŒ
 
ëhwrôe
(
díåy
 *, *
buf
, 
öt32
);

86 
exô
();

89 
c⁄sﬁe_öô
();

92 
ªmove_úm_¥Ÿe˘i⁄s
();

95 
öt32
 
öôevec
();

96 
öt32
 
£t_evec
(
uöt32
, uint32);

97 
öt32
 
£t_ivec
(
uöt32
, *, int32);

98 
öt32
 
iﬂpic_úq2vec
(int32, int32);

99 
å≠
(
öt32
, *);

102 
ex˚±i⁄
(
öt32
, int32*);

105 
sysˇŒ
 
‰ìbuf
(*);

108 
sysˇŒ
 
‰ìmem
(*, 
uöt32
);

111 *
gëbuf
(
bpid32
);

114 
sysˇŒ
 
gëc
(
did32
);

117 
pid32
 
gëfú°
(
qid16
);

118 
pid32
 
gëœ°
(
qid16
);

119 
pid32
 
gëôem
(pid32);

122 *
gëmem
(
uöt32
);

125 
pid32
 
gëpid
();

128 
sysˇŒ
 
gë¥io
(
pid32
);

131 *
gë°k
(
uöt32
);

134 
uöt64
 
gëticks
();

137 
°©us
 
gëtime
(
uöt32
 *);

140 
°©us
 
gëutime
(
uöt32
 *);

143 
hÆt
();

146 
icmp_öô
();

147 
icmp_ö
(
√çackë
 *);

148 
öt32
 
icmp_ªgi°î
(
uöt32
);

149 
öt32
 
icmp_ªcv
(öt32, *, i¡32, 
uöt32
);

150 
°©us
 
icmp_£nd
(
uöt32
, 
uöt16
, uöt16, uöt16, *, 
öt32
);

151 
√çackë
 *
icmp_mkpkt
(
uöt32
, 
uöt16
, uint16, uint16,

152 *, 
öt32
);

153 
°©us
 
icmp_ªÀa£
(
öt32
);

154 
uöt16
 
icmp_cksum
(*, 
öt32
);

155 
icmp_ht⁄
(
√çackë
 *);

156 
icmp_¡oh
(
√çackë
 *);

159 
sysˇŒ
 
öô
(
did32
);

162 
öt32
 
sizmem
();

165 
°©us
 
ö£π
(
pid32
, 
qid16
, 
öt32
);

168 
°©us
 
ö£πd
(
pid32
, 
qid16
, 
öt32
);

171 
uöt16
 
gëúmask
();

174 
ötmask
 
dißbÀ
();

175 
íabÀ
();

178 
devˇŒ
 
i€º
();

181 
devˇŒ
 
i⁄uŒ
();

184 
ù_ö
(
√çackë
 *);

185 
°©us
 
ù_£nd
(
√çackë
 *);

186 
ù_loˇl
(
√çackë
 *);

187 
°©us
 
ù_out
(
√çackë
 *);

188 
öt32
 
ù_rouã
(
uöt32
);

189 
uöt16
 
ùcksum
(
√çackë
 *);

190 
ù_¡oh
(
√çackë
 *);

191 
ù_ht⁄
(
√çackë
 *);

192 
¥o˚ss
 
ùout
();

193 
°©us
 
ù_íqueue
(
√çackë
 *);

196 
√t_öô
();

197 
¥o˚ss
 
√tö
();

198 
¥o˚ss
 
√tout
();

199 
¥o˚ss
 
øwö
();

200 
ëh_ht⁄
(
√çackë
 *);

201 
ëh_¡oh
(
√çackë
 *);

202 
uöt16
 
gëp‹t
();

205 
sysˇŒ
 
kûl
(
pid32
);

208 
öt32
 
Àx™
(*, int32, *, int32 *, int32 [], int32 []);

211 
lfib˛ór
(
lfiblk
 *, 
öt32
);

214 
lfibgë
(
did32
, 
ibid32
, 
lfiblk
 *);

217 
°©us
 
lfibput
(
did32
, 
ibid32
, 
lfiblk
 *);

220 
°©us
 
lfdb‰ì
(
did32
, 
dbid32
);

223 
dbid32
 
lfdbÆloc
(
lfdb‰ì
 *);

226 
°©us
 
lfÊush
(
lÊcblk
 *);

229 
öt32
 
lfgëmode
(*);

232 
ibid32
 
lfibÆloc
();

235 
devˇŒ
 
lÊ˛o£
(
díåy
 *);

238 
devˇŒ
 
lÊc⁄åﬁ
(
díåy
 *, 
öt32
, int32, int32);

241 
devˇŒ
 
lÊgëc
(
díåy
 *);

244 
devˇŒ
 
lÊöô
(
díåy
 *);

247 
devˇŒ
 
lÊputc
(
díåy
 *, );

250 
devˇŒ
 
lÊªad
(
díåy
 *, *, 
öt32
);

253 
devˇŒ
 
lÊ£ek
(
díåy
 *, 
uöt32
);

256 
devˇŒ
 
lÊwrôe
(
díåy
 *, *, 
öt32
);

259 
°©us
 
lfscheck
(
lfdú
 *);

262 
°©us
 
lfs¸óã
(
did32
, 
ibid32
, 
uöt32
);

265 
devˇŒ
 
lfsöô
(
díåy
 *);

268 
devˇŒ
 
lfs›í
(
díåy
 *, *, *);

271 
°©us
 
lf£tup
(
lÊcblk
 *);

274 
°©us
 
l·runˇã
(
lÊcblk
 *);

277 
devˇŒ
 
Õgëc
(
díåy
 *);

280 
devˇŒ
 
Õöô
(
díåy
 *);

283 
devˇŒ
 
Õ›í
(
díåy
 *, *, *);

286 
devˇŒ
 
Õputc
(
díåy
 *, );

289 
devˇŒ
 
Õªad
(
díåy
 *, *, 
öt32
);

292 
devˇŒ
 
Õwrôe
(
díåy
 *, *, 
öt32
);

295 
m¨köô
();

296 
°©us
 
m¨k
(
öt32
 *);

299 *
mem˝y
(*, c⁄° *, 
öt32
);

302 
öt32
 *
memcmp
(*, const *, int32);

305 *
mem£t
(*, c⁄° , 
öt32
);

308 
bpid32
 
mkbuÂoﬁ
(
öt32
, int32);

311 
sysˇŒ
 
mou¡
(*, *, 
did32
);

312 
öt32
 
«mÀn
(*, int32);

315 
°©us
 
«möô
();

318 
devˇŒ
 
«mm≠
(*, [], 
did32
);

319 
did32
 
«mª∂
(*, []);

320 
°©us
 
«m˝y
(*, *, 
öt32
);

323 
devˇŒ
 
«m›í
(
díåy
 *, *, *);

326 
qid16
 
√wqueue
();

329 
sysˇŒ
 
›í
(
did32
, *, *);

332 
∑nic
(*);

335 
öt32
 
pci_öô
();

338 
pdump
(
√çackë
 *);

339 
pdumph
(
√çackë
 *);

342 
∂©öô
();

345 
_±˛ór
(
±íåy
 *, 
uöt16
, 
	$öt32
 (*)(
öt32
));

348 
öt32
 
	`±cou¡
(int32);

351 
sysˇŒ
 
	`±¸óã
(
öt32
);

354 
sysˇŒ
 
	`±dñëe
(
öt32
, 
	$öt32
 (*)(
öt32
));

357 
sysˇŒ
 
	`±öô
(
öt32
);

360 
uöt32
 
	`±ªcv
(
öt32
);

363 
sysˇŒ
 
	`±ª£t
(
öt32
, 
	$öt32
 (*)(
öt32
));

366 
sysˇŒ
 
	`±£nd
(
öt32
, 
umsg32
);

369 
sysˇŒ
 
	`putc
(
did32
, );

372 
öt32
 
	`qu¨k_úq_routög
();

375 
pid32
 
	`íqueue
’id32, 
qid16
);

376 
pid32
 
	`dequeue
(
qid16
);

379 
devˇŒ
 
	`øm˛o£
(
díåy
 *);

382 
devˇŒ
 
	`ømöô
(
díåy
 *);

386 
devˇŒ
 
	`øm›í
(
díåy
 *, *, *);

389 
devˇŒ
 
	`ømªad
(
díåy
 *, *, 
öt32
);

392 
devˇŒ
 
	`ømwrôe
(
díåy
 *, *, 
öt32
);

395 
devˇŒ
 
	`rds˛o£
(
díåy
 *);

398 
devˇŒ
 
	`rdsc⁄åﬁ
(
díåy
 *, 
öt32
, int32, int32);

401 
devˇŒ
 
	`rdsöô
(
díåy
 *);

404 
devˇŒ
 
	`rds›í
(
díåy
 *, *, *);

407 
devˇŒ
 
	`rd§ód
(
díåy
 *, *, 
öt32
);

410 
devˇŒ
 
	`rdswrôe
(
díåy
 *, *, 
öt32
);

413 
rdbuff
 * 
	`rdsbuÁŒoc
(
rdscblk
 *);

416 
°©us
 
	`rdscomm
(
rd_msg_hdr
 *, 
öt32
, rd_msg_hdr *,

417 
öt32
, 
rdscblk
 *);

420 
	`rd•ro˚ss
(
rdscblk
 *);

423 
devˇŒ
 
	`sdmc˛o£
(
díåy
 *);

426 
devˇŒ
 
	`sdmcöô
(
díåy
 *);

429 
devˇŒ
 
	`sdmc›í
(
díåy
 *, *, *);

432 
devˇŒ
 
	`sdm¸ód
(
díåy
 *, *, 
öt32
);

435 
devˇŒ
 
	`sdmcwrôe
(
díåy
 *, *, 
öt32
);

438 
öãºu±
 
	`sdmcdi•©ch
();

441 
sysˇŒ
 
	`ªad
(
did32
, *, 
uöt32
);

444 
°©us
 
	`ªady
(
pid32
);

447 
umsg32
 
	`ª˚ive
();

450 
umsg32
 
	`ªcv˛r
();

453 
umsg32
 
	`ªcvtime
(
öt32
);

456 
	`ªsched
();

457 
°©us
 
	`ªsched_˙é
(
öt32
);

460 
	`ª°‹e
(
ötmask
);

463 
¥i16
 
	`ªsume
(
pid32
);

466 
öt32
 
	`rfsgëmode
(* );

469 
devˇŒ
 
	`rÊ˛o£
(
díåy
 *);

472 
devˇŒ
 
	`rfsc⁄åﬁ
(
díåy
 *, 
öt32
, int32, int32);

475 
devˇŒ
 
	`rÊgëc
(
díåy
 *);

478 
devˇŒ
 
	`rÊöô
(
díåy
 *);

481 
devˇŒ
 
	`rÊputc
(
díåy
 *, );

484 
devˇŒ
 
	`rÊªad
(
díåy
 *, *, 
öt32
 );

487 
devˇŒ
 
	`rÊ£ek
(
díåy
 *, 
uöt32
 );

490 
devˇŒ
 
	`rÊwrôe
(
díåy
 *, *, 
öt32
 );

493 
°©us
 
	`rf¢dmsg
(
uöt16
, *);

496 
devˇŒ
 
	`rfsöô
(
díåy
 *);

499 
devˇŒ
 
	`rfs›í
(
díåy
 *
dev±r
, *, *);

502 
öt32
 
	`rfscomm
(
rf_msg_hdr
 *, int32,

503 
rf_msg_hdr
 *, 
öt32
);

506 
°©us
 
	`rdscomm
(
rd_msg_hdr
 *, 
öt32
, rd_msg_hdr *,

507 
öt32
, 
rdscblk
 *);

510 
	`rd•ro˚ss
(
rdscblk
 *);

513 
sysˇŒ
 
	`£ek
(
did32
, 
uöt32
);

516 
sysˇŒ
 
	`£mcou¡
(
sid32
);

519 
sid32
 
	`£m¸óã
(
öt32
);

522 
sysˇŒ
 
	`£mdñëe
(
sid32
);

525 
sysˇŒ
 
	`£mª£t
(
sid32
, 
öt32
);

528 
sysˇŒ
 
	`£nd
(
pid32
, 
umsg32
);

531 
¥o˚ss
 
	`shñl
(
did32
);

534 
sysˇŒ
 
	`sig«l
(
sid32
);

537 
sysˇŒ
 
	`sig« 
(
sid32
, 
öt32
);

540 
sysˇŒ
 
	`¶ìpms
(
öt32
);

541 
sysˇŒ
 
	`¶ìp
(
öt32
);

544 
öt32
 
	`öb
(int32);

545 
öt32
 
	`öw
(int32);

546 
öt32
 
	`öl
(int32);

547 
öt32
 
	`outb
(int32, int32);

548 
öt32
 
	`outw
(int32, int32);

549 
öt32
 
	`oué
(int32, int32);

550 
öt32
 
	`ösw
(int32, int32 ,int32);

551 
öt32
 
	`outsw
(int32, int32, int32);

552 
öt32
 
	`lidt
();

553 
öt32
 
	`˝uid
();

556 
sysˇŒ
 
	`su•íd
(
pid32
);

559 
devˇŒ
 
	`âyc⁄åﬁ
(
díåy
 *, 
öt32
, int32, int32);

562 
öãºu±
 
	`âydi•©ch
();

565 
devˇŒ
 
	`âygëc
(
díåy
 *);

568 
	`âyh™dÀ_ö
(
âycblk
 *, 
u¨t_c§eg
 *);

571 
	`âyh™dÀ_out
(
âycblk
 *, 
u¨t_c§eg
 *);

574 
	`âyh™dÀr
(
öt32
);

577 
devˇŒ
 
	`âyöô
(
díåy
 *);

580 
	`âykickout
(
u¨t_c§eg
 *);

583 
devˇŒ
 
	`âyputc
(
díåy
 *, );

586 
devˇŒ
 
	`âyªad
(
díåy
 *, *, 
öt32
);

589 
devˇŒ
 
	`âywrôe
(
díåy
 *, *, 
öt32
);

593 
	`udp_öô
();

594 
	`udp_ö
(
√çackë
 *);

595 
uid32
 
	`udp_ªgi°î
(
uöt32
, 
uöt16
, uint16);

596 
öt32
 
	`udp_ªcv
(
uid32
, *, i¡32, 
uöt32
);

597 
öt32
 
	`udp_ªcvaddr
(
uid32
, 
uöt32
 *, 
uöt16
 *, *,

598 
öt32
, 
uöt32
);

599 
°©us
 
	`udp_£nd
(
uid32
, *, 
öt32
);

600 
°©us
 
	`udp_£ndto
(
uid32
, 
uöt32
, 
uöt16
, *, 
öt32
);

601 
°©us
 
	`udp_ªÀa£
(
uid32
);

602 
	`udp_¡oh
(
√çackë
 *);

603 
	`udp_ht⁄
(
√çackë
 *);

607 
sysˇŒ
 
	`un¶ìp
(
pid32
);

610 
	`u£ºë
();

613 
sysˇŒ
 
	`waô
(
sid32
);

616 
	`wakeup
();

619 
sysˇŒ
 
	`wrôe
(
did32
, *, 
uöt32
);

622 
	`xd⁄e
();

625 
sysˇŒ
 
	`yõld
();

628 
	`fûîegi°î
(*, *, );

631 * 
	`fûe›í
(*, *);

634 
	`fûe˛o£
(*);

637 
	`fûñi°
(*, );

640 
	`fûeuƒegi°î
(*);

643 
sysˇŒ
 
	`lﬂd
(*, 
lﬂd_t
*);

646 
	`u∆ﬂd
(* 
ld_ãxt_addr
);

649 
	#ht⁄s
(
x
Ë((0xf‡& ((x)>>8)Ë| ((0xf‡& (x)Ë<< 8))

	)

650 
	#ht⁄l
(
x
) ((((x)>>24) & 0x000000ff) | (((x)>> 8) & 0x0000ff00) | \

651 (((
x
)<<8Ë& 0x00ff0000Ë| (((x)<<24Ë& 0xff000000))

	)

652 
	#¡ohs
(
x
Ë((0xf‡& ((x)>>8)Ë| ( (0xf‡& (x)Ë<< 8))

	)

653 
	#¡ohl
(
x
) ((((x)>>24) & 0x000000ff) | (((x)>> 8) & 0x0000ff00) | \

654 (((
x
)<<8Ë& 0x00ff0000Ë| (((x)<<24Ë& 0xff000000))

	)

	@include/pxe.h

4 
	#SYSID_ENTRY_POINT_SADDR
 0x000E0000

	)

5 
	#SYSID_ENTRY_POINT_EADDR
 0x000FFFFF

	)

7 
	#SYSID_ENTRY_POINT_HDR
 "_SYSID_"

	)

8 
	#SYSID_ENTRY_UUID_HDR
 "_UUID_"

	)

10 #¥agm®
∑ck
(1)

11 
	ssysid_bios_°ru˘


13 
byã
 
	mhódî
[6];

14 
byã
 
	mchecksum
;

15 
uöt16
 
	mÀn
;

17 #¥agm®
∑ck
()

19 #¥agm®
∑ck
(1)

20 
	ssysid_íåy_poöt


22 
byã
 
	mhódî
[7];

23 
byã
 
	mchecksum
;

24 
uöt16
 
	mÀn
;

25 
uöt32
 
	mbios_°ru˘uª_addr
;

26 
uöt16
 
	mbios_°ru˘_cou¡
;

27 
byã
 
	msysid_bios_ªvisi⁄
;

29 #¥agm®
∑ck
()

31 
sysid_íåy_poöt
* 
gë_sysid_íåy_poöt
();

32 * 
gë_uuid
(
uöt16
* 
uuid_Àn
);

39 
	#PXE_CLIENT_STRING
 "PXEClõ¡:Arch:00000:UNDI:002001"

	)

40 
	#PXE_CLIENT_STRING_LEN
 32

	)

42 
öt32
 
buûd_dh˝_discovî_pxe
(
dh˝msg
* 
dmsg
);

43 
öt32
 
buûd_dh˝_ªque°_pxe
(
dh˝msg
* 
dmsg
, c⁄° dh˝msg* 
dmsg_of„r
);

	@include/quark_eth.h

5 
	#INTEL_ETH_QUARK_PCI_DID
 0x0937

	)

6 
	#INTEL_ETH_QUARK_PCI_VID
 0x8086

	)

8 
	sëh_q_c§eg
 {

9 
uöt32
 
	mmac¸
;

10 
uöt32
 
	mmacff
;

11 
uöt32
 
	mhthr
;

12 
uöt32
 
	mhér
;

13 
uöt32
 
	mgmiür
;

14 
uöt32
 
	mgmiidr
;

15 
uöt32
 
	mf¸
;

16 
uöt32
 
	mvœ¡ag
;

17 
uöt32
 
	mvîsi⁄
;

18 
uöt32
 
	mdebug
;

19 
uöt32
 
	mªs1
[4];

20 
uöt32
 
	mú
;

21 
uöt32
 
	mimr
;

22 
uöt32
 
	mmaˇddr0h
;

23 
uöt32
 
	mmaˇddr0l
;

24 
uöt32
 
	mªs2
[46];

25 
uöt32
 
	mmmc¸
;

26 
uöt32
 
	mmm¸vcú
;

27 
uöt32
 
	mmm˘xú
;

28 
uöt32
 
	mªs3
[957];

29 
uöt32
 
	mbmr
;

30 
uöt32
 
	mçdr
;

31 
uöt32
 
	mΩdr
;

32 
uöt32
 
	mrdœ
;

33 
uöt32
 
	mtdœ
;

34 
uöt32
 
	m§
;

35 
uöt32
 
	momr
;

36 
uöt32
 
	mõr
;

43 
	#ETH_QUARK_MACCR_PE2K
 0x08000000

	)

44 
	#ETH_QUARK_MACCR_WD
 0x00800000

	)

45 
	#ETH_QUARK_MACCR_JD
 0x00400000

	)

46 
	#ETH_QUARK_MACCR_JE
 0x00100000

	)

49 
	#ETH_QUARK_MACCR_IFG96
 0x00000000

	)

50 
	#ETH_QUARK_MACCR_IFG88
 0x00020000

	)

51 
	#ETH_QUARK_MACCR_IFG80
 0x00040000

	)

52 
	#ETH_QUARK_MACCR_IFG40
 0x000E0000

	)

53 
	#ETH_QUARK_MACCR_IFG64
 0x00080000

	)

55 
	#ETH_QUARK_MACCR_DCRS
 0x00010000

	)

56 
	#ETH_QUARK_MACCR_RMIISPD10
 0x00000000

	)

57 
	#ETH_QUARK_MACCR_RMIISPD100
 0x00004000

	)

58 
	#ETH_QUARK_MACCR_DO
 0x00002000

	)

59 
	#ETH_QUARK_MACCR_LM
 0x00001000

	)

60 
	#ETH_QUARK_MACCR_DM
 0x00000800

	)

61 
	#ETH_QUARK_MACCR_IPC
 0x00000400

	)

62 
	#ETH_QUARK_MACCR_DR
 0x00000200

	)

63 
	#ETH_QUARK_MACCR_ACS
 0x00000080

	)

64 
	#ETH_QUARK_MACCR_DC
 0x00000010

	)

65 
	#ETH_QUARK_MACCR_TE
 0x00000008

	)

66 
	#ETH_QUARK_MACCR_RE
 0x00000004

	)

67 
	#ETH_QUARK_MACCR_PRELEN7
 0x00000000

	)

68 
	#ETH_QUARK_MACCR_PRELEN5
 0x00000001

	)

69 
	#ETH_QUARK_MACCR_PRELEN3
 0x00000002

	)

71 
	#ETH_QUARK_MMC_CNTFREEZ
 0x00000008

	)

72 
	#ETH_QUARK_MMC_CNTRST
 0x00000001

	)

75 
	#ETH_QUARK_GMIIAR_PAMASK
 0x0000F800

	)

76 
	#ETH_QUARK_GMIIAR_GRMASK
 0x000007C0

	)

77 
	#ETH_QUARK_GMIIAR_CR
 0x00000004

	)

79 
	#ETH_QUARK_GMIIAR_GW
 0x00000002

	)

80 
	#ETH_QUARK_GMIIAR_GB
 0x00000001

	)

83 
	#ETH_QUARK_BMR_SWR
 0x00000001

	)

84 
	#ETH_QUARK_BMR_DA
 0x00000002

	)

85 
	#ETH_QUARK_BMR_DSL_MASK
 0x0000007C

	)

86 
	#ETH_QUARK_BMR_ATDC
 0x00000080

	)

87 
	#ETH_QUARK_BMR_PBL_MASK
 0x00003F00

	)

88 
	#ETH_QUARK_BMR_PBL1
 0x00000100

	)

89 
	#ETH_QUARK_BMR_PBL2
 0x00000200

	)

90 
	#ETH_QUARK_BMR_PBL4
 0x00000400

	)

91 
	#ETH_QUARK_BMR_PBL8
 0x00000800

	)

92 
	#ETH_QUARK_BMR_PBL16
 0x00001000

	)

93 
	#ETH_QUARK_BMR_PBL32
 0x00002000

	)

94 
	#ETH_QUARK_BMR_FB
 0x00010000

	)

95 
	#ETH_QUARK_BMR_MB
 0x04000000

	)

96 
	#ETH_QUARK_BMR_RIX
 0x80000000

	)

99 
	#ETH_QUARK_SR_MMCI
 0x08000000

	)

100 
	#ETH_QUARK_SR_TS_SUSP
 0x00600000

	)

101 
	#ETH_QUARK_SR_NIS
 0x00010000

	)

102 
	#ETH_QUARK_SR_AIS
 0x00008000

	)

103 
	#ETH_QUARK_SR_RI
 0x00000040

	)

104 
	#ETH_QUARK_SR_TI
 0x00000001

	)

107 
	#ETH_QUARK_OMR_TSF
 0x00200000

	)

108 
	#ETH_QUARK_OMR_ST
 0x00002000

	)

109 
	#ETH_QUARK_OMR_OSF
 0x00000004

	)

110 
	#ETH_QUARK_OMR_SR
 0x00000002

	)

113 
	#ETH_QUARK_IER_NIE
 0x00010000

	)

114 
	#ETH_QUARK_IER_AIE
 0x00008000

	)

115 
	#ETH_QUARK_IER_RIE
 0x00000040

	)

116 
	#ETH_QUARK_IER_TIE
 0x00000001

	)

120 
	sëh_q_tx_desc
 {

121 
uöt32
 
	m˘æ°©
;

122 
uöt16
 
	mbuf1size
;

123 
uöt16
 
	mbuf2size
;

124 
uöt32
 
	mbuf„r1
;

125 
uöt32
 
	mbuf„r2
;

128 
	#ETH_QUARK_TDCS_OWN
 0x80000000

	)

129 
	#ETH_QUARK_TDCS_IC
 0x40000000

	)

130 
	#ETH_QUARK_TDCS_LS
 0x20000000

	)

131 
	#ETH_QUARK_TDCS_FS
 0x10000000

	)

132 
	#ETH_QUARK_TDCS_TER
 0x00200000

	)

133 
	#ETH_QUARK_TDCS_ES
 0x00008000

	)

137 
	sëh_q_rx_desc
 {

138 
uöt32
 
	m°©us
;

139 
uöt16
 
	mbuf1size
;

140 
uöt16
 
	mbuf2size
;

141 
uöt32
 
	mbuf„r1
;

142 
uöt32
 
	mbuf„r2
;

144 
	#rd˘l1
 
buf1size


	)

145 
	#rd˘l2
 
buf2size


	)

147 
	#ETH_QUARK_RDST_OWN
 0x80000000

	)

148 
	#ETH_QUARK_RDST_ES
 0x00008000

	)

149 
	#ETH_QUARK_RDST_FS
 0x00000200

	)

150 
	#ETH_QUARK_RDST_LS
 0x00000100

	)

151 
	#ETH_QUARK_RDST_FTETH
 0x00000020

	)

153 
	#ETH_QUARK_RDCTL1_DIC
 0x8000

	)

154 
	#ETH_QUARK_RDCTL1_RER
 0x8000

	)

156 
	#ETH_QUARK_RX_RING_SIZE
 32

	)

157 
	#ETH_QUARK_TX_RING_SIZE
 16

	)

159 
	#ETH_QUARK_INIT_DELAY
 500000

	)

160 
	#ETH_QUARK_MAX_RETRIES
 3

	)

	@include/quark_irq.h

1 
	#INTEL_QUARK_LEGBR_PCI_DID
 0x095E

	)

2 
	#INTEL_QUARK_LEGBR_PCI_VID
 0x8086

	)

4 
	#PABCDRC_OFFSET
 0x60

	)

5 
	#PEFGHRC_OFFSET
 0x64

	)

7 
	#PABCDRC_VALUE
 0x08080808

	)

8 
	#PEFGHRC_VALUE
 0x08080808

	)

10 
	#RCBA_OFFSET
 0xF0

	)

11 
	#RCBA_MASK
 0xffffc000

	)

14 
	#IRQAGENT0_OFFSET
 0x3140

	)

15 
	#IRQAGENT1_OFFSET
 0x3142

	)

16 
	#IRQAGENT2_OFFSET
 0x3144

	)

17 
	#IRQAGENT3_OFFSET
 0x3146

	)

19 
	#IRQAGENT0_VALUE
 0x0000

	)

20 
	#IRQAGENT1_VALUE
 0x3210

	)

21 
	#IRQAGENT2_VALUE
 0x0001

	)

22 
	#IRQAGENT3_VALUE
 0x7654

	)

	@include/quark_pdat.h

4 
	#QUARK_PDAT_MAGIC
 "PDAT"

	)

5 
	#QUARK_PDAT_MEMORY_LOC
 0xFFF10000

	)

8 
	#QUARK_PLAT_TYPE_ID
 1

	)

9 
	#QUARK_MAC1_ID
 3

	)

10 
	#QUARK_MAC2_ID
 4

	)

11 
	#QUARK_MRCPARAMS_ID
 6

	)

14 
	#QUARK_PLAT_TYPE_DESC
 "Pœtf‹mID"

	)

15 
	#QUARK_MRCPARAMS_DESC
 "MrcP¨ams"

	)

16 
	#QUARK_MAC1_DESC
 "1° MAC"

	)

17 
	#QUARK_MAC2_DESC
 "2nd MAC"

	)

19 #¥agm®
∑ck
(2)

20 
	squ¨k_pd©_hódî
 {

21 
	mqu¨k_pd©_magic
[4];

22 
uöt32
 
	mqu¨k_pd©_Àn
;

23 
uöt32
 
	mqu¨k_pd©_¸c
;

27 #¥agm®
∑ck
()

29 #¥agm®
∑ck
(2)

30 
	squ¨k_pd©_íåy
 {

31 
uöt16
 
	mpd©_íåy_id
;

32 
uöt16
 
	mpd©_íåy_Àn
;

33 
	mpd©_íåy_desc
[10];

34 
uöt16
 
	mpd©_íåy_vî
;

38 #¥agm®
∑ck
()

40 
gë_qu¨k_pd©_íåy_d©a_by_id
(
uöt16
 
ty≥_id
, * 
buf
, 
uöt32
 
size
);

41 
gë_qu¨k_pd©_íåy_d©a_by_desc
(c⁄° * 
íåy_desc
, * 
buf
, 
uöt32
 
size
);

	@include/queue.h

7 #i‚de‡
NQENT


8 
	#NQENT
 (
NPROC
 + 4 + 
NSEM
 + NSEM)

	)

11 
	#EMPTY
 (-1Ë

	)

12 
	#MAXKEY
 0x7FFFFFFF

	)

13 
	#MINKEY
 0x80000000

	)

15 
	sqíåy
 {

16 
öt32
 
	mqkey
;

17 
qid16
 
	mq√xt
;

18 
qid16
 
	mq¥ev
;

21 
qíåy
 
queuëab
[];

25 
	#queuehód
(
q
Ë(q)

	)

26 
	#queuëaû
(
q
Ë((qË+ 1)

	)

27 
	#fú°id
(
q
Ë(
queuëab
[
	`queuehód
(q)].
q√xt
)

	)

28 
	#œ°id
(
q
Ë(
queuëab
[
	`queuëaû
(q)].
q¥ev
)

	)

29 
	#i£m±y
(
q
Ë(
	`fú°id
(qË>
NPROC
)

	)

30 
	#n⁄em±y
(
q
Ë(
	`fú°id
(qË< 
NPROC
)

	)

31 
	#fú°key
(
q
Ë(
queuëab
[
	`fú°id
(q)].
qkey
)

	)

32 
	#œ°key
(
q
Ë(
queuëab
[ 
	`œ°id
(q)].
qkey
)

	)

36 
	#isbadqid
(
x
Ë(((
öt32
)(xË< 
NPROC
Ë|| (öt32)(xË>
NQENT
-1)

	)

	@include/ramdisk.h

5 
	#RM_BLKSIZ
 512

	)

6 
	#RM_BLKS
 200

	)

8 
	sømdisk
 {

9 
	mdisk
[
RM_BLKSIZ
 * 
RM_BLKS
];

12 
ømdisk
 
Ram
;

	@include/rdisksys.h

3 #i‚def 
Nrds


4 
	#Nrds
 1

	)

9 
	#RD_BLKSIZ
 512

	)

13 #i‚def 
RD_SERVER_IP


14 
	#RD_SERVER_IP
 "255.255.255.255"

	)

17 #i‚def 
RD_SERVER_PORT


18 
	#RD_SERVER_PORT
 33124

	)

21 #i‚def 
RD_LOC_PORT


22 
	#RD_LOC_PORT
 33124

	)

29 
	#RD_IDLEN
 64

	)

30 
	#RD_BUFFS
 64

	)

31 
	#RD_STACK
 16384

	)

32 
	#RD_PRIO
 200

	)

36 
	#RD_FREE
 0

	)

37 
	#RD_OPEN
 1

	)

38 
	#RD_PEND
 2

	)

42 
	#RD_OP_READ
 1

	)

43 
	#RD_OP_WRITE
 2

	)

44 
	#RD_OP_SYNC
 3

	)

48 
	#RD_VALID
 0

	)

49 
	#RD_INVALID
 1

	)

55 
	srdbuff
 {

56 
rdbuff
 *
	mrd_√xt
;

57 
rdbuff
 *
	mrd_¥ev
;

58 
öt32
 
	mrd_›
;

59 
öt32
 
	mrd_ªf˙t
;

61 
uöt32
 
	mrd_blknum
;

62 
öt32
 
	mrd_°©us
;

63 
pid32
 
	mrd_pid
;

65 
	mrd_block
[
RD_BLKSIZ
];

68 
	srdscblk
 {

69 
öt32
 
	mrd_°©e
;

70 
	mrd_id
[
RD_IDLEN
];

71 
öt32
 
	mrd_£q
;

73 
rdbuff
 *
	mrd_rh√xt
;

74 
rdbuff
 *
	mrd_rh¥ev
;

75 
rdbuff
 *
	mrd_π√xt
;

76 
rdbuff
 *
	mrd_π¥ev
;

80 
rdbuff
 *
	mrd_ch√xt
;

81 
rdbuff
 *
	mrd_ch¥ev
;

82 
rdbuff
 *
	mrd_˘√xt
;

83 
rdbuff
 *
	mrd_˘¥ev
;

87 
rdbuff
 *
	mrd_‰ì
;

89 
pid32
 
	mrd_com¥oc
;

90 
boﬁ8
 
	mrd_comruns
;

91 
sid32
 
	mrd_avaû£m
;

92 
sid32
 
	mrd_ªq£m
;

93 
uöt32
 
	mrd_£r_ù
;

94 
uöt16
 
	mrd_£r_p‹t
;

95 
uöt16
 
	mrd_loc_p‹t
;

96 
boﬁ8
 
	mrd_ªgi°îed
;

97 
öt32
 
	mrd_udp¶Ÿ
;

101 
rdscblk
 
rd°ab
[];

105 
	#RD_RETRIES
 3

	)

106 
	#RD_TIMEOUT
 2000

	)

110 
	#RDS_CTL_DEL
 1

	)

111 
	#RDS_CTL_SYNC
 2

	)

118 
	#RD_MSG_RESPONSE
 0x0100

	)

120 
	#RD_MSG_RREQ
 0x0010

	)

121 
	#RD_MSG_RRES
 (
RD_MSG_RREQ
 | 
RD_MSG_RESPONSE
)

	)

123 
	#RD_MSG_WREQ
 0x0020

	)

124 
	#RD_MSG_WRES
 (
RD_MSG_WREQ
 | 
RD_MSG_RESPONSE
)

	)

126 
	#RD_MSG_OREQ
 0x0030

	)

127 
	#RD_MSG_ORES
 (
RD_MSG_OREQ
 | 
RD_MSG_RESPONSE
)

	)

129 
	#RD_MSG_CREQ
 0x0040

	)

130 
	#RD_MSG_CRES
 (
RD_MSG_CREQ
 | 
RD_MSG_RESPONSE
)

	)

132 
	#RD_MSG_DREQ
 0x0050

	)

133 
	#RD_MSG_DRES
 (
RD_MSG_DREQ
 | 
RD_MSG_RESPONSE
)

	)

135 
	#RD_MIN_REQ
 
RD_MSG_RREQ


	)

136 
	#RD_MAX_REQ
 
RD_MSG_DREQ


	)

140 
	#RD_MSG_HDR
 \

141 
uöt16
 
rd_ty≥
; \

142 
uöt16
 
rd_°©us
; \

143 
uöt32
 
rd_£q
; \

144 
rd_id
[
RD_IDLEN
];

	)

150 #¥agm®
∑ck
(2)

151 
	srd_msg_hdr
 {

152 
	mRD_MSG_HDR


154 #¥agm®
∑ck
()

159 #¥agm®
∑ck
(2)

160 
	srd_msg_ºeq
 {

161 
RD_MSG_HDR


162 
uöt32
 
	mrd_blk
;

164 #¥agm®
∑ck
()

166 #¥agm®
∑ck
(2)

167 
	srd_msg_ºes
 {

168 
RD_MSG_HDR


169 
uöt32
 
	mrd_blk
;

170 
	mrd_d©a
[
RD_BLKSIZ
];

172 #¥agm®
∑ck
()

177 #¥agm®
∑ck
(2)

178 
	srd_msg_wªq
 {

179 
RD_MSG_HDR


180 
uöt32
 
	mrd_blk
;

181 
	mrd_d©a
[
RD_BLKSIZ
];

183 #¥agm®
∑ck
()

185 #¥agm®
∑ck
(2)

186 
	srd_msg_wªs
 {

187 
RD_MSG_HDR


188 
uöt32
 
	mrd_blk
;

190 #¥agm®
∑ck
()

195 #¥agm®
∑ck
(2)

196 
	srd_msg_‹eq
 {

197 
	mRD_MSG_HDR


199 #¥agm®
∑ck
()

201 #¥agm®
∑ck
(2)

202 
	srd_msg_‹es
 {

203 
	mRD_MSG_HDR


205 #¥agm®
∑ck
()

210 #¥agm®
∑ck
(2)

211 
	srd_msg_¸eq
 {

212 
	mRD_MSG_HDR


214 #¥agm®
∑ck
()

216 #¥agm®
∑ck
(2)

217 
	srd_msg_¸es
 {

218 
	mRD_MSG_HDR


220 #¥agm®
∑ck
()

225 #¥agm®
∑ck
(2)

226 
	srd_msg_dªq
 {

227 
	mRD_MSG_HDR


229 #¥agm®
∑ck
()

231 #¥agm®
∑ck
(2)

232 
	srd_msg_dªs
 {

233 
	mRD_MSG_HDR


235 #¥agm®
∑ck
()

	@include/resched.h

5 
	#DEFER_START
 1

	)

6 
	#DEFER_STOP
 2

	)

10 
	sde„r
 {

11 
öt32
 
	mnde„rs
;

12 
boﬁ8
 
	m©ãm±
;

16 
de„r
 
De„r
;

	@include/rfilesys.h

3 #i‚def 
NrÊ


4 
	#NrÊ
 10

	)

9 
	#RF_NAMLEN
 128

	)

10 
	#RF_DATALEN
 1024

	)

11 
	#RF_MODE_R
 
F_MODE_R


	)

12 
	#RF_MODE_W
 
F_MODE_W


	)

13 
	#RF_MODE_RW
 
F_MODE_RW


	)

14 
	#RF_MODE_N
 
F_MODE_N


	)

15 
	#RF_MODE_O
 
F_MODE_O


	)

16 
	#RF_MODE_NO
 
F_MODE_NO


	)

20 #i‚def 
RF_SERVER_IP


21 
	#RF_SERVER_IP
 "128.10.3.51"

	)

24 #i‚def 
RF_SERVER_PORT


25 
	#RF_SERVER_PORT
 0

	)

28 #i‚def 
RF_LOC_PORT


29 
	#RF_LOC_PORT
 33123

	)

32 
	srfd©a
 {

33 
öt32
 
	mrf_£q
;

34 
uöt32
 
	mrf_£r_ù
;

35 
uöt16
 
	mrf_£r_p‹t
;

36 
uöt16
 
	mrf_loc_p‹t
;

37 
öt32
 
	mrf_udp_¶Ÿ
;

38 
sid32
 
	mrf_muãx
;

39 
boﬁ8
 
	mrf_ªgi°îed
;

42 
rfd©a
 
Rf_d©a
;

46 
	#RF_FREE
 0

	)

47 
	#RF_USED
 1

	)

49 
	srÊcblk
 {

50 
öt32
 
	mrf°©e
;

51 
öt32
 
	mrfdev
;

52 
	mr‚ame
[
RF_NAMLEN
];

53 
uöt32
 
	mrÂos
;

54 
uöt32
 
	mrfmode
;

58 
rÊcblk
 
rÊèb
[];

62 
	#RF_RETRIES
 3

	)

63 
	#RF_TIMEOUT
 3000

	)

67 
	#RFS_CTL_DEL
 
F_CTL_DEL


	)

68 
	#RFS_CTL_TRUNC
 
F_CTL_TRUNC


	)

69 
	#RFS_CTL_MKDIR
 
F_CTL_MKDIR


	)

70 
	#RFS_CTL_RMDIR
 
F_CTL_RMDIR


	)

71 
	#RFS_CTL_SIZE
 
F_CTL_SIZE


	)

81 
	#RF_MSG_RESPONSE
 0x0100

	)

83 
	#RF_MSG_RREQ
 0x0001

	)

84 
	#RF_MSG_RRES
 (
RF_MSG_RREQ
 | 
RF_MSG_RESPONSE
)

	)

86 
	#RF_MSG_WREQ
 0x0002

	)

87 
	#RF_MSG_WRES
 (
RF_MSG_WREQ
 | 
RF_MSG_RESPONSE
)

	)

89 
	#RF_MSG_OREQ
 0x0003

	)

90 
	#RF_MSG_ORES
 (
RF_MSG_OREQ
 | 
RF_MSG_RESPONSE
)

	)

92 
	#RF_MSG_DREQ
 0x0004

	)

93 
	#RF_MSG_DRES
 (
RF_MSG_DREQ
 | 
RF_MSG_RESPONSE
)

	)

95 
	#RF_MSG_TREQ
 0x0005

	)

96 
	#RF_MSG_TRES
 (
RF_MSG_TREQ
 | 
RF_MSG_RESPONSE
)

	)

98 
	#RF_MSG_SREQ
 0x0006

	)

99 
	#RF_MSG_SRES
 (
RF_MSG_SREQ
 | 
RF_MSG_RESPONSE
)

	)

101 
	#RF_MSG_MREQ
 0x0007

	)

102 
	#RF_MSG_MRES
 (
RF_MSG_MREQ
 | 
RF_MSG_RESPONSE
)

	)

104 
	#RF_MSG_XREQ
 0x0008

	)

105 
	#RF_MSG_XRES
 (
RF_MSG_XREQ
 | 
RF_MSG_RESPONSE
)

	)

107 
	#RF_MSG_CREQ
 0x0009

	)

108 
	#RF_MSG_CRES
 (
RF_MSG_CREQ
 | 
RF_MSG_RESPONSE
)

	)

110 
	#RF_MIN_REQ
 
RF_MSG_RREQ


	)

111 
	#RF_MAX_REQ
 
RF_MSG_CREQ


	)

115 
	#RF_MSG_HDR
 \

116 
uöt16
 
rf_ty≥
; \

117 
uöt16
 
rf_°©us
; \

118 
uöt32
 
rf_£q
; \

119 
rf_«me
[
RF_NAMLEN
];

	)

129 #¥agm®
∑ck
(2)

130 
	srf_msg_hdr
 {

131 
	mRF_MSG_HDR


133 #¥agm®
∑ck
()

141 #¥agm®
∑ck
(2)

142 
	srf_msg_ºeq
 {

143 
RF_MSG_HDR


144 
uöt32
 
	mrf_pos
;

145 
uöt32
 
	mrf_Àn
;

148 #¥agm®
∑ck
()

150 #¥agm®
∑ck
(2)

151 
	srf_msg_ºes
 {

152 
RF_MSG_HDR


153 
uöt32
 
	mrf_pos
;

154 
uöt32
 
	mrf_Àn
;

156 
	mrf_d©a
[
RF_DATALEN
];

159 #¥agm®
∑ck
()

167 #¥agm®
∑ck
(2)

168 
	srf_msg_wªq
 {

169 
RF_MSG_HDR


170 
uöt32
 
	mrf_pos
;

171 
uöt32
 
	mrf_Àn
;

173 
	mrf_d©a
[
RF_DATALEN
];

176 #¥agm®
∑ck
()

178 #¥agm®
∑ck
(2)

179 
	srf_msg_wªs
 {

180 
RF_MSG_HDR


181 
uöt32
 
	mrf_pos
;

182 
uöt32
 
	mrf_Àn
;

184 #¥agm®
∑ck
()

192 #¥agm®
∑ck
(2)

193 
	srf_msg_‹eq
 {

194 
RF_MSG_HDR


195 
öt32
 
	mrf_mode
;

197 #¥agm®
∑ck
()

199 #¥agm®
∑ck
(2)

200 
	srf_msg_‹es
 {

201 
RF_MSG_HDR


202 
öt32
 
	mrf_mode
;

204 #¥agm®
∑ck
()

212 #¥agm®
∑ck
(2)

213 
	srf_msg_¸eq
 {

214 
	mRF_MSG_HDR


216 #¥agm®
∑ck
()

218 #¥agm®
∑ck
(2)

219 
	srf_msg_¸es
 {

220 
	mRF_MSG_HDR


222 #¥agm®
∑ck
()

230 #¥agm®
∑ck
(2)

231 
	srf_msg_§eq
 {

232 
	mRF_MSG_HDR


234 #¥agm®
∑ck
()

236 #¥agm®
∑ck
(2)

237 
	srf_msg_§es
 {

238 
RF_MSG_HDR


239 
uöt32
 
	mrf_size
;

241 #¥agm®
∑ck
()

249 #¥agm®
∑ck
(2)

250 
	srf_msg_dªq
 {

251 
	mRF_MSG_HDR


253 #¥agm®
∑ck
()

255 #¥agm®
∑ck
(2)

256 
	srf_msg_dªs
 {

257 
	mRF_MSG_HDR


259 #¥agm®
∑ck
()

267 #¥agm®
∑ck
(2)

268 
	srf_msg_åeq
 {

269 
	mRF_MSG_HDR


271 #¥agm®
∑ck
()

273 #¥agm®
∑ck
(2)

274 
	srf_msg_åes
 {

275 
	mRF_MSG_HDR


277 #¥agm®
∑ck
()

285 #¥agm®
∑ck
(2)

286 
	srf_msg_mªq
 {

287 
	mRF_MSG_HDR


289 #¥agm®
∑ck
()

291 #¥agm®
∑ck
(2)

292 
	srf_msg_mªs
 {

293 
	mRF_MSG_HDR


295 #¥agm®
∑ck
()

303 #¥agm®
∑ck
(2)

304 
	srf_msg_xªq
 {

305 
	mRF_MSG_HDR


307 #¥agm®
∑ck
()

309 #¥agm®
∑ck
(2)

310 
	srf_msg_xªs
 {

311 
	mRF_MSG_HDR


313 #¥agm®
∑ck
()

321 
	#RF_DIRENT_FILE
 1

	)

322 
	#RF_DIRENT_DIR
 2

	)

324 #¥agm®
∑ck
(2)

325 
	srfdúít
 {

326 
byã
 
	md_ty≥
;

327 
	md_«me
[256];

329 #¥agm®
∑ck
()

	@include/sdmc.h

1 
	#INTEL_QUARK_SDIO_PCI_DID
 0x08A7

	)

2 
	#INTEL_QUARK_SDIO_PCI_VID
 0x8086

	)

4 #i‚def 
Nsdmc


5 
	#Nsdmc
 1

	)

8 
	ssdmcblk
 {

9 
sid32
 
	mcmd_£m
;

10 
sid32
 
	mtx_£m
;

11 
uöt32
 
	mrˇ
;

12 
	mcid
[16];

13 
uöt8
 
	mcmd8
 :1;

14 
uöt8
 
	msdio
 :1;

15 
uöt8
 
	mrsvd
 :6;

17 
sdmcblk
 
sdm˘ab
[];

19 #¥agm®
∑ck
(1)

20 
	ssdmc_c§eg
 {

21 
uöt32
 
	msys_adr
;

22 
uöt16
 
	mblk_size
;

23 
uöt16
 
	mblk_cou¡
;

24 
uöt32
 
	m¨gumít
;

25 
uöt16
 
	mtx_mode
;

26 
uöt16
 
	mcmd
;

27 
uöt32
 
	mª•⁄£0
;

28 
uöt32
 
	mª•⁄£2
;

29 
uöt32
 
	mª•⁄£4
;

30 
uöt32
 
	mª•⁄£6
;

31 
uöt32
 
	mbuf_d©a_p‹t
;

32 
uöt32
 
	m¥e_°©e
;

33 
uöt8
 
	mho°_˘l
;

34 
uöt8
 
	mpwr_˘l
;

35 
uöt8
 
	mblk_g≠_˘l
;

36 
uöt8
 
	mwakeup_˘l
;

37 
uöt16
 
	m˛k_˘l
;

38 
uöt8
 
	mtimeout_˘l
;

39 
uöt8
 
	msw_r°
;

40 
uöt16
 
	mnml_öt_°©us
;

41 
uöt16
 
	mîr_öt_°©us
;

42 
uöt16
 
	mƒm_öt_°©us_í
;

43 
uöt16
 
	mîr_öt_°©_í
;

44 
uöt16
 
	mƒm_öt_sig_í
;

45 
uöt16
 
	mîr_öt_sig_í
;

46 
uöt16
 
	mcmd12_îr_°©
;

47 
uöt16
 
	mho°_˘æ_2
;

48 
uöt32
 
	mˇ∑bûôõs
;

49 
uöt32
 
	mˇ∑bûôõs_2
;

50 
uöt32
 
	mmax_cur_ˇp
;

51 
byã
 
	mrsvd1
[4];

52 
uöt16
 
	mf‹˚_evít_cmd12_îr_°©
;

53 
uöt16
 
	mf‹˚_evít_îr_öt_°©
;

54 
uöt8
 
	madma_îr_°©
;

55 
byã
 
	mrsvd2
[3];

56 
uöt32
 
	madma_sys_addr
;

57 
byã
 
	mrsvd3
[4];

58 
uöt16
 
	m¥e£t_vÆue_0
;

59 
uöt16
 
	m¥e£t_vÆue_1
;

60 
uöt16
 
	m¥e£t_vÆue_2
;

61 
uöt16
 
	m¥e£t_vÆue_3
;

62 
uöt16
 
	m¥e£t_vÆue_4
;

63 
uöt16
 
	m¥e£t_vÆue_5
;

64 
uöt16
 
	m¥e£t_vÆue_6
;

65 
uöt16
 
	m¥e£t_vÆue_7
;

66 
uöt32
 
	mboŸ_timeout_˘æ
;

67 
uöt8
 
	mdebug_£l
;

68 
byã
 
	mrsvd4
[107];

69 
uöt32
 
	msh¨ed_bus
;

70 
byã
 
	mrsvd5
[12];

71 
uöt8
 
	m•i_öt_sup
;

72 
byã
 
	mrsvd6
[11];

73 
uöt16
 
	m¶Ÿ_öt_°©
;

74 
uöt16
 
	mho°_˘æ_vî
;

76 #¥agm®
∑ck
()

78 
	ssdmc_cmd
 {

79 
uöt16
 
	mª•_ty≥_£l
 :2;

80 
uöt16
 
	mcmd_¸c_chk_í
 :1;

81 
uöt16
 
	mcmd_ödex_chk_í
:1;

82 
uöt16
 
	md©_¥_£l
 :2;

83 
uöt16
 
	mcmd_ty≥
 :2;

84 
uöt16
 
	mcmd_ödex
 :6;

85 
uöt16
 
	mrsvd
 :2;

88 
	ssdmc_ˇ∑bûôõs
 {

89 
uöt32
 
	mtimeout_˛ock_‰equícy
 :6;

90 
uöt32
 
	mrsvd6
 :1;

91 
uöt32
 
	mtimeout_˛ock_unô
 :1;

92 
uöt32
 
	mba£_˛ock_‰equícy_sd_˛k
:8;

93 
uöt32
 
	mmax_block_Àngth
 :2;

94 
uöt32
 
	mexãnded_medü_bus_suµ‹t
:1;

95 
uöt32
 
	madma2_suµ‹t
 :1;

96 
uöt32
 
	mrsvd5
 :1;

97 
uöt32
 
	mhigh_•ìd_suµ‹t
 :1;

98 
uöt32
 
	msdma_suµ‹t
 :1;

99 
uöt32
 
	msu•íd_ªsume_suµ‹t
 :1;

100 
uöt32
 
	mvﬁt_suµ‹t_3p3v
 :1;

101 
uöt32
 
	mvﬁt_suµ‹t_3p0v
 :1;

102 
uöt32
 
	mvﬁt_suµ‹t_1p8v
 :1;

103 
uöt32
 
	mrsvd4
 :1;

104 
uöt32
 
	msys_bus_suµ‹t_64b
 :1;

105 
uöt32
 
	masync_öt_suµ‹t
 :1;

106 
uöt32
 
	m¶Ÿ_ty≥
 :2;

112 
	#SDMC_HOST_CTL_LED_CTL
 0x0001

	)

113 
	#SDMC_HOST_DAT_TX_4BIT
 0x0002

	)

114 
	#SDMC_HOST_HS_EN
 0x0004

	)

115 
	#SDMC_HOST_ADMA_32
 0x0010

	)

116 
	#SDMC_HOST_ADMA_64
 0x0018

	)

117 
	#SDMC_HOST_CARD_DET_TST
 0x0040

	)

118 
	#SDMC_HOST_CARD_DET_SIG
 0x0080

	)

121 
	#SDMC_CMD_COMP_STAT_EN
 0x0001

	)

122 
	#SDMC_TX_COMP_STAT_EN
 0x0002

	)

123 
	#SDMC_BLK_GAP_EVENT_STAT_EN
 0x0004

	)

124 
	#SDMC_DMA_INT_STAT_EN
 0x0008

	)

125 
	#SDMC_BUF_WR_RDY_STAT_EN
 0x0010

	)

126 
	#SDMC_BUF_RD_RDY_STAT_EN
 0x0020

	)

127 
	#SDMC_CRD_INS_STAT_EN
 0x0040

	)

128 
	#SDMC_CRD_RMV_STAT_EN
 0x0080

	)

129 
	#SDMC_CRD_INT_STAT_EN
 0x0100

	)

130 
	#SDMC_INT_A_STAT_EN
 0x0200

	)

131 
	#SDMC_INT_B_STAT_EN
 0x0400

	)

132 
	#SDMC_INT_C_STAT_EN
 0x0800

	)

133 
	#SDMC_RE_TUNE_STAT_EN
 0x1000

	)

134 
	#SDMC_NML_INT_ALL_STAT_EN
 0x1FFF

	)

137 
	#SDMC_CMD_COMP_SIG_EN
 0x0001

	)

138 
	#SDMC_TX_COMP_SIG_EN
 0x0002

	)

139 
	#SDMC_BLK_GAP_EVENT_SIG_EN
 0x0004

	)

140 
	#SDMC_DMA_INT_SIG_EN
 0x0008

	)

141 
	#SDMC_BUF_WR_RDY_SIG_EN
 0x0010

	)

142 
	#SDMC_BUF_RD_RDY_SIG_EN
 0x0020

	)

143 
	#SDMC_CRD_INS_SIG_EN
 0x0040

	)

144 
	#SDMC_CRD_RMV_SIG_EN
 0x0080

	)

145 
	#SDMC_CRD_INT_SIG_EN
 0x0100

	)

146 
	#SDMC_INT_A_SIG_EN
 0x0200

	)

147 
	#SDMC_INT_B_SIG_EN
 0x0400

	)

148 
	#SDMC_INT_C_SIG_EN
 0x0800

	)

149 
	#SDMC_RE_TUNE_SIG_EN
 0x1000

	)

150 
	#SDMC_NML_INT_ALL_SIG_EN
 0x1FFF

	)

153 
	#SDMC_NML_INT_CMD_COMP
 0x0001

	)

154 
	#SDMC_NML_INT_TX_COMP
 0x0002

	)

155 
	#SDMC_NML_INT_BLK_GAP_EVENT
 0x0004

	)

156 
	#SDMC_NML_INT_DMA_INT
 0x0008

	)

157 
	#SDMC_NML_INT_BUF_WR_RDY
 0x0010

	)

158 
	#SDMC_NML_INT_BUF_RD_RDY
 0x0020

	)

159 
	#SDMC_NML_INT_CRD_INS
 0x0040

	)

160 
	#SDMC_NML_INT_CRD_RM
 0x0080

	)

161 
	#SDMC_NML_INT_CRD_INT
 0x0100

	)

162 
	#SDMC_NML_INT_INT_A
 0x0200

	)

163 
	#SDMC_NML_INT_INT_B
 0x0400

	)

164 
	#SDMC_NML_INT_INT_C
 0x0800

	)

165 
	#SDMC_NML_INT_RE_TUNE
 0x1000

	)

166 
	#SDMC_NML_INT_BOOT_CK_RCV
 0x2000

	)

167 
	#SDMC_NML_INT_BOOT_TER_INT
 0x4000

	)

168 
	#SDMC_NML_INT_ERR_INT
 0x8000

	)

171 
	#SDMC_ERR_INT_CMD_TIMEOUT_ERR_STAT_EN
 0x0001

	)

172 
	#SDMC_ERR_INT_CMD_CRC_ERR_STAT_EN
 0x0002

	)

173 
	#SDMC_ERR_INT_CMD_END_BIT_ERR_STAT_EN
 0x0004

	)

174 
	#SDMC_ERR_INT_CMD_IND_ERR_STAT_EN
 0x0008

	)

175 
	#SDMC_ERR_INT_DATA_TIMEOUT_ERR_STAT_EN
 0x0010

	)

176 
	#SDMC_ERR_INT_DATA_CRC_ERR_STAT_EN
 0x0020

	)

177 
	#SDMC_ERR_INT_DATA_END_BIT_ERR_STAT_EN
 0x0040

	)

178 
	#SDMC_ERR_INT_CUR_LIMIT_ERR_STAT_EN
 0x0080

	)

179 
	#SDMC_ERR_INT_CMD12_ERR_STAT_EN
 0x0100

	)

180 
	#SDMC_ERR_INT_ADMA_ERR_STAT_EN
 0x0200

	)

181 
	#SDMC_ERR_INT_TUNE_ERR_STAT_EN
 0x0400

	)

182 
	#SDMC_ERR_INT_TGT_RSP_ERR_EN
 0x1000

	)

183 
	#SDMC_ERR_INT_CEATA_ERR_EN
 0x2000

	)

184 
	#SDMC_ERR_INT_ALL_STAT_EN
 0x3FFF

	)

187 
	#SDMC_ERR_INT_CMD_TIMEOUT_ERR_SIG_EN
 0x0001

	)

188 
	#SDMC_ERR_INT_CMD_CRC_ERR_SIG_EN
 0x0002

	)

189 
	#SDMC_ERR_INT_CMD_END_BIT_ERR_SIG_EN
 0x0004

	)

190 
	#SDMC_ERR_INT_CMD_IND_ERR_SIG_EN
 0x0008

	)

191 
	#SDMC_ERR_INT_DATA_TIMEOUT_ERR_SIG_EN
 0x0010

	)

192 
	#SDMC_ERR_INT_DATA_CRC_ERR_SIG_EN
 0x0020

	)

193 
	#SDMC_ERR_INT_DATA_END_BIT_ERR_SIG_EN
 0x0040

	)

194 
	#SDMC_ERR_INT_CUR_LIMIT_ERR_SIG_EN
 0x0080

	)

195 
	#SDMC_ERR_INT_CMD12_ERR_SIG_EN
 0x0100

	)

196 
	#SDMC_ERR_INT_ADMA_ERR_SIG_EN
 0x0200

	)

197 
	#SDMC_ERR_INT_TUNE_ERR_SIG_EN
 0x0400

	)

198 
	#SDMC_ERR_INT_TGT_RSP_ERR_SIG_EN
 0x1000

	)

199 
	#SDMC_ERR_INT_CEATA_ERR_SIG_EN
 0x2000

	)

200 
	#SDMC_ERR_INT_ALL_SIG_EN
 0x3FFF

	)

203 
	#SDMC_ERR_INT_CMD_TIMEOUT_ERR
 0x0001

	)

204 
	#SDMC_ERR_INT_CMD_CRC_ERR
 0x0002

	)

205 
	#SDMC_ERR_INT_CMD_END_BIT_ERR
 0x0004

	)

206 
	#SDMC_ERR_INT_CMD_INDEX_ERR
 0x0008

	)

207 
	#SDMC_ERR_INT_DATA_TIMEOUT_ERR
 0x0010

	)

208 
	#SDMC_ERR_INT_DATA_CRC_ERR
 0x0020

	)

209 
	#SDMC_ERR_INT_DATA_END_BIT_ERR
 0x0040

	)

210 
	#SDMC_ERR_INT_CUR_LIMIT_ERR
 0x0080

	)

211 
	#SDMC_ERR_INT_CMD12_ERR
 0x0100

	)

212 
	#SDMC_ERR_INT_ADMA_ERR
 0x0200

	)

213 
	#SDMC_ERR_INT_TUNE_ERR
 0x0400

	)

214 
	#SDMC_ERR_INT_TGT_RSP_ERR
 0x1000

	)

215 
	#SDMC_ERR_INT_CEATA_ERR
 0x2000

	)

218 
	#SDMC_SW_RST_ALL
 0x01

	)

219 
	#SDMC_SW_RST_CMD_LN
 0x02

	)

220 
	#SDMC_SW_RST_DAT_LN
 0x04

	)

223 
	#SDMC_CAP_VOLT_SUPPORT_3P3V
 0x01000000

	)

224 
	#SDMC_CAP_VOLT_SUPPORT_3P0V
 0x02000000

	)

225 
	#SDMC_CAP_VOLT_SUPPORT_1P8V
 0x04000000

	)

228 
	#SDMC_PRE_STATE_CMD_INHIBIT_CMD
 0x00000001

	)

229 
	#SDMC_PRE_STATE_CMD_INHIBIT_DAT
 0x00000002

	)

230 
	#SDMC_PRE_STATE_CRD_INS
 0x00010000

	)

231 
	#SDMC_PRE_STATE_DATA_LN_SIG_LVL
 0x00F00000

	)

234 
	#SDMC_CLK_CTL_INT_CLK_EN
 0x0001

	)

235 
	#SDMC_CLK_CTL_INT_CLK_STABLE
 0x0002

	)

236 
	#SDMC_CLK_CTL_SD_CLK_EN
 0x0004

	)

237 
	#SDMC_CLK_CTL_CLK_GEN_SEL
 0x0020

	)

238 
	#SDMC_CLK_CTL_SD_FREQ_HIGH_MASK
 0x00FF

	)

241 
	#SDMC_TMR_CTL_HIGH
 0x0E

	)

244 
	#SDMC_PWR_CTL_SD_BUS_PWR
 0x01

	)

245 
	#SDMC_PWR_CTL_HW_RST
 0x10

	)

246 
	#SDMC_PWR_CTL_SD_BUS_VOL_SEL_CLR
 0xF1

	)

247 
	#SDMC_PWR_CTL_SD_BUS_VOL_SEL_3P3V
 0x0E

	)

248 
	#SDMC_PWR_CTL_SD_BUS_VOL_SEL_3P0V
 0x0C

	)

249 
	#SDMC_PWR_CTL_SD_BUS_VOL_SEL_1P8V
 0x0A

	)

252 
	#SDMC_TXM_DMA_EN
 0x0001

	)

253 
	#SDMC_TXM_BLK_CNT_EN
 0x0002

	)

254 
	#SDMC_TXM_AUTO_CMD12_EN
 0x0004

	)

255 
	#SDMC_TXM_DAT_TX_RD
 0x0010

	)

256 
	#SDMC_TXM_MB_SEL
 0x0020

	)

259 
	#SDMC_R1_AKE_SEQ_ERROR
 0x00000008

	)

260 
	#SDMC_R1_APP_CMD
 0x00000020

	)

261 
	#SDMC_R1_READY_FOR_DATA
 0x00000100

	)

262 
	#SDMC_R1_CURRENT_STATE
 0x00001E00

	)

263 
	#SDMC_R1_ERASE_RESET
 0x00002000

	)

264 
	#SDMC_R1_CARD_ECC_DISABLED
 0x00004000

	)

265 
	#SDMC_R1_WP_ERASE_SKIP
 0x00008000

	)

266 
	#SDMC_R1_CSD_OVERWRITE
 0x00010000

	)

267 
	#SDMC_R1_ERROR
 0x00080000

	)

268 
	#SDMC_R1_CC_ERROR
 0x00100000

	)

269 
	#SDMC_R1_CARD_ECC_FAILED
 0x00200000

	)

270 
	#SDMC_R1_ILLEGAL_COMMAND
 0x00400000

	)

271 
	#SDMC_R1_COM_CRC_ERROR
 0x00800000

	)

272 
	#SDMC_R1_LOCK_UNLOCK_FAILED
 0x01000000

	)

273 
	#SDMC_R1_CARD_IS_LOCKED
 0x02000000

	)

274 
	#SDMC_R1_WP_VIOLATION
 0x04000000

	)

275 
	#SDMC_R1_ERASE_PARAM
 0x08000000

	)

276 
	#SDMC_R1_ERASE_SEQ_ERROR
 0x10000000

	)

277 
	#SDMC_R1_BLOCK_LEN_ERROR
 0x20000000

	)

278 
	#SDMC_R1_ADDRESS_ERROR
 0x40000000

	)

279 
	#SDMC_R1_OUT_OF_RANGE
 0x80000000

	)

280 
	#SDMC_R1_ANY_ERROR
 0xFDF90008

	)

283 
	#SDMC_R1_IDLE_STATE
 0x00000000

	)

284 
	#SDMC_R1_READY_STATE
 0x00000200

	)

285 
	#SDMC_R1_IDENT_STATE
 0x00000400

	)

286 
	#SMDC_R1_STBY_STATE
 0x00000600

	)

287 
	#SDMC_R1_TRAN_STATE
 0x00000800

	)

288 
	#SDMC_R1_DATA_STATE
 0x00000A00

	)

289 
	#SDMC_R1_RCV_STATE
 0x00000C00

	)

290 
	#SDMC_R1_PRG_STATE
 0x00000E00

	)

291 
	#SMDC_R1_DIS_STATE
 0x00001000

	)

294 
	#SDMC_R3_2P7_2P8
 0x00008000

	)

295 
	#SDMC_R3_2P8_2P9
 0x00010000

	)

296 
	#SDMC_R3_2P9_3P0
 0x00020000

	)

297 
	#SDMC_R3_3P0_3P1
 0x00040000

	)

298 
	#SDMC_R3_3P1_3P2
 0x00080000

	)

299 
	#SDMC_R3_3P2_3P3
 0x00100000

	)

300 
	#SDMC_R3_3P3_3P4
 0x00200000

	)

301 
	#SDMC_R3_3P4_3P5
 0x00400000

	)

302 
	#SDMC_R3_3P5_3P6
 0x00800000

	)

303 
	#SDMC_R3_S18A
 0x01000000

	)

304 
	#SDMC_R3_UHS_II_STS
 0x20000000

	)

305 
	#SDMC_R3_CCS
 0x40000000

	)

306 
	#SDMC_R3_BUSY
 0x80000000

	)

309 
	#SDMC_R6_RCA_MASK
 0xFFFF0000

	)

310 
	#SDMC_R6_AKE_SEQ_ERROR
 0x00000008

	)

311 
	#SDMC_R6_APP_CMD
 0x00000020

	)

312 
	#SDMC_R6_READY_FOR_DATA
 0x00000100

	)

313 
	#SDMC_R6_CURRENT_STATE
 0x00001E00

	)

314 
	#SDMC_R6_ERROR
 0x00002000

	)

315 
	#SDMC_R6_ILLEGAL_COMMAND
 0x00004000

	)

316 
	#SDMC_R6_COM_CRC_ERROR
 0x00008000

	)

319 
	#SDMC_OCR_MASK
 0x00FFFF00

	)

320 
	#SDMC_ACMD41_S18R
 0x01000000

	)

321 
	#SDMC_ACMD41_XPC
 0x10000000

	)

322 
	#SDMC_ACMD41_HCS
 0x40000000

	)

325 
	#SDMC_CMD_TYPE_NML
 0x0000

	)

326 
	#SDMC_CMD_TYPE_SUS
 0x0040

	)

327 
	#SDMC_CMD_TYPE_RSM
 0x0080

	)

328 
	#SDMC_CMD_TYPE_ABT
 0x00C0

	)

329 
	#SDMC_CMD_DAT_PRES
 0x0020

	)

330 
	#SDMC_CMD_CMD_IDX_EN
 0x0010

	)

331 
	#SDMC_CMD_CMD_CRC_EN
 0x0008

	)

332 
	#SDMC_CMD_CMD_RSP_LG
 0x0001

	)

333 
	#SDMC_CMD_CMD_RSP_ST
 0x0002

	)

334 
	#SDMC_CMD_CMD_RSP_ST_BSY
 0x0003

	)

337 
	#SDMC_CMD_NO_RESP
 (0x0000)

	)

338 
	#SDMC_CMD_R1
 (
SDMC_CMD_CMD_RSP_ST
 | 
SDMC_CMD_CMD_IDX_EN
 | 
SDMC_CMD_CMD_CRC_EN
)

	)

339 
	#SDMC_CMD_R1b
 (
SDMC_CMD_CMD_RSP_ST_BSY
 | 
SDMC_CMD_CMD_IDX_EN
 | 
SDMC_CMD_CMD_CRC_EN
)

	)

340 
	#SDMC_CMD_R2
 (
SDMC_CMD_CMD_RSP_LG
 | 
SDMC_CMD_CMD_CRC_EN
)

	)

341 
	#SDMC_CMD_R3
 (
SDMC_CMD_CMD_RSP_ST
)

	)

342 
	#SDMC_CMD_R4
 (
SDMC_CMD_CMD_RSP_ST
)

	)

343 
	#SDMC_CMD_R5
 (
SDMC_CMD_CMD_RSP_ST
 | 
SDMC_CMD_CMD_IDX_EN
 | 
SDMC_CMD_CMD_CRC_EN
)

	)

344 
	#SDMC_CMD_R5b
 (
SDMC_CMD_CMD_RSP_ST_BSY
 | 
SDMC_CMD_CMD_IDX_EN
 | 
SDMC_CMD_CMD_CRC_EN
)

	)

345 
	#SDMC_CMD_R6
 (
SDMC_CMD_CMD_RSP_ST
 | 
SDMC_CMD_CMD_IDX_EN
 | 
SDMC_CMD_CMD_CRC_EN
)

	)

346 
	#SDMC_CMD_R7
 (
SDMC_CMD_CMD_RSP_ST
 | 
SDMC_CMD_CMD_IDX_EN
 | 
SDMC_CMD_CMD_CRC_EN
)

	)

349 
	#SDMC_CMD0
 0x0000 | (
SDMC_CMD_NO_RESP
Ë

	)

350 
	#SDMC_CMD2
 0x0200 | (
SDMC_CMD_R2
Ë

	)

351 
	#SDMC_CMD3
 0x0300 | (
SDMC_CMD_R6
Ë

	)

352 
	#SDMC_CMD7
 0x0700 | (
SDMC_CMD_R1b
Ë

	)

353 
	#SDMC_CMD8
 0x0800 | (
SDMC_CMD_R7
Ë

	)

354 
	#SDMC_CMD9
 0x0900 | (
SDMC_CMD_R2
Ë

	)

355 
	#SDMC_CMD10
 0x0A00 | (
SDMC_CMD_R2
Ë

	)

356 
	#SDMC_CMD12
 0x0C00 | (
SDMC_CMD_R1b
Ë

	)

357 
	#SDMC_ABT
 0x0C00 | (
SDMC_CMD_TYPE_ABT
Ë

	)

358 
	#SDMC_CMD13
 0x0D00 | (
SDMC_CMD_R1
Ë

	)

359 
	#SDMC_CMD16
 0x1000 | (
SDMC_CMD_R1
Ë

	)

360 
	#SDMC_CMD17
 0x1100 | (
SDMC_CMD_R1
 | 
SDMC_CMD_DAT_PRES
Ë

	)

361 
	#SDMC_CMD55
 0x3700 | (
SDMC_CMD_R1
Ë

	)

362 
	#SDMC_ACMD6
 0x0600 | (
SDMC_CMD_R1
Ë

	)

363 
	#SDMC_ACMD41
 0x2900 | (
SDMC_CMD_R3
Ë

	)

364 
	#SDMC_ACMD51
 0x3300 | (
SDMC_CMD_R1
 | 
SDMC_CMD_DAT_PRES
 )

	)

366 
	#SDMC_CMD_DELAY
 100000

	)

368 
	#SDMC_BLK_SIZE
 512

	)

370 
	#SDMC_RC_OK
 (0)

	)

371 
	#SDMC_RC_RECOVERABLE_ERR
 (-1)

	)

372 
	#SDMC_RC_NON_RECOVERABLE_ERROR
 (-2)

	)

374 
	#SDMC_CMD_NO_FLAGS
 0x00

	)

375 
	#SDMC_CMD_NO_ERR_RCVY
 0x01

	)

376 
	#SDMC_CMD_DAT_TRNS
 0x02

	)

378 
devˇŒ
 
sdmc_issue_cmd_sync
 (vﬁ©ûê
sdmc_c§eg
 *
c§±r
, 
uöt16
 
cmd_vÆue
, 
uöt32
 
¨g_vÆue
, uöt16* 
îr‹_°s
, 
uöt8
 
Êags
);

379 
devˇŒ
 
sdmc_issue_cmd_async
 (vﬁ©ûê
sdmc_c§eg
 *
c§±r
, 
uöt16
 
cmd_vÆue
, 
uöt32
 
¨g_vÆue
);

380 
devˇŒ
 
sdmc_föÆize_cmd_async
 (vﬁ©ûê
sdmc_c§eg
 *
c§±r
, 
uöt16
* 
îr‹_°s
);

	@include/semaphore.h

3 #i‚def 
NSEM


4 
	#NSEM
 120

	)

9 
	#S_FREE
 0

	)

10 
	#S_USED
 1

	)

13 
	s£¡ry
 {

14 
byã
 
	ms°©e
;

15 
öt32
 
	mscou¡
;

16 
qid16
 
	msqueue
;

20 
£¡ry
 
£mèb
[];

22 
	#isbad£m
(
s
Ë((
öt32
)(sË< 0 || (sË>
NSEM
)

	)

	@include/shell.h

5 
	#SHELL_BUFLEN
 
TY_IBUFLEN
+1

	)

6 
	#SHELL_MAXTOK
 32

	)

7 
	#SHELL_CMDSTK
 8192

	)

9 
	#SHELL_ARGLEN
 (
SHELL_BUFLEN
+
SHELL_MAXTOK
Ë

	)

10 
	#SHELL_CMDPRIO
 20

	)

16 
	#SHELL_BAN0
 "\033[31;1m"

	)

17 
	#SHELL_BAN1
 "------------------------------------------"

	)

18 
	#SHELL_BAN2
 " __ __ _____ _ _ _ _ "

	)

19 
	#SHELL_BAN3
 " \\ \\ / / |__ __| | \\ | | | | | | "

	)

20 
	#SHELL_BAN4
 " \\ \\/ / | | | \\| | | | | | "

	)

21 
	#SHELL_BAN5
 " / /\\ \\ _| |_ | \\ | | | | | "

	)

22 
	#SHELL_BAN6
 " / / \\ \\ | | | | \\ | \\ -- / "

	)

23 
	#SHELL_BAN7
 " -- -- ----- - - ---- "

	)

24 
	#SHELL_BAN8
 "------------------------------------------"

	)

25 
	#SHELL_BAN9
 "\033[0m\n"

	)

29 
	#SHELL_PROMPT
 "xsh $ "

	)

30 
	#SHELL_STRTMSG
 "WñcomêtÿXöu!\n"

	)

31 
	#SHELL_EXITMSG
 "Shñ»˛o£d\n"

	)

32 
	#SHELL_SYNERRMSG
 "Sy¡axÉº‹\n"

	)

33 
	#SHELL_CREATMSG
 "C™nŸ cª©ê¥o˚ss\n"

	)

34 
	#SHELL_INERRMSG
 "C™nŸ o≥¿fûê%†f‹ i≈ut\n"

	)

35 
	#SHELL_OUTERRMSG
 "C™nŸ o≥¿fûê%†f‹ ouçut\n"

	)

37 
	#SHELL_BGERRMSG
 "C™nŸÑedúe˘ I/O o∏backgroundá buûtö\n"

	)

41 
	#SH_NEWLINE
 '\n'

	)

42 
	#SH_EOF
 '\04'

	)

43 
	#SH_AMPER
 '&'

	)

44 
	#SH_BLANK
 ' '

	)

45 
	#SH_TAB
 '\t'

	)

46 
	#SH_SQUOTE
 '\''

	)

47 
	#SH_DQUOTE
 '"'

	)

48 
	#SH_LESS
 '<'

	)

49 
	#SH_GREATER
 '>'

	)

53 
	#SH_TOK_AMPER
 0

	)

54 
	#SH_TOK_LESS
 1

	)

55 
	#SH_TOK_GREATER
 2

	)

56 
	#SH_TOK_OTHER
 3

	)

62 
	#SHELL_OK
 0

	)

63 
	#SHELL_ERROR
 1

	)

64 
	#SHELL_EXIT
 -3

	)

68 
	scmdít
 {

69 *
	m˙ame
;

70 
boﬁ8
 
	mcbuûtö
;

71 
öt32
 (*
cfunc
)(
	möt32
,*[]);

74 
uöt32
 
ncmd
;

75 c⁄° 
cmdít
 
cmdèb
[];

	@include/shprototypes.h

2 
shñlcmd
 
xsh_¨gecho
 (
öt32
, *[]);

5 
shñlcmd
 
xsh_¨p
 (
öt32
, *[]);

8 
shñlcmd
 
xsh_bögid
 (
öt32
, *[]);

11 
shñlcmd
 
xsh_ˇt
 (
öt32
, *[]);

14 
shñlcmd
 
xsh_˛ór
 (
öt32
, *[]);

17 
shñlcmd
 
xsh_d©e
 (
öt32
, *[]);

20 
shñlcmd
 
xsh_devdump
 (
öt32
, *[]);

23 
shñlcmd
 
xsh_echo
 (
öt32
, *[]);

26 
shñlcmd
 
xsh_ëh°©
 (
öt32
, *[]);

29 
shñlcmd
 
xsh_exô
 (
öt32
, *[]);

32 
shñlcmd
 
xsh_hñp
 (
öt32
, *[]);

35 
shñlcmd
 
xsh_kûl
 (
öt32
, *[]);

38 
shñlcmd
 
xsh_Àd
 (
öt32
, *[]);

41 
shñlcmd
 
xsh_memdump
 (
öt32
, *[]);

44 
shñlcmd
 
xsh_mem°©
 (
öt32
, *[]);

47 
shñlcmd
 
xsh_√töfo
 (
öt32
, *[]);

50 
shñlcmd
 
xsh_nvøm
 (
öt32
, *[]);

53 
shñlcmd
 
xsh_pög
 (
öt32
, *[]);

56 
shñlcmd
 
xsh_ps
 (
öt32
, *[]);

59 
shñlcmd
 
xsh_¶ìp
 (
öt32
, *[]);

62 
shñlcmd
 
xsh_udpdump
 (
öt32
, *[]);

65 
shñlcmd
 
xsh_ud≥cho
 (
öt32
, *[]);

68 
shñlcmd
 
xsh_ud≥£rvî
 (
öt32
, *[]);

71 
shñlcmd
 
xsh_u±ime
 (
öt32
, *[]);

74 
shñlcmd
 
xsh_hñp
 (
öt32
, *[]);

	@include/stdarg.h

10 
__buûtö_va_li°
 
	tva_li°
;

12 
	#va_c›y
(
d°
, 
§c
Ë
	`__buûtö_va_c›y
(d°, src)

	)

13 
	#va_°¨t
(
œ°
, 
va
Ë
	`__buûtö_va_°¨t
÷a°, va)

	)

14 
	#va_¨g
(
va
, 
ty≥
Ë
	`__buûtö_va_¨g
(va,Åy≥)

	)

15 
	#va_íd
(
va
Ë
	`__buûtö_va_íd
(va)

	)

	@include/stddef.h

6 
	texch™dÀr
;

7 
	tmesßge
;

	@include/stdio.h

6 
öt32
 
_dosˇn
(*,öt32 *, 
	$öt32
 (*)(),

7 
	$öt32
 (*)(), 
öt32
, int32);

8 
öt32
 
	`ssˇnf
(*, *, int32);

9 
öt32
 
	`fsˇnf
(int32, *, int32);

10 
	#sˇnf
(
fmt
, 
¨gs
Ë
	`fsˇnf
(
CONSOLE
, fmt,árgs)

	)

15 
	#°dö
 ((
¥o˘ab
[
cuºpid
]).
¥desc
[0])

	)

16 
	#°dout
 ((
¥o˘ab
[
cuºpid
]).
¥desc
[1])

	)

17 
	#°dîr
 ((
¥o˘ab
[
cuºpid
]).
¥desc
[2])

	)

22 
öt32
 
	`Ârötf
(, *, ...);

23 
öt32
 
	`¥ötf
(const *, ...);

24 
öt32
 
	`•rötf
(*, *, ...);

29 
öt32
 
	`fgëc
();

30 *
	`fgës
(*, 
öt32
, int32);

31 
öt32
 
	`Âutc
(int32, int32);

32 
öt32
 
	`Âuts
(*, int32);

33 
öt32
 
	`putch¨
(öt32 
c
);

34 
öt32
 
	`gëch¨
();

	@include/stdlib.h

8 
	#RAND_MAX
 2147483646

	)

10 
abs
();

11 
œbs
();

12 
©oi
(*);

13 
©ﬁ
(*);

14 
bzîo
(*, );

15 
qs‹t
(*, , , (*)());

16 
	`ønd
();

17 
	`§™d
();

18 *
	`mÆloc
(
nbyãs
);

19 
	`‰ì
(*
pmem
);

	@include/string.h

3 *
°∫˝y
(*, c⁄° *, 
öt32
);

4 *
°∫ˇt
(*, c⁄° *, 
öt32
);

5 
öt32
 
°∫cmp
(const *, const *, int32);

6 *
°rchr
(c⁄° *, 
öt32
);

7 *
°ºchr
(c⁄° *, 
öt32
);

8 *
°r°r
(const *, const *);

9 
öt32
 
°∫Àn
(c⁄° *, 
uöt32
);

10 
°æí
(*
°r
);

	@include/syscall_interface.h

1 
sysˇŒ_öãrÁ˚
(,...);

	@include/syscall_interface_tab.h

3 
	ssysˇŒ_öãrÁ˚_ít
 {

4 *
	m˙ame
;

5 
sysˇŒ
 (*
funˇddr
)();

8 c⁄° 
sysˇŒ_öãrÁ˚_ít
 
sysˇŒ_öãrÁ˚_èb
[];

	@include/testsuite.h

3 
¥o˚ss
 
ã°_add¨gs
(
boﬁ8
);

4 
¥o˚ss
 
ã°_big¨gs
(
boﬁ8
);

5 
¥o˚ss
 
ã°_scheduÀ
(
boﬁ8
 
vîbo£
);

6 
¥o˚ss
 
ã°_¥ìm±
(
boﬁ8
 
vîbo£
);

7 
¥o˚ss
 
ã°_ªcursi⁄
(
boﬁ8
 
vîbo£
);

8 
¥o˚ss
 
ã°_£m≠h‹e
(
boﬁ8
 
vîbo£
);

9 
¥o˚ss
 
ã°_£m≠h‹e2
(
boﬁ8
 
vîbo£
);

10 
¥o˚ss
 
ã°_£m≠h‹e3
(
boﬁ8
 
vîbo£
);

11 
¥o˚ss
 
ã°_£m≠h‹e4
(
boﬁ8
 
vîbo£
);

12 
¥o˚ss
 
ã°_£m≠h‹e5
(
boﬁ8
 
vîbo£
);

13 
¥o˚ss
 
ã°_libStdio
(
boﬁ8
 
vîbo£
);

15 
ã°Pass
(
boﬁ8
, const *);

16 
ã°Faû
(
boﬁ8
, const *);

17 
ã°Skù
(
boﬁ8
, const *);

18 
ã°Pröt
(
boﬁ8
, const *);

24 
	#Áûif
(
c⁄d
, 
Áûmsg
) \

25 i‡–
c⁄d
 ) { 
	`ã°Faû
(
vîbo£
, 
Áûmsg
); 
∑s£d
 = 
FALSE
; } \

26 { 
	`ã°Pass
(
vîbo£
, ""); }

	)

30 
	sã°ˇ£
 {

31 *
	m«me
;

32 
¥o˚ss
 (*
ã°
Ë(
	mboﬁ8
);

35 
¡e°s
;

36 
ã°ˇ£
 
ã°èb
[];

38 
	#TESTSTK
 8192

	)

	@include/tftp.h

4 
	#TFTP_RRQ
 1

	)

5 
	#TFTP_WRQ
 2

	)

6 
	#TFTP_DATA
 3

	)

7 
	#TFTP_ACK
 4

	)

8 
	#TFTP_ERROR
 5

	)

11 
	#TFTP_ERROR_NOT_DEFINED
 0

	)

12 
	#TFTP_ERROR_FILE_NOT_FOUND
 1

	)

13 
	#TFTP_ERROR_ACCESS_VIOLATION
 2

	)

14 
	#TFTP_ERROR_DISK_FULL
 3

	)

15 
	#TFTP_ERROR_ILLEGAL_OP
 4

	)

16 
	#TFTP_ERROR_UNKNOWN_TRANSFER_ID
 5

	)

17 
	#TFTP_ERROR_FILE_EXISTS
 6

	)

18 
	#TFTP_ERROR_NO_SUCH_USER
 7

	)

20 
	#TFTP_PORT
 69

	)

21 
	#TFTP_MAXNAM
 64

	)

22 
	#TFTP_MAXDATA
 512

	)

23 
	#TFTP_MAXRETRIES
 3

	)

24 
	#TFTP_WAIT
 5000

	)

26 
	#TFTP_FUNC_MAGIC
 0xFFFFFF00

	)

32 #¥agm®
∑ck
(1)

33 
	st·p_msg
 {

34 
uöt16
 
	mtf_›code
;

40 
	mtf_fûemode
[
TFTP_MAXNAM
+10];

46 
uöt16
 
	mtf_dblk
;

47 
	mtf_d©a
[
TFTP_MAXDATA
];

53 
uöt16
 
	mtf_ablk
;

59 
uöt16
 
	mtf_îcode
;

60 
	mtf_îmsg
[
TFTP_MAXDATA
];

64 #¥agm®
∑ck
()

66 
°©us
 
t·pgë
(
uöt32
, const *, *, uint32);

	@include/tty.h

3 
	#TY_OBMINSP
 20

	)

5 
	#TY_EBUFLEN
 20

	)

9 #i‚def 
Nây


10 
	#Nây
 1

	)

12 #i‚def 
TY_IBUFLEN


13 
	#TY_IBUFLEN
 128

	)

15 #i‚def 
TY_OBUFLEN


16 
	#TY_OBUFLEN
 64

	)

21 
	#TY_IMRAW
 'R'

	)

22 
	#TY_IMCOOKED
 'C'

	)

23 
	#TY_IMCBREAK
 'K'

	)

24 
	#TY_OMRAW
 'R'

	)

26 
	sâycblk
 {

27 *
	mtyihód
;

28 *
	mtyôaû
;

29 
	mtyibuff
[
TY_IBUFLEN
];

30 
sid32
 
	mtyi£m
;

31 *
	mtyohód
;

32 *
	mtyŸaû
;

33 
	mtyobuff
[
TY_OBUFLEN
];

34 
sid32
 
	mtyo£m
;

35 *
	mtyehód
;

36 *
	mtyëaû
;

37 
	mtyebuff
[
TY_EBUFLEN
];

38 
	mtyimode
;

39 
boﬁ8
 
	mtyõcho
;

40 
boﬁ8
 
	mtyõback
;

41 
boﬁ8
 
	mtyevis
;

42 
boﬁ8
 
	mtye¸lf
;

43 
boﬁ8
 
	mtyi¸lf
;

44 
boﬁ8
 
	mtyõø£
;

45 
	mtyõø£c
;

46 
	mtyõø£c2
;

47 
boﬁ8
 
	mtyeof
;

48 
	mtyeofch
;

49 
boﬁ8
 
	mtyikûl
;

50 
	mtyikûlc
;

51 
öt32
 
	mtyicurs‹
;

52 
boﬁ8
 
	mtyoÊow
;

53 
boﬁ8
 
	mtyohñd
;

54 
	mtyo°›
;

55 
	mtyo°¨t
;

56 
boﬁ8
 
	mtyo¸lf
;

57 
	mtyifuŒc
;

59 
âycblk
 
âyèb
[];

63 
	#TY_BACKSP
 '\b'

	)

64 
	#TY_BACKSP2
 '\177'

	)

65 
	#TY_BELL
 '\07'

	)

66 
	#TY_EOFCH
 '\04'

	)

67 
	#TY_BLANK
 ' '

	)

68 
	#TY_NEWLINE
 '\n'

	)

69 
	#TY_RETURN
 '\r'

	)

70 
	#TY_STOPCH
 '\023'

	)

71 
	#TY_STRTCH
 '\021'

	)

72 
	#TY_KILLCH
 '\025'

	)

73 
	#TY_UPARROW
 '^'

	)

74 
	#TY_FULLCH
 
TY_BELL


	)

78 
	#TC_NEXTC
 3

	)

79 
	#TC_MODER
 4

	)

80 
	#TC_MODEC
 5

	)

81 
	#TC_MODEK
 6

	)

82 
	#TC_ICHARS
 8

	)

83 
	#TC_ECHO
 9

	)

84 
	#TC_NOECHO
 10

	)

	@include/uart.h

3 
	#UART_BAUD
 115200

	)

4 
	#UART_OUT_IDLE
 0x0016

	)

5 
	#UART_FIFO_SIZE
 16

	)

7 
	#INTEL_QUARK_UART_PCI_DID
 0x0936

	)

8 
	#INTEL_QUARK_UART_PCI_VID
 0x8086

	)

14 
	su¨t_c§eg


16 vﬁ©ûê
uöt32
 
	mbuf„r
;

18 vﬁ©ûê
uöt32
 
	mõr
;

19 vﬁ©ûê
uöt32
 
	miú
;

21 vﬁ©ûê
uöt32
 
	ml¸
;

22 vﬁ©ûê
uöt32
 
	mm¸
;

23 vﬁ©ûê
uöt32
 
	ml§
;

24 vﬁ©ûê
uöt32
 
	mm§
;

25 vﬁ©ûê
uöt32
 
	ms¸
;

30 
	#rbr
 
buf„r


	)

31 
	#thr
 
buf„r


	)

32 
	#f¸
 
iú


	)

33 
	#dŒ
 
buf„r


	)

34 
	#dlm
 
õr


	)

40 
	#UART_DLL
 0x00

	)

42 
	#UART_DLM
 0x01

	)

47 
	#UART_LCR_DLAB
 0x80

	)

48 
	#UART_LCR_8N1
 0x03

	)

52 
	#UART_IER_ERBFI
 0x01

	)

53 
	#UART_IER_ETBEI
 0x02

	)

54 
	#UART_IER_ELSI
 0x04

	)

55 
	#UART_IER_EMSI
 0x08

	)

59 
	#UART_IIR_IRQ
 0x01

	)

60 
	#UART_IIR_IDMASK
 0x0E

	)

61 
	#UART_IIR_MSC
 0x00

	)

62 
	#UART_IIR_THRE
 0x02

	)

63 
	#UART_IIR_RDA
 0x04

	)

64 
	#UART_IIR_RLSI
 0x06

	)

65 
	#UART_IIR_RTO
 0x0C

	)

69 
	#UART_FCR_EFIFO
 0x01

	)

70 
	#UART_FCR_RRESET
 0x02

	)

71 
	#UART_FCR_TRESET
 0x04

	)

72 
	#UART_FCR_TRIG0
 0x00

	)

73 
	#UART_FCR_TRIG1
 0x40

	)

74 
	#UART_FCR_TRIG2
 0x80

	)

75 
	#UART_FCR_TRIG3
 0xC0

	)

79 
	#UART_MCR_OUT2
 0x08

	)

80 
	#UART_MCR_RTS
 0x02

	)

81 
	#UART_MCR_DTR
 0x01

	)

82 
	#UART_MCR_LOOP
 0x10

	)

86 
	#UART_LSR_DR
 0x01

	)

87 
	#UART_LSR_BI
 0x10

	)

88 
	#UART_LSR_THRE
 0x20

	)

89 
	#UART_LSR_TEMT
 0x40

	)

	@include/udp.h

3 
	#UDP_SLOTS
 6

	)

4 
	#UDP_QSIZ
 8

	)

6 
	#UDP_DHCP_CPORT
 68

	)

7 
	#UDP_DHCP_SPORT
 67

	)

11 
	#UDP_FREE
 0

	)

12 
	#UDP_USED
 1

	)

13 
	#UDP_RECV
 2

	)

15 
	#UDP_ANYIF
 -2

	)

18 
	#UDP_HDR_LEN
 8

	)

20 
	sud≥¡ry
 {

21 
öt32
 
	mud°©e
;

22 
uöt32
 
	mudªmù
;

24 
uöt16
 
	mudªmp‹t
;

25 
uöt16
 
	mudlo˝‹t
;

26 
öt32
 
	mudhód
;

27 
öt32
 
	mudèû
;

28 
öt32
 
	mudcou¡
;

29 
pid32
 
	mudpid
;

30 
√çackë
 *
	mudqueue
[
UDP_QSIZ
];

33 
ud≥¡ry
 
ud±ab
[];

	@include/xinu.h

3 
	~<kî√l.h
>

4 
	~<c⁄f.h
>

5 
	~<¥o˚ss.h
>

6 
	~<queue.h
>

7 
	~<ªsched.h
>

8 
	~<m¨k.h
>

9 
	~<£m≠h‹e.h
>

10 
	~<mem‹y.h
>

11 
	~<buÂoﬁ.h
>

12 
	~<h≥t.h
>

13 
	~<˛ock.h
>

14 
	~<p‹ts.h
>

15 
	~<u¨t.h
>

16 
	~<ây.h
>

17 
	~<devi˚.h
>

18 
	~<öãºu±.h
>

19 
	~<≠ic.h
>

20 
	~<fûe.h
>

21 
	~<rfûesys.h
>

22 
	~<rdisksys.h
>

23 
	~<lfûesys.h
>

24 
	~<ëhî.h
>

25 
	~<√t.h
>

26 
	~<ù.h
>

27 
	~<¨p.h
>

28 
	~<udp.h
>

29 
	~<dh˝.h
>

30 
	~<icmp.h
>

31 
	~<t·p.h
>

32 
	~<«me.h
>

33 
	~<shñl.h
>

34 
	~<d©e.h
>

37 
	~<lﬂd.h
>

38 
	~<ñf.h
>

40 
	~<¥ŸŸy≥s.h
>

41 
	~<sysˇŒ_öãrÁ˚.h
>

42 
	~<dñay.h
>

43 
	~<pci.h
>

44 
	~<qu¨k_ëh.h
>

45 
	~<qu¨k_pd©.h
>

46 
	~<qu¨k_úq.h
>

47 
	~<mu…iboŸ.h
>

48 
	~<°dio.h
>

49 
	~<°rög.h
>

52 
	~<sysˇŒ_öãrÁ˚.h
>

53 
	~<sysˇŒ_öãrÁ˚_èb.h
>

54 
	~<ld.h
>

56 
	~<fûesys.h
>

59 
	#XTEST
 1

	)

60 
	#XDEBUG
 0

	)

62 #i‡
XTEST


63 
	#XTEST_KPRINTF
(...Ë
	`k¥ötf
(
__VA_ARGS__
)

	)

65 
	#XTEST_KPRINTF
(...)

	)

67 #i‡
XDEBUG


68 
	#XDEBUG_KPRINTF
(...Ë
	`k¥ötf
(
__VA_ARGS__
)

	)

70 
	#XDEBUG_KPRINTF
(...)

	)

74 
≠phñlo_dyn_lﬂdög_c⁄ã¡s
[];

75 
≠phñlo_dyn_lﬂdög_c⁄ã¡s_size
;

76 
≠phñlo_c⁄ã¡s
[];

77 
≠phñlo_c⁄ã¡s_size
;

78 
libmy_c⁄ã¡s
[];

79 
libmy_c⁄ã¡s_size
;

	@lib/abs.c

7 
	$abs
(

8 
¨g


11 i‡(
¨g
 < 0)

12 
¨g
 = -arg;

13  (
¨g
);

14 
	}
}

	@lib/atoi.c

7 
	$©oi
(

8 *
p


11 
n
 = 0, 
f
 = 0;

13 ;; 
p
++)

15 *
p
)

21 
f
++;

23 
p
++;

28 *
p
 >= '0' && *p <= '9')

30 
n
 =Ç * 10 + *
p
++ - '0';

33  (
f
 ? -
n
 :Ç);

34 
	}
}

	@lib/atol.c

7 
	$©ﬁ
(

8 *
p


11 
n
;

12 
f
;

14 
n
 = 0;

15 
f
 = 0;

16 ;; 
p
++)

18 *
p
)

24 
f
++;

26 
p
++;

30 *
p
 >= '0' && *p <= '9')

32 
n
 =Ç * 10 + *
p
++ - '0';

34  (
f
 ? -
n
 :Ç);

35 
	}
}

	@lib/bzero.c

7 
	$bzîo
(

8 *
p
,

9 
Àn


12 
n
;

13 *
pch
 = (*)
p
;

15 i‡((
n
 = 
Àn
) <= 0)

21 *
pch
++ = 0;

23 --
n
);

24 
	}
}

	@lib/ctype_.c

3 
	~<˘y≥.h
>

9 c⁄° 
	g_˘y≥_
[] = {

11 
_C
, _C, _C, _C, _C, _C, _C, _C,

12 
_C
, 
_S
, _S, _S, _S, _S, _C, _C,

13 
_C
, _C, _C, _C, _C, _C, _C, _C,

14 
_C
, _C, _C, _C, _C, _C, _C, _C,

15 
_S
, 
_P
, _P, _P, _P, _P, _P, _P,

16 
_P
, _P, _P, _P, _P, _P, _P, _P,

17 
_N
, _N, _N, _N, _N, _N, _N, _N,

18 
_N
, _N, 
_P
, _P, _P, _P, _P, _P,

19 
_P
, 
_U
 | 
_X
, _U | _X, _U | _X, _U | _X, _U | _X, _U | _X,

20 
_U
,

21 
_U
, _U, _U, _U, _U, _U, _U, _U,

22 
_U
, _U, _U, _U, _U, _U, _U, _U,

23 
_U
, _U, _U, 
_P
, _P, _P, _P, _P,

24 
_P
, 
_L
 | 
_X
, _L | _X, _L | _X, _L | _X, _L | _X, _L | _X,

25 
_L
,

26 
_L
, _L, _L, _L, _L, _L, _L, _L,

27 
_L
, _L, _L, _L, _L, _L, _L, _L,

28 
_L
, _L, _L, 
_P
, _P, _P, _P, 
_C


	@lib/doprnt.c

3 
	~<°d¨g.h
>

5 
	#MAXSTR
 80

	)

6 
	#NULL
 0

	)

7 
	#PRECISION
 6

	)

9 
_¥é10
(
num
, *
°r
);

10 
_¥é8
(
num
, *
°r
);

11 
_¥tX16
(
num
, *
°r
);

12 
_¥é16
(
num
, *
°r
);

13 
_¥é2
(
num
, *
°r
);

14 
_¥tdbl
(
num
, 
¥ecisi⁄
, *
°r
);

22 
	$_d›∫t
(

23 *
fmt
,

24 
va_li°
 
≠
,

25 (*
func
)()

28 
c
;

29 
i
;

30 
f
;

31 *
°r
;

32 
°rög
[20];

35 
Àngth
;

36 
fûl
;

37 
À·ju°
;

38 
fmax
, 
fmö
;

39 
Àadög
;

40 
sign
;

41 
digô1
;

42 
œrg
;

43 
d¨g
;

48 (
c
 = *
fmt
++) != '%')

50 i‡(
c
 == '\0')

54 (*
func
Ë(
c
);

57 i‡(*
fmt
 == '%')

59 (*
func
Ë(*
fmt
++);

63 i‡((
À·ju°
 = ((*
fmt
 == '-')) ? 1 : 0))

65 
fmt
++;

68 
fûl
 = (*
fmt
 == '0') ? *fmt++ : ' ';

71 
fmö
 = 0;

72 i‡(*
fmt
 == '*')

74 
fmö
 = 
	`va_¨g
(
≠
, );

76 ++
fmt
;

80 '0' <*
fmt
 && *fmt <= '9')

82 
fmö
 = fmö * 10 + *
fmt
++ - '0';

86 
fmax
 = 0;

87 i‡(*
fmt
 == '.')

89 i‡(*(++
fmt
) == '*')

91 
fmax
 = 
	`va_¨g
(
≠
, );

92 ++
fmt
;

96 '0' <*
fmt
 && *fmt <= '9')

98 
fmax
 = fmax * 10 + *
fmt
++ - '0';

103 
°r
 = 
°rög
;

104 i‡((
f
 = *
fmt
++) == '\0')

106 (*
func
) ('%');

109 
sign
 = '\0';

111 
f
)

114 
°rög
[0] = 
	`va_¨g
(
≠
, );

115 
°rög
[1] = '\0';

116 
fmax
 = 0;

117 
fûl
 = ' ';

121 
°r
 = 
	`va_¨g
(
≠
, *);

123 i‡(
NULL
 =
°r
)

125 
°r
 = "(null)";

127 
fûl
 = ' ';

131 
œrg
 = 
	`va_¨g
(
≠
, );

133 i‡(
œrg
 < 0)

135 
sign
 = '-';

137 
	`_¥é10
(
œrg
, 
°r
);

141 
d¨g
 = 
	`va_¨g
(
≠
, );

143 i‡(
d¨g
 < 0)

145 
sign
 = '-';

147 
	`_¥tdbl
(
d¨g
, 
PRECISION
, 
°r
);

151 
digô1
 = '\0';

156 
œrg
 = 
	`va_¨g
(
≠
, );

158 
œrg
 < 0)

160 
œrg
 -= 1000000000L;

161 ++
digô1
;

163 
	`_¥é10
(
œrg
, 
°r
);

164 
°r
[0] +
digô1
;

165 
fmax
 = 0;

169 
œrg
 = 
	`va_¨g
(
≠
, );

171 
	`_¥é8
(
œrg
, 
°r
);

172 
fmax
 = 0;

176 
œrg
 = 
	`va_¨g
(
≠
, );

178 
	`_¥tX16
(
œrg
, 
°r
);

179 
fmax
 = 0;

183 
œrg
 = 
	`va_¨g
(
≠
, );

185 
	`_¥é16
(
œrg
, 
°r
);

186 
fmax
 = 0;

190 
œrg
 = 
	`va_¨g
(
≠
, );

192 
	`_¥tX16
(
œrg
, 
°r
);

194 
œrg
 = 
	`va_¨g
(
≠
, );

196 
	`_¥tX16
(
œrg
, 
°r
 + 8);

198 
fmax
 = 0;

202 
œrg
 = 
	`va_¨g
(
≠
, );

204 
	`_¥é16
(
œrg
, 
°r
);

206 
œrg
 = 
	`va_¨g
(
≠
, );

208 
	`_¥é16
(
œrg
, 
°r
 + 8);

210 
fmax
 = 0;

214 
œrg
 = 
	`va_¨g
(
≠
, );

216 
	`_¥é2
(
œrg
, 
°r
);

217 
fmax
 = 0;

221 (*
func
Ë(
f
);

224 
Àngth
 = 0; 
°r
[length] != '\0';Üength++)

227 i‡(
fmö
 > 
MAXSTR
 || fmin < 0)

229 
fmö
 = 0;

231 i‡(
fmax
 > 
MAXSTR
 || fmax < 0)

233 
fmax
 = 0;

235 
Àadög
 = 0;

236 i‡(
fmax
 !0 || 
fmö
 != 0)

238 i‡(
fmax
 != 0)

240 i‡(
Àngth
 > 
fmax
)

242 
Àngth
 = 
fmax
;

245 i‡(
fmö
 != 0)

247 
Àadög
 = 
fmö
 - 
Àngth
;

249 i‡(
sign
 == '-')

251 --
Àadög
;

254 i‡(
sign
 ='-' && 
fûl
 == '0')

256 (*
func
Ë(
sign
);

258 i‡(
À·ju°
 == 0)

260 
i
 = 0; i < 
Àadög
; i++)

262 (*
func
Ë(
fûl
);

265 i‡(
sign
 ='-' && 
fûl
 == ' ')

267 (*
func
Ë(
sign
);

269 
i
 = 0; i < 
Àngth
; i++)

271 (*
func
Ë(
°r
[
i
]);

273 i‡(
À·ju°
 != 0)

275 
i
 = 0; i < 
Àadög
; i++)

276 (*
func
Ë(
fûl
);

280 
	}
}

286 
	$_¥é10
(

287 
num
,

288 *
°r


291 
i
;

292 
ãmp
[11];

294 
ãmp
[0] = '\0';

295 
ãmp
[1] = ((
num
<0) ? -(num%10) : (num%10)) + '0';

296 
num
 /= (num<0) ? -10 : 10;

297 
i
 = 2; i <= 10; i++) {

298 
ãmp
[
i
] = 
num
 % 10 + '0';

299 
num
 /= 10;

301 
i
 = 10; 
ãmp
[i] == '0'; i--);

302 i‡(
i
 == 0)

303 
i
++;

304 
i
 >= 0)

305 *
°r
++ = 
ãmp
[
i
--];

306 
	}
}

312 
	$_¥é8
(

313 
num
,

314 *
°r


317 
i
;

318 
ãmp
[12];

320 
ãmp
[0] = '\0';

321 
i
 = 1; i <= 11; i++)

323 
ãmp
[
i
] = (
num
 & 07) + '0';

324 
num
 =Çum >> 3;

326 
ãmp
[11] &= '3';

327 
i
 = 11; 
ãmp
[i] == '0'; i--);

328 i‡(
i
 == 0)

329 
i
++;

330 
i
 >= 0)

331 *
°r
++ = 
ãmp
[
i
--];

332 
	}
}

338 
	$_¥é16
(

339 
num
,

340 *
°r


343 
i
;

344 
ãmp
[9];

346 
ãmp
[0] = '\0';

347 
i
 = 1; i <= 8; i++)

349 
ãmp
[
i
] = "0123456789abcdef"[
num
 & 0x0F];

350 
num
 =Çum >> 4;

352 
i
 = 8; 
ãmp
[i] == '0'; i--);

353 i‡(
i
 == 0)

354 
i
++;

355 
i
 >= 0)

356 *
°r
++ = 
ãmp
[
i
--];

357 
	}
}

363 
	$_¥tX16
(

364 
num
,

365 *
°r


368 
i
;

369 
ãmp
[9];

371 
ãmp
[0] = '\0';

372 
i
 = 1; i <= 8; i++)

374 
ãmp
[
i
] = "0123456789ABCDEF"[
num
 & 0x0F];

375 
num
 =Çum >> 4;

377 
i
 = 8; 
ãmp
[i] == '0'; i--);

378 i‡(
i
 == 0)

379 
i
++;

380 
i
 >= 0)

381 *
°r
++ = 
ãmp
[
i
--];

382 
	}
}

388 
	$_¥é2
(

389 
num
,

390 *
°r


393 
i
;

394 
ãmp
[35];

396 
ãmp
[0] = '\0';

397 
i
 = 1; i <= 32; i++)

399 
ãmp
[
i
] = ((
num
 % 2) == 0) ? '0' : '1';

400 
num
 =Çum >> 1;

402 
i
 = 32; 
ãmp
[i] == '0'; i--);

403 i‡(
i
 == 0)

404 
i
++;

405 
i
 >= 0)

406 *
°r
++ = 
ãmp
[
i
--];

407 
	}
}

413 
	$_¥tdbl
(

414 
num
,

415 
¥ecisi⁄
,

416 *
°r


419 
i
,
mp
;

420 
w
,
p
;

422 
i
 = 0, 
mp
 = 1; i < 
¥ecisi⁄
; i++, mp *= 10);

424 
num
 = ((num<0) ? -(num) : (num));

425 
w
 = ()(
num
);

426 
p
 = ()(
num
 * 
mp
Ë- ()(
w
 * mp);

428 
	`_¥é10
(
w
, 
°r
);

429 *
°r
 != '\0') { str++; }

430 *
°r
++ = '.';

431 
	`_¥é10
(
p
, 
°r
);

432 
	}
}

	@lib/doscan.c

5 
	~<˘y≥.h
>

7 
	#EOF
 (-2)

	)

8 
	#NULL
 0

	)

10 
	#SPC
 01

	)

11 
	#STP
 02

	)

13 
	#SHORT
 0

	)

14 
	#REGULAR
 1

	)

15 
	#LONG
 2

	)

17 
_önum
(**, , , , (*
gëc
) (, ),

18 (*
ungëc
) (, ), , , *);

19 
	`_ö°r
(*, , , (*
gëc
) (, ),

20 (*
ungëc
) (, ), , , *);

21 *
	`_gëc˛
(*);

23 
_s˘ab
[128] = {

25 0, 
SPC
, SPC, 0, 0, 0, 0, 0,

28 
SPC
, 0, 0, 0, 0, 0, 0, 0,

32 
	}
};

38 
	$_dosˇn
(

39 *
fmt
,

40 **
¨gp
,

41 (*
gëch
)(, ),

42 (*
ungëch
)(, ),

43 
¨g1
,

44 
¨g2


47 
ch
;

48 
nm©ch
, 
Àn
, 
ch1
;

49 **
±r
, 
fûìnded
, 
size
;

51 
nm©ch
 = 0;

52 
fûìnded
 = 0;

55 
ch
 = *
fmt
++)

58  (
nm©ch
);

60 i‡((
ch
 = *
fmt
++) == '%')

62 
def
;

64 
±r
 = 0;

65 i‡(
ch
 != '*')

67 
±r
 = 
¨gp
++;

71 
ch
 = *
fmt
++;

73 
Àn
 = 0;

74 
size
 = 
REGULAR
;

75 
	`isdigô
(
ch
))

77 
Àn
 =Üí * 10 + 
ch
 - '0';

78 
ch
 = *
fmt
++;

80 i‡(
Àn
 == 0)

82 
Àn
 = 30000;

84 i‡(
ch
 == 'l')

86 
ch
 = *
fmt
++;

87 
size
 = 
LONG
;

89 i‡(
ch
 == 'h')

91 
size
 = 
SHORT
;

92 
ch
 = *
fmt
++;

94 i‡(
ch
 == '[')

96 
fmt
 = 
	`_gëc˛
(fmt);

98 i‡(
	`isuµî
(
ch
))

100 
ch
 = 
	`tﬁowî
(ch);

101 
size
 = 
LONG
;

103 i‡(
ch
 == '\0')

107 i‡(
_önum


108 (
±r
, 
ch
, 
Àn
, 
size
,

109 
gëch
, 
ungëch
, 
¨g1
, 
¨g2
, &
fûìnded
Ë&& 
±r
)

111 
nm©ch
++;

113 i‡(
fûìnded
)

115  (
nm©ch
 ?Çmatch : -1);

122 (
ch1
 =

123 (*
gëch
Ë(
¨g1
,

124 
¨g2
)Ë=' ' || 
ch1
 == '\t' || ch1 == '\n')

127 i‡(
ch1
 !
EOF
)

129 (*
ungëch
Ë(
¨g1
, 
¨g2
);

134 
def
:

135 
ch1
 = (*
gëch
Ë(
¨g1
, 
¨g2
);

136 i‡(
ch1
 !
ch
)

138 i‡(
ch1
 =
EOF
)

142 (*
ungëch
Ë(
¨g1
, 
¨g2
);

143  
nm©ch
;

147 
	}
}

153 
	$_önum
(

154 **
±r
,

155 
ty≥
,

156 
Àn
,

157 
size
,

158 (*
gëch
)(, ),

159 (*
ungëch
)(, ),

160 
¨g1
,

161 
¨g2
,

162 *
eoÂå


165 
	`©of
(*
p
);

166 *
≈
;

167 
numbuf
[64];

168 
c
, 
ba£
;

169 
√gÊg
, 
c1
, 
ndigô
;

170 
lcvÆ
;

172 i‡(
ty≥
 == 'c' ||Åype == 's' ||Åype == '[')

174  (
_ö°r


175 (
±r
 ? *(**Ìå : (*)
NULL
, 
ty≥
, 
Àn
, 
gëch
,

176 
ungëch
, 
¨g1
, 
¨g2
, 
eoÂå
));

178 
lcvÆ
 = 0;

179 
ndigô
 = 0;

180 
ba£
 = 10;

181 i‡(
ty≥
 == 'o')

183 
ba£
 = 8;

185 i‡(
ty≥
 == 'x')

187 
ba£
 = 16;

189 
≈
 = 
numbuf
;

190 
√gÊg
 = 0;

191 (
c
 = (*
gëch
Ë(
¨g1
, 
¨g2
)) == ' ' || c == '\t' || c == '\n')

194 i‡(
c
 == '-')

196 
√gÊg
++;

197 *
≈
++ = 
c
;

198 
c
 = (*
gëch
Ë(
¨g1
, 
¨g2
);

199 
Àn
--;

201 i‡(
c
 == '+')

203 
Àn
--;

204 
c
 = (*
gëch
Ë(
¨g1
, 
¨g2
);

207 ; --
Àn
 >0; *
≈
++ = 
c
, c = (*
gëch
Ë(
¨g1
, 
¨g2
))

209 i‡(((
	`isdigô
(
c
)Ë|| 
ba£
 == 16)

210 && (('a' <
c
 && c <= 'f') || ('A' <= c && c <= 'F')))

212 
ndigô
++;

213 i‡(
ba£
 == 8)

215 
lcvÆ
 <<= 3;

217 i‡(
ba£
 == 10)

219 
lcvÆ
 = ((lcval << 2) +Ücval) << 1;

223 
lcvÆ
 <<= 4;

225 
c1
 = 
c
;

226 i‡('0' <
c
 && c <= '9')

228 
c
 -= '0';

230 i‡('a' <
c
 && c <= 'f')

232 
c
 -= 'a' - 10;

236 
c
 -= 'A' - 10;

238 
lcvÆ
 +
c
;

239 
c
 = 
c1
;

247 i‡(
√gÊg
)

249 
lcvÆ
 = -lcval;

251 i‡(
c
 !
EOF
)

253 (*
ungëch
Ë(
¨g1
, 
¨g2
);

254 *
eoÂå
 = 0;

258 *
eoÂå
 = 1;

260 i‡(
±r
 =
NULL
 || 
≈
 =
numbuf
)

264 *
≈
++ = 0;

265 
size
)

267 
SHORT
:

268 **(**)
±r
 = 
lcvÆ
;

271 
REGULAR
:

272 **(**)
±r
 = 
lcvÆ
;

275 
LONG
:

276 **(**)
±r
 = 
lcvÆ
;

280 
	}
}

286 
	$_ö°r
(

287 *
±r
,

288 
ty≥
,

289 
Àn
,

290 (*
gëch
)(, ),

291 (*
ungëch
)(, ),

292 
¨g1
,

293 
¨g2
,

294 *
eoÂå


297 
ch
;

298 *
›å
;

299 
ign°p
;

301 *
eoÂå
 = 0;

302 
›å
 = 
±r
;

303 i‡(
ty≥
 ='c' && 
Àn
 == 30000)

305 
Àn
 = 1;

307 
ign°p
 = 0;

308 i‡(
ty≥
 == 's')

310 
ign°p
 = 
SPC
;

312 
_s˘ab
[
ch
 = (*
gëch
Ë(
¨g1
, 
¨g2
)] & 
ign°p
)

314 i‡(
ch
 =
EOF
)

319 
ign°p
 = 
SPC
;

320 i‡(
ty≥
 == 'c')

322 
ign°p
 = 0;

324 i‡(
ty≥
 == '[')

326 
ign°p
 = 
STP
;

328 
ch
 !
EOF
 && (
_s˘ab
[ch] & 
ign°p
) == 0)

330 i‡(
±r
)

332 *
±r
++ = 
ch
;

334 i‡(--
Àn
 <= 0)

338 
ch
 = (*
gëch
Ë(
¨g1
, 
¨g2
);

340 i‡(
ch
 !
EOF
)

342 i‡(
Àn
 > 0)

344 (*
ungëch
Ë(
¨g1
, 
¨g2
);

346 *
eoÂå
 = 0;

350 *
eoÂå
 = 1;

352 i‡(
±r
 &&Öå !
›å
)

354 i‡(
ty≥
 != 'c')

356 *
±r
++ = '\0';

361 
	}
}

367 *
	$_gëc˛
(

368 *
s


371 
c
, 
t
;

373 
t
 = 0;

374 i‡(*
s
 == '^')

376 
t
++;

377 
s
++;

379 
c
 = 0; c < 128; c++)

381 i‡(
t
)

383 
_s˘ab
[
c
] &~
STP
;

387 
_s˘ab
[
c
] |
STP
;

390 ((
c
 = *
s
++) & 0177) != ']')

392 i‡(
t
)

394 
_s˘ab
[
c
++] |
STP
;

398 
_s˘ab
[
c
++] &~
STP
;

400 i‡(
c
 == 0)

402  (--
s
);

405  
s
;

406 
	}
}

	@lib/fdoprnt.c

3 
	~<°d¨g.h
>

5 
	#MAXSTR
 80

	)

6 
	#NULL
 0

	)

8 
_¥é10
(
num
, *
°r
);

9 
_¥é8
(
num
, *
°r
);

10 
_¥tX16
(
num
, *
°r
);

11 
_¥é16
(
num
, *
°r
);

12 
_¥é2
(
num
, *
°r
);

20 
	$_fd›∫t
(

21 *
fmt
,

22 
va_li°
 
≠
,

23 (*
func
)(, ),

24 
Árg


27 
c
;

28 
i
;

29 
f
;

30 *
°r
;

31 
°rög
[20];

34 
Àngth
;

35 
fûl
;

36 
À·ju°
;

37 
fmax
, 
fmö
;

38 
Àadög
;

39 
sign
;

40 
digô1
;

41 
œrg
;

46 (
c
 = *
fmt
++) != '%')

48 i‡(
c
 == '\0')

52 (*
func
Ë(
Árg
, 
c
);

55 i‡(*
fmt
 == '%')

57 (*
func
Ë(
Árg
, *
fmt
++);

61 i‡((
À·ju°
 = ((*
fmt
 == '-')) ? 1 : 0))

63 
fmt
++;

66 
fûl
 = (*
fmt
 == '0') ? *fmt++ : ' ';

69 
fmö
 = 0;

70 i‡(*
fmt
 == '*')

72 
fmö
 = 
	`va_¨g
(
≠
, );

74 ++
fmt
;

78 '0' <*
fmt
 && *fmt <= '9')

80 
fmö
 = fmö * 10 + *
fmt
++ - '0';

84 
fmax
 = 0;

85 i‡(*
fmt
 == '.')

87 i‡(*(++
fmt
) == '*')

89 
fmax
 = 
	`va_¨g
(
≠
, );

90 ++
fmt
;

94 '0' <*
fmt
 && *fmt <= '9')

96 
fmax
 = fmax * 10 + *
fmt
++ - '0';

101 
°r
 = 
°rög
;

102 i‡((
f
 = *
fmt
++) == '\0')

104 (*
func
Ë(
Árg
, '%');

107 
sign
 = '\0';

109 
f
)

112 
°rög
[0] = 
	`va_¨g
(
≠
, );

113 
°rög
[1] = '\0';

114 
fmax
 = 0;

115 
fûl
 = ' ';

119 
°r
 = 
	`va_¨g
(
≠
, *);

121 i‡(
NULL
 =
°r
)

123 
°r
 = "(null)";

125 
fûl
 = ' ';

129 
œrg
 = 
	`va_¨g
(
≠
, );

131 i‡(
œrg
 < 0)

133 
sign
 = '-';

134 
œrg
 = -larg;

136 
	`_¥é10
(
œrg
, 
°r
);

140 
digô1
 = '\0';

145 
œrg
 = 
	`va_¨g
(
≠
, );

147 
œrg
 < 0)

149 
œrg
 -= 1000000000L;

150 ++
digô1
;

152 
	`_¥é10
(
œrg
, 
°r
);

153 
°r
[0] +
digô1
;

154 
fmax
 = 0;

158 
œrg
 = 
	`va_¨g
(
≠
, );

160 
	`_¥é8
(
œrg
, 
°r
);

161 
fmax
 = 0;

165 
œrg
 = 
	`va_¨g
(
≠
, );

167 
	`_¥tX16
(
œrg
, 
°r
);

168 
fmax
 = 0;

172 
œrg
 = 
	`va_¨g
(
≠
, );

174 
	`_¥é16
(
œrg
, 
°r
);

175 
fmax
 = 0;

179 
œrg
 = 
	`va_¨g
(
≠
, );

181 
	`_¥é2
(
œrg
, 
°r
);

182 
fmax
 = 0;

186 (*
func
Ë(
Árg
, 
f
);

189 
Àngth
 = 0; 
°r
[length] != '\0';Üength++)

192 i‡(
fmö
 > 
MAXSTR
 || fmin < 0)

194 
fmö
 = 0;

196 i‡(
fmax
 > 
MAXSTR
 || fmax < 0)

198 
fmax
 = 0;

200 
Àadög
 = 0;

201 i‡(
fmax
 !0 || 
fmö
 != 0)

203 i‡(
fmax
 != 0)

205 i‡(
Àngth
 > 
fmax
)

207 
Àngth
 = 
fmax
;

210 i‡(
fmö
 != 0)

212 
Àadög
 = 
fmö
 - 
Àngth
;

214 i‡(
sign
 == '-')

216 --
Àadög
;

219 i‡(
sign
 ='-' && 
fûl
 == '0')

221 (*
func
Ë(
Árg
, 
sign
);

223 i‡(
À·ju°
 == 0)

225 
i
 = 0; i < 
Àadög
; i++)

227 (*
func
Ë(
Árg
, 
fûl
);

230 i‡(
sign
 ='-' && 
fûl
 == ' ')

232 (*
func
Ë(
Árg
, 
sign
);

234 
i
 = 0; i < 
Àngth
; i++)

236 (*
func
Ë(
Árg
, 
°r
[
i
]);

238 i‡(
À·ju°
 != 0)

240 
i
 = 0; i < 
Àadög
; i++)

241 (*
func
Ë(
Árg
, 
fûl
);

245 
	}
}

251 
	$_¥é10
(

252 
num
,

253 *
°r


256 
i
;

257 
ãmp
[11];

259 
ãmp
[0] = '\0';

260 
i
 = 1; i <= 10; i++)

262 
ãmp
[
i
] = 
num
 % 10 + '0';

263 
num
 /= 10;

265 
i
 = 10; 
ãmp
[i] == '0'; i--);

266 i‡(
i
 == 0)

267 
i
++;

268 
i
 >= 0)

269 *
°r
++ = 
ãmp
[
i
--];

270 
	}
}

276 
	$_¥é8
(

277 
num
,

278 *
°r


281 
i
;

282 
ãmp
[12];

284 
ãmp
[0] = '\0';

285 
i
 = 1; i <= 11; i++)

287 
ãmp
[
i
] = (
num
 & 07) + '0';

288 
num
 =Çum >> 3;

290 
ãmp
[11] &= '3';

291 
i
 = 11; 
ãmp
[i] == '0'; i--);

292 i‡(
i
 == 0)

293 
i
++;

294 
i
 >= 0)

295 *
°r
++ = 
ãmp
[
i
--];

296 
	}
}

302 
	$_¥é16
(

303 
num
,

304 *
°r


307 
i
;

308 
ãmp
[9];

310 
ãmp
[0] = '\0';

311 
i
 = 1; i <= 8; i++)

313 
ãmp
[
i
] = "0123456789abcdef"[
num
 & 0x0F];

314 
num
 =Çum >> 4;

316 
i
 = 8; 
ãmp
[i] == '0'; i--);

317 i‡(
i
 == 0)

318 
i
++;

319 
i
 >= 0)

320 *
°r
++ = 
ãmp
[
i
--];

321 
	}
}

327 
	$_¥tX16
(

328 
num
,

329 *
°r


332 
i
;

333 
ãmp
[9];

335 
ãmp
[0] = '\0';

336 
i
 = 1; i <= 8; i++)

338 
ãmp
[
i
] = "0123456789ABCDEF"[
num
 & 0x0F];

339 
num
 =Çum >> 4;

341 
i
 = 8; 
ãmp
[i] == '0'; i--);

342 i‡(
i
 == 0)

343 
i
++;

344 
i
 >= 0)

345 *
°r
++ = 
ãmp
[
i
--];

346 
	}
}

352 
	$_¥é2
(

353 
num
,

354 *
°r


357 
i
;

358 
ãmp
[35];

360 
ãmp
[0] = '\0';

361 
i
 = 1; i <= 32; i++)

363 
ãmp
[
i
] = ((
num
 % 2) == 0) ? '0' : '1';

364 
num
 =Çum >> 1;

366 
i
 = 32; 
ãmp
[i] == '0'; i--);

367 i‡(
i
 == 0)

368 
i
++;

369 
i
 >= 0)

370 *
°r
++ = 
ãmp
[
i
--];

371 
	}
}

	@lib/fgetc.c

3 
gëc
();

5 #i‚def 
EOF


6 
	#EOF
 (-2)

	)

14 
	$fgëc
(

15 
dev


18 
ªsu…
 = ()
	`gëc
(
dev
);

20 i‡(0 > 
ªsu…
)

22  
EOF
;

26  
ªsu…
;

28 
	}
}

	@lib/fgets.c

3 #i‚def 
NULL


4 
	#NULL
 0

	)

6 
gëc
();

12 *
	$fgës
(

13 *
s
,

14 
n
,

15 
dev


18 
c
 = 0;

19 *
cs
;

21 
cs
 = 
s
;

25 (--
n
 > 0Ë&& ((
c
 = 
	`gëc
(
dev
)) >= 0))

27 *
cs
++ = 
c
;

28 i‡(('\n' =
c
) || ('\r' == c))

35 i‡((
c
 < 0Ë&& (
cs
 =
s
))

37  
NULL
;

41 *
cs
++ = '\0';

42  
s
;

43 
	}
}

	@lib/fprintf.c

3 
	~<xöu.h
>

4 
	~<°d¨g.h
>

6 
_fd›∫t
(*, 
va_li°
, (*)(
did32
, ), );

14 
	$Ârötf
(

15 
dev
,

16 *
fmt
,

20 
va_li°
 
≠
;

21 
	`putc
(
did32
, );

23 
	`va_°¨t
(
≠
, 
fmt
);

24 
	`_fd›∫t
(
fmt
, 
≠
, 
putc
, 
dev
);

25 
	`va_íd
(
≠
);

28 
	}
}

	@lib/fputc.c

3 
putc
(, );

5 #i‚def 
SYSERR


6 
	#SYSERR
 (-1)

	)

8 #i‚def 
EOF


9 
	#EOF
 (-2)

	)

17 
	$Âutc
(

18 
c
,

19 
dev


22 i‡(
SYSERR
 =()
	`putc
(
dev
, 
c
))

24  
EOF
;

28  
c
;

30 
	}
}

	@lib/fputs.c

3 
putc
(, );

10 
	$Âuts
(

11 *
s
,

12 
dev


15 
r
 = 0, 
c
;

17 (
c
 = (*
s
++)))

19 
r
 = 
	`putc
(
dev
, 
c
);

21  
r
;

22 
	}
}

	@lib/fscanf.c

3 #i‚def 
EMPTY


4 
	#EMPTY
 (-1)

	)

6 #i‚def 
EOF


7 
	#EOF
 (-2)

	)

10 
gëc
();

12 
gëch
(, );

13 
ungëch
(, );

14 
_dosˇn
(*, **,

15 (*
gëc
Ë(, ), (*
ungëc
) (, ), ,

23 
	$fsˇnf
(

24 
dev
,

25 *
fmt
,

26 
¨gs


29 
buf
;

31 
buf
 = 
EMPTY
;

32  (
_dosˇn


33 (
fmt
, (**)&
¨gs
, 
gëch
, 
ungëch
, 
dev
, ()()&
buf
));

34 
	}
}

40 
	$gëch
(

41 
dev
,

42 
abuf


45 *
buf
 = (*)
abuf
;

47 i‡(*
buf
 !
EOF
 && *bu‡!
EMPTY
)

49 *
buf
 = 
	`gëc
(
dev
);

53  (*
buf
);

54 
	}
}

60 
	$ungëch
(

61 
dev
,

62 
abuf


65 *
buf
 = (*)
abuf
;

67 *
buf
 = 
EMPTY
;

68  (*
buf
);

69 
	}
}

	@lib/getchar.c

3 
	~<xöu.h
>

4 
	~<°dio.h
>

10 
	$gëch¨
(

14  
	`fgëc
(
°dö
);

15 
	}
}

	@lib/labs.c

7 
	$œbs
(

8 
¨g


11 i‡(
¨g
 < 0)

12 
¨g
 = -arg;

13  (
¨g
);

14 
	}
}

	@lib/memchr.c

	@lib/memcmp.c

9 
	$memcmp
(

10 c⁄° *
s1
,

11 c⁄° *
s2
,

12 
n


15 c⁄° *
c1
;

16 c⁄° *
c2
;

18 
c1
 = 
s1
, 
c2
 = 
s2
; 
n
 > 0;Ç--, c1++, c2++)

20 i‡(*
c1
 !*
c2
)

22  (()*
c1
Ë- (()*
c2
);

26 
	}
}

	@lib/memcpy.c

8 *
	$mem˝y
(

9 *
s
,

10 c⁄° *
˘
,

11 
n


14 if(
n
 <= 0) {

15  
s
;

18 
asm
 volatile (

24 : "S" (
˘
), "D" (
s
), "c" (
n
)

27  
s
;

28 
	}
}

	@lib/memset.c

8 *
	$mem£t
(

9 *
s
,

10 
c
,

11 
n


14 
i
;

15 *
˝
 = (*)
s
;

17 
i
 = 0; i < 
n
; i++)

19 *
˝
 = ()
c
;

20 
˝
++;

22  
s
;

23 
	}
}

	@lib/printf.c

3 
	~<xöu.h
>

4 
	~<°dio.h
>

5 
	~<°d¨g.h
>

7 
_fd›∫t
(*, 
va_li°
, (*)(
did32
, ), );

13 
	$¥ötf
(

14 c⁄° *
fmt
,

18 
va_li°
 
≠
;

19 
sysˇŒ
 
	`putc
(
did32
, );

21 
	`va_°¨t
(
≠
, 
fmt
);

22 
	`_fd›∫t
((*)
fmt
, 
≠
, 
putc
, 
°dout
);

23 
	`va_íd
(
≠
);

26 
	}
}

	@lib/putchar.c

3 
	~<xöu.h
>

4 
	~<°dio.h
>

10 
	$putch¨
(

11 
c


14  
	`Âutc
(
c
, 
°dout
);

15 
	}
}

	@lib/qsort.c

3 (*
qscmp
) (*, *);

4 
q£s
;

5 
	`qs1
(*, *);

6 
	`q£xc
(*, *);

7 
	`q°exc
(*, *, *);

13 
	$qs‹t
(

14 *
a
,

15 
n
,

16 
es
,

17 (*
fc
)(*, *)

20 
qscmp
 = 
fc
;

21 
q£s
 = 
es
;

22 
	`qs1
(
a
,á + 
n
 * 
es
);

23 
	}
}

29 
	$qs1
(

30 *
a
,

31 *
l


34 *
i
, *
j
;

35 
es
;

36 *
Õ
, *
hp
;

37 
c
;

38 
n
;

40 
es
 = 
q£s
;

42 
°¨t
:

43 i‡((
n
 = 
l
 - 
a
Ë<
es
)

47 
n
 = 
es
 * (n / (2 *És));

48 
hp
 = 
Õ
 = 
a
 + 
n
;

49 
i
 = 
a
;

50 
j
 = 
l
 - 
es
;

53 i‡(
i
 < 
Õ
)

55 i‡((
c
 = (*
qscmp
Ë(
i
, 
Õ
)) == 0)

57 
	`q£xc
(
i
, 
Õ
 -
es
);

60 i‡(
c
 < 0)

62 
i
 +
es
;

67 
lo›
:

68 i‡(
j
 > 
hp
)

70 i‡((
c
 = (*
qscmp
Ë(
hp
, 
j
)) == 0)

72 
	`q£xc
(
hp
 +
es
, 
j
);

73 
lo›
;

75 i‡(
c
 > 0)

77 i‡(
i
 =
Õ
)

79 
	`q°exc
(
i
, 
hp
 +
es
, 
j
);

80 
i
 = 
Õ
 +
es
;

81 
lo›
;

83 
	`q£xc
(
i
, 
j
);

84 
j
 -
es
;

85 
i
 +
es
;

88 
j
 -
es
;

89 
lo›
;

92 i‡(
i
 =
Õ
)

94 i‡(
Õ
 - 
a
 >
l
 - 
hp
)

96 
	`qs1
(
hp
 + 
es
, 
l
);

97 
l
 = 
Õ
;

101 
	`qs1
(
a
, 
Õ
);

102 
a
 = 
hp
 + 
es
;

104 
°¨t
;

107 
	`q°exc
(
j
, 
Õ
 -
es
, 
i
);

108 
j
 = 
hp
 -
es
;

110 
	}
}

116 
	$q£xc
(

117 *
i
,

118 *
j


121 *
ri
, *
rj
, 
c
;

122 
n
;

124 
n
 = 
q£s
;

125 
ri
 = 
i
;

126 
rj
 = 
j
;

129 
c
 = *
ri
;

130 *
ri
++ = *
rj
;

131 *
rj
++ = 
c
;

133 --
n
);

134 
	}
}

140 
	$q°exc
(

141 *
i
,

142 *
j
,

143 *
k


146 *
ri
, *
rj
, *
rk
;

147 
c
;

148 
n
;

150 
n
 = 
q£s
;

151 
ri
 = 
i
;

152 
rj
 = 
j
;

153 
rk
 = 
k
;

156 
c
 = *
ri
;

157 *
ri
++ = *
rk
;

158 *
rk
++ = *
rj
;

159 *
rj
++ = 
c
;

161 --
n
);

162 
	}
}

	@lib/rand.c

3 
	~<°dlib.h
>

5 
	gønd_£ed
 = 1;

6 
ønd_r
(*);

12 
	$ønd
()

14  
	`ønd_r
(&
ønd_£ed
);

15 
	}
}

21 
	$ønd_r
(

22 * 
£edp


25 *
£edp
 = 16807 * (*£edpË% (
RAND_MAX
 + 1);

26  ()(*
£edp
);

27 
	}
}

33 
	$§™d
(

34 
£ed


37 
ønd_£ed
 = 
£ed
;

38 
	}
}

	@lib/sprintf.c

3 
	~<°d¨g.h
>

5 
•∫tf
(, );

6 
_fd›∫t
(*, 
va_li°
, (*
func
) (, ), );

12 
	$•rötf
(

13 *
°r
,

14 *
fmt
,

18 
va_li°
 
≠
;

19 *
s
;

21 
s
 = 
°r
;

22 
	`va_°¨t
(
≠
, 
fmt
);

23 
	`_fd›∫t
(
fmt
, 
≠
, 
•∫tf
, ()&
s
);

24 
	`va_íd
(
≠
);

25 *
s
++ = '\0';

27  (()
°r
);

28 
	}
}

34 
	$•∫tf
(

35 
a˝p
,

36 
ac


39 **
˝p
 = (**)
a˝p
;

40 
c
 = ()
ac
;

42  (*(*
˝p
)++ = 
c
);

43 
	}
}

	@lib/sscanf.c

3 
	#EOF
 (-2)

	)

5 
sgëch
(, **);

6 
sungëch
(, **);

7 
_dosˇn
(*, **,

8 (*
gëc
) (, **),

9 (*
ungëc
) (, **), , );

16 
	$ssˇnf
(

17 *
°r
,

18 *
fmt
,

19 
¨gs


22 *
s
;

24 
s
 = 
°r
;

25  (
	`_dosˇn
(
fmt
, (**)&
¨gs
, 
sgëch
, 
sungëch
, 0, ()&
s
));

26 
	}
}

32 
	$sgëch
(

33 
dummy
,

34 **
˝p


37  (*(*
˝p
Ë='\0' ? 
EOF
 : *(*cpp)++);

38 
	}
}

44 
	$sungëch
(

45 
dummy
,

46 **
˝p


49  (*(*
˝p
)--);

50 
	}
}

	@lib/strchr.c

8 *
	$°rchr
(

9 c⁄° *
s
,

10 
c


13 ; *
s
 != '\0'; s++)

15 i‡(*
s
 =(c⁄° )
c
)

17  (*)
s
;

21 i‡((c⁄° )
c
 =*
s
)

23  (*)
s
;

27 
	}
}

	@lib/strcmp.c

8 
	$°rcmp
(

9 *
°r1
,

10 *
°r2


13 *
°r1
 =*
°r2
) {

14 i‡(*
°r1
 == '\0') {

17 
°r1
++;

18 
°r2
++;

20 i‡(*
°r1
 < *
°r2
) {

25 
	}
}

	@lib/strcpy.c

7 
	$°r˝y
(

8 *
èr
,

9 *
§c


12  (*
èr
++ = *
§c
++) != '\0') {

16 
	}
}

	@lib/strlen.c

8 
	$°æí
(

9 *
°r


12 
Àn
;

14 
Àn
 = 0;

16 *
°r
++ != '\0') {

17 
Àn
++;

19  
Àn
;

20 
	}
}

	@lib/strncat.c

9 *
	$°∫ˇt
(

10 *
s1
,

11 c⁄° *
s2
,

12 
n


15 *
os1
;

17 
os1
 = 
s1
;

18 *
s1
++)

20 --
s1
;

21 (*
s1
++ = *
s2
++))

22 i‡(--
n
 < 0)

24 *--
s1
 = '\0';

27  (
os1
);

28 
	}
}

	@lib/strncmp.c

8 
	$°∫cmp
(

9 *
s1
,

10 *
s2
,

11 
n


15 --
n
 >0 && *
s1
 =*
s2
++)

17 i‡(*
s1
++ == '\0')

22  (
n
 < 0 ? 0 : *
s1
 - *--
s2
);

23 
	}
}

	@lib/strncpy.c

8 *
	$°∫˝y
(

9 *
s1
,

10 c⁄° *
s2
,

11 
n


14 
i
;

15 *
os1
;

17 
os1
 = 
s1
;

18 
i
 = 0; i < 
n
; i++)

20 i‡(((*
s1
++Ë(*
s2
++)) == '\0')

22 ++
i
 < 
n
)

24 *
s1
++ = '\0';

26  
os1
;

29  
os1
;

30 
	}
}

	@lib/strnlen.c

8 
	$°∫Àn
(

9 c⁄° *
s
,

10 
Àn


13 
n
;

15 
n
 = 0;

16 *
s
++ && 
n
 < 
Àn
)

17 
n
++;

19  (
n
);

20 
	}
}

	@lib/strrchr.c

9 *
	$°ºchr
(

10 c⁄° *
s
,

11 
c


14 *
r
 = 0;

16 ; *
s
 != '\0'; s++)

18 i‡(*
s
 =(c⁄° )
c
)

20 
r
 = (*)
s
;

24 i‡((c⁄° )
c
 =*
s
)

26  (*)
s
;

29  
r
;

30 
	}
}

	@lib/strstr.c

8 *
	$°r°r
(

9 c⁄° *
cs
,

10 c⁄° *
˘


13 *
cq
;

14 *
¸
;

16 ; *
cs
 != '\0'; cs++)

18 i‡(*
cs
 =*
˘
)

20 
cq
 = (*)
cs
;

21 
¸
 = (*)
˘
;

22 (*
cq
 !'\0'Ë&& (*
¸
 != '\0'))

24 i‡(*
cq
 !*
¸
)

28 
cq
++;

29 
¸
++;

31 i‡('\0' =*
¸
)

33  (*)
cs
;

38 
	}
}

	@mylib.c

1 
	~"ö˛ude/sysˇŒ_öãrÁ˚.h
"

3 
	gã°
;

4 
	gi
;

5 
	$mylib
(){

6 
j
=100;

7 
i
= 1;

8 
j
++;

13 
ªt
;

14 
ªt
 = 
	`sysˇŒ_öãrÁ˚
(2, 26, 2);

17 
	}
}

	@net/arp.c

3 
	~<xöu.h
>

5 
¨≥¡ry
 
	g¨pˇche
[
ARP_SIZ
];

11 
	$¨p_öô
()

13 
öt32
 
i
;

15 
i
=1; i<
ARP_SIZ
; i++) {

16 
¨pˇche
[
i
].
¨°©e
 = 
AR_FREE
;

18 
	}
}

24 
°©us
 
	$¨p_ªsﬁve
 (

25 
uöt32
 
nxth›
,

26 
byã
 
mac
[
ETH_ADDR_LEN
]

29 
ötmask
 
mask
;

30 
¨µackë
 
≠kt
;

31 
öt32
 
i
;

32 
öt32
 
¶Ÿ
;

33 
¨≥¡ry
 *
¨±r
;

34 
öt32
 
msg
;

38 i‡(
nxth›
 =
IP_BCAST
) {

39 
	`mem˝y
(
mac
, 
NëD©a
.
ëhbˇ°
, 
ETH_ADDR_LEN
);

40  
OK
;

45 i‡(
nxth›
 =
NëD©a
.
ùbˇ°
) {

46 
	`mem˝y
(
mac
, 
NëD©a
.
ëhbˇ°
, 
ETH_ADDR_LEN
);

47  
OK
;

52 
mask
 = 
	`dißbÀ
();

56 
i
=0; i<
ARP_SIZ
; i++) {

57 
¨±r
 = &
¨pˇche
[
i
];

58 i‡(
¨±r
->
¨°©e
 =
AR_FREE
) {

61 i‡(
¨±r
->
¨∑ddr
 =
nxth›
) {

66 i‡(
i
 < 
ARP_SIZ
) {

70 i‡(
¨±r
->
¨°©e
 =
AR_RESOLVED
) {

71 
	`mem˝y
(
mac
, 
¨±r
->
¨haddr
, 
ARP_HALEN
);

72 
	`ª°‹e
(
mask
);

73  
OK
;

79 i‡(
¨±r
->
¨°©e
 =
AR_PENDING
) {

80 
	`ª°‹e
(
mask
);

81  
SYSERR
;

88 
¶Ÿ
 = 
	`¨p_Æloc
();

89 i‡(
¶Ÿ
 =
SYSERR
) {

90 
	`ª°‹e
(
mask
);

91  
SYSERR
;

94 
¨±r
 = &
¨pˇche
[
¶Ÿ
];

95 
¨±r
->
¨°©e
 = 
AR_PENDING
;

96 
¨±r
->
¨∑ddr
 = 
nxth›
;

97 
¨±r
->
¨pid
 = 
cuºpid
;

101 
	`mem˝y
(
≠kt
.
¨p_ëhd°
, 
NëD©a
.
ëhbˇ°
, 
ETH_ADDR_LEN
);

102 
	`mem˝y
(
≠kt
.
¨p_ëh§c
, 
NëD©a
.
ëhuˇ°
, 
ETH_ADDR_LEN
);

103 
≠kt
.
¨p_ëhty≥
 = 
ETH_ARP
;

104 
≠kt
.
¨p_hty≥
 = 
ARP_HTYPE
;

105 
≠kt
.
¨p_±y≥
 = 
ARP_PTYPE
;

106 
≠kt
.
¨p_hÀn
 = 0xf‡& 
ARP_HALEN
;

107 
≠kt
.
¨p_∂í
 = 0xf‡& 
ARP_PALEN
;

108 
≠kt
.
¨p_›
 = 0xfff‡& 
ARP_OP_REQ
;

109 
	`mem˝y
(
≠kt
.
¨p_¢dha
, 
NëD©a
.
ëhuˇ°
, 
ARP_HALEN
);

110 
≠kt
.
¨p_¢d∑
 = 
NëD©a
.
ùuˇ°
;

111 
	`mem£t
(
≠kt
.
¨p_èrha
, '\0', 
ARP_HALEN
);

112 
≠kt
.
¨p_èΩa
 = 
nxth›
;

116 
	`¨p_ht⁄
(&
≠kt
);

120 
	`ëh_ht⁄
((
√çackë
 *)&
≠kt
);

124 
msg
 = 
	`ªcv˛r
();

125 
i
=0; i<
ARP_RETRY
; i++) {

126 
	`wrôe
(
ETHER0
, (*)&
≠kt
, (
¨µackë
));

127 
msg
 = 
	`ªcvtime
(
ARP_TIMEOUT
);

128 i‡(
msg
 =
TIMEOUT
) {

130 } i‡(
msg
 =
SYSERR
) {

131 
	`ª°‹e
(
mask
);

132  
SYSERR
;

140 i‡(
msg
 =
TIMEOUT
) {

141 
¨±r
->
¨°©e
 = 
AR_FREE
;

142 
	`ª°‹e
(
mask
);

143  
TIMEOUT
;

148 
	`mem˝y
(
mac
, 
¨±r
->
¨haddr
, 
ARP_HALEN
);

149 
	`ª°‹e
(
mask
);

150  
OK
;

151 
	}
}

158 
	$¨p_ö
 (

159 
¨µackë
 *
pkçå


162 
ötmask
 
mask
;

163 
¨µackë
 
≠kt
;

164 
öt32
 
¶Ÿ
;

165 
¨≥¡ry
 *
¨±r
;

166 
boﬁ8
 
found
;

171 
	`¨p_¡oh
(
pkçå
);

175 i‡–(
pkçå
->
¨p_hty≥
 !
ARP_HTYPE
) ||

176 (
pkçå
->
¨p_±y≥
 !
ARP_PTYPE
) ) {

177 
	`‰ìbuf
((*)
pkçå
);

183 
mask
 = 
	`dißbÀ
();

187 
found
 = 
FALSE
;

189 
¶Ÿ
=0; slŸ < 
ARP_SIZ
; slot++) {

190 
¨±r
 = &
¨pˇche
[
¶Ÿ
];

194 i‡(
¨±r
->
¨°©e
 =
AR_FREE
) {

200 i‡(
¨±r
->
¨∑ddr
 =
pkçå
->
¨p_¢d∑
) {

201 
found
 = 
TRUE
;

206 i‡(
found
) {

210 
	`mem˝y
(
¨±r
->
¨haddr
, 
pkçå
->
¨p_¢dha
, 
ARP_HALEN
);

214 i‡(
¨±r
->
¨°©e
 =
AR_PENDING
) {

216 
¨±r
->
¨°©e
 = 
AR_RESOLVED
;

217 
	`£nd
(
¨±r
->
¨pid
, 
OK
);

223 i‡(
pkçå
->
¨p_›
 =
ARP_OP_RPLY
) {

224 
	`‰ìbuf
((*)
pkçå
);

225 
	`ª°‹e
(
mask
);

233 i‡((!
NëD©a
.
ùvÆid
) ||

234 (
pkçå
->
¨p_èΩa
 !
NëD©a
.
ùuˇ°
)) {

235 
	`‰ìbuf
((*)
pkçå
);

236 
	`ª°‹e
(
mask
);

243 i‡(!
found
) {

244 
¶Ÿ
 = 
	`¨p_Æloc
();

245 i‡(
¶Ÿ
 =
SYSERR
) {

246 
	`k¥ötf
("ARP cache overflow on interface\n");

247 
	`‰ìbuf
((*)
pkçå
);

248 
	`ª°‹e
(
mask
);

251 
¨±r
 = &
¨pˇche
[
¶Ÿ
];

252 
¨±r
->
¨∑ddr
 = 
pkçå
->
¨p_¢d∑
;

253 
	`mem˝y
(
¨±r
->
¨haddr
, 
pkçå
->
¨p_¢dha
, 
ARP_HALEN
);

254 
¨±r
->
¨°©e
 = 
AR_RESOLVED
;

259 
	`mem˝y
(
≠kt
.
¨p_ëhd°
, 
pkçå
->
¨p_¢dha
, 
ARP_HALEN
);

260 
	`mem˝y
(
≠kt
.
¨p_ëh§c
, 
NëD©a
.
ëhuˇ°
, 
ARP_HALEN
);

261 
≠kt
.
¨p_ëhty≥

ETH_ARP
;

262 
≠kt
.
¨p_hty≥
 = 
ARP_HTYPE
;

263 
≠kt
.
¨p_±y≥
 = 
ARP_PTYPE
;

264 
≠kt
.
¨p_hÀn
 = 
ARP_HALEN
;

265 
≠kt
.
¨p_∂í
 = 
ARP_PALEN
;

266 
≠kt
.
¨p_›
 = 
ARP_OP_RPLY
;

270 
	`mem˝y
(
≠kt
.
¨p_¢dha
, 
NëD©a
.
ëhuˇ°
, 
ARP_HALEN
);

271 
≠kt
.
¨p_¢d∑
 = 
NëD©a
.
ùuˇ°
;

275 
	`mem˝y
(
≠kt
.
¨p_èrha
, 
pkçå
->
¨p_¢dha
, 
ARP_HALEN
);

276 
≠kt
.
¨p_èΩa
 = 
pkçå
->
¨p_¢d∑
;

280 
	`¨p_ht⁄
(&
≠kt
);

284 
	`ëh_ht⁄
((
√çackë
 *)&
≠kt
);

288 
	`wrôe
(
ETHER0
, (*)&
≠kt
, (
¨µackë
));

289 
	`‰ìbuf
((*)
pkçå
);

290 
	`ª°‹e
(
mask
);

292 
	}
}

298 
öt32
 
	$¨p_Æloc
 ()

300 
öt32
 
¶Ÿ
;

304 
¶Ÿ
=0; slŸ < 
ARP_SIZ
; slot++) {

305 i‡(
¨pˇche
[
¶Ÿ
].
¨°©e
 =
AR_FREE
) {

306 
	`mem£t
((*)&
¨pˇche
[
¶Ÿ
],

307 
NULLCH
, (
¨≥¡ry
));

308  
¶Ÿ
;

314 
¶Ÿ
=0; slŸ < 
ARP_SIZ
; slot++) {

315 i‡(
¨pˇche
[
¶Ÿ
].
¨°©e
 =
AR_RESOLVED
) {

316 
	`mem£t
((*)&
¨pˇche
[
¶Ÿ
],

317 
NULLCH
, (
¨≥¡ry
));

318  
¶Ÿ
;

324 
	`k¥ötf
("ARP cache sizeÉxceeded\n");

326  
SYSERR
;

327 
	}
}

333 
	$¨p_¡oh
(

334 
¨µackë
 *
pkçå


337 
pkçå
->
¨p_hty≥
 = 
	`¡ohs
(pktptr->arp_htype);

338 
pkçå
->
¨p_±y≥
 = 
	`¡ohs
(pktptr->arp_ptype);

339 
pkçå
->
¨p_›
 = 
	`¡ohs
(pktptr->arp_op);

340 
pkçå
->
¨p_¢d∑
 = 
	`¡ohl
(pktptr->arp_sndpa);

341 
pkçå
->
¨p_èΩa
 = 
	`¡ohl
(pktptr->arp_tarpa);

342 
	}
}

348 
	$¨p_ht⁄
(

349 
¨µackë
 *
pkçå


352 
pkçå
->
¨p_hty≥
 = 
	`ht⁄s
(pktptr->arp_htype);

353 
pkçå
->
¨p_±y≥
 = 
	`ht⁄s
(pktptr->arp_ptype);

354 
pkçå
->
¨p_›
 = 
	`ht⁄s
(pktptr->arp_op);

355 
pkçå
->
¨p_¢d∑
 = 
	`ht⁄l
(pktptr->arp_sndpa);

356 
pkçå
->
¨p_èΩa
 = 
	`ht⁄l
(pktptr->arp_tarpa);

357 
	}
}

	@net/arp_dump.c

3 
	~<xöu.h
>

9 
	$¨p_dump
(

10 
¨≥¡ry
 *
¨±r


13 
öt32
 
i
;

15 
	`k¥ötf
("Sèã=%d, PID=%d IP=%08x, HW=", 
¨±r
->
¨°©e
,

16 
¨±r
->
¨pid
,áΩå->
¨∑ddr
);

17 
	`k¥ötf
(" %02X", 
¨±r
->
¨haddr
[0]);

18 
i
 = 1; i < 
ARP_HALEN
; i++) {

19 
	`¥ötf
(":%02X", 
¨±r
->
¨haddr
[
i
]);

21 
	`k¥ötf
("\n");

23 
	}
}

	@net/dhcp.c

3 
	~<xöu.h
>

10 * 
	$dh˝_gë_›t_vÆ
(

11 c⁄° 
dh˝msg
* 
dmsg
,

12 
uöt32
 
dmsg_size
,

13 
uöt8
 
›ti⁄_key


16 * 
›t_tmp
;

17 * 
eom
;

19 
eom
 = (*)
dmsg
 + 
dmsg_size
 - 1;

20 
›t_tmp
 = (*)
dmsg
->
dc_›t
;

22 
›t_tmp
 < 
eom
) {

26 if((*
›t_tmp
Ë=
›ti⁄_key
) {

30  (*)(
›t_tmp
+2);

32 
›t_tmp
++;

33 
›t_tmp
 +*(
uöt8
*)opt_tmp + 1;

38  
NULL
;

39 
	}
}

45 
	$dh˝_bld_boŸp_msg
(
dh˝msg
* 
dmsg
)

47 
uöt32
 
xid
;

49 
	`mem˝y
(&
xid
, 
NëD©a
.
ëhuˇ°
, 4);

51 
	`mem£t
(
dmsg
, 0x00, (
dh˝msg
));

53 
dmsg
->
dc_b›
 = 0x01;

54 
dmsg
->
dc_hty≥
 = 0x01;

55 
dmsg
->
dc_hÀn
 = 0x06;

56 
dmsg
->
dc_h›s
 = 0x00;

57 
dmsg
->
dc_xid
 = 
	`ht⁄l
(
xid
);

58 
dmsg
->
dc_£cs
 = 0x0000;

59 
dmsg
->
dc_Êags
 = 0x0000;

60 
dmsg
->
dc_cù
 = 0x00000000;

61 
dmsg
->
dc_yù
 = 0x00000000;

62 
dmsg
->
dc_sù
 = 0x00000000;

63 
dmsg
->
dc_gù
 = 0x00000000;

64 
	`mem£t
(&
dmsg
->
dc_chaddr
,'\0',16);

65 
	`mem˝y
(&
dmsg
->
dc_chaddr
, 
NëD©a
.
ëhuˇ°
, 
ETH_ADDR_LEN
);

66 
	`mem£t
(&
dmsg
->
dc_boŸp
,'\0',192);

67 
dmsg
->
dc_cookõ
 = 
	`ht⁄l
(0x63825363);

68 
	}
}

74 
öt32
 
	$dh˝_bld_disc
(
dh˝msg
* 
dmsg
)

76 
uöt32
 
j
 = 0;

78 
	`dh˝_bld_boŸp_msg
(
dmsg
);

80 
dmsg
->
dc_›t
[
j
++] = 0xff & 53;

81 
dmsg
->
dc_›t
[
j
++] = 0xff & 1;

82 
dmsg
->
dc_›t
[
j
++] = 0xff & 1;

83 
dmsg
->
dc_›t
[
j
++] = 0xff & 0;

85 
dmsg
->
dc_›t
[
j
++] = 0xff & 55;

86 
dmsg
->
dc_›t
[
j
++] = 0xff & 2;

87 
dmsg
->
dc_›t
[
j
++] = 0xff & 1;

88 
dmsg
->
dc_›t
[
j
++] = 0xff & 3;

89 
dmsg
->
dc_›t
[
j
++] = 0xff;

91  (
uöt32
)((*)&
dmsg
->
dc_›t
[
j
] - (*)dmsg + 1);

92 
	}
}

98 
öt32
 
	$dh˝_bld_ªq
(

99 
dh˝msg
* 
dmsg
,

100 c⁄° 
dh˝msg
* 
dmsg_of„r
,

101 
uöt32
 
dsmg_of„r_size


104 
uöt32
 
j
 = 0;

105 
uöt32
* 
£rvî_ù
;

108 
	`dh˝_bld_boŸp_msg
(
dmsg
);

109 
dmsg
->
dc_sù
 = 
dmsg_of„r
->dc_sip;

110 
dmsg
->
dc_›t
[
j
++] = 0xff & 53;

111 
dmsg
->
dc_›t
[
j
++] = 0xff & 1;

112 
dmsg
->
dc_›t
[
j
++] = 0xff & 3;

113 
dmsg
->
dc_›t
[
j
++] = 0xff & 0;

115 
dmsg
->
dc_›t
[
j
++] = 0xff & 50;

116 
dmsg
->
dc_›t
[
j
++] = 0xff & 4;

117 
	`mem˝y
(((*)&
dmsg
->
dc_›t
[
j
]), &
dmsg_of„r
->
dc_yù
, 4);

118 
j
 += 4;

121 
£rvî_ù
 = (
uöt32
*)
	`dh˝_gë_›t_vÆ
(
dmsg_of„r
,

122 
dsmg_of„r_size
, 
DHCP_SERVER_ID
);

124 if(
£rvî_ù
 == 0) {

125 
	`k¥ötf
("UnableÅo get server IPádd. from DHCP Offer\n");

126  
SYSERR
;

129 
dmsg
->
dc_›t
[
j
++] = 0xff & 54;

130 
dmsg
->
dc_›t
[
j
++] = 0xff & 4;

131 
	`mem˝y
((*)&
dmsg
->
dc_›t
[
j
], 
£rvî_ù
, 4);

132 
j
 += 4;

133 
dmsg
->
dc_›t
[
j
++] = 0xff;

135  (
uöt32
)((*)&
dmsg
->
dc_›t
[
j
] - (*)dmsg + 1);

136 
	}
}

142 
uöt32
 
	$gëloˇlù
()

144 
öt32
 
¶Ÿ
;

145 
dh˝msg
 
dmsg_¢d
;

146 
dh˝msg
 
dmsg_rvc
;

148 
öt32
 
i
, 
j
;

149 
öt32
 
Àn
;

150 
öt32
 
öÀn
;

151 *
›çå
;

152 *
e›
;

153 
öt32
 
msgty≥
;

154 
uöt32
 
addrmask
;

155 
uöt32
 
rouãøddr
;

156 
uöt32
 
dnßddr
;

157 
uöt32
 
¡∑ddr
;

158 
uöt32
 
tmp
;

159 
uöt32
* 
tmp_£rvî_ù
;

161 
¶Ÿ
 = 
	`udp_ªgi°î
(0, 
UDP_DHCP_SPORT
, 
UDP_DHCP_CPORT
);

162 i‡(
¶Ÿ
 =
SYSERR
) {

163 
	`k¥ötf
("getlocalip: cannotÑegister with UDP\n");

164  
SYSERR
;

167 
Àn
 = 
	`dh˝_bld_disc
(&
dmsg_¢d
);

168 if(
Àn
 =
SYSERR
) {

169 
	`k¥ötf
("getlocalip: UnableÅo build DHCP discover\n");

170  
SYSERR
;

173 
i
 = 0; i < 
DHCP_RETRY
; i++) {

174 
	`udp_£ndto
(
¶Ÿ
, 
IP_BCAST
, 
UDP_DHCP_SPORT
,

175 (*)&
dmsg_¢d
, 
Àn
);

181 
j
=0; j<3; j++) {

182 
öÀn
 = 
	`udp_ªcv
(
¶Ÿ
, (*)&
dmsg_rvc
,

183 (
dh˝msg
), 2000);

184 i‡(
öÀn
 =
TIMEOUT
) {

186 } i‡(
öÀn
 =
SYSERR
) {

187  
SYSERR
;

192 i‡(
dmsg_rvc
.
dc_xid
 !
dmsg_¢d
.dc_xid) {

196 
e›
 = (*)&
dmsg_rvc
 + 
öÀn
 - 1;

197 
›çå
 = (*)&
dmsg_rvc
.
dc_›t
;

198 
msgty≥
 = 
addrmask
 = 
rouãøddr
 = 
dnßddr
 = 
¡∑ddr
 = 0;

200 
›çå
 < 
e›
) {

202 *
›çå
) {

204 
msgty≥
 = 0xf‡& *(
›çå
+2);

208 
	`mem˝y
((*)&
tmp
, 
›çå
+2, 4);

209 
addrmask
 = 
	`¡ohl
(
tmp
);

213 
	`mem˝y
((*)&
tmp
, 
›çå
+2, 4);

214 
rouãøddr
 = 
	`¡ohl
(
tmp
);

218 
	`mem˝y
((*)&
tmp
, 
›çå
+2, 4);

219 
dnßddr
 = 
	`¡ohl
(
tmp
);

223 
	`mem˝y
((*)&
tmp
, 
›çå
+2, 4);

224 
¡∑ddr
 = 
	`¡ohl
(
tmp
);

228 
›çå
++;

229 
›çå
 += (0xff & *optptr) + 1;

232 i‡(
msgty≥
 == 0x02) {

233 
Àn
 = 
	`dh˝_bld_ªq
(&
dmsg_¢d
, &
dmsg_rvc
, 
öÀn
);

234 if(
Àn
 =
SYSERR
) {

235 
	`k¥ötf
("getlocalip: %s\n",

237  
SYSERR
;

239 
	`udp_£ndto
(
¶Ÿ
, 
IP_BCAST
, 
UDP_DHCP_SPORT
,

240 (*)&
dmsg_¢d
, 
Àn
);

243 } i‡(
dmsg_rvc
.
dc_›t
[2] != 0x05) {

247 i‡(
addrmask
 != 0) {

248 
NëD©a
.
ùmask
 = 
addrmask
;

250 i‡(
rouãøddr
 != 0) {

251 
NëD©a
.
ùrouãr
 = 
rouãøddr
;

253 i‡(
dnßddr
 != 0) {

254 
NëD©a
.
dns£rvî
 = 
dnßddr
;

256 i‡(
¡∑ddr
 != 0) {

257 
NëD©a
.
¡p£rvî
 = 
¡∑ddr
;

260 
NëD©a
.
ùuˇ°
 = 
	`¡ohl
(
dmsg_rvc
.
dc_yù
);

261 
NëD©a
.
ù¥efix
 = NëD©a.
ùuˇ°
 & NëD©a.
ùmask
;

262 
NëD©a
.
ùbˇ°
 = NëD©a.
ù¥efix
 | ~NëD©a.
ùmask
;

263 
NëD©a
.
ùvÆid
 = 
TRUE
;

264 
	`udp_ªÀa£
(
¶Ÿ
);

267 i‡(
	`dŸ2ù
((*)
dmsg_rvc
.
¢ame
,

268 &
NëD©a
.
boŸ£rvî
Ë!
OK
) {

272 
tmp_£rvî_ù
 = (
uöt32
*)
	`dh˝_gë_›t_vÆ
(

273 &
dmsg_rvc
, 
Àn
, 
DHCP_SERVER_ID
);

274 
	`mem˝y
((*)&
tmp
, 
tmp_£rvî_ù
, 4);

275 
NëD©a
.
boŸ£rvî
 = 
	`¡ohl
(
tmp
);

277 
	`mem˝y
(
NëD©a
.
boŸfûe
, 
dmsg_rvc
.bootfile,

278 (
dmsg_rvc
.
boŸfûe
));

279  
NëD©a
.
ùuˇ°
;

283 
	`k¥ötf
("DHCP failedÅo getáÑesponse\n");

284 
	`udp_ªÀa£
(
¶Ÿ
);

285  (
uöt32
)
SYSERR
;

286 
	}
}

	@net/dhcp_dump.c

3 
	~<xöu.h
>

9 
	$dh˝_dump
(

10 
dh˝msg
* 
dmsg
,

11 
uöt32
 
dmsg_size


14 
uöt32
 
i
,
j
;

15 * 
›t_tmp
;

16 * 
eom
;

20 
	`k¥ötf
("DHCP Message Dump\n");

21 
	`k¥ötf
("OP: %d (0x%02X)\n", 
dmsg
->
dc_b›
, (
uöt8
)dmsg->dc_bop);

22 
	`k¥ötf
("HTYPE: %d (0x%02X)\n", 
dmsg
->
dc_hty≥
, (
uöt8
)dmsg->dc_htype);

23 
	`k¥ötf
("HLEN: %d (0x%02X)\n", 
dmsg
->
dc_hÀn
, (
uöt8
)dmsg->dc_hlen);

24 
	`k¥ötf
("HOPS: %d (0x%02X)\n", 
dmsg
->
dc_h›s
, (
uöt8
)dmsg->dc_hops);

25 
	`k¥ötf
("XID: %d (0x%08X)\n", 
	`¡ohl
(
dmsg
->
dc_xid
),Çtohl((
uöt32
)dmsg->dc_xid));

26 
	`k¥ötf
("SECS: %d (0x%04X)\n", 
dmsg
->
dc_£cs
, (
uöt16
)dmsg->dc_secs);

27 
	`k¥ötf
("FLAGS: %d (0x%04X)\n", 
dmsg
->
dc_Êags
, (
uöt16
)dmsg->dc_flags);

28 
	`k¥ötf
("Clõ¡ IP: %d (0x%08X)\n", 
	`¡ohl
(
dmsg
->
dc_cù
),Çtohl((
uöt32
)dmsg->dc_cip));

29 
	`k¥ötf
("You∏IP: %d (0x%08X)\n", 
	`¡ohl
(
dmsg
->
dc_yù
),Çtohl((
uöt32
)dmsg->dc_yip));

30 
	`k¥ötf
("Sîvî IP: %d (0x%08X)\n", 
	`¡ohl
(
dmsg
->
dc_sù
),Çtohl((
uöt32
)dmsg->dc_sip));

31 
	`k¥ötf
("G©eway IP: %d (0x%08X)\n", 
	`¡ohl
(
dmsg
->
dc_gù
),Çtohl((
uöt32
)dmsg->dc_gip));

32 
	`k¥ötf
("Client Hardware Address:\n ");

33 
i
 = 0; i < (
dmsg
->
dc_chaddr
); i++) {

34 
	`k¥ötf
("%02X", (
uöt8
)
dmsg
->
dc_chaddr
[
i
]);

36 
	`k¥ötf
("\n");

40 
	`k¥ötf
("BOOTP Sîvî Name: %.64s\n", 
dmsg
->
¢ame
);

41 
	`k¥ötf
("BOOTP FûêName: %.128s\n", 
dmsg
->
boŸfûe
);

42 
	`k¥ötf
("Magi¯Cookõ: %d (0x%08X)\n", 
dmsg
->
dc_cookõ
, (
uöt32
)dmsg->dc_cookie);

44 
eom
 = (*)
dmsg
 + 
dmsg_size
 - 1;

45 
›t_tmp
 = (*)
dmsg
->
dc_›t
;

49 
›t_tmp
 < 
eom
) {

51 *
›t_tmp
) {

53 
DHCP_PADDING
:

54 
DHCP_MESSAGE_END
:

55 
›t_tmp
++;

59 
DHCP_SUBNET_MASK
:

60 
	`k¥ötf
("DHCP Sub√àMask: %d (0x%08X)\n", 
	`¡ohl
(*(
uöt32
*)(
›t_tmp
+2)),Çtohl(*(uint32*)(opt_tmp+2)));

63 
DHCP_ROUTER
:

64 
j
 = *(
uöt8
*)(
›t_tmp
+1);

65 
i
 = 0; i < 
j
/4; i++) {

66 
	`k¥ötf
("DHCP Rouãr: %d (0x%08X)\n", 
	`¡ohl
(*(
uöt32
*)(
›t_tmp
+2+4*
i
)),Çtohl(*(uint32*)(opt_tmp+2+4*i)));

70 
DHCP_DNS_SERVER
:

71 
j
 = *(
uöt8
*)(
›t_tmp
+1);

72 
i
 = 0; i < 
j
/4; i++) {

73 
	`k¥ötf
("DHCP DNS Sîvî: %d (0x%08X)\n", 
	`¡ohl
(*(
uöt32
*)(
›t_tmp
+2+4*
i
)),Çtohl(*(uint32*)(opt_tmp+2+4*i)));

77 
DHCP_DOMAIN_NAME
:

78 
	`k¥ötf
("DHCP Domain Name: ");

79 
j
 = *(
uöt8
*)(
›t_tmp
+1);

80 
i
 = 0; i < 
j
; i++) {

81 
	`k¥ötf
("%c", *((*)(
›t_tmp
 + 2 + 
i
)));

83 
	`k¥ötf
("\n");

86 
DHCP_IP_ADDR_LEASE_TIME
:

87 
	`k¥ötf
("DHCP IP Ló£ Time: %d (0x%08X)\n", 
	`¡ohl
(*(
uöt32
*)(
›t_tmp
+2)),Çtohl(*(uint32*)(opt_tmp+2)));

90 
DHCP_RENEWAL_TIME_VALUE
:

91 
	`k¥ötf
("DHCP RíewÆ (T1ËTime: %d (0x%08X)\n", 
	`¡ohl
(*(
uöt32
*)(
›t_tmp
+2)),Çtohl(*(uint32*)(opt_tmp+2)));

94 
DHCP_REBINDING_TIME_VALUE
:

95 
	`k¥ötf
("DHCP Rebödög (T2ËTime: %d (0x%08X)\n", 
	`¡ohl
(*(
uöt32
*)(
›t_tmp
+2)),Çtohl(*(uint32*)(opt_tmp+2)));

98 
DHCP_MESSAGE_TYPE
:

99 
	`k¥ötf
("DHCP MesßgêTy≥: %d\n", *(
uöt8
*)(
›t_tmp
+2));

102 
DHCP_REQUESTED_IP
:

103 
	`k¥ötf
("DHCP Reque°ed IP: %d (0x%08X)\n", 
	`¡ohl
(*(
uöt32
*)(
›t_tmp
+2)),Çtohl(*(uint32*)(opt_tmp+2)));

106 
DHCP_SERVER_ID
:

107 
	`k¥ötf
("DHCP Sîvî ID: %d (0x%08X)\n", 
	`¡ohl
(*(
uöt32
*)(
›t_tmp
+2)),Çtohl(*(uint32*)(opt_tmp+2)));

110 
DHCP_VENDER_OPTIONS
:

111 
	`k¥ötf
("DHCP Vender Options List:\n");

112 
j
 = *(
uöt8
*)(
›t_tmp
+1);

113 
i
 = 0; i < 
j
; i++) {

114 
	`k¥ötf
(" %d\n", *(
uöt8
*)(
›t_tmp
+
i
+2));

118 
DHCP_PARAMETER_REQUEST_LIST
:

119 
	`k¥ötf
("DHCP Parameter List:\n");

120 
j
 = *(
uöt8
*)(
›t_tmp
+1);

121 
i
 = 0; i < 
j
; i++) {

122 
	`k¥ötf
(" %d\n", *(
uöt8
*)(
›t_tmp
+
i
+2));

126 
DHCP_VENDOR_CLASS_ID
:

127 
	`k¥ötf
("DHCP Cœs†Idítifõr: %.32s\n", (*)(
›t_tmp
+2));

131 
	`k¥ötf
("Unknow¿DHCP o±i⁄: %d\n", ()(*
›t_tmp
));

136 
›t_tmp
++;

137 
›t_tmp
 +*(
uöt8
*)opt_tmp + 1;

139 
	`k¥ötf
("\n");

140 
	}
}

	@net/dns.c

3 
	~<xöu.h
>

4 
	~<°rög.h
>

5 
	~<dns.h
>

7 
loˇl
 
uöt32
 
dns_bldq
(*, *);

8 
loˇl
 
uöt32
 
dns_gëa
(*, 
dn•kt
 *);

9 
loˇl
 
uöt32
 
dns_gë∫ame
(*, *, *);

15 
uöt32
 
	$dn¶ookup
 (

16 *
d«me


19 
dn•kt
 
qpkt
;

20 
dn•kt
 
Ωkt
;

21 
uöt32
 
nßddr
;

22 
uöt32
 
qÀn
;

23 
uid32
 
¶Ÿ
;

24 
öt32
 
æí
;

25 
uöt32
 
ùaddr
;

26 
öt32
 
ªtvÆ
;

27 
öt32
 
i
;

31 if(
d«me
 =
NULL
) {

32  (
uöt32
)
SYSERR
;

37 
ªtvÆ
 = 
	`gëloˇlù
();

38 
nßddr
 = 
NëD©a
.
dns£rvî
;

39 i‡–(
ªtvÆ
 =
SYSERR
Ë|| (
NëD©a
.
dns£rvî
 == 0) ) {

40 
	`k¥ötf
("Cannot findá DNS server\n");

41  (
uöt32
)
SYSERR
;

46 
¶Ÿ
 = 
	`udp_ªgi°î
(
nßddr
, 
DNSPORT
, 
DNSLPORT
);

47 if(
¶Ÿ
 =
SYSERR
) {

48  (
uöt32
)
SYSERR
;

53 
	`mem£t
((*)&
qpkt
, 0, (
dn•kt
));

55 
qpkt
.
id
 = 
cuºpid
;

56 
qpkt
.
rd
 = 1;

57 
qpkt
.
qucou¡
 = 
	`ht⁄s
(1);

59 
qÀn
 = 
	`dns_bldq
(
d«me
, 
qpkt
.
d©a
);

61 
ùaddr
 = (
uöt32
)
SYSERR
;

62 
i
 = 0; (
ùaddr
==(
uöt32
)
SYSERR
Ë&& (ò< 
DNSRETRY
); i++) {

66 
	`udp_£nd
(
¶Ÿ
, (*)&
qpkt
, 
qÀn
);

70 
æí
 = 
	`udp_ªcv
(
¶Ÿ
, (*)&
Ωkt
, (
dn•kt
),

71 
DNSTIMEOUT
);

72 i‡–(
æí
 =
SYSERR
Ë|| (æí =
TIMEOUT
) ) {

75 
ùaddr
 = 
	`dns_gëa
(
d«me
, &
Ωkt
);

77 
	`udp_ªÀa£
(
¶Ÿ
);

78  
	`¡ohl
(
ùaddr
);

79 
	}
}

85 
uöt32
 
	$dns_bldq
 (

86 *
d«me
,

87 *
d©a


90 
uöt32
 
qÀn
;

91 
uöt32
 
dÀn
;

92 
byã
 *
Œ±r
;

93 
öt32
 
i
;

94 
uöt16
 
tmp
;

98 
dÀn
 = 
	`°æí
(
d«me
);

102 
Œ±r
 = (
byã
*)(
d©a
++);

103 *
Œ±r
 = 0;

107 
qÀn
 = 1;

111 
i
 = 0; i < 
dÀn
; i++) {

113 if(
qÀn
 >
DNSDATASIZ
) {

114  (
uöt32
)
SYSERR
;

116 if(
d«me
[
i
] != '.') {

118 *
d©a
++ = 
d«me
[
i
];

119 *
Œ±r
 = *llptr + 1;

122 
Œ±r
 = (
byã
*)(
d©a
++);

123 *
Œ±r
 = 0;

125 
qÀn
++;

130 *
d©a
++ = 0;

131 
qÀn
++;

135 
tmp
 = 
	`ht⁄s
(
DNS_QT_A
);

136 
	`mem˝y
(
d©a
, (*)&
tmp
, 2);

137 
d©a
 += 2;

138 
qÀn
 += 2;

142 
tmp
 = 
	`ht⁄s
(
DNS_QC_IN
);

143 
	`mem˝y
(
d©a
, (*)&
tmp
, 2);

144 
qÀn
 += 2;

148  (
dn•kt
Ë- 
DNSDATASIZ
 + 
qÀn
;

149 
	}
}

155 
uöt32
 
	$dns_gëa
 (

156 *
d«me
,

157 
dn•kt
 *
Ωkt


160 
uöt16
 
qcou¡
;

161 
uöt16
 
tmp16
;

162 
uöt16
 
acou¡
;

163 
uöt32
 
ùaddr
;

164 *
d±r
;

165 
byã
 
Œí
;

166 
öt32
 
i
;

170 
	`mem˝y
((*)&
tmp16
, (*Ë&
Ωkt
->
qucou¡
, 2);

171 
qcou¡
 = 
	`¡ohs
(
tmp16
);

172 
d±r
 = 
Ωkt
->
d©a
;

176 
i
 = 0; i < 
qcou¡
; i++) {

180 
Œí
 = *((
byã
 *)
d±r
);

184 
Œí
 != 0) {

188 if(
Œí
 > 63) {

189 
d±r
 += 2;

195 
d±r
 +(
Œí
 + 1);

196 
Œí
 = *((
byã
 *)
d±r
);

201 i‡(
Œí
 == 0) {

202 
d±r
 += 1;

207 
d±r
 += (2 + 2);

212 
	`mem˝y
((*)&
tmp16
, (*)&
Ωkt
->
™cou¡
, 2);

213 
acou¡
 = 
	`¡ohs
(
tmp16
);

217 
ùaddr
 = 0;

221 
i
 = 0; i < 
acou¡
; i++) {

223 
∫ame
[1024];

224 
uöt16
 
tm±y≥
;

225 
uöt32
 
tmpù
;

226 
uöt16
 
tm∂í
;

227 
uöt32
 
«mÀn
;

233 
«mÀn
 = 
	`dns_gë∫ame
–(*)
Ωkt
, 
d±r
, 
∫ame
);

234 
d±r
 +
«mÀn
;

238 
	`mem˝y
((*)&
tm±y≥
, 
d±r
, 2);

239 if–(
	`°∫cmp
(
d«me
, 
∫ame
, 
	`°æí
(dname)) == 0) &&

240 (
	`¡ohs
(
tm±y≥
Ë=
DNS_QT_A
) ) {

244 
	`mem˝y
((*)&
tmpù
, 
d±r
+10, 4);

245 i‡((
ùaddr
 == 0) ||

246 ((
NëD©a
.
ùmask
&
	`¡ohl
(
tmpù
)) ==

247 
NëD©a
.
ù¥efix
) ) {

248 
ùaddr
 = 
tmpù
;

255 
d±r
 += 8;

259 
	`mem˝y
((*)&
tm∂í
, 
d±r
, 2);

260 
d±r
 +
	`¡ohs
(
tm∂í
) + 2;

263 i‡(
ùaddr
 != 0) {

264  
ùaddr
;

266  (
uöt32
)
SYSERR
;

268 
	}
}

274 
uöt32
 
	$dns_gë∫ame
 (

275 *
s›
,

276 *
s⁄
,

277 *
d°


280 
byã
 
Œí
;

281 
uöt16
 
tmpoff
;

282 
uöt16
 
off£t
;

283 *
ss⁄
;

284 
öt32
 
i
;

288 
ss⁄
 = 
s⁄
;

292 
Œí
 = *
s⁄
++;

296 
Œí
 != 0) {

298 if(
Œí
 <= 63) {

300 
i
 = 0; i < 
Œí
; i++) {

301 *
d°
++ = *
s⁄
++;

303 *
d°
++ = '.';

304 
Œí
 = *
s⁄
++;

307 
s⁄
--;

308 
	`mem˝y
–(*)&
tmpoff
, 
s⁄
, 2);

309 
off£t
 = 
	`¡ohs
(
tmpoff
) & 0x3fff;

310 
s⁄
 += 2;

311 
	`dns_gë∫ame
(
s›
, s›+
off£t
, 
d°
);

312  (
s⁄
-
ss⁄
);

318 
d°
--;

319 *
d°
 = 
NULLCH
;

321  (
uöt32
)(
s⁄
-
ss⁄
);

322 
	}
}

	@net/dot2ip.c

3 
	~<xöu.h
>

9 
uöt32
 
	$dŸ2ù
 (

10 *
dŸãd
,

11 
uöt32
 *
ªsu…


16 
öt32
 
£g
;

17 
öt32
 
nch
;

18 
ch
;

19 
uöt32
 
ùaddr
;

20 
öt32
 
vÆ
;

24 
ùaddr
 = 0;

25 
£g
=0 ; seg<4 ; seg++) {

26 
vÆ
 = 0;

27 
nch
=0 ;Çch<4;Çch++) {

28 
ch
 = *
dŸãd
++;

29 i‡–(
ch
==
NULLCH
) || (ch == '.') ) {

30 i‡(
nch
 == 0) {

31  
SYSERR
;

39 i‡–(
nch
>=3Ë|| (
ch
<'0') || (ch>'9') ) {

40  
SYSERR
;

42 
vÆ
 = 10*vÆ + (
ch
-'0');

45 i‡(
vÆ
 > 255) {

46  
SYSERR
;

48 
ùaddr
 = (ùadd∏<< 8Ë| 
vÆ
;

50 i‡(
ch
 =
NULLCH
) {

54 i‡–(
£g
 >4Ë|| (
ch
 !
NULLCH
) ) {

55  
SYSERR
;

57 *
ªsu…
 = 
ùaddr
;

58  
OK
;

59 
	}
}

	@net/hexdump.c

3 
	~<xöu.h
>

9 
	$hexdump
 (

10 *
p
, 
öt32
 
Àn


14 
öt32
 
i
;

15 
öt32
 
w‹d
;

17 
i
=0; i<6; i++) {

18 
	`k¥ötf
("%02x", 0xf‡& *
p
++);

20 
	`k¥ötf
(" ");

22 
i
=0; i<6; i++) {

23 
	`k¥ötf
("%02x", 0xf‡& *
p
++);

25 
	`k¥ötf
(" ");

27 
i
=0; i<2; i++) {

28 
	`k¥ötf
("%02x", 0xf‡& *
p
++);

30 
	`k¥ötf
("\t\tEnd Ethernet header\n");

32 
w‹d
=0,
i
=0; i<
Àn
; i++) {

33 i‡((
i
 % 4) == 0) {

34 
w‹d
++;

35 i‡(
w‹d
 == 6) {

36 
	`k¥ötf
("\tHV TOS LENGTH ID FRAG TTL PRO CKSUM IP_SRC IP_DST\n");

37 } i‡(
w‹d
==8) {

38 
	`k¥ötf
("\t\t\t\tSRC_PRT DEST-PORT LENGTH CKSUM\n");

39 
w‹d
 = 17;

40 } i‡((
w‹d
 % 16) ==0) {

41 
	`k¥ötf
("\n");

42 } i‡(
i
 != 0) {

43 
	`k¥ötf
(" ");

46 
	`k¥ötf
("%02x", 0xf‡& *
p
++);

48 
	`k¥ötf
("\n");

50 
	}
}

55 
	$hexadump
 (

56 *
p
, 
öt32
 
Àn


60 
öt32
 
i
;

62 
i
=0; i<6; i++) {

63 
	`k¥ötf
("%02x", 0xf‡& *
p
++);

65 
	`k¥ötf
(" ");

67 
i
=0; i<6; i++) {

68 
	`k¥ötf
("%02x", 0xf‡& *
p
++);

70 
	`k¥ötf
(" ");

72 
i
=0; i<2; i++) {

73 
	`k¥ötf
("%02x", 0xf‡& *
p
++);

75 
	`k¥ötf
("\t\tEnd Ethernet header\n");

78 
i
=0; i<2; i++) {

79 
	`k¥ötf
("%02x", 0xf‡& *
p
++);

81 
	`k¥ötf
(" ");

83 
i
=0; i<2; i++) {

84 
	`k¥ötf
("%02x", 0xf‡& *
p
++);

86 
	`k¥ötf
(" ");

87 
	`k¥ötf
("%02x ", 0xf‡& *
p
++);

88 
	`k¥ötf
("%02x ", 0xf‡& *
p
++);

90 
i
=0; i<2; i++) {

91 
	`k¥ötf
("%02x", 0xf‡& *
p
++);

93 
	`k¥ötf
(" ");

95 
	`k¥ötf
("\tHTYP PTYP HLEN PLEN OP\n");

99 
i
=0; i<6; i++) {

100 
	`k¥ötf
("%02x", 0xf‡& *
p
++);

102 
	`k¥ötf
(" ");

104 
i
=0; i<2; i++) {

105 
	`k¥ötf
("%02x", 0xf‡& *
p
++);

107 
	`k¥ötf
(" ");

109 
i
=0; i<6; i++) {

110 
	`k¥ötf
("%02x", 0xf‡& *
p
++);

112 
	`k¥ötf
(" ");

114 
i
=0; i<2; i++) {

115 
	`k¥ötf
("%02x", 0xf‡& *
p
++);

117 
	`k¥ötf
("\tSHA SPA THA TPA\n");

119 
	}
}

	@net/icmp.c

4 
	~<xöu.h
>

6 
icm≥¡ry
 
	gicm±ab
[
ICMP_SLOTS
];

12 
	$icmp_öô
() {

14 
öt32
 
i
;

16 
i
=0; i<
ICMP_SLOTS
; i++) {

17 
icm±ab
[
i
].
ic°©e
 = 
ICMP_FREE
;

20 
	}
}

26 
	$icmp_ö
(

27 
√çackë
 *
pkt


30 
ötmask
 
mask
;

31 
öt32
 
¶Ÿ
;

32 
icm≥¡ry
 *
icm±r
;

33 
√çackë
 *
ª∂ypkt
;

35 
mask
 = 
	`dißbÀ
();

39 i‡–(
pkt
->
√t_i˘y≥
 !
ICMP_ECHOREPLY
) &&

40 (
pkt
->
√t_i˘y≥
 !
ICMP_ECHOREQST
) ) {

41 
	`‰ìbuf
((*)
pkt
);

42 
	`ª°‹e
(
mask
);

48 i‡(
pkt
->
√t_i˘y≥
 =
ICMP_ECHOREQST
) {

52 
ª∂ypkt
 = 
	`icmp_mkpkt
(
pkt
->
√t_ù§c
,
ICMP_ECHOREPLY
,

53 
pkt
->
√t_icidít
,Ökt->
√t_ic£q
,

54 (*Ë&
pkt
->
√t_icd©a
,

55 
pkt
->
√t_ùÀn
-
IP_HDR_LEN
-
ICMP_HDR_LEN
);

56 i‡((
öt32
)
ª∂ypkt
 !
SYSERR
) {

57 
	`ù_íqueue
(
ª∂ypkt
);

59 
	`‰ìbuf
((*)
pkt
);

60 
	`ª°‹e
(
mask
);

66 
¶Ÿ
 = 
pkt
->
√t_icidít
;

67 i‡–(
¶Ÿ
 < 0Ë|| (¶Ÿ >
ICMP_SLOTS
) ) {

68 
	`‰ìbuf
((*)
pkt
);

69 
	`ª°‹e
(
mask
);

76 
icm±r
 = &
icm±ab
[
¶Ÿ
];

77 i‡–(
icm±r
->
ic°©e
 =
ICMP_FREE
) ||

78 (
pkt
->
√t_ù§c
 !
icm±r
->
i¸emù
) ) {

79 
	`‰ìbuf
((*)
pkt
);

80 
	`ª°‹e
(
mask
);

86 
icm±r
->
iccou¡
++;

87 
icm±r
->
icqueue
[icm±r->
i˘aû
++] = 
pkt
;

88 i‡(
icm±r
->
i˘aû
 >
ICMP_QSIZ
) {

89 
icm±r
->
i˘aû
 = 0;

91 i‡(
icm±r
->
ic°©e
 =
ICMP_RECV
) {

92 
icm±r
->
ic°©e
 = 
ICMP_USED
;

93 
	`£nd
 (
icm±r
->
i˝id
, 
OK
);

95 
	`ª°‹e
(
mask
);

97 
	}
}

103 
öt32
 
	$icmp_ªgi°î
 (

104 
uöt32
 
ªmù


107 
ötmask
 
mask
;

108 
öt32
 
i
;

109 
öt32
 
‰ì¶Ÿ
;

110 
icm≥¡ry
 *
icm±r
;

112 
mask
 = 
	`dißbÀ
();

116 
‰ì¶Ÿ
 = -1;

117 
i
=0; i<
ICMP_SLOTS
; i++) {

118 
icm±r
 = &
icm±ab
[
i
];

119 i‡(
icm±r
->
ic°©e
 =
ICMP_FREE
) {

120 i‡(
‰ì¶Ÿ
 == -1) {

121 
‰ì¶Ÿ
 = 
i
;

123 } i‡(
icm±r
->
i¸emù
 =
ªmù
) {

124 
	`ª°‹e
(
mask
);

125  
SYSERR
;

128 i‡(
‰ì¶Ÿ
 == -1) {

130 
	`ª°‹e
(
mask
);

131  
SYSERR
;

136 
icm±r
 = &
icm±ab
[
‰ì¶Ÿ
];

137 
icm±r
->
ic°©e
 = 
ICMP_USED
;

138 
icm±r
->
i¸emù
 = 
ªmù
;

139 
icm±r
->
iccou¡
 = 0;

140 
icm±r
->
ichód
 = icm±r->
i˘aû
 = 0;

141 
icm±r
->
i˝id
 = -1;

142 
	`ª°‹e
(
mask
);

143  
‰ì¶Ÿ
;

144 
	}
}

150 
öt32
 
	$icmp_ªcv
 (

151 
öt32
 
icmpid
,

152 *
buff
,

153 
öt32
 
Àn
,

154 
uöt32
 
timeout


157 
ötmask
 
mask
;

158 
icm≥¡ry
 *
icm±r
;

159 
umsg32
 
msg
;

160 
√çackë
 *
pkt
;

161 
öt32
 
d©Æí
;

162 *
icd©≠å
;

163 
öt32
 
i
;

167 i‡–(
icmpid
 < 0Ë|| (icmpid >
ICMP_SLOTS
) ) {

168  
SYSERR
;

173 
mask
 = 
	`dißbÀ
();

177 
icm±r
 = &
icm±ab
[
icmpid
];

178 i‡(
icm±r
->
ic°©e
 !
ICMP_USED
) {

179 
	`ª°‹e
(
mask
);

180  
SYSERR
;

183 i‡(
icm±r
->
iccou¡
 == 0) {

184 
icm±r
->
ic°©e
 = 
ICMP_RECV
;

185 
icm±r
->
i˝id
 = 
cuºpid
;

186 
msg
 = 
	`ªcv˛r
();

187 
msg
 = 
	`ªcvtime
(
timeout
);

188 
icm±r
->
ic°©e
 = 
ICMP_USED
;

189 i‡(
msg
 =
TIMEOUT
) {

190 
	`ª°‹e
(
mask
);

191  
TIMEOUT
;

192 } i‡(
msg
 !
OK
) {

193 
	`ª°‹e
(
mask
);

194  
SYSERR
;

200 
pkt
 = 
icm±r
->
icqueue
[icm±r->
ichód
++];

201 i‡(
icm±r
->
ichód
 >
ICMP_SLOTS
) {

202 
icm±r
->
ichód
 = 0;

204 
icm±r
->
iccou¡
--;

208 
d©Æí
 = 
pkt
->
√t_ùÀn
 - 
IP_HDR_LEN
 - 
ICMP_HDR_LEN
;

209 
icd©≠å
 = (*Ë&
pkt
->
√t_icd©a
;

210 
i
=0; i<
d©Æí
; i++) {

211 i‡(
i
 >
Àn
) {

214 *
buff
++ = *
icd©≠å
++;

216 
	`‰ìbuf
((*)
pkt
);

217 
	`ª°‹e
(
mask
);

218  
i
;

219 
	}
}

225 
°©us
 
	$icmp_£nd
 (

226 
uöt32
 
ªmù
,

227 
uöt16
 
ty≥
,

228 
uöt16
 
idít
,

229 
uöt16
 
£q
,

230 *
buf
,

231 
öt32
 
Àn


234 
ötmask
 
mask
;

235 
√çackë
 *
pkt
;

236 
öt32
 
ªtvÆ
;

238 
mask
 = 
	`dißbÀ
();

242 
pkt
 = 
	`icmp_mkpkt
(
ªmù
, 
ty≥
, 
idít
, 
£q
, 
buf
, 
Àn
);

243 i‡((
öt32
)
pkt
 =
SYSERR
) {

244  
SYSERR
;

249 
ªtvÆ
 = 
	`ù_£nd
(
pkt
);

250 
	`ª°‹e
(
mask
);

251  
ªtvÆ
;

252 
	}
}

259 
√çackë
 *
	$icmp_mkpkt
 (

260 
uöt32
 
ªmù
,

261 
uöt16
 
ty≥
,

262 
uöt16
 
idít
,

263 
uöt16
 
£q
,

264 *
buf
,

265 
öt32
 
Àn


268 
√çackë
 *
pkt
;

269 
uöt32
 
ùidít
=32767;

273 
pkt
 = (
√çackë
 *)
	`gëbuf
(
√tbuÂoﬁ
);

275 i‡((
öt32
)
pkt
 =
SYSERR
) {

276 
	`∑nic
("icmp_mkpkt: cannot getáÇetwork buffer\n");

281 
	`mem˝y
(
pkt
->
√t_ëh§c
, 
NëD©a
.
ëhuˇ°
, 
ETH_ADDR_LEN
);

282 
pkt
->
√t_ëhty≥
 = 0x800;

283 
pkt
->
√t_ùvh
 = 0x45;

284 
pkt
->
√t_ùtos
 = 0x00;

285 
pkt
->
√t_ùÀn

IP_HDR_LEN
+
ICMP_HDR_LEN
+
Àn
;

286 
pkt
->
√t_ùid
 = 
ùidít
++;

287 
pkt
->
√t_ù‰ag
 = 0x0000;

288 
pkt
->
√t_ùâl
 = 0xff;

289 
pkt
->
√t_ù¥Ÿo
 = 
IP_ICMP
;

290 
pkt
->
√t_ùcksum
 = 0x0000;

291 
pkt
->
√t_ù§c
 = 
NëD©a
.
ùuˇ°
;

292 
pkt
->
√t_ùd°
 = 
ªmù
;

295 
pkt
->
√t_i˘y≥
 = 
ty≥
;

296 
pkt
->
√t_iccode
 = 0;

297 
pkt
->
√t_iccksum
 = 0x0000;

298 
pkt
->
√t_icidít
 = 
idít
;

299 
pkt
->
√t_ic£q
 = 
£q
;

300 
	`mem˝y
(
pkt
->
√t_icd©a
, 
buf
, 
Àn
);

304  
pkt
;

305 
	}
}

312 
°©us
 
	$icmp_ªÀa£
 (

313 
öt32
 
icmpid


316 
ötmask
 
mask
;

317 
icm≥¡ry
 *
icm±r
;

318 
√çackë
 *
pkt
;

320 
mask
 = 
	`dißbÀ
();

324 i‡–(
icmpid
 < 0Ë|| (icmpid >
ICMP_SLOTS
) ) {

325 
	`ª°‹e
(
mask
);

326  
SYSERR
;

328 
icm±r
 = &
icm±ab
[
icmpid
];

329 i‡(
icm±r
->
ic°©e
 !
ICMP_USED
) {

330 
	`ª°‹e
(
mask
);

331  
SYSERR
;

336 
	`ªsched_˙é
(
DEFER_START
);

337 
icm±r
->
iccou¡
 > 0) {

338 
pkt
 = 
icm±r
->
icqueue
[icm±r->
ichód
++];

339 i‡(
icm±r
->
ichód
 >
ICMP_SLOTS
) {

340 
icm±r
->
ichód
 = 0;

343 
	`‰ìbuf
((*)
pkt
);

344 
icm±r
->
iccou¡
--;

349 
icm±r
->
ic°©e
 = 
ICMP_FREE
;

350 
	`ªsched_˙é
(
DEFER_STOP
);

351 
	`ª°‹e
(
mask
);

352  
OK
;

353 
	}
}

359 
uöt16
 
	$icmp_cksum
 (

360 *
buf
,

361 
öt32
 
buÊí


364 
öt32
 
scou¡
;

365 
uöt32
 
cksum
;

366 
uöt16
 *
•å
;

367 
uöt16
 
w‹d
;

371 
scou¡
 = 
buÊí
 >> 1;

372 
•å
 = (
uöt16
 *)
buf
;

373 
cksum
 = 0;

374 ; 
scou¡
 > 0; scount--) {

375 
w‹d
 = (
uöt32
Ë*
•å
++;

376 
cksum
 +
	`¡ohs
(
w‹d
);

381 i‡–(
buÊí
 & 0x01) !=0 ) {

382 
cksum
 +0xFFFF & ((
uöt32
Ë(*((
byã
 *Ë
•å
) << 8));

384 
cksum
 += (cksum >> 16);

385 
cksum
 = 0xffff & ~cksum;

386  (
uöt16
Ë(0xfff‡& 
cksum
);

387 
	}
}

394 
	$icmp_ht⁄
 (

395 
√çackë
 *
pkçå


398 
pkçå
->
√t_iccksum
 = 
	`ht⁄s
(pktptr->net_iccksum);

399 
pkçå
->
√t_icidít
 = 
	`ht⁄s
(pktptr->net_icident);

400 
pkçå
->
√t_ic£q
 = 
	`ht⁄s
(pktptr->net_icseq);

401 
	}
}

408 
	$icmp_¡oh
 (

409 
√çackë
 *
pkçå


412 
pkçå
->
√t_iccksum
 = 
	`¡ohs
(pktptr->net_iccksum);

413 
pkçå
->
√t_icidít
 = 
	`¡ohs
(pktptr->net_icident);

414 
pkçå
->
√t_ic£q
 = 
	`¡ohs
(pktptr->net_icseq);

415 
	}
}

	@net/ip.c

4 
	~<xöu.h
>

6 
iqíåy
 
	gùoqueue
;

13 
	$ù_ö
(

14 
√çackë
 *
pkçå


17 
öt32
 
icm∂í
;

21 i‡(
	`ùcksum
(
pkçå
) != 0) {

22 
	`k¥ötf
("IP header checksum failed\n\r");

23 
	`‰ìbuf
((*)
pkçå
);

29 
	`ù_¡oh
(
pkçå
);

33 i‡(
pkçå
->
√t_ùvh
 != 0x45) {

34 
	`k¥ötf
("IP version failed\n\r");

35 
	`‰ìbuf
((*)
pkçå
);

42 
pkçå
->
√t_ù¥Ÿo
) {

44 
IP_UDP
:

46 
	`udp_¡oh
(
pkçå
);

49 
IP_ICMP
:

50 
icm∂í
 = 
pkçå
->
√t_ùÀn
 - 
IP_HDR_LEN
;

51 i‡(
	`icmp_cksum
((*)&
pkçå
->
√t_i˘y≥
,
icm∂í
) != 0){

52 
	`‰ìbuf
((*)
pkçå
);

55 
	`icmp_¡oh
(
pkçå
);

64 i‡(
pkçå
->
√t_ùd°
 =
IP_BCAST
) {

65 
	`ù_loˇl
(
pkçå
);

72 i‡(!
NëD©a
.
ùvÆid
) {

73 i‡(
pkçå
->
√t_ù¥Ÿo
 =
IP_UDP
) {

74 
	`ù_loˇl
(
pkçå
);

77 
	`‰ìbuf
((*)
pkçå
);

84 i‡–(
pkçå
->
√t_ùd°
 =
NëD©a
.
ùuˇ°
) ||

85 (
pkçå
->
√t_ùd°
 =
NëD©a
.
ùbˇ°
) ||

86 (
pkçå
->
√t_ùd°
 =
IP_BCAST
) ) {

87 
	`ù_loˇl
(
pkçå
);

92 
	`‰ìbuf
((*)
pkçå
);

95 
	}
}

103 
°©us
 
	$ù_£nd
(

104 
√çackë
 *
pkçå


107 
ötmask
 
mask
;

108 
uöt32
 
de°
;

109 
öt32
 
ªtvÆ
;

110 
uöt32
 
nxth›
;

112 
mask
 = 
	`dißbÀ
();

116 
de°
 = 
pkçå
->
√t_ùd°
;

120 i‡((
de°
&0xff000000) == 0x7f000000) {

121 
	`ù_loˇl
(
pkçå
);

122 
	`ª°‹e
(
mask
);

123  
OK
;

128 i‡(
de°
 =
NëD©a
.
ùuˇ°
) {

129 
	`ù_loˇl
(
pkçå
);

130 
	`ª°‹e
(
mask
);

131  
OK
;

136 i‡–(
de°
 =
IP_BCAST
) ||

137 (
de°
 =
NëD©a
.
ùbˇ°
) ) {

138 
	`mem˝y
(
pkçå
->
√t_ëhd°
, 
NëD©a
.
ëhbˇ°
,

139 
ETH_ADDR_LEN
);

140 
ªtvÆ
 = 
	`ù_out
(
pkçå
);

141 
	`ª°‹e
(
mask
);

142  
ªtvÆ
;

149 i‡–(
de°
 & 
NëD©a
.
ùmask
Ë=NëD©a.
ù¥efix
) {

152 
nxth›
 = 
de°
;

157 
nxth›
 = 
NëD©a
.
ùrouãr
;

161 i‡(
nxth›
 == 0) {

162 
	`‰ìbuf
((*)
pkçå
);

163  
SYSERR
;

168 
ªtvÆ
 = 
	`¨p_ªsﬁve
(
nxth›
, 
pkçå
->
√t_ëhd°
);

169 i‡(
ªtvÆ
 !
OK
) {

170 
	`‰ìbuf
((*)
pkçå
);

171  
SYSERR
;

176 
ªtvÆ
 = 
	`ù_out
(
pkçå
);

177 
	`ª°‹e
(
mask
);

178  
ªtvÆ
;

179 
	}
}

186 
	$ù_loˇl
(

187 
√çackë
 *
pkçå


192 
pkçå
->
√t_ù¥Ÿo
) {

194 
IP_UDP
:

195 
	`udp_ö
(
pkçå
);

198 
IP_ICMP
:

199 
	`icmp_ö
(
pkçå
);

203 
	`‰ìbuf
((*)
pkçå
);

206 
	}
}

213 
°©us
 
	$ù_out
(

214 
√çackë
 *
pkçå


217 
uöt16
 
cksum
;

218 
öt32
 
Àn
;

219 
öt32
 
pkéí
;

220 
öt32
 
ªtvÆ
;

224 
pkéí
 = 
pkçå
->
√t_ùÀn
 + 
ETH_HDR_LEN
;

228 
pkçå
->
√t_ù¥Ÿo
) {

230 
IP_UDP
:

232 
pkçå
->
√t_udpcksum
 = 0;

233 
	`udp_ht⁄
(
pkçå
);

239 
IP_ICMP
:

240 
	`icmp_ht⁄
(
pkçå
);

244 
pkçå
->
√t_iccksum
 = 0;

245 
Àn
 = 
pkçå
->
√t_ùÀn
-
IP_HDR_LEN
;

246 
cksum
 = 
	`icmp_cksum
((*)&
pkçå
->
√t_i˘y≥
,

247 
Àn
);

248 
pkçå
->
√t_iccksum
 = 0xfff‡& 
	`ht⁄s
(
cksum
);

257 
	`ù_ht⁄
(
pkçå
);

261 
pkçå
->
√t_ùcksum
 = 0;

262 
cksum
 = 
	`ùcksum
(
pkçå
);

263 
pkçå
->
√t_ùcksum
 = 0xfff‡& 
	`ht⁄s
(
cksum
);

267 
	`ëh_ht⁄
(
pkçå
);

271 
ªtvÆ
 = 
	`wrôe
(
ETHER0
, (*)
pkçå
, 
pkéí
);

272 
	`‰ìbuf
((*)
pkçå
);

274 i‡(
ªtvÆ
 =
SYSERR
) {

275  
SYSERR
;

277  
OK
;

279 
	}
}

286 
uöt16
 
	$ùcksum
(

287 
√çackë
 *
pkt


290 
uöt16
 *
h±r
;

291 
öt32
 
i
;

292 
uöt16
 
w‹d
;

293 
uöt32
 
cksum
;

295 
h±r
(
uöt16
 *Ë&
pkt
->
√t_ùvh
;

299 
cksum
 = 0;

300 
i
=0; i<10; i++) {

301 
w‹d
 = *
h±r
++;

302 
cksum
 +(
uöt32
Ë
	`ht⁄s
(
w‹d
);

307 
cksum
 += (cksum >> 16);

308 
cksum
 = 0xffff & ~cksum;

312 i‡(
cksum
 == 0xffff) {

313 
cksum
 = 0;

315  (
uöt16
Ë(0xfff‡& 
cksum
);

316 
	}
}

323 
	$ù_¡oh
(

324 
√çackë
 *
pkçå


327 
pkçå
->
√t_ùÀn
 = 
	`¡ohs
(pktptr->net_iplen);

328 
pkçå
->
√t_ùid
 = 
	`¡ohs
(pktptr->net_ipid);

329 
pkçå
->
√t_ù‰ag
 = 
	`¡ohs
(pktptr->net_ipfrag);

330 
pkçå
->
√t_ù§c
 = 
	`¡ohl
(pktptr->net_ipsrc);

331 
pkçå
->
√t_ùd°
 = 
	`¡ohl
(pktptr->net_ipdst);

332 
	}
}

338 
	$ù_ht⁄
(

339 
√çackë
 *
pkçå


343 
pkçå
->
√t_ùÀn
 = 
	`ht⁄s
(pktptr->net_iplen);

344 
pkçå
->
√t_ùid
 = 
	`ht⁄s
(pktptr->net_ipid);

345 
pkçå
->
√t_ù‰ag
 = 
	`ht⁄s
(pktptr->net_ipfrag);

346 
pkçå
->
√t_ù§c
 = 
	`ht⁄l
(pktptr->net_ipsrc);

347 
pkçå
->
√t_ùd°
 = 
	`ht⁄l
(pktptr->net_ipdst);

348 
	}
}

356 
¥o˚ss
 
	$ùout
()

358 
√çackë
 *
pkçå
;

359 
iqíåy
 *
ùq±r
;

360 
uöt32
 
de°ù
;

361 
uöt32
 
nxth›
;

362 
öt32
 
ªtvÆ
;

364 
ùq±r
 = &
ùoqueue
;

370 
	`waô
(
ùq±r
->
iq£m
);

371 
pkçå
 = 
ùq±r
->
iqbuf
[ùq±r->
iqhód
++];

372 i‡(
ùq±r
->
iqhód
 >
IP_OQSIZ
) {

373 
ùq±r
->
iqhód
= 0;

378 
	`mem˝y
(
pkçå
->
√t_ëh§c
, 
NëD©a
.
ëhuˇ°
, 
ETH_ADDR_LEN
);

382 
de°ù
 = 
pkçå
->
√t_ùd°
;

388 i‡((
de°ù
 =
IP_BCAST
)||(de°ù =
NëD©a
.
ùbˇ°
)) {

389 
	`k¥ötf
("ipout:Éncounteredá broadcast\n");

390 
	`‰ìbuf
((*)
pkçå
);

396 i‡(
de°ù
 =
NëD©a
.
ùuˇ°
) {

397 
	`ù_loˇl
(
pkçå
);

403 i‡–(
de°ù
 & 
NëD©a
.
ùmask
Ë=NëD©a.
ù¥efix
) {

407 
nxth›
 = 
de°ù
;

412 
nxth›
 = 
NëD©a
.
ùrouãr
;

415 i‡(
nxth›
 == 0) {

416 
	`‰ìbuf
((*)
pkçå
);

422 
ªtvÆ
 = 
	`¨p_ªsﬁve
(
nxth›
, 
pkçå
->
√t_ëhd°
);

423 i‡(
ªtvÆ
 !
OK
) {

424 
	`‰ìbuf
((*)
pkçå
);

430 
	`ù_out
(
pkçå
);

432 
	}
}

439 
°©us
 
	$ù_íqueue
(

440 
√çackë
 *
pkçå


443 
ötmask
 
mask
;

444 
iqíåy
 *
ùå
;

448 
mask
 = 
	`dißbÀ
();

452 
ùå
 = &
ùoqueue
;

453 i‡(
	`£mcou¡
(
ùå
->
iq£m
Ë>
IP_OQSIZ
) {

454 
	`k¥ötf
("ipout: output queue overflow\n");

455 
	`‰ìbuf
((*)
pkçå
);

456 
	`ª°‹e
(
mask
);

457  
SYSERR
;

459 
ùå
->
iqbuf
[ùå->
iqèû
++] = 
pkçå
;

460 i‡(
ùå
->
iqèû
 >
IP_OQSIZ
) {

461 
ùå
->
iqèû
 = 0;

463 
	`sig«l
(
ùå
->
iq£m
);

464 
	`ª°‹e
(
mask
);

465  
OK
;

466 
	}
}

	@net/net.c

3 
	~<xöu.h
>

4 
	~<°dio.h
>

6 
√tw‹k
 
	gNëD©a
;

7 
bpid32
 
	g√tbuÂoﬁ
;

8 
uöt64
 
	g√ç‹t£ed
;

15 
	$√t_öô
 ()

17 
öt32
 
nbufs
;

21 
	`mem£t
((*)&
NëD©a
, 
NULLCH
, (
√tw‹k
));

25 
	`c⁄åﬁ
(
ETHER0
, 
ETH_CTRL_GET_MAC
, (
öt32
)
NëD©a
.
ëhuˇ°
, 0);

27 
	`mem£t
((*)
NëD©a
.
ëhbˇ°
, 0xFF, 
ETH_ADDR_LEN
);

31 
√ç‹t£ed
 = 
	`gëticks
();

35 
nbufs
 = 
UDP_SLOTS
 * 
UDP_QSIZ
 + 
ICMP_SLOTS
 * 
ICMP_QSIZ
 + 1;

37 
√tbuÂoﬁ
 = 
	`mkbuÂoﬁ
(
PACKLEN
, 
nbufs
);

41 
	`¨p_öô
();

45 
	`udp_öô
();

49 
	`icmp_öô
();

53 
ùoqueue
.
iqhód
 = 0;

54 
ùoqueue
.
iqèû
 = 0;

55 
ùoqueue
.
iq£m
 = 
	`£m¸óã
(0);

56 if((
öt32
)
ùoqueue
.
iq£m
 =
SYSERR
) {

57 
	`∑nic
("Cannot create ip output queue semaphore");

63 
	`ªsume
(
	`¸óã
(
ùout
, 
NETSTK
, 
NETPRIO
, "ùout", 0, 
NULL
));

67 
	`ªsume
(
	`¸óã
(
√tö
, 
NETSTK
, 
NETPRIO
, "√tö", 0, 
NULL
));

68 
	}
}

76 
¥o˚ss
 
	$√tö
 ()

78 
√çackë
 *
pkt
;

79 
öt32
 
ªtvÆ
;

87 
pkt
 = (
√çackë
 *)
	`gëbuf
(
√tbuÂoﬁ
);

91 
ªtvÆ
 = 
	`ªad
(
ETHER0
, (*)
pkt
, 
PACKLEN
);

92 if(
ªtvÆ
 =
SYSERR
) {

93 
	`∑nic
("CannotÑead from Ethernet\n");

98 
	`ëh_¡oh
(
pkt
);

102 
pkt
->
√t_ëhty≥
) {

104 
ETH_ARP
:

105 
	`¨p_ö
((
¨µackë
 *)
pkt
);

108 
ETH_IP
:

109 
	`ù_ö
(
pkt
);

112 
ETH_IPv6
:

113 
	`‰ìbuf
((*)
pkt
);

117 
	`‰ìbuf
((*)
pkt
);

121 
	}
}

127 
	$ëh_ht⁄
(

128 
√çackë
 *
pkçå


131 
pkçå
->
√t_ëhty≥
 = 
	`ht⁄s
(pktptr->net_ethtype);

132 
	}
}

139 
	$ëh_¡oh
(

140 
√çackë
 *
pkçå


143 
pkçå
->
√t_ëhty≥
 = 
	`¡ohs
(pktptr->net_ethtype);

144 
	}
}

150 
uöt16
 
	$gëp‹t
()

152 
√ç‹t£ed
 = 6364136223846793005ULL *Çetportseed + 1;

153  50000 + ((
uöt16
)((
√ç‹t£ed
 >> 48)) % 15535);

154 
	}
}

	@net/pdump.c

3 
	~<xöu.h
>

9 
	$pdump
(
√çackë
 *
µå
)

11 
¨µackë
 *
≠å
;

13 
	`k¥ötf
("%02x:%02x:%02x:%02x:%02x:%02x >",

14 
µå
->
√t_ëh§c
[0],

15 
µå
->
√t_ëh§c
[1],

16 
µå
->
√t_ëh§c
[2],

17 
µå
->
√t_ëh§c
[3],

18 
µå
->
√t_ëh§c
[4],

19 
µå
->
√t_ëh§c
[5]

21 
	`k¥ötf
(" %02x:%02x:%02x:%02x:%02x:%02x, ",

22 
µå
->
√t_ëhd°
[0],

23 
µå
->
√t_ëhd°
[1],

24 
µå
->
√t_ëhd°
[2],

25 
µå
->
√t_ëhd°
[3],

26 
µå
->
√t_ëhd°
[4],

27 
µå
->
√t_ëhd°
[5]

30 
	`k¥ötf
("ethertype ");

32 
	`¡ohs
(
µå
->
√t_ëhty≥
)) {

35 
	`k¥ötf
("ARP (0x%04x),Üength %d: ",

36 
	`¡ohs
(
µå
->
√t_ëhty≥
),

37 (
¨µackë
));

38 
≠å
 = (
¨µackë
 *)
µå
;

40 i‡–(
	`¡ohs
(
≠å
->
¨p_hty≥
Ë!
ARP_HTYPE
) ||

41 (
	`¡ohs
(
≠å
->
¨p_±y≥
Ë!
ARP_PTYPE
) ) {

45 
	`k¥ötf
("hardáddrÜen=%d),ÖrotoáddrÜen=%d), ",

46 
≠å
->
¨p_hÀn
,

47 
≠å
->
¨p_∂í
);

49 i‡(
	`¡ohs
(
≠å
->
¨p_›
Ë=
ARP_OP_REQ
) {

50 
	`k¥ötf
("Request who-has %d.%d.%d.%dÅell %d.%d.%d.%d, ",

51 (
	`¡ohl
(
≠å
->
¨p_èΩa
)>>24)&0xff,

52 (
	`¡ohl
(
≠å
->
¨p_èΩa
)>>16)&0xff,

53 (
	`¡ohl
(
≠å
->
¨p_èΩa
)>>8)&0xff,

54 
	`¡ohl
(
≠å
->
¨p_èΩa
)&0xff,

55 (
	`¡ohl
(
≠å
->
¨p_¢d∑
)>>24)&0xff,

56 (
	`¡ohl
(
≠å
->
¨p_¢d∑
)>>16)&0xff,

57 (
	`¡ohl
(
≠å
->
¨p_¢d∑
)>>8)&0xff,

58 
	`¡ohl
(
≠å
->
¨p_¢d∑
)&0xff);

59 } i‡(
	`¡ohs
(
≠å
->
¨p_›
Ë=
ARP_OP_RPLY
) {

60 
	`k¥ötf
("Reply %d.%d.%d.%d is-at %02x:%02x:%02x:%02x:%02x:%02x, ",

61 (
	`¡ohl
(
≠å
->
¨p_¢d∑
)>>24)&0xff,

62 (
	`¡ohl
(
≠å
->
¨p_¢d∑
)>>16)&0xff,

63 (
	`¡ohl
(
≠å
->
¨p_¢d∑
)>>8)&0xff,

64 
	`¡ohl
(
≠å
->
¨p_¢d∑
)&0xff,

65 
≠å
->
¨p_¢dha
[0],

66 
≠å
->
¨p_¢dha
[1],

67 
≠å
->
¨p_¢dha
[2],

68 
≠å
->
¨p_¢dha
[3],

69 
≠å
->
¨p_¢dha
[4],

70 
≠å
->
¨p_¢dha
[5]);

75 
	`k¥ötf
("Àngth %d\n", (
¨µackë
Ë- 
ETH_HDR_LEN
);

79 
	`k¥ötf
("IPv4 (0x%04x),Üength %d: ",

80 
	`¡ohs
(
µå
->
√t_ëhty≥
),

81 
	`¡ohs
(
µå
->
√t_ùÀn
Ë+ 
ETH_HDR_LEN
);

83 
	`k¥ötf
("(");

84 
	`k¥ötf
("tos 0x%01x,Åtl %d, id %d, offset %d ",

85 
µå
->
√t_ùtos
,

86 
µå
->
√t_ùâl
,

87 
	`¡ohs
(
µå
->
√t_ùid
),

88 (
	`¡ohs
(
µå
->
√t_ù‰ag
) & 0x1fff));

90 
	`k¥ötf
("flags ");

91 i‡(
	`¡ohs
(
µå
->
√t_ù‰ag
) & 0x4000)

92 
	`k¥ötf
("[DF], ");

93 i‡(
	`¡ohs
(
µå
->
√t_ù‰ag
) & 0x2000)

94 
	`k¥ötf
("[MF], " );

96 
	`k¥ötf
("[none], ");

98 
	`k¥ötf
("[ip checksum %s], ",

99 
	`ùcksum
(
µå
) == 0 ? "ok" : "fail");

101 i‡(
µå
->
√t_ù¥Ÿo
 =
IP_UDP
) {

102 
	`k¥ötf
("proto UDP (%d),Üength %d",

103 
µå
->
√t_ù¥Ÿo
, 
	`¡ohs
’±r->
√t_ùÀn
));

104 
	`k¥ötf
(")\n");

105 
	`k¥ötf
("\t%d.%d.%d.%d > ",

106 (
	`¡ohl
(
µå
->
√t_ù§c
)>>24)&0xff,

107 (
	`¡ohl
(
µå
->
√t_ù§c
)>>16)&0xff,

108 (
	`¡ohl
(
µå
->
√t_ù§c
)>>8)&0xff,

109 (
	`¡ohl
(
µå
->
√t_ù§c
)&0xff));

110 
	`k¥ötf
("%d.%d.%d.%d: ",

111 (
	`¡ohl
(
µå
->
√t_ùd°
)>>24)&0xff,

112 (
	`¡ohl
(
µå
->
√t_ùd°
)>>16)&0xff,

113 (
	`¡ohl
(
µå
->
√t_ùd°
)>>8)&0xff,

114 (
	`¡ohl
(
µå
->
√t_ùd°
)&0xff));

115 
	`k¥ötf
("[udp checksumÇone] ");

116 
	`k¥ötf
("UDP, srcÖort %d, dstÖort %d,Üength %d\n",

117 
	`¡ohs
(
µå
->
√t_udp•‹t
),

118 
	`¡ohs
(
µå
->
√t_udpdp‹t
),

119 
	`¡ohs
(
µå
->
√t_ud∂í
Ë- 
UDP_HDR_LEN
);

121 } i‡(
µå
->
√t_ù¥Ÿo
 =
IP_ICMP
) {

122 
	`k¥ötf
("proto ICMP (%d),Üength %d",

123 
µå
->
√t_ù¥Ÿo
, 
	`¡ohs
’±r->
√t_ùÀn
));

124 
	`k¥ötf
(")\n");

125 
	`k¥ötf
("\t%d.%d.%d.%d > ",

126 (
	`¡ohl
(
µå
->
√t_ù§c
)>>24)&0xff,

127 (
	`¡ohl
(
µå
->
√t_ù§c
)>>16)&0xff,

128 (
	`¡ohl
(
µå
->
√t_ù§c
)>>8)&0xff,

129 (
	`¡ohl
(
µå
->
√t_ù§c
)&0xff));

130 
	`k¥ötf
("%d.%d.%d.%d: ",

131 (
	`¡ohl
(
µå
->
√t_ùd°
)>>24)&0xff,

132 (
	`¡ohl
(
µå
->
√t_ùd°
)>>16)&0xff,

133 (
	`¡ohl
(
µå
->
√t_ùd°
)>>8)&0xff,

134 (
	`¡ohl
(
µå
->
√t_ùd°
)&0xff));

136 i‡(
µå
->
√t_i˘y≥
 =
ICMP_ECHOREQST
)

137 
	`k¥ötf
("ICMPÉchoÑequest, ");

138 i‡(
µå
->
√t_i˘y≥
 =
ICMP_ECHOREPLY
)

139 
	`k¥ötf
("ICMPÉchoÑeply, ");

143 
	`k¥ötf
("id %d, seq %d\n",

144 
	`¡ohs
(
µå
->
√t_icidít
),

145 
	`¡ohs
(
µå
->
√t_ic£q
));

152 
	`k¥ötf
("unknown\n");

158 
	}
}

164 
	$pdumph
(
√çackë
 *
µå
)

166 
¨µackë
 *
≠å
;

168 
	`k¥ötf
("%02x:%02x:%02x:%02x:%02x:%02x >",

169 
µå
->
√t_ëh§c
[0],

170 
µå
->
√t_ëh§c
[1],

171 
µå
->
√t_ëh§c
[2],

172 
µå
->
√t_ëh§c
[3],

173 
µå
->
√t_ëh§c
[4],

174 
µå
->
√t_ëh§c
[5]

176 
	`k¥ötf
(" %02x:%02x:%02x:%02x:%02x:%02x, ",

177 
µå
->
√t_ëhd°
[0],

178 
µå
->
√t_ëhd°
[1],

179 
µå
->
√t_ëhd°
[2],

180 
µå
->
√t_ëhd°
[3],

181 
µå
->
√t_ëhd°
[4],

182 
µå
->
√t_ëhd°
[5]

185 
	`k¥ötf
("ethertype ");

187 
µå
->
√t_ëhty≥
) {

190 
	`k¥ötf
("ARP (0x%04x),Üength %d: ",

191 
µå
->
√t_ëhty≥
,

192 (
¨µackë
));

193 
≠å
 = (
¨µackë
 *)
µå
;

195 i‡–(
≠å
->
¨p_hty≥
 !
ARP_HTYPE
) ||

196 (
≠å
->
¨p_±y≥
 !
ARP_PTYPE
) ) {

200 
	`k¥ötf
("hardáddrÜen=%d),ÖrotoáddrÜen=%d), ",

201 
≠å
->
¨p_hÀn
,

202 
≠å
->
¨p_∂í
);

204 i‡(
≠å
->
¨p_›
 =
ARP_OP_REQ
) {

205 
	`k¥ötf
("Request who-has %d.%d.%d.%dÅell %d.%d.%d.%d, ",

206 (
≠å
->
¨p_èΩa
>>24)&0xff,

207 (
≠å
->
¨p_èΩa
>>16)&0xff,

208 (
≠å
->
¨p_èΩa
>>8)&0xff,

209 
≠å
->
¨p_èΩa
&0xff,

210 (
≠å
->
¨p_¢d∑
>>24)&0xff,

211 (
≠å
->
¨p_¢d∑
>>16)&0xff,

212 (
≠å
->
¨p_¢d∑
>>8)&0xff,

213 
≠å
->
¨p_¢d∑
&0xff);

214 } i‡(
≠å
->
¨p_›
 =
ARP_OP_RPLY
) {

215 
	`k¥ötf
("Reply %d.%d.%d.%d is-at %02x:%02x:%02x:%02x:%02x:%02x, ",

216 (
≠å
->
¨p_¢d∑
>>24)&0xff,

217 (
≠å
->
¨p_¢d∑
>>16)&0xff,

218 (
≠å
->
¨p_¢d∑
>>8)&0xff,

219 
≠å
->
¨p_¢d∑
&0xff,

220 
≠å
->
¨p_¢dha
[0],

221 
≠å
->
¨p_¢dha
[1],

222 
≠å
->
¨p_¢dha
[2],

223 
≠å
->
¨p_¢dha
[3],

224 
≠å
->
¨p_¢dha
[4],

225 
≠å
->
¨p_¢dha
[5]);

230 
	`k¥ötf
("Àngth %d\n", (
¨µackë
Ë- 
ETH_HDR_LEN
);

234 
	`k¥ötf
("IPv4 (0x%04x),Üength %d: ",

235 
µå
->
√t_ëhty≥
,

236 
µå
->
√t_ùÀn
 + 
ETH_HDR_LEN
);

238 
	`k¥ötf
("(");

239 
	`k¥ötf
("tos 0x%01x,Åtl %d, id %d, offset %d ",

240 
µå
->
√t_ùtos
,

241 
µå
->
√t_ùâl
,

242 
µå
->
√t_ùid
,

243 
µå
->
√t_ù‰ag
 & 0x1fff);

245 
	`k¥ötf
("flags ");

246 i‡(
µå
->
√t_ù‰ag
 & 0x4000)

247 
	`k¥ötf
("[DF], ");

248 i‡(
µå
->
√t_ù‰ag
 & 0x2000)

249 
	`k¥ötf
("[MF], " );

251 
	`k¥ötf
("[none], ");

253 
	`k¥ötf
("[ip checksum %s], ",

254 
	`ùcksum
(
µå
) == 0 ? "ok" : "fail");

256 i‡(
µå
->
√t_ù¥Ÿo
 =
IP_UDP
) {

257 
	`k¥ötf
("proto UDP (%d),Üength %d",

258 
µå
->
√t_ù¥Ÿo
,Ö±r->
√t_ùÀn
);

259 
	`k¥ötf
(")\n");

260 
	`k¥ötf
("\t%d.%d.%d.%d > ",

261 (
µå
->
√t_ù§c
>>24)&0xff,

262 (
µå
->
√t_ù§c
>>16)&0xff,

263 (
µå
->
√t_ù§c
>>8)&0xff,

264 (
µå
->
√t_ù§c
&0xff));

265 
	`k¥ötf
("%d.%d.%d.%d: ",

266 (
µå
->
√t_ùd°
>>24)&0xff,

267 (
µå
->
√t_ùd°
>>16)&0xff,

268 (
µå
->
√t_ùd°
>>8)&0xff,

269 (
µå
->
√t_ùd°
&0xff));

270 
	`k¥ötf
("[udp checksumÇone] ");

271 
	`k¥ötf
("UDP, srcÖort %d, dstÖort %d,Üength %d\n",

272 
µå
->
√t_udp•‹t
,

273 
µå
->
√t_udpdp‹t
,

274 
µå
->
√t_ud∂í
 - 
UDP_HDR_LEN
);

276 } i‡(
µå
->
√t_ù¥Ÿo
 =
IP_ICMP
) {

277 
	`k¥ötf
("proto ICMP (%d),Üength %d",

278 
µå
->
√t_ù¥Ÿo
,Ö±r->
√t_ùÀn
);

279 
	`k¥ötf
(")\n");

280 
	`k¥ötf
("\t%d.%d.%d.%d > ",

281 (
µå
->
√t_ù§c
>>24)&0xff,

282 (
µå
->
√t_ù§c
>>16)&0xff,

283 (
µå
->
√t_ù§c
>>8)&0xff,

284 (
µå
->
√t_ù§c
&0xff));

285 
	`k¥ötf
("%d.%d.%d.%d: ",

286 (
µå
->
√t_ù§c
>>24)&0xff,

287 (
µå
->
√t_ù§c
>>16)&0xff,

288 (
µå
->
√t_ù§c
>>8)&0xff,

289 (
µå
->
√t_ù§c
&0xff));

291 i‡(
µå
->
√t_i˘y≥
 =
ICMP_ECHOREQST
)

292 
	`k¥ötf
("ICMPÉchoÑequest, ");

293 i‡(
µå
->
√t_i˘y≥
 =
ICMP_ECHOREPLY
)

294 
	`k¥ötf
("ICMPÉchoÑeply, ");

298 
	`k¥ötf
("id %d, seq %d\n",

299 
µå
->
√t_icidít
,

300 
µå
->
√t_ic£q
);

301 
	`k¥ötf
("icmp ckeckcum %s\n",

302 
	`icmp_cksum
((*)&
µå
->
√t_i˘y≥
,

303 
	`¡ohs
(
µå
->
√t_ùÀn
)-
IP_HDR_LEN
)==0?

310 
	`k¥ötf
("unknown\n");

316 
	}
}

	@net/pxe.c

3 
	~<xöu.h
>

12 
sysid_íåy_poöt
* 
	$gë_sysid_íåy_poöt
()

17 
uöt32
 
i
;

18 
i
 = 
SYSID_ENTRY_POINT_SADDR
; i < 
SYSID_ENTRY_POINT_EADDR
; i += 16) {

19 
sysid_íåy_poöt
* 
sysid_íåy
 = (sysid_íåy_poöt*)
i
;

20 if(
	`memcmp
(
sysid_íåy
->
hódî
, 
SYSID_ENTRY_POINT_HDR
, (sysid_entry->header)) == 0) {

21  (
sysid_íåy_poöt
*)
i
;

24  
NULL
;

25 
	}
}

31 * 
	$gë_uuid
(
uöt16
* 
uuid_Àn
)

33 
uöt16
 
i
;

34 
sysid_bios_°ru˘
* 
sysid_bios_íåy
;

35 
sysid_íåy_poöt
* 
sysid_íåy
 = 
	`gë_sysid_íåy_poöt
();

36 if(
NULL
 =
sysid_íåy
) {

37 (*
uuid_Àn
) = 0;

38  
NULL
;

41 
sysid_bios_íåy
 = (
sysid_bios_°ru˘
*)
sysid_íåy
->
bios_°ru˘uª_addr
;

42 
i
 = 0; i < 
sysid_íåy
->
bios_°ru˘_cou¡
; i++)

44 if(
	`memcmp
(
sysid_bios_íåy
->
hódî
, 
SYSID_ENTRY_UUID_HDR
, (sysid_bios_entry->header)) == 0) {

45 (*
uuid_Àn
Ë
sysid_bios_íåy
->
Àn
 - (
sysid_bios_°ru˘
);

46  (*)(
sysid_bios_íåy
+1);

49 
sysid_bios_íåy
 = (
sysid_bios_°ru˘
*)(((*)sysid_bios_íåyË+ sysid_bios_íåy->
Àn
);

52 (*
uuid_Àn
) = 0;

53  
NULL
;

54 
	}
}

60 
öt32
 
	$buûd_dh˝_discovî_pxe
(
dh˝msg
* 
dmsg
)

62 
uöt32
 
i
,
j
;

63 
uöt32
 
xid
;

65 
	`mem˝y
(&
xid
, 
NëD©a
.
ëhuˇ°
, 4);

66 
	`mem£t
(
dmsg
, 0x00, (
dh˝msg
));

68 
dmsg
->
dc_b›
 = 0x01;

69 
dmsg
->
dc_hty≥
 = 0x01;

70 
dmsg
->
dc_hÀn
 = 0x06;

71 
dmsg
->
dc_h›s
 = 0x00;

72 
dmsg
->
dc_xid
 = 
	`ht⁄l
(
xid
);

73 
dmsg
->
dc_£cs
 = 0x0000;

74 
dmsg
->
dc_Êags
 = 0x0000;

75 
dmsg
->
dc_cù
 = 0x00000000;

76 
dmsg
->
dc_yù
 = 0x00000000;

77 
dmsg
->
dc_sù
 = 0x00000000;

78 
dmsg
->
dc_gù
 = 0x00000000;

79 
	`mem£t
(&
dmsg
->
dc_chaddr
,'\0',16);

80 
	`mem˝y
(&
dmsg
->
dc_chaddr
, 
NëD©a
.
ëhuˇ°
, 
ETH_ADDR_LEN
);

81 
	`mem£t
(&
dmsg
->
dc_boŸp
,'\0',192);

82 
dmsg
->
dc_cookõ
 = 
	`ht⁄l
(0x63825363);

84 
j
 = 0;

86 
uöt16
 
uuid_Àn
 = 0;

87 * 
uuid
 = 
	`gë_uuid
(&
uuid_Àn
);

88 if(
uuid_Àn
 == 0) {

89 
	`k¥ötf
("build_dhcp_discover_pxe: UnableÅoÑetrieve UUID\r\n");

90  
SYSERR
;

93 
dmsg
->
dc_›t
[
j
++] = 0xff & 97;

94 
dmsg
->
dc_›t
[
j
++] = 0xf‡& (
uuid_Àn
 + 1);

95 
dmsg
->
dc_›t
[
j
++] = 0xff & 0;

96 
i
 = 0; i < 
uuid_Àn
; i++) {

97 
dmsg
->
dc_›t
[
j
++] = 0xf‡& 
uuid
[
i
];

99 
dmsg
->
dc_›t
[
j
++] = 0xff & 94;

100 
dmsg
->
dc_›t
[
j
++] = 0xff & 3;

101 
dmsg
->
dc_›t
[
j
++] = 0xff & 1;

102 
dmsg
->
dc_›t
[
j
++] = 0xff & 1;

103 
dmsg
->
dc_›t
[
j
++] = 0xff & 2;

105 
dmsg
->
dc_›t
[
j
++] = 0xff & 93;

106 
dmsg
->
dc_›t
[
j
++] = 0xff & 2;

107 
dmsg
->
dc_›t
[
j
++] = 0xff & 0;

108 
dmsg
->
dc_›t
[
j
++] = 0xff & 0;

110 
dmsg
->
dc_›t
[
j
++] = 0xff & 53;

111 
dmsg
->
dc_›t
[
j
++] = 0xff & 1;

112 
dmsg
->
dc_›t
[
j
++] = 0xff & 1;

113 
dmsg
->
dc_›t
[
j
++] = 0xff & 0;

115 
dmsg
->
dc_›t
[
j
++] = 0xff & 55;

116 
dmsg
->
dc_›t
[
j
++] = 0xff & 4;

117 
dmsg
->
dc_›t
[
j
++] = 0xff & 1;

118 
dmsg
->
dc_›t
[
j
++] = 0xff & 3;

119 
dmsg
->
dc_›t
[
j
++] = 0xff & 43;

120 
dmsg
->
dc_›t
[
j
++] = 0xff & 60;

121 
dmsg
->
dc_›t
[
j
++] = 0xff & 66;

122 
dmsg
->
dc_›t
[
j
++] = 0xff & 67;

124 
dmsg
->
dc_›t
[
j
++] = 0xff & 60;

125 
dmsg
->
dc_›t
[
j
++] = 0xff & 32;

127 * 
pxe_˛õ¡_tmp
 = 
PXE_CLIENT_STRING
;

128 
i
 = 0; i < 
PXE_CLIENT_STRING_LEN
; i++) {

129 
dmsg
->
dc_›t
[
j
++] = 0xf‡& 
pxe_˛õ¡_tmp
[
i
];

132 
dmsg
->
dc_›t
[
j
++] = 0xff & 0;

133 
dmsg
->
dc_›t
[
j
++] = 0xff & 0;

134 
dmsg
->
dc_›t
[
j
++] = 0xff & 0;

136  (
uöt32
)((*)&
dmsg
->
dc_›t
[
j
] - (*)dmsg + 1);

137 
	}
}

	@net/tftp.c

3 
	~<xöu.h
>

4 
	~<°dlib.h
>

5 
	~<°rög.h
>

9 
	$°©us
 (*
	tt·p_ªcv_cb
Ë(
	tuöt16
, *, 
	tuöt32
, 
	tbyã
);

20 
°©us
 
	$t·p_£nd1
 (

21 
öt32
 
sock
,

22 
uöt32
 
ªmù
,

23 
uöt16
 *
ªmp‹t
,

24 
t·p_msg
 *
msg
,

25 
öt32
 
mÀn
,

26 
t·p_msg
 *
ömsg
,

28 
uöt16
 
ex≥˘ed


31 
öt32
 
ªt
;

32 
öt32
 
n
;

33 
uöt32
 
tmp
;

49 
ªt
 = 
	`udp_£ndto
(
sock
, 
ªmù
, *
ªmp‹t
, (*Ë
msg
, 
mÀn
);

51 i‡(
ªt
 =
SYSERR
) {

52  
SYSERR
;

63 
n
 = 
	`udp_ªcvaddr
(
sock
, &
tmp
, 
ªmp‹t
, (*)
ömsg
,

64 (
t·p_msg
), 
TFTP_WAIT
);

65 i‡(
n
 =
SYSERR
) {

66  
SYSERR
;

67 } i‡(
n
 =
TIMEOUT
) {

68 
	`k¥ötf
("\n[tftp_send1] UDP Receive Timeout\n");

69  
TIMEOUT
;

72 i‡(
n
 < 4) {

78 i‡(
	`¡ohs
(
ömsg
->
tf_›code
Ë=
TFTP_ERROR
) {

79 
	`k¥ötf
("\n[tftp_send1] TFTP Error %d, %s\n",

80 
	`¡ohs
(
ömsg
->
tf_îcode
),

81 
ömsg
->
tf_îmsg
 );

82  
SYSERR
;

87 i‡–(
	`¡ohs
(
ömsg
->
tf_›code
Ë=
TFTP_DATA
) &&

88 (
	`¡ohs
(
ömsg
->
tf_dblk
Ë=
ex≥˘ed
)) {

89  
n
;

95 
	}
}

103 
°©us
 
	$t·pgë
(

104 
uöt32
 
£rvîù
,

105 c⁄° * 
fûíame
,

106 * 
u£r_±r
,

108 
uöt32
 
u£r_Àn


112 
öt32
 
∆í
;

113 
uöt16
 
loˇÕ‹t
;

114 
uöt16
 
ªmp‹t
=
TFTP_PORT
;

115 
öt32
 
sock
;

116 
uöt16
 
ex≥˘ed
 = 1;

117 
öt32
 
i
;

118 
öt32
 
n
;

119 
öt32
 
ªt
;

120 
öt32
 
fûesiz
;

121 
t·p_msg
 
outmsg
;

122 
öt32
 
mÀn
;

123 
t·p_msg
 
ömsg
;

124 
öt32
 
dÀn
;

125 * 
b±r
;

126 
byã
 
œ°pkt
;

130 if(
fûíame
 =
NULL
 || 
£rvîù
 == 0 ||

131 
u£r_±r
 =
NULL
 || 
u£r_Àn
 == 0) {

132 
	`k¥ötf
("[TFTP GET] ERROR: Invalidárgument\n");

133  
SYSERR
;

136 
∆í
 = 
	`°∫Àn
(
fûíame
, 
TFTP_MAXNAM
+1);

137 i‡–(
∆í
 <0Ë|| (∆í > 
TFTP_MAXNAM
) ) {

138  
SYSERR
;

143 
loˇÕ‹t
 = 
	`gëp‹t
();

147 
sock
 = 
	`udp_ªgi°î
(
£rvîù
, 0, 
loˇÕ‹t
);

148 i‡(
sock
 =
SYSERR
) {

149 
	`k¥ötf
("[TFTP Get] ERROR: udp_register failed\n");

150  
SYSERR
;

155 
	`mem£t
((*)&
outmsg
, 
NULLCH
, (outmsg));

159 
fûesiz
 = 0;

160 
b±r
 = (*)
u£r_±r
;

161 
œ°pkt
 = 
FALSE
;

165 
outmsg
.
tf_›code
 = 
	`ht⁄s
(
TFTP_RRQ
);

166 
	`°∫˝y
(
outmsg
.
tf_fûemode
, 
fûíame
, 
∆í
+1);

168 
	`°∫˝y
(
outmsg
.
tf_fûemode
+
∆í
+1, "octet", ("octet")+1);

173 
mÀn
 = 
∆í
 + 
	`°∫Àn
("octet", 6) + 4;

179 
i
=0; i < 
TFTP_MAXRETRIES
; i++) {

180 
n
 = 
	`t·p_£nd1
(
sock
, 
£rvîù
, &
ªmp‹t
, &
outmsg
,

181 
mÀn
, &
ömsg
, 
ex≥˘ed
);

182 i‡(
n
 > 0) {

184 } i‡(
n
 =
SYSERR
) {

185 
	`k¥ötf
("\n[TFTP Get] ERROR: TFTP Send "

187 
	`udp_ªÀa£
(
sock
);

188  
SYSERR
;

189 } i‡(
n
 =
TIMEOUT
) {

194 i‡(
i
 >
TFTP_MAXRETRIES
) {

195 
	`k¥ötf
("\n[TFTP Get] ERROR: MaxÑetries %d "

196 "ex˚eded\n", 
TFTP_MAXRETRIES
);

197 
	`udp_ªÀa£
(
sock
);

198  
SYSERR
;

203 
dÀn
 = 
n
 - (
ömsg
.
tf_›code
) -

204 (
ömsg
.
tf_dblk
);

206 if(
dÀn
 < 512) {

207 
œ°pkt
 = 
TRUE
;

212 
i
=0; i<
dÀn
; i++) {

213 i‡(
u£r_Àn
 !
TFTP_FUNC_MAGIC
 &&

214 
fûesiz
 < 
u£r_Àn
) {

215 *
b±r
++ = 
ömsg
.
tf_d©a
[
i
];

217 
fûesiz
++;

222 if(
u£r_Àn
 =
TFTP_FUNC_MAGIC
) {

223 ((
t·p_ªcv_cb
)
u£r_±r
)(
	`¡ohs
(
ömsg
.
tf_dblk
),

224 
ömsg
.
tf_d©a
, 
dÀn
, 
œ°pkt
);

230 
outmsg
.
tf_›code
 = 
	`ht⁄s
(
TFTP_ACK
);

231 
outmsg
.
tf_ablk
 = 
	`ht⁄s
(
ex≥˘ed
);

232 
mÀn
 = (
outmsg
.
tf_›code
Ë+ (outmsg.
tf_ablk
);

236 i‡(
œ°pkt
) {

237 
ªt
 = 
	`udp_£ndto
(
sock
, 
£rvîù
, 
ªmp‹t
,

238 (*Ë&
outmsg
, 
mÀn
);

239 
	`udp_ªÀa£
(
sock
);

241 i‡(
ªt
 =
SYSERR
) {

242 
	`k¥ötf
("\n[TFTP GET] Error on final "

244  
SYSERR
;

247  
fûesiz
;

252 
ex≥˘ed
++;

254 
	}
}

	@net/udp.c

4 
	~<xöu.h
>

6 
ud≥¡ry
 
	gud±ab
[
UDP_SLOTS
];

12 
	$udp_öô
()

15 
öt32
 
i
;

17 
i
=0; i<
UDP_SLOTS
; i++) {

18 
ud±ab
[
i
].
ud°©e
 = 
UDP_FREE
;

22 
	}
}

29 
	$udp_ö
(

30 
√çackë
 *
pkçå


33 
ötmask
 
mask
;

34 
öt32
 
i
;

35 
ud≥¡ry
 *
ud±r
;

40 
mask
 = 
	`dißbÀ
();

42 
i
=0; i<
UDP_SLOTS
; i++) {

43 
ud±r
 = &
ud±ab
[
i
];

44 i‡(
ud±r
->
ud°©e
 =
UDP_FREE
) {

48 i‡((
pkçå
->
√t_udpdp‹t
 =
ud±r
->
udlo˝‹t
) &&

49 ((
ud±r
->
udªmp‹t
 == 0) ||

50 (
pkçå
->
√t_udp•‹t
 =
ud±r
->
udªmp‹t
)) &&

51 –((
ud±r
->
udªmù
==0) ||

52 (
pkçå
->
√t_ù§c
 =
ud±r
->
udªmù
))) ) {

56 i‡(
ud±r
->
udcou¡
 < 
UDP_QSIZ
) {

57 
ud±r
->
udcou¡
++;

58 
ud±r
->
udqueue
[ud±r->
udèû
++] = 
pkçå
;

59 i‡(
ud±r
->
udèû
 >
UDP_QSIZ
) {

60 
ud±r
->
udèû
 = 0;

62 i‡(
ud±r
->
ud°©e
 =
UDP_RECV
) {

63 
ud±r
->
ud°©e
 = 
UDP_USED
;

64 
	`£nd
 (
ud±r
->
udpid
, 
OK
);

66 
	`ª°‹e
(
mask
);

74 
	`‰ìbuf
((*Ë
pkçå
);

75 
	`ª°‹e
(
mask
);

77 
	}
}

85 
uid32
 
	$udp_ªgi°î
 (

86 
uöt32
 
ªmù
,

87 
uöt16
 
ªmp‹t
,

88 
uöt16
 
lo˝‹t


91 
ötmask
 
mask
;

92 
öt32
 
¶Ÿ
;

93 
ud≥¡ry
 *
ud±r
;

97 
mask
 = 
	`dißbÀ
();

101 
¶Ÿ
=0; slŸ<
UDP_SLOTS
; slot++) {

102 
ud±r
 = &
ud±ab
[
¶Ÿ
];

103 i‡(
ud±r
->
ud°©e
 =
UDP_FREE
) {

109 i‡–(
ªmp‹t
 =
ud±r
->
udªmp‹t
) &&

110 (
lo˝‹t
 =
ud±r
->
udlo˝‹t
) &&

111 (
ªmù
 =
ud±r
->
udªmù
 ) ) {

115 
	`ª°‹e
(
mask
);

116  
SYSERR
;

122 
¶Ÿ
=0; slŸ<
UDP_SLOTS
; slot++) {

123 
ud±r
 = &
ud±ab
[
¶Ÿ
];

124 i‡(
ud±r
->
ud°©e
 !
UDP_FREE
) {

127 
ud±r
->
udlo˝‹t
 = 
lo˝‹t
;

128 
ud±r
->
udªmp‹t
 = 
ªmp‹t
;

129 
ud±r
->
udªmù
 = 
ªmù
;

130 
ud±r
->
udcou¡
 = 0;

131 
ud±r
->
udhód
 = ud±r->
udèû
 = 0;

132 
ud±r
->
udpid
 = -1;

133 
ud±r
->
ud°©e
 = 
UDP_USED
;

134 
	`ª°‹e
(
mask
);

135  
¶Ÿ
;

138 
	`ª°‹e
(
mask
);

139  
SYSERR
;

140 
	}
}

146 
öt32
 
	$udp_ªcv
 (

147 
uid32
 
¶Ÿ
,

148 *
buff
,

149 
öt32
 
Àn
,

150 
uöt32
 
timeout


153 
ötmask
 
mask
;

154 
ud≥¡ry
 *
ud±r
;

155 
umsg32
 
msg
;

156 
√çackë
 *
pkt
;

157 
öt32
 
i
;

158 
öt32
 
msgÀn
;

159 *
ud©≠å
;

163 
mask
 = 
	`dißbÀ
();

167 i‡((
¶Ÿ
 < 0Ë|| (¶Ÿ >
UDP_SLOTS
)) {

168 
	`ª°‹e
(
mask
);

169  
SYSERR
;

174 
ud±r
 = &
ud±ab
[
¶Ÿ
];

178 i‡(
ud±r
->
ud°©e
 !
UDP_USED
) {

179 
	`ª°‹e
(
mask
);

180  
SYSERR
;

185 i‡(
ud±r
->
udcou¡
 == 0) {

186 
ud±r
->
ud°©e
 = 
UDP_RECV
;

187 
ud±r
->
udpid
 = 
cuºpid
;

188 
msg
 = 
	`ªcv˛r
();

189 
msg
 = 
	`ªcvtime
(
timeout
);

190 
ud±r
->
ud°©e
 = 
UDP_USED
;

191 i‡(
msg
 =
TIMEOUT
) {

192 
	`ª°‹e
(
mask
);

193  
TIMEOUT
;

194 } i‡(
msg
 !
OK
) {

195 
	`ª°‹e
(
mask
);

196  
SYSERR
;

202 
pkt
 = 
ud±r
->
udqueue
[ud±r->
udhód
++];

203 i‡(
ud±r
->
udhód
 >
UDP_QSIZ
) {

204 
ud±r
->
udhód
 = 0;

206 
ud±r
->
udcou¡
--;

210 
msgÀn
 = 
pkt
->
√t_ud∂í
 - 
UDP_HDR_LEN
;

211 
ud©≠å
 = (*)
pkt
->
√t_udpd©a
;

212 i‡(
Àn
 < 
msgÀn
) {

213 
msgÀn
 = 
Àn
;

215 
i
=0; i<
msgÀn
; i++) {

216 *
buff
++ = *
ud©≠å
++;

218 
	`‰ìbuf
((*)
pkt
);

219 
	`ª°‹e
(
mask
);

220  
msgÀn
;

221 
	}
}

227 
öt32
 
	$udp_ªcvaddr
 (

228 
uid32
 
¶Ÿ
,

229 
uöt32
 *
ªmù
,

230 
uöt16
 *
ªmp‹t
,

231 *
buff
,

232 
öt32
 
Àn
,

233 
uöt32
 
timeout


236 
ötmask
 
mask
;

237 
ud≥¡ry
 *
ud±r
;

238 
umsg32
 
msg
;

239 
√çackë
 *
pkt
;

240 
öt32
 
msgÀn
;

241 
öt32
 
i
;

242 *
ud©≠å
;

246 
mask
 = 
	`dißbÀ
();

250 i‡((
¶Ÿ
 < 0Ë|| (¶Ÿ >
UDP_SLOTS
)) {

251 
	`ª°‹e
(
mask
);

252  
SYSERR
;

257 
ud±r
 = &
ud±ab
[
¶Ÿ
];

261 i‡(
ud±r
->
ud°©e
 !
UDP_USED
) {

262 
	`ª°‹e
(
mask
);

263  
SYSERR
;

268 i‡(
ud±r
->
udcou¡
 == 0) {

269 
ud±r
->
ud°©e
 = 
UDP_RECV
;

270 
ud±r
->
udpid
 = 
cuºpid
;

271 
msg
 = 
	`ªcv˛r
();

272 
msg
 = 
	`ªcvtime
(
timeout
);

273 
ud±r
->
ud°©e
 = 
UDP_USED
;

274 i‡(
msg
 =
TIMEOUT
) {

275 
	`ª°‹e
(
mask
);

276  
TIMEOUT
;

277 } i‡(
msg
 !
OK
) {

278 
	`ª°‹e
(
mask
);

279  
SYSERR
;

285 
pkt
 = 
ud±r
->
udqueue
[ud±r->
udhód
++];

286 i‡(
ud±r
->
udhód
 >
UDP_QSIZ
) {

287 
ud±r
->
udhód
 = 0;

292 *
ªmù
 = 
pkt
->
√t_ù§c
;

293 *
ªmp‹t
 = 
pkt
->
√t_udp•‹t
;

295 
ud±r
->
udcou¡
--;

299 
msgÀn
 = 
pkt
->
√t_ud∂í
 - 
UDP_HDR_LEN
;

300 
ud©≠å
 = (*)
pkt
->
√t_udpd©a
;

301 i‡(
Àn
 < 
msgÀn
) {

302 
msgÀn
 = 
Àn
;

304 
i
=0; i<
msgÀn
; i++) {

305 *
buff
++ = *
ud©≠å
++;

307 
	`‰ìbuf
((*)
pkt
);

308 
	`ª°‹e
(
mask
);

309  
msgÀn
;

310 
	}
}

316 
°©us
 
	$udp_£nd
 (

317 
uid32
 
¶Ÿ
,

318 *
buff
,

319 
öt32
 
Àn


322 
ötmask
 
mask
;

323 
√çackë
 *
pkt
;

324 
öt32
 
pkéí
;

325 
uöt16
 
idít
 = 1;

326 *
ud©≠å
;

327 
uöt32
 
ªmù
;

328 
uöt16
 
ªmp‹t
;

329 
uöt16
 
lo˝‹t
;

330 
uöt32
 
locù
;

332 
ud≥¡ry
 *
ud±r
;

336 
mask
 = 
	`dißbÀ
();

340 i‡–(
¶Ÿ
 < 0Ë|| (¶Ÿ >
UDP_SLOTS
) ) {

341 
	`ª°‹e
(
mask
);

342  
SYSERR
;

347 
ud±r
 = &
ud±ab
[
¶Ÿ
];

351 i‡(
ud±r
->
ud°©e
 =
UDP_FREE
) {

352 
	`ª°‹e
(
mask
);

353  
SYSERR
;

358 
ªmù
 = 
ud±r
->
udªmù
;

359 i‡(
ªmù
 == 0) {

360 
	`ª°‹e
(
mask
);

361  
SYSERR
;

364 
locù
 = 
NëD©a
.
ùuˇ°
;

365 
ªmp‹t
 = 
ud±r
->
udªmp‹t
;

366 
lo˝‹t
 = 
ud±r
->
udlo˝‹t
;

370 
pkt
 = (
√çackë
 *)
	`gëbuf
(
√tbuÂoﬁ
);

372 i‡((
öt32
)
pkt
 =
SYSERR
) {

373 
	`ª°‹e
(
mask
);

374  
SYSERR
;

379 
pkéí
 = ((*)&
pkt
->
√t_udpd©a
 - (*ÌktË+ 
Àn
;

383 
	`mem˝y
((*)
pkt
->
√t_ëh§c
,
NëD©a
.
ëhuˇ°
,
ETH_ADDR_LEN
);

384 
pkt
->
√t_ëhty≥
 = 0x0800;

385 
pkt
->
√t_ùvh
 = 0x45;

386 
pkt
->
√t_ùtos
 = 0x00;

387 
pkt
->
√t_ùÀn

pkéí
 - 
ETH_HDR_LEN
;

388 
pkt
->
√t_ùid
 = 
idít
++;

389 
pkt
->
√t_ù‰ag
 = 0x0000;

390 
pkt
->
√t_ùâl
 = 0xff;

391 
pkt
->
√t_ù¥Ÿo
 = 
IP_UDP
;

392 
pkt
->
√t_ùcksum
 = 0x0000;

393 
pkt
->
√t_ù§c
 = 
locù
;

394 
pkt
->
√t_ùd°
 = 
ªmù
;

396 
pkt
->
√t_udp•‹t
 = 
lo˝‹t
;

397 
pkt
->
√t_udpdp‹t
 = 
ªmp‹t
;

398 
pkt
->
√t_ud∂í
 = (
uöt16
)(
UDP_HDR_LEN
+
Àn
);

399 
pkt
->
√t_udpcksum
 = 0x0000;

400 
ud©≠å
 = (*Ë
pkt
->
√t_udpd©a
;

401 
	`mem˝y
(
ud©≠å
, 
buff
, 
Àn
);

405 
	`ù_£nd
(
pkt
);

406 
	`ª°‹e
(
mask
);

407  
OK
;

408 
	}
}

415 
°©us
 
	$udp_£ndto
 (

416 
uid32
 
¶Ÿ
,

417 
uöt32
 
ªmù
,

418 
uöt16
 
ªmp‹t
,

419 *
buff
,

420 
öt32
 
Àn


423 
ötmask
 
mask
;

424 
√çackë
 *
pkt
;

425 
öt32
 
pkéí
;

426 
uöt16
 
idít
 = 1;

427 
ud≥¡ry
 *
ud±r
;

428 *
ud©≠å
;

432 
mask
 = 
	`dißbÀ
();

436 i‡–(
¶Ÿ
 < 0Ë|| (¶Ÿ >
UDP_SLOTS
) ) {

437 
	`ª°‹e
(
mask
);

438  
SYSERR
;

443 
ud±r
 = &
ud±ab
[
¶Ÿ
];

447 i‡(
ud±r
->
ud°©e
 =
UDP_FREE
) {

448 
	`ª°‹e
(
mask
);

449  
SYSERR
;

454 
pkt
 = (
√çackë
 *)
	`gëbuf
(
√tbuÂoﬁ
);

456 i‡((
öt32
)
pkt
 =
SYSERR
) {

457 
	`ª°‹e
(
mask
);

458  
SYSERR
;

463 
pkéí
 = ((*)&
pkt
->
√t_udpd©a
 - (*ÌktË+ 
Àn
;

467 
	`mem˝y
((*)
pkt
->
√t_ëh§c
,
NëD©a
.
ëhuˇ°
,
ETH_ADDR_LEN
);

468 
pkt
->
√t_ëhty≥
 = 0x0800;

469 
pkt
->
√t_ùvh
 = 0x45;

470 
pkt
->
√t_ùtos
 = 0x00;

471 
pkt
->
√t_ùÀn

pkéí
 - 
ETH_HDR_LEN
;

472 
pkt
->
√t_ùid
 = 
idít
++;

473 
pkt
->
√t_ù‰ag
 = 0x0000;

474 
pkt
->
√t_ùâl
 = 0xff;

475 
pkt
->
√t_ù¥Ÿo
 = 
IP_UDP
;

476 
pkt
->
√t_ùcksum
 = 0x0000;

477 
pkt
->
√t_ù§c
 = 
NëD©a
.
ùuˇ°
;

478 
pkt
->
√t_ùd°
 = 
ªmù
;

479 
pkt
->
√t_udp•‹t
 = 
ud±r
->
udlo˝‹t
;

480 
pkt
->
√t_udpdp‹t
 = 
ªmp‹t
;

481 
pkt
->
√t_ud∂í
 = (
uöt16
)(
UDP_HDR_LEN
+
Àn
);

482 
pkt
->
√t_udpcksum
 = 0x0000;

483 
ud©≠å
 = (*Ë
pkt
->
√t_udpd©a
;

484 
	`mem˝y
(
ud©≠å
, 
buff
, 
Àn
);

488 
	`ù_£nd
(
pkt
);

489 
	`ª°‹e
(
mask
);

490  
OK
;

491 
	}
}

498 
°©us
 
	$udp_ªÀa£
 (

499 
uid32
 
¶Ÿ


502 
ötmask
 
mask
;

503 
ud≥¡ry
 *
ud±r
;

504 
√çackë
 *
pkt
;

508 
mask
 = 
	`dißbÀ
();

512 i‡–(
¶Ÿ
 < 0Ë|| (¶Ÿ >
UDP_SLOTS
) ) {

513 
	`ª°‹e
(
mask
);

514  
SYSERR
;

519 
ud±r
 = &
ud±ab
[
¶Ÿ
];

523 i‡(
ud±r
->
ud°©e
 =
UDP_FREE
) {

524 
	`ª°‹e
(
mask
);

525  
SYSERR
;

530 
	`ªsched_˙é
(
DEFER_START
);

531 
ud±r
->
udcou¡
 > 0) {

532 
pkt
 = 
ud±r
->
udqueue
[ud±r->
udhód
++];

533 i‡(
ud±r
->
udhód
 >
UDP_QSIZ
) {

534 
ud±r
->
udhód
 = 0;

536 
	`‰ìbuf
((*)
pkt
);

537 
ud±r
->
udcou¡
--;

539 
ud±r
->
ud°©e
 = 
UDP_FREE
;

540 
	`ªsched_˙é
(
DEFER_STOP
);

541 
	`ª°‹e
(
mask
);

542  
OK
;

543 
	}
}

549 
	$udp_¡oh
(

550 
√çackë
 *
pkçå


553 
pkçå
->
√t_udp•‹t
 = 
	`¡ohs
(pktptr->net_udpsport);

554 
pkçå
->
√t_udpdp‹t
 = 
	`¡ohs
(pktptr->net_udpdport);

555 
pkçå
->
√t_ud∂í
 = 
	`¡ohs
(pktptr->net_udplen);

557 
	}
}

563 
	$udp_ht⁄
(

564 
√çackë
 *
pkçå


567 
pkçå
->
√t_udp•‹t
 = 
	`ht⁄s
(pktptr->net_udpsport);

568 
pkçå
->
√t_udpdp‹t
 = 
	`ht⁄s
(pktptr->net_udpdport);

569 
pkçå
->
√t_ud∂í
 = 
	`ht⁄s
(pktptr->net_udplen);

571 
	}
}

	@shell/addargs.c

3 
	~<xöu.h
>

4 
	~"sh¥ŸŸy≥s.h
"

11 
°©us
 
	$add¨gs
(

12 
pid32
 
pid
,

13 
öt32
 
¡ok
,

14 
öt32
 
tok
[],

15 
öt32
 
éí
,

16 *
tokbuf
,

17 *
dummy


23 
ötmask
 
mask
;

24 
¥o˚¡
 *
¥±r
;

25 
uöt32
 
Æoc
;

27 
uöt32
 *
¨gloc
;

29 *
¨g°r
;

31 
uöt32
 *
£¨ch
;

33 
uöt32
 *
≠å
;

34 
öt32
 
i
;

36 
mask
 = 
	`dißbÀ
();

40 i‡–(
¡ok
 <0Ë|| (
éí
 < 0) ) {

41 
	`ª°‹e
(
mask
);

42  
SYSERR
;

45 
¥±r
 = &
¥o˘ab
[
pid
];

51 
Æoc
 = (
uöt32
Ë(
¥±r
->
¥°kba£


52 - 
¥±r
->
¥°kÀn
 + (
uöt32
));

53 
¨gloc
 = (
uöt32
*Ë((
Æoc
 + 3) & ~0x3);

57 
¨g°r
 = (*Ë(
¨gloc
 + (
¡ok
+1));

62 
≠å
=
¨gloc
, 
i
=0; i < 
¡ok
; i++) {

63 *
≠å
++ = (
uöt32
Ë(
¨g°r
 + 
tok
[
i
]);

68 *
≠å
++ = (
uöt32
)
NULL
;

73 
	`mem˝y
(
≠å
, 
tokbuf
, 
éí
);

77 
£¨ch
 = (
uöt32
 *)
¥±r
->
¥°k±r
;

78 
£¨ch
 < (
uöt32
 *)
¥±r
->
¥°kba£
; search++) {

82 i‡(*
£¨ch
 =(
uöt32
)
dummy
) {

83 *
£¨ch
 = (
uöt32
)
¨gloc
;

84 
	`ª°‹e
(
mask
);

85  
OK
;

91 
	`ª°‹e
(
mask
);

92  
SYSERR
;

93 
	}
}

	@shell/lexan.c

3 
	~<xöu.h
>

10 
öt32
 
	$Àx™
 (

11 *
löe
,

13 
öt32
 
Àn
,

15 *
tokbuf
,

18 
öt32
 *
éí
,

20 
öt32
 
tok
[],

22 
öt32
 
toktyp
[]

26 
quŸe
;

27 
uöt32
 
¡ok
;

28 *
p
;

30 
öt32
 
tbödex
;

31 
ch
;

35 
¡ok
 = 0;

36 
p
 = 
löe
;

37 
tbödex
 = 0;

41  (*
p
 !
NULLCH
Ë&& (*∞!
SH_NEWLINE
) ) {

45 i‡(
¡ok
 >
SHELL_MAXTOK
) {

46  
SYSERR
;

51  (*
p
 =
SH_BLANK
Ë|| (*∞=
SH_TAB
) ) {

52 
p
++;

57 
ch
 = *
p
;

58 i‡–(
ch
==
SH_NEWLINE
Ë|| (ch==
NULLCH
) ) {

59 *
éí
 = 
tbödex
;

60  
¡ok
;

66 
tok
[
¡ok
] = 
tbödex
;

70 
ch
) {

72 
SH_AMPER
: 
toktyp
[
¡ok
] = 
SH_TOK_AMPER
;

73 
tokbuf
[
tbödex
++] = 
ch
;

74 
tokbuf
[
tbödex
++] = 
NULLCH
;

75 
¡ok
++;

76 
p
++;

79 
SH_LESS
: 
toktyp
[
¡ok
] = 
SH_TOK_LESS
;

80 
tokbuf
[
tbödex
++] = 
ch
;

81 
tokbuf
[
tbödex
++] = 
NULLCH
;

82 
¡ok
++;

83 
p
++;

86 
SH_GREATER
: 
toktyp
[
¡ok
] = 
SH_TOK_GREATER
;

87 
tokbuf
[
tbödex
++] = 
ch
;

88 
tokbuf
[
tbödex
++] = 
NULLCH
;

89 
¡ok
++;

90 
p
++;

93 : 
toktyp
[
¡ok
] = 
SH_TOK_OTHER
;

98 i‡–(
ch
==
SH_SQUOTE
Ë|| (ch==
SH_DQUOTE
) ) {

99 
quŸe
 = 
ch
;

103 
p
++;

105  ((
ch
=*
p
++Ë!
quŸe
Ë&& (ch !
SH_NEWLINE
)

106 && (
ch
 !
NULLCH
) ) {

107 
tokbuf
[
tbödex
++] = 
ch
;

109 i‡(
ch
 !
quŸe
) {

110  
SYSERR
;

115 
tokbuf
[
tbödex
++] = 
NULLCH
;

116 
¡ok
++;

122 
tokbuf
[
tbödex
++] = 
ch
;

123 
p
++;

125  ((
ch
 = *
p
Ë!
SH_NEWLINE
Ë&& (ch !
NULLCH
)

126 && (
ch
 !
SH_LESS
Ë&& (ch !
SH_GREATER
)

127 && (
ch
 !
SH_BLANK
Ë&& (ch !
SH_TAB
)

128 && (
ch
 !
SH_AMPER
Ë&& (ch !
SH_SQUOTE
)

129 && (
ch
 !
SH_DQUOTE
) ) {

130 
tokbuf
[
tbödex
++] = 
ch
;

131 
p
++;

136 i‡–(
ch
 =
SH_SQUOTE
Ë|| (ch =
SH_DQUOTE
)

137 || (
ch
 =
SH_LESS
Ë|| (ch =
SH_GREATER
) ) {

138  
SYSERR
;

141 
tokbuf
[
tbödex
++] = 
NULLCH
;

143 
¡ok
++;

146 *
éí
 = 
tbödex
;

147  
¡ok
;

148 
	}
}

	@shell/shell.c

3 
	~<xöu.h
>

4 
	~<°dio.h
>

5 
	~"sh¥ŸŸy≥s.h
"

10 c⁄° 
cmdít
 
	gcmdèb
[] = {

11 {"¨gecho", 
TRUE
, 
xsh_¨gecho
},

12 {"¨p", 
FALSE
, 
xsh_¨p
},

13 {"ˇt", 
FALSE
, 
xsh_ˇt
},

14 {"˛ór", 
TRUE
, 
xsh_˛ór
},

15 {"d©e", 
FALSE
, 
xsh_d©e
},

16 {"devdump", 
FALSE
, 
xsh_devdump
},

17 {"echo", 
FALSE
, 
xsh_echo
},

18 {"exô", 
TRUE
, 
xsh_exô
},

19 {"hñp", 
FALSE
, 
xsh_hñp
},

20 {"kûl", 
TRUE
, 
xsh_kûl
},

21 {"memdump", 
FALSE
, 
xsh_memdump
},

22 {"mem°©", 
FALSE
, 
xsh_mem°©
},

23 {"√töfo", 
FALSE
, 
xsh_√töfo
},

24 {"pög", 
FALSE
, 
xsh_pög
},

25 {"ps", 
FALSE
, 
xsh_ps
},

26 {"¶ìp", 
FALSE
, 
xsh_¶ìp
},

27 {"udp", 
FALSE
, 
xsh_udpdump
},

28 {"ud≥cho", 
FALSE
, 
xsh_ud≥cho
},

29 {"ud≥£rvî", 
FALSE
, 
xsh_ud≥£rvî
},

30 {"u±ime", 
FALSE
, 
xsh_u±ime
},

31 {"?", 
FALSE
, 
xsh_hñp
}

35 
uöt32
 
	gncmd
 = (
cmdèb
Ë/ (
cmdít
);

54 
¥o˚ss
 
	$shñl
 (

55 
did32
 
dev


58 
buf
[
SHELL_BUFLEN
];

60 
öt32
 
Àn
;

61 
tokbuf
[
SHELL_BUFLEN
 +

62 
SHELL_MAXTOK
];

64 
öt32
 
éí
;

66 
öt32
 
tok
[
SHELL_MAXTOK
];

68 
öt32
 
toktyp
[
SHELL_MAXTOK
];

69 
öt32
 
¡ok
;

70 
pid32
 
chûd
;

71 
boﬁ8
 
backgnd
;

72 *
ouäame
, *
ö«me
;

74 
did32
 
°döput
, 
°douçut
;

76 
öt32
 
i
;

77 
öt32
 
j
;

78 
öt32
 
msg
;

80 
öt32
 
tm∑rg
;

83 *
§c
, *
cmp
;

85 
boﬁ8
 
diff
;

87 *
¨gs
[
SHELL_MAXTOK
];

92 
	`Ârötf
(
dev
, "\n\n%s%s\n%s\n%s\n%s\n%s\n%s\n%s\n%s\n%s\n",

93 
SHELL_BAN0
,
SHELL_BAN1
,
SHELL_BAN2
,
SHELL_BAN3
,
SHELL_BAN4
,

94 
SHELL_BAN5
,
SHELL_BAN6
,
SHELL_BAN7
,
SHELL_BAN8
,
SHELL_BAN9
);

96 
	`Ârötf
(
dev
, "%s\n\n", 
SHELL_STRTMSG
);

100 
TRUE
) {

104 
	`Ârötf
(
dev
, 
SHELL_PROMPT
);

108 
Àn
 = 
	`ªad
(
dev
, 
buf
, (buf));

112 i‡(
Àn
 =
EOF
) {

118 i‡(
Àn
 <= 1) {

122 
buf
[
Àn
] = 
SH_NEWLINE
;

126 
¡ok
 = 
	`Àx™
(
buf
, 
Àn
, 
tokbuf
, &
éí
, 
tok
, 
toktyp
);

130 i‡(
¡ok
 =
SYSERR
) {

131 
	`Ârötf
(
dev
,"%s\n", 
SHELL_SYNERRMSG
);

137 i‡(
¡ok
 == 0) {

138 
	`Ârötf
(
dev
, "\n");

144 i‡(
toktyp
[
¡ok
-1] =
SH_TOK_AMPER
) {

145 
¡ok
-- ;

146 
éí
-= 2;

147 
backgnd
 = 
TRUE
;

149 
backgnd
 = 
FALSE
;

155 
ouäame
 = 
ö«me
 = 
NULL
;

156 i‡–(
¡ok
 >=3Ë&& ( (
toktyp
[¡ok-2] =
SH_TOK_LESS
)

157 ||(
toktyp
[
¡ok
-2] =
SH_TOK_GREATER
))){

158 i‡(
toktyp
[
¡ok
-1] !
SH_TOK_OTHER
) {

159 
	`Ârötf
(
dev
,"%s\n", 
SHELL_SYNERRMSG
);

162 i‡(
toktyp
[
¡ok
-2] =
SH_TOK_LESS
) {

163 
ö«me
 = &
tokbuf
[
tok
[
¡ok
-1]];

165 
ouäame
 = &
tokbuf
[
tok
[
¡ok
-1]];

167 
¡ok
 -= 2;

168 
éí
 = 
tok
[
¡ok
];

172 i‡–(
¡ok
 >=3Ë&& ( (
toktyp
[¡ok-2] =
SH_TOK_LESS
)

173 ||(
toktyp
[
¡ok
-2] =
SH_TOK_GREATER
))){

174 i‡(
toktyp
[
¡ok
-1] !
SH_TOK_OTHER
) {

175 
	`Ârötf
(
dev
,"%s\n", 
SHELL_SYNERRMSG
);

178 i‡(
toktyp
[
¡ok
-2] =
SH_TOK_LESS
) {

179 i‡(
ö«me
 !
NULL
) {

180 
	`Ârötf
(
dev
,"%s\n", 
SHELL_SYNERRMSG
);

183 
ö«me
 = &
tokbuf
[
tok
[
¡ok
-1]];

185 i‡(
ouäame
 !
NULL
) {

186 
	`Ârötf
(
dev
,"%s\n", 
SHELL_SYNERRMSG
);

189 
ouäame
 = &
tokbuf
[
tok
[
¡ok
-1]];

191 
¡ok
 -= 2;

192 
éí
 = 
tok
[
¡ok
];

197 
i
=0; i<
¡ok
; i++) {

198 i‡(
toktyp
[
i
] !
SH_TOK_OTHER
) {

202 i‡((
¡ok
 =0Ë|| (
i
 <Çtok)) {

203 
	`Ârötf
(
dev
, 
SHELL_SYNERRMSG
);

207 
°döput
 = 
°douçut
 = 
dev
;

211 
j
 = 0; j < 
ncmd
; j++) {

212 
§c
 = 
cmdèb
[
j
].
˙ame
;

213 
cmp
 = 
tokbuf
;

214 
diff
 = 
FALSE
;

215 *
§c
 !
NULLCH
) {

216 i‡(*
cmp
 !*
§c
) {

217 
diff
 = 
TRUE
;

220 
§c
++;

221 
cmp
++;

223 i‡(
diff
 || (*
cmp
 !
NULLCH
)) {

232 i‡(
j
 >
ncmd
) {

233 
	`Ârötf
(
dev
, "comm™d %†nŸ found\n", 
tokbuf
);

239 i‡(
cmdèb
[
j
].
cbuûtö
) {

240 i‡(
ö«me
 !
NULL
 || 
ouäame
 !NULL || 
backgnd
){

241 
	`Ârötf
(
dev
, 
SHELL_BGERRMSG
);

246 
i
=0; i<
¡ok
; i++) {

247 
¨gs
[
i
] = &
tokbuf
[
tok
[i]];

252 i‡((*
cmdèb
[
j
].
cfunc
)(
¡ok
, 
¨gs
)

253 =
SHELL_EXIT
) {

262 i‡(
ö«me
 !
NULL
) {

263 
°döput
 = 
	`›í
(
NAMESPACE
,
ö«me
,"ro");

264 i‡(
°döput
 =
SYSERR
) {

265 
	`Ârötf
(
dev
, 
SHELL_INERRMSG
, 
ö«me
);

269 i‡(
ouäame
 !
NULL
) {

270 
°douçut
 = 
	`›í
(
NAMESPACE
,
ouäame
,"w");

271 i‡(
°douçut
 =
SYSERR
) {

272 
	`Ârötf
(
dev
, 
SHELL_OUTERRMSG
, 
ouäame
);

275 
	`c⁄åﬁ
(
°douçut
, 
F_CTL_TRUNC
, 0, 0);

281 
chûd
 = 
	`¸óã
(
cmdèb
[
j
].
cfunc
,

282 
SHELL_CMDSTK
, 
SHELL_CMDPRIO
,

283 
cmdèb
[
j
].
˙ame
, 2, 
¡ok
, &
tm∑rg
);

287 i‡((
chûd
 =
SYSERR
) ||

288 (
	`add¨gs
(
chûd
, 
¡ok
, 
tok
, 
éí
, 
tokbuf
, &
tm∑rg
)

289 =
SYSERR
) ) {

290 
	`Ârötf
(
dev
, 
SHELL_CREATMSG
);

296 
¥o˘ab
[
chûd
].
¥desc
[0] = 
°döput
;

297 
¥o˘ab
[
chûd
].
¥desc
[1] = 
°douçut
;

299 
msg
 = 
	`ªcv˛r
();

300 
	`ªsume
(
chûd
);

301 i‡(! 
backgnd
) {

302 
msg
 = 
	`ª˚ive
();

303 
msg
 !
chûd
) {

304 
msg
 = 
	`ª˚ive
();

311 
	`Ârötf
(
dev
,
SHELL_EXITMSG
);

312  
OK
;

313 
	}
}

	@shell/syscall_interface.c

3 *
	g¨gs
;

4 
	g‹ö¨gs
;

5 
	gã°
;

6 
	$sysˇŒ_öãrÁ˚
(
«rgs
, ... ){

8 
ªtvÆ
;

9 
‹ö¨gs
 = 
«rgs
;

10 
¨gs
 = (*)(&
«rgs
 +1);

12 
¨gs
 =árgs + 5 - 1;

17 
	`asm
(

38 : "Ù"(
ªtvÆ
)

39 :"g"(*
¨gs
), "g"(*◊rgs-1)),"g"(*◊rgs-2)),"g"(*◊rgs-3)),"g"(*◊rgs-4)),"g" (
‹ö¨gs
)

43  
ªtvÆ
;

44 
	}
}

	@shell/xsh_argecho.c

3 
	~<xöu.h
>

4 
	~<°dio.h
>

10 
shñlcmd
 
	$xsh_¨gecho
(
«rgs
, *
¨gs
[])

12 
öt32
 
i
;

14 
	`¥ötf
("\n\nThê%dárgumít†¨e:\n", 
«rgs
);

15 
i
 = 0; i < 
«rgs
; i++) {

16 
	`¥ötf
(" %2d: %s\n", 
i
, 
¨gs
[i]);

18 
	`¥ötf
("\n");

21 
	}
}

	@shell/xsh_arp.c

3 
	~<xöu.h
>

4 
	~<°dio.h
>

5 
	~<°rög.h
>

7 
¨p_dmp
();

12 
shñlcmd
 
	$xsh_¨p
(
«rgs
, *
¨gs
[])

16 i‡(
«rgs
 =2 && 
	`°∫cmp
(
¨gs
[1], "--help", 7) == 0) {

17 
	`¥ötf
("U£: %s\n\n", 
¨gs
[0]);

18 
	`¥ötf
("Description:\n");

19 
	`¥ötf
("\tDisplays information fromÅhe ARP cache\n");

20 
	`¥ötf
("Options:\n");

21 
	`¥ötf
("\t--help\t displayÅhis helpándÉxit\n");

26 
	`¥ötf
("\n");

27 
	`¨p_dmp
();

30 
	}
}

37 
	$¨p_dmp
 ()

39 
öt32
 
i
, 
j
;

40 
¨≥¡ry
 *
¨±r
;

44 
	`¥ötf
("ARP cache:\n");

45 
	`¥ötf
(" State Pid IP Address Hardware Address\n");

46 
	`¥ötf
(" ----- --- --------------- -----------------\n");

47 
i
 = 0; i < 
ARP_SIZ
; i++) {

48 
¨±r
 = &
¨pˇche
[
i
];

49 i‡(
¨±r
->
¨°©e
 =
AR_FREE
) {

52 
¨±r
->
¨°©e
) {

53 
AR_PENDING
: 
	`¥ötf
(" PEND "); ;

54 
AR_RESOLVED
: 
	`¥ötf
(" RESLV"); ;

55 : 
	`¥ötf
(" ?????"); ;

57 i‡(
¨±r
->
¨°©e
 =
AR_PENDING
) {

58 
	`¥ötf
("%4d ", 
¨±r
->
¨pid
);

60 
	`¥ötf
(" ");

62 
	`¥ötf
("%3d.", (
¨±r
->
¨∑ddr
 & 0xFF000000) >> 24);

63 
	`¥ötf
("%3d.", (
¨±r
->
¨∑ddr
 & 0x00FF0000) >> 16);

64 
	`¥ötf
("%3d.", (
¨±r
->
¨∑ddr
 & 0x0000FF00) >> 8);

65 
	`¥ötf
("%3d", (
¨±r
->
¨∑ddr
 & 0x000000FF));

67 
	`¥ötf
(" %02X", 
¨±r
->
¨haddr
[0]);

68 
j
 = 1; j < 
ARP_HALEN
; j++) {

69 
	`¥ötf
(":%02X", 
¨±r
->
¨haddr
[
j
]);

71 
	`¥ötf
("\n");

73 
	`¥ötf
("\n");

75 
	}
}

	@shell/xsh_cat.c

3 
	~<xöu.h
>

4 
	~<°dio.h
>

5 
	~<°rög.h
>

11 
shñlcmd
 
	$xsh_ˇt
(
«rgs
, *
¨gs
[])

13 
öt32
 
i
;

14 
öt32
 
√xtch
;

15 
did32
 
des¸
;

16 *
¨g±r
;

21 i‡(
«rgs
 =2 && 
	`°∫cmp
(
¨gs
[1], "--help", 7) == 0) {

22 
	`¥ötf
("U£: %†[fûe...]\n\n", 
¨gs
[0]);

23 
	`¥ötf
("Description:\n");

24 
	`¥ötf
("\twrites contents of files or stdinÅo stdout\n");

25 
	`¥ötf
("Options:\n");

26 
	`¥ötf
("\tfile...\tzero or more fileÇames\n");

27 
	`¥ötf
("\t--help\t displayÅhis helpándÉxit\n");

31 i‡(
«rgs
 == 1) {

32 
√xtch
 = 
	`gëc
(
°dö
);

33 
√xtch
 !
EOF
) {

34 
	`putc
(
°dout
, 
√xtch
);

35 
√xtch
 = 
	`gëc
(
°dö
);

39 
i
 = 1; i < 
«rgs
; i++) {

40 
¨g±r
 = 
¨gs
[
i
];

41 i‡–(
¨g±r
[0] ='-'Ë&& (¨g±r[1] =
NULLCH
) ) {

42 
des¸
 = 
°dö
;

44 
des¸
 = 
	`›í
(
NAMESPACE
, 
¨g±r
, "ro");

45 i‡(
des¸
 =(
did32
)
SYSERR
) {

46 
	`Ârötf
(
°dîr
, "%s: cannot open file %s\n",

47 
¨gs
[0], 
¨g±r
);

51 
√xtch
 = 
	`gëc
(
des¸
);

52 
√xtch
 !
EOF
) {

53 
	`putc
(
°dout
, 
√xtch
);

54 
√xtch
 = 
	`gëc
(
des¸
);

56 
	`˛o£
(
des¸
);

59 
	}
}

	@shell/xsh_clear.c

3 
	~<xöu.h
>

4 
	~<°dio.h
>

10 
shñlcmd
 
	$xsh_˛ór
(
«rgs
, *
¨gs
[])

15 i‡(
«rgs
 > 1) {

16 
	`Ârötf
(
°dîr
,"u£ is: %s\n", 
¨gs
[0]);

20 
	`¥ötf
("\033[0m\033[2J\033[H\n");

22 
	}
}

	@shell/xsh_date.c

3 
	~<xöu.h
>

4 
	~<°rög.h
>

5 
	~<°dio.h
>

11 
shñlcmd
 
	$xsh_d©e
(
«rgs
, *
¨gs
[]) {

13 
öt32
 
ªtvÆ
;

14 
uöt32
 
now
;

15 
d©e°r
[64];

19 i‡(
«rgs
 =2 && 
	`°∫cmp
(
¨gs
[1], "--help", 7) == 0) {

20 
	`¥ötf
("Ußge: %s\n\n", 
¨gs
[0]);

21 
	`¥ötf
("Description:\n");

22 
	`¥ötf
("\tDisplaysÅhe current dateándÅime\n");

23 
	`¥ötf
("Options (oneÖer invocation):\n");

24 
	`¥ötf
("\t-f\tforceáÅime serverÑequestÅo be sent\n");

25 
	`¥ötf
("\t-d\tset daylight savingsÅime on\n");

26 
	`¥ötf
("\t-s\tset standardÅime (not daylight savings)\n");

27 
	`¥ötf
("\t-a\tset daylight savingsÅoáutomatic\n");

28 
	`¥ötf
("\t--help\tdisplayÅhis helpándÉxit\n");

34 i‡(
«rgs
 > 2) {

35 
	`Ârötf
(
°dîr
, "%s:Åoÿm™yárgumíts\n", 
¨gs
[0]);

36 
	`Ârötf
(
°dîr
, "Try '%s --help' for more information\n",

37 
¨gs
[0]);

41 i‡(
«rgs
 == 2) {

42 i‡(
	`°∫cmp
(
¨gs
[1], "-f", 3) == 0) {

43 
D©e
.
dt_boŸvÆid
 = 
FALSE
;

44 } i‡(
	`°∫cmp
(
¨gs
[1], "-d", 3) == 0) {

45 
D©e
.
dt_daylight
 = 
DATE_DST_ON
;

46 } i‡(
	`°∫cmp
(
¨gs
[1], "-s", 3) == 0) {

47 
D©e
.
dt_daylight
 = 
DATE_DST_OFF
;

48 } i‡(
	`°∫cmp
(
¨gs
[1], "-a", 3) == 0) {

49 
D©e
.
dt_daylight
 = 
DATE_DST_AUTO
;

51 
	`Ârötf
(
°dîr
, "%s: invÆidárgumít\n", 
¨gs
[0]);

52 
	`Ârötf
(
°dîr
,

54 
¨gs
[0]);

59 
ªtvÆ
 = 
	`gëtime
(&
now
);

60 i‡(
ªtvÆ
 =
SYSERR
) {

61 
	`Ârötf
(
°dîr
,

63 
¨gs
[0]);

66 
	`ascd©e
(
now
, 
d©e°r
);

67 
	`¥ötf
("%s\n", 
d©e°r
);

69 
	}
}

	@shell/xsh_devdump.c

3 
	~<xöu.h
>

4 
	~<°dio.h
>

10 
shñlcmd
 
	$xsh_devdump
 (

11 
«rgs
,

12 *
¨gs
[]

15 
díåy
 *
dev±r
;

16 
öt32
 
i
;

20 i‡(
«rgs
 > 1) {

21 
	`Ârötf
(
°dîr
, "Noárgumentsállowed\n");

27 
	`¥ötf
("Device Name Minor\n");

28 
	`¥ötf
("------ ------------ -----\n");

30 
i
 = 0; i < 
NDEVS
; i++) {

31 
dev±r
 = &
devèb
[
i
];

32 
	`¥ötf
("%4d %-12†%3d\n", 
i
, 
dev±r
->
dv«me
,

33 
dev±r
->
dvmö‹
);

36 
	}
}

	@shell/xsh_echo.c

3 
	~<xöu.h
>

4 
	~<°dio.h
>

10 
shñlcmd
 
	$xsh_echo
(
«rgs
, *
¨gs
[])

12 
öt32
 
i
;

14 i‡(
«rgs
 > 1) {

15 
	`¥ötf
("%s", 
¨gs
[1]);

17 
i
 = 2; i < 
«rgs
; i++) {

18 
	`¥ötf
(" %s", 
¨gs
[
i
]);

21 
	`¥ötf
("\n");

24 
	}
}

	@shell/xsh_exit.c

3 
	~<xöu.h
>

10 
shñlcmd
 
	$xsh_exô
(
«rgs
, *
¨gs
[])

12  
SHELL_EXIT
;

13 
	}
}

	@shell/xsh_help.c

3 
	~<xöu.h
>

4 
	~<°dio.h
>

5 
	~<°rög.h
>

11 
shñlcmd
 
	$xsh_hñp
(
«rgs
, *
¨gs
[])

13 
öt32
 
i
;

14 *
¨gv
[2];

15 *
§c
, *
cmp
;

16 
öt32
 
Àn
;

17 
öt32
 
maxÀn
;

19 
öt32
 
cﬁs
;

21 
öt32
 
•ac
;

23 
öt32
 
löes
;

25 
öt32
 
j
;

30 i‡(
«rgs
 =2 && 
	`°∫cmp
(
¨gs
[1], "--help", 7) == 0) {

32 
	`¥ötf
("Use:\n");

33 
	`¥ötf
("\t%†[comm™d]\n", 
¨gs
[0]);

34 
	`¥ötf
("Description:\n");

35 
	`¥ötf
("\tProvidesáÜist of shell commands or\n");

36 
	`¥ötf
("\thelp information forá specific command\n");

37 
	`¥ötf
("Options:\n");

38 
	`¥ötf
("\tcommand\tspecific command for whichÅo\n");

39 
	`¥ötf
("\t\tdisplay help information\n");

40 
	`¥ötf
("\t--help\tdisplayÅhis helpándÉxit\n");

46 i‡(
«rgs
 > 2) {

47 
	`Ârötf
(
°dîr
, "%s:Åoÿm™yárgumíts\n", 
¨gs
[0]);

48 
	`Ârötf
(
°dîr
, "Try '%s --help' for more information\n",

49 
¨gs
[0]);

55 i‡(
«rgs
 == 2) {

56 
i
 = 0; i < 
ncmd
; i++) {

57 
§c
 = 
cmdèb
[
i
].
˙ame
;

58 
cmp
 = 
¨gs
[1];

59 *
§c
 !
NULLCH
) {

60 i‡(*
§c
 !*
cmp
) {

63 
§c
++;

64 
cmp
++;

66 i‡–(*
§c
 !
NULLCH
Ë|| (*
cmp
 != NULLCH) ) {

72 
¨gv
[0] = 
¨gs
[1];

73 
¨gv
[1] = "--help";

74 (*
cmdèb
[
i
].
cfunc
Ë(2, 
¨gv
);

77 
	`¥ötf
("%s:Çÿsuch comm™dá†'%s'\n", 
¨gs
[0],árgs[1]);

83 
	`¥ötf
("\nshell commandsáre:\n\n");

87 
maxÀn
 = 0;

88 
i
 = 0; i < 
ncmd
; i++) {

89 
Àn
 = 
	`°∫Àn
(
cmdèb
[
i
].
˙ame
, 80);

90 i‡(
Àn
 > 
maxÀn
) {

91 
maxÀn
 = 
Àn
;

97 
cﬁs
 = 80/(
maxÀn
+1);

98 i‡(
cﬁs
 > 6) {

99 
cﬁs
 = 6;

104 
•ac
 = 80/
cﬁs
;

108 
löes
 = (
ncmd
+(
cﬁs
-1))/cols;

112 
i
=0; i<
löes
; i++) {

113 
j
=
i
; j<
ncmd
; j+=
löes
) {

114 
Àn
 = 
	`°∫Àn
(
cmdèb
[
j
].
˙ame
,80);

115 
	`¥ötf
("%s", 
cmdèb
[
j
].
˙ame
);

116 
Àn
 < 
•ac
) {

117 
	`¥ötf
(" ");

118 
Àn
++;

121 
	`¥ötf
("\n");

124 
	}
}

	@shell/xsh_kill.c

3 
	~<xöu.h
>

4 
	~<°rög.h
>

5 
	~<°dio.h
>

11 
shñlcmd
 
	$xsh_kûl
(
«rgs
, *
¨gs
[]) {

13 
öt32
 
ªtvÆ
;

14 
pid32
 
pid
;

15 
ch
;

16 *
ch±r
;

20 i‡(
«rgs
 =2 && 
	`°∫cmp
(
¨gs
[1], "--help", 7) == 0) {

21 
	`¥ötf
("Ußge: %†PID\n\n", 
¨gs
[0]);

22 
	`¥ötf
("Description:\n");

23 
	`¥ötf
("\tterminatesáÖrocess\n");

24 
	`¥ötf
("Options:\n");

25 
	`¥ötf
("\tPID \tthe ID ofáÖrocessÅoÅerminate\n");

26 
	`¥ötf
("\t--help\tdisplayÅhis helpándÉxit\n");

27  
OK
;

32 i‡(
«rgs
 != 2) {

33 
	`Ârötf
(
°dîr
, "%s: inc‹ª˘árgumít\n", 
¨gs
[0]);

34 
	`Ârötf
(
°dîr
, "Try '%s --help' for more information\n",

35 
¨gs
[0]);

36  
SYSERR
;

41 
ch±r
 = 
¨gs
[1];

42 
ch
 = *
ch±r
++;

43 
pid
 = 0;

44 
ch
 !
NULLCH
) {

45 i‡–(
ch
 < '0') || (ch > '9') ) {

46 
	`Ârötf
(
°dîr
, "%s:Çon-digit inÖrocess ID\n",

47 
¨gs
[0]);

50 
pid
 = 10*pid + (
ch
 - '0');

51 
ch
 = *
ch±r
++;

53 i‡(
pid
 == 0) {

54 
	`Ârötf
(
°dîr
, "%s: cannot killÅheÇullÖrocess\n",

55 
¨gs
[0]);

59 
ªtvÆ
 = 
	`kûl
(
pid
);

60 i‡(
ªtvÆ
 =
SYSERR
) {

61 
	`Ârötf
(
°dîr
, "%s: cannot killÖrocess %d\n",

62 
¨gs
[0], 
pid
);

66 
	}
}

	@shell/xsh_memdump.c

3 
	~<xöu.h
>

4 
	~<°rög.h
>

5 
	~<°dio.h
>

7 
uöt32
 
∑r£vÆ
(*);

8 
uöt32
 
°¨t
;

15 
shñlcmd
 
	$xsh_memdump
(
«rgs
, *
¨gs
[])

17 
boﬁ8
 
f‹˚
 = 
FALSE
;

18 
uöt32
 
begö
;

19 
uöt32
 
°›
;

20 
uöt32
 
Àngth
;

21 
öt32
 
¨g
;

22 
uöt32
 
l
;

23 
öt32
 
i
;

24 
uöt32
 *
addr
;

25 *
ch±r
;

26 
ch
;

30 i‡(
«rgs
 =2 && 
	`°∫cmp
(
¨gs
[1], "--help", 7) == 0) {

31 
	`¥ötf
("U£: %†[-f] Addªs†Lígth\n\n", 
¨gs
[0]);

32 
	`¥ötf
("Description:\n");

33 
	`¥ötf
("\tDumps Length bytes of memory beginingátÅhe\n");

34 
	`¥ötf
("\tspecified startingáddress (bothÅheáddress\n");

35 
	`¥ötf
("\tandÜength can be specified in decimal or hex)\n");

36 
	`¥ötf
("Options:\n");

37 
	`¥ötf
("\t-f ignore sanity checks foráddresses\n");

38 
	`¥ötf
("\tAddress memoryáddressát whichÅo start\n");

39 
	`¥ötf
("\tLengthÅheÇumber of bytesÅo dump\n");

40 
	`¥ötf
("\t--help displayÅhis helpándÉxit\n");

46 i‡(
«rgs
 < 3 ||Çargs > 4) {

47 
	`Ârötf
(
°dîr
, "%s: incorrectÇumber ofárguments\n",

48 
¨gs
[0]);

49 
	`Ârötf
(
°dîr
, "Try '%s --help' for more information\n",

50 
¨gs
[0]);

54 
¨g
 = 1;

55 i‡(
	`°∫cmp
(
¨gs
[
¨g
], "-f", 2) == 0) {

56 
f‹˚
 = 
TRUE
;

57 
¨g
++;

58 
«rgs
 --;

61 i‡(
«rgs
 != 3) {

62 
	`Ârötf
(
°dîr
, "%s:Åoÿ„wárgumíts\n", 
¨gs
[0]);

63 
	`Ârötf
(
°dîr
, "Try '%s --help' for more information\n",

64 
¨gs
[0]);

68 i‡–(
begö
=
	`∑r£vÆ
(
¨gs
[
¨g
])) == 0 ) {

69 
	`Ârötf
(
°dîr
, "%s: invalid beginingáddress\n",

70 
¨gs
[0]);

73 i‡–(
Àngth
 =
	`∑r£vÆ
(
¨gs
[
¨g
+1])) == 0 ) {

74 
	`Ârötf
(
°dîr
, "%s: invalidÜengtháddress\n",

75 
¨gs
[0]);

82 
begö
 &= ~0x3;

83 
Àngth
 = (length + 3) & ~0x3;

87 
°›
 = 
begö
 + 
Àngth
;

91 i‡–
f‹˚
 || ( (
begö
 >(
uöt32
)&
°¨t
Ë&& (
°›
 > begin) &&

92 (((*)
°›
Ë< 
maxhóp
)) ) {

96 
ch±r
 = (*)
begö
;

97 
l
=0;Ü<
Àngth
;Ü+=16) {

98 
	`¥ötf
("%08x: ", 
begö
);

99 
addr
 = (
uöt32
 *)
begö
;

100 
i
=0; i<4; i++) {

101 
	`¥ötf
("%08x ",*
addr
++);

103 
	`¥ötf
(" *");

104 
i
=0; i<16; i++) {

105 
ch
 = *
ch±r
++;

106 i‡–(
ch
 >= 0x20) && (ch <= 0x7e) ) {

107 
	`¥ötf
("%c",
ch
);

109 
	`¥ötf
(".");

112 
	`¥ötf
("*\n");

113 
begö
 += 16;

117 
	`¥ötf
("Valuesáre out ofÑange; use -fÅo force\n");

120 
	}
}

126 
uöt32
 
	$∑r£vÆ
(

127 *
°rög


130 
uöt32
 
vÆue
;

131 
ch
;

134 
vÆue
 = 0;

139 
ch
 = *
°rög
++;

140 i‡(
ch
 == '0') {

141 i‡(*
°rög
++ != 'x') {

144 
ch
 = *
°rög
++; ch !
NULLCH
; ch = *string++) {

145 i‡((
ch
 >= '0') && (ch <= '9') ) {

146 
vÆue
 = 16*vÆuê+ (
ch
 - '0');

147 } i‡((
ch
 >= 'a') && (ch <= 'f') ) {

148 
vÆue
 = 16*vÆuê+ 10 + (
ch
 - 'a');

149 } i‡((
ch
 >= 'A') && (ch <= 'F') ) {

150 
vÆue
 = 16*vÆuê+ 10 + (
ch
 - 'A');

156 
ch
 !
NULLCH
) {

157 i‡–(
ch
 < '0') || (ch > '9') ) {

160 
vÆue
 = 10*vÆuê+ (
ch
 - '0');

161 
ch
 = *
°rög
++;

164  
vÆue
;

165 
	}
}

	@shell/xsh_memstat.c

3 
	~<xöu.h
>

4 
	~<°dio.h
>

5 
	~<°rög.h
>

7 
¥ötMemU£
();

8 
¥ötFªeLi°
();

14 
shñlcmd
 
	$xsh_mem°©
(
«rgs
, *
¨gs
[])

19 i‡(
«rgs
 =2 && 
	`°∫cmp
(
¨gs
[1], "--help", 7) == 0) {

20 
	`¥ötf
("u£: %†\n\n", 
¨gs
[0]);

21 
	`¥ötf
("Description:\n");

22 
	`¥ötf
("\tDisplaysÅhe current memory useándÖrintsÅhe\n");

23 
	`¥ötf
("\tfreeÜist.\n");

24 
	`¥ötf
("Options:\n");

25 
	`¥ötf
("\t--help\t\tdisplayÅhis helpándÉxit\n");

31 i‡(
«rgs
 > 1) {

32 
	`Ârötf
(
°dîr
, "%s:Åoÿm™yárgumíts\n", 
¨gs
[0]);

33 
	`Ârötf
(
°dîr
, "Try '%s --help' for more information\n",

34 
¨gs
[0]);

38 
	`¥ötMemU£
();

39 
	`¥ötFªeLi°
();

42 
	}
}

50 
	$¥ötFªeLi°
()

52 
memblk
 *
block
;

56 
	`¥ötf
("Free List:\n");

57 
	`¥ötf
("Blockáddress Length (dec) Length (hex)\n");

58 
	`¥ötf
("------------- ------------ ------------\n");

60 
block
 = 
memli°
.
m√xt
; block !
NULL
; block = block->mnext) {

61 
	`¥ötf
(" 0x%08x %9d 0x%08x\n", 
block
,

62 
block
->
mÀngth
, block->mlength);

64 
	`¥ötf
("\n");

65 
	}
}

67 
°¨t
();

68 *
_íd
;

74 
	$¥ötMemU£
()

76 
i
;

77 
uöt32
 
code
 = 0;

78 
uöt32
 
°ack
 = 0;

79 
uöt32
 
khóp
 = 0;

80 
uöt32
 
k‰ì
 = 0;

81 
memblk
 *
block
;

85 
code
 = (
uöt32
)&
_íd
 - (uöt32)
°¨t
;

90 
i
 = 1; i < 
NPROC
; i++) {

91 i‡(
¥o˘ab
[
i
].
¥°©e
 !
PR_FREE
) {

92 
°ack
 +(
uöt32
)
¥o˘ab
[
i
].
¥°kÀn
;

98 
block
 = 
memli°
.
m√xt
; block !
NULL
; block = block->mnext) {

99 
k‰ì
 +
block
->
mÀngth
;

104 
khóp
 = 
k‰ì
 - 
°ack
;

108 
	`¥ötf
("Current system memory statistics:\n");

109 
	`¥ötf
("---------------------------------\n");

110 
	`¥ötf
("%10d byã†(0x%08xËo‡Xöu code\n", 
code
, code);

111 
	`¥ötf
("%10d byã†(0x%08xËo‡Æloˇãd sèck s∑˚\n", 
°ack
, stack);

112 
	`¥ötf
("%10d byã†(0x%08xËo‡avaûabÀ kî√»hó∞•a˚\n\n", 
khóp
, kheap);

113 
	}
}

	@shell/xsh_netinfo.c

3 
	~<xöu.h
>

4 
	~<°rög.h
>

5 
	~<°dio.h
>

12 
shñlcmd
 
	$xsh_√töfo
(
«rgs
, *
¨gs
[]) {

14 
uöt32
 
ùaddr
;

15 
uöt32
 
ùbˇ°
;

16 
uöt32
 
ù¥efix
;

17 
uöt32
 
rouãr
;

18 
uöt32
 
t£rvî
;

19 
uöt32
 
d£rvî
;

20 
°r
[40];

21 
uöt32
 
ùmask
;

25 i‡(
«rgs
 =2 && 
	`°∫cmp
(
¨gs
[1], "--help", 7) == 0) {

26 
	`¥ötf
("Ußge: %s\n\n", 
¨gs
[0]);

27 
	`¥ötf
("Description:\n");

28 
	`¥ötf
("\tDisplays IPáddress information\n");

29 
	`¥ötf
("Options:\n");

30 
	`¥ötf
("\t-f\tforceáÇew DHCPÑequest\n");

31 
	`¥ötf
("\t--help\tdisplayÅhis helpándÉxit\n");

32  
OK
;

37 i‡(
«rgs
 > 2) {

38 
	`Ârötf
(
°dîr
, "%s:Åoÿm™yárgumíts\n", 
¨gs
[0]);

39 
	`Ârötf
(
°dîr
, "Try '%s --help' for more information\n",

40 
¨gs
[0]);

41  
SYSERR
;

44 i‡(
«rgs
 == 2) {

45 i‡(
	`°∫cmp
(
¨gs
[1], "-f", 3) != 0) {

46 
	`Ârötf
(
°dîr
, "%s: invÆidárgumít\n", 
¨gs
[0]);

47 
	`Ârötf
(
°dîr
,

49 
¨gs
[0]);

52 
NëD©a
.
ùvÆid
 = 
FALSE
;

53 
	`gëloˇlù
();

59 
ùaddr
 = 
NëD©a
.
ùuˇ°
;

60 
	`•rötf
(
°r
, "%d.%d.%d.%d",

61 (
ùaddr
>>24)&0xff, (ipaddr>>16)&0xff,

62 (
ùaddr
>>8)&0xff, ipaddr&0xff);

63 
	`¥ötf
(" %-16s %-16s 0x%08x\n",

64 "IPáddªss:", 
°r
, 
ùaddr
);

68 
ùbˇ°
 = 
NëD©a
.ipbcast;

69 
	`•rötf
(
°r
, "%d.%d.%d.%d",

70 (
ùbˇ°
>>24)&0xff, (ipbcast>>16)&0xff,

71 (
ùbˇ°
>>8)&0xff, ipbcast&0xff);

72 
	`¥ötf
(" %-16s %-16s 0x%08x\n",

73 "IP brﬂdˇ°:", 
°r
, 
ùbˇ°
);

77 
ù¥efix
 = 
NëD©a
.ipprefix;

78 
	`•rötf
(
°r
, "%d.%d.%d.%d",

79 (
ù¥efix
>>24)&0xff, (ipprefix>>16)&0xff,

80 (
ù¥efix
>>8)&0xff, ipprefix&0xff);

81 
	`¥ötf
(" %-16s %-16s 0x%08x\n",

82 "IPÖªfix:", 
°r
, 
ù¥efix
);

86 
ùmask
 = 
NëD©a
.ipmask;

87 
ùaddr
 = 
NëD©a
.
ùuˇ°
;

88 
	`•rötf
(
°r
, "%d.%d.%d.%d",

89 (
ùmask
>>24)&0xff, (ipmask>>16)&0xff,

90 (
ùmask
>>8)&0xff, ipmask&0xff);

91 
	`¥ötf
(" %-16s %-16s 0x%08x\n",

92 "Addªs†mask:", 
°r
, 
ùmask
);

96 
rouãr
 = 
NëD©a
.
ùrouãr
;

97 
	`•rötf
(
°r
, "%d.%d.%d.%d",

98 (
rouãr
>>24)&0xff, (router>>16)&0xff,

99 (
rouãr
>>8)&0xff,Ñouter&0xff);

100 
	`¥ötf
(" %-16s %-16s 0x%08x\n",

101 "IPÑouãr:", 
°r
, 
rouãr
);

105 
t£rvî
 = 
NëD©a
.
¡p£rvî
;

106 i‡(
t£rvî
 != 0) {

107 
	`•rötf
(
°r
, "%d.%d.%d.%d",

108 (
t£rvî
>>24)&0xff, (tserver>>16)&0xff,

109 (
t£rvî
>>8)&0xff,Åserver&0xff);

110 
	`¥ötf
(" %-16s %-16s 0x%08x\n",

111 "NTPÅimê£rvî:", 
°r
, 
t£rvî
);

116 
d£rvî
 = 
NëD©a
.
dns£rvî
;

117 i‡(
d£rvî
 != 0) {

118 
	`•rötf
(
°r
, "%d.%d.%d.%d",

119 (
d£rvî
>>24)&0xff, (dserver>>16)&0xff,

120 (
d£rvî
>>8)&0xff, dserver&0xff);

121 
	`¥ötf
(" %-16s %-16s 0x%08x\n",

122 "DNS sîvî:", 
°r
, 
d£rvî
);

125 
	`¥ötf
(" %-16s %02x:%02x:%02x:%02x:%02x:%02x\n",

127 0xf‡& 
NëD©a
.
ëhuˇ°
[0],

128 0xf‡& 
NëD©a
.
ëhuˇ°
[1],

129 0xf‡& 
NëD©a
.
ëhuˇ°
[2],

130 0xf‡& 
NëD©a
.
ëhuˇ°
[3],

131 0xf‡& 
NëD©a
.
ëhuˇ°
[4],

132 0xf‡& 
NëD©a
.
ëhuˇ°
[5]);

134 
	`¥ötf
(" %-16s %02x:%02x:%02x:%02x:%02x:%02x\n",

136 0xf‡& 
NëD©a
.
ëhbˇ°
[0],

137 0xf‡& 
NëD©a
.
ëhbˇ°
[1],

138 0xf‡& 
NëD©a
.
ëhbˇ°
[2],

139 0xf‡& 
NëD©a
.
ëhbˇ°
[3],

140 0xf‡& 
NëD©a
.
ëhbˇ°
[4],

141 0xf‡& 
NëD©a
.
ëhbˇ°
[5]);

143  
OK
;

144 
	}
}

	@shell/xsh_ping.c

3 
	~<xöu.h
>

4 
	~<°dio.h
>

5 
	~<°rög.h
>

11 
shñlcmd
 
	$xsh_pög
(
«rgs
, *
¨gs
[])

13 
uöt32
 
ùaddr
;

14 
öt32
 
ªtvÆ
;

15 
öt32
 
¶Ÿ
;

16 
öt32
 
£q
 = 0;

17 
buf
[56];

18 
öt32
 
i
;

19 
öt32
 
√xtvÆ
;

20 
boﬁ8
 
d«me
;

24 i‡(
«rgs
 =2 && 
	`°∫cmp
(
¨gs
[1], "--help", 7) == 0) {

25 
	`¥ötf
("U£: %†áddªss\n\n", 
¨gs
[0]);

26 
	`¥ötf
("Description:\n");

27 
	`¥ötf
("\tUse ICMP EchoÅoÖingáÑemote host\n");

28 
	`¥ötf
("Options:\n");

29 
	`¥ötf
("\t--help\t displayÅhis helpándÉxit\n");

30 
	`¥ötf
("\taddress\tán IPáddress in dotted decimal\n");

36 i‡(
«rgs
 != 2) {

37 
	`Ârötf
(
°dîr
, "%s: invÆidárgumíts\n", 
¨gs
[0]);

38 
	`Ârötf
(
°dîr
, "Try '%s --help' for more information\n",

39 
¨gs
[0]);

43 
d«me
 = 
FALSE
;

44 
i
 = 0; i < 
	`°æí
(
¨gs
[1]); i++) {

45 if––(
¨gs
[1][
i
] >= 65) && (args[1][i] <= 90) ) ||

46 –(
¨gs
[1][
i
] >= 97) && (args[1][i] <= 122)) ) {

47 
d«me
 = 
TRUE
;

52 if(
d«me
 =
TRUE
) {

53 
ùaddr
 = 
	`dn¶ookup
(
¨gs
[1]);

54 if((
öt32
)
ùaddr
 =
SYSERR
) {

55 
	`Ârötf
(
°dîr
, "DNS c™nŸÑesﬁvê%s\n", 
¨gs
[1]);

58 
	`¥ötf
("Pögög %d.%d.%d.%d\n", (
ùaddr
>>24)&0xff,

59 (
ùaddr
>>16)&0xff,

60 (
ùaddr
>>8)&0xff,

61 (
ùaddr
)&0xff);

66 
ªtvÆ
 = 
	`dŸ2ù
(
¨gs
[1], &
ùaddr
);

67 i‡((
öt32
)
ªtvÆ
 =
SYSERR
) {

68 
	`Ârötf
(
°dîr
, "%s: invÆid IPáddªss\n", 
¨gs
[0]);

75 
¶Ÿ
 = 
	`icmp_ªgi°î
(
ùaddr
);

76 i‡(
¶Ÿ
 =
SYSERR
) {

77 
	`Ârötf
(
°dîr
,"%s: ICMPÑegi°øti⁄ faûed\n", 
¨gs
[0]);

84 
√xtvÆ
 = 
£q
;

85 
i
 = 0; i<(
buf
); i++) {

86 
buf
[
i
] = 0xf‡& 
√xtvÆ
++;

90 
ªtvÆ
 = 
	`icmp_£nd
(
ùaddr
, 
ICMP_ECHOREQST
, 
¶Ÿ
,

91 
£q
++, 
buf
, (buf));

92 i‡(
ªtvÆ
 =
SYSERR
) {

93 
	`Ârötf
(
°dîr
, "%s:Çÿª•⁄£ from ho° %s\n", 
¨gs
[0],árgs[1]);

94 
	`icmp_ªÀa£
(
¶Ÿ
);

100 
ªtvÆ
 = 
	`icmp_ªcv
(
¶Ÿ
, 
buf
, (buf), 3000);

101 
	`icmp_ªÀa£
(
¶Ÿ
);

102 i‡(
ªtvÆ
 =
TIMEOUT
) {

103 
	`Ârötf
(
°dîr
, "%s:Çÿª•⁄£ from ho° %s\n", 
¨gs
[0],

104 
¨gs
[1]);

108 i‡(
ªtvÆ
 !(
buf
)) {

109 
	`Ârötf
(
°dîr
,"expected %d bytes but got back %d\n",

110 (
buf
), 
ªtvÆ
);

112 
	`Ârötf
(
°dîr
, "ho° %†i†Æive\n", 
¨gs
[1]);

114 
	}
}

	@shell/xsh_ps.c

3 
	~<xöu.h
>

4 
	~<°dio.h
>

5 
	~<°rög.h
>

11 
shñlcmd
 
	$xsh_ps
(
«rgs
, *
¨gs
[])

13 
¥o˚¡
 *
¥±r
;

14 
öt32
 
i
;

15 *
p°©e
[] = {

21 i‡(
«rgs
 =2 && 
	`°∫cmp
(
¨gs
[1], "--help", 7) == 0) {

22 
	`¥ötf
("U£: %s\n\n", 
¨gs
[0]);

23 
	`¥ötf
("Description:\n");

24 
	`¥ötf
("\tDisplays informationáboutÑunningÖrocesses\n");

25 
	`¥ötf
("Options:\n");

26 
	`¥ötf
("\t--help\t displayÅhis helpándÉxit\n");

32 i‡(
«rgs
 > 1) {

33 
	`Ârötf
(
°dîr
, "%s:Åoÿm™yárgumíts\n", 
¨gs
[0]);

34 
	`Ârötf
(
°dîr
, "Try '%s --help' for more information\n",

35 
¨gs
[0]);

41 
	`¥ötf
("%3s %-16s %5s %4s %4s %10s %-10s %10s\n",

45 
	`¥ötf
("%3s %-16s %5s %4s %4s %10s %-10s %10s\n",

51 
i
 = 0; i < 
NPROC
; i++) {

52 
¥±r
 = &
¥o˘ab
[
i
];

53 i‡(
¥±r
->
¥°©e
 =
PR_FREE
) {

56 
	`¥ötf
("%3d %-16s %s %4d %4d 0x%08X 0x%08X %8d\n",

57 
i
, 
¥±r
->
¥«me
, 
p°©e
[(ÌΩå->
¥°©e
],

58 
¥±r
->
¥¥io
,ÖΩå->
¥∑ª¡
,ÖΩå->
¥°kba£
,

59 
¥±r
->
¥°k±r
,ÖΩå->
¥°kÀn
);

62 
	}
}

	@shell/xsh_rdstest.c

2 
	~<xöu.h
>

3 
	~<°dio.h
>

9 
shñlcmd
 
	$xsh_rd°e°
(
«rgs
, *
¨gs
[])

11 
boﬁ8
 
îr
;

12 
öt32
 
ªtvÆ
;

13 
öt32
 
i
, 
j
;

14 
dsk«me
[] = "TestDisk";

16 
buff
[2048];

17 
buff2
[2048];

19 
ªtvÆ
 = 
	`›í
(
RDISK
,
dsk«me
,"rw");

21 i‡(
ªtvÆ
 < 0) {

22 
	`k¥ötf
("xsh_rdstest: open %sÑeturns %s, stopping\r\n",

23 
dsk«me
, 
ªtvÆ
==
SYSERR
?"SYSERR":"TIMEOUT");

24 
	`˛o£
–
RDISK
 );

27 
	`k¥ötf
("xsh_rdstest: open %sÑeturns %d\r\n",

28 
dsk«me
, 
ªtvÆ
);

31 
	`k¥ötf
("writingÉight blocksÅoÅhe disk\r\n");

32 
i
=7; i>=0; i--) {

33 
	`mem£t
(
buff
, ()(
i
&0xff), 
RD_BLKSIZ
);

34 
	`k¥ötf
("\n\r*** wrôög block %d\n\r",
i
);

35 
ªtvÆ
 = 
	`wrôe
(
RDISK
, 
buff
, 
i
);

36 i‡(
ªtvÆ
 < 0) {

37 
	`k¥ötf
("wrôêtÿblock %dÑëu∫†%d\r\n", 
i
, 
ªtvÆ
);

40 
	`k¥ötf
("reading block 1\n\r");

41 
ªtvÆ
 = 
	`ªad
(
RDISK
, 
buff
, 1);

42 
	`k¥ötf
("ªad from block 1 ha†ªtu∫ vÆuê%d\r\n", 
ªtvÆ
);

44 
îr
 = 0;

45 
i
=0; i<
RD_BLKSIZ
; i++) {

46 i‡(
buff
[
i
] != () (0xff&1)) {

47 
îr
 = 1;

51 i‡(
îr
 == 0) {

52 
	`k¥ötf
("Block 1 came back intact!!!\r\n");

54 
	`k¥ötf
("Sadly :-–byã %d i†nŸ c‹ª˘!!!\r\n", 
i
);

57 
	`k¥ötf
("reading block 6\n\r");

58 
ªtvÆ
 = 
	`ªad
(
RDISK
, 
buff
, 6);

59 
îr
 = 0;

60 
i
=0; i<
RD_BLKSIZ
; i++) {

61 i‡(
buff
[
i
] != () (0xff&6)) {

62 
îr
 = 1;

66 i‡(
îr
 == 0) {

67 
	`k¥ötf
("Block 6 came back intact!!!\r\n");

69 
	`k¥ötf
("Sadly :-–byã %d i†nŸ c‹ª˘!!!\r\n", 
i
);

72 
j
 = 0;

73 
i
=0; i<
RD_BLKSIZ
; i++) {

74 
buff2
[
i
] = "abcdefghijklmn›qr°uvwxyz"[
j
++];

75 
j
 %= 13;

78 
	`k¥ötf
("rewriting block 5\n\r");

79 
ªtvÆ
 = 
	`wrôe
(
RDISK
, 
buff2
, 5);

80 
	`k¥ötf
("wrôêtÿblock 5 ha†ªtu∫ vÆuê%d\r\n", 
ªtvÆ
);

82 
	`k¥ötf
("reading block 5\n\r");

83 
ªtvÆ
 = 
	`ªad
(
RDISK
, 
buff2
, 5);

85 
îr
 = 0;

86 
i
=0; i<
RD_BLKSIZ
; i++) {

87 i‡(
buff2
[
i
] !
buff
[i]) {

88 
îr
 = 1;

93 i‡(
îr
 == 0) {

94 
	`k¥ötf
("Block 5 came back intact!!!\r\n");

96 
	`k¥ötf
("Sadly :-–byã %d i†nŸ c‹ª˘!!!\r\n", 
i
);

99 
	`mem£t
(
buff
, 
NULLCH
, 
RD_BLKSIZ
);

101 
	`k¥ötf
("reading block 6ágain\n\r");

102 
ªtvÆ
 = 
	`ªad
(
RDISK
, 
buff
, 6);

103 
	`k¥ötf
("ªad from block 6 ha†ªtu∫ vÆuê%d\r\n", 
ªtvÆ
);

105 
îr
 = 0;

106 
i
=0; i<
RD_BLKSIZ
; i++) {

107 i‡–
buff
[
i
] != ()(0xff&6) ) {

108 
îr
 = 1;

112 i‡(
îr
 == 0) {

113 
	`k¥ötf
("Got back identicalÑesults!!!\r\n");

115 
	`k¥ötf
("Sadly :-–byã %d dif„rs!!!\r\n", 
i
);

118 
	}
}

	@shell/xsh_sleep.c

3 
	~<xöu.h
>

4 
	~<°dio.h
>

5 
	~<°rög.h
>

11 
shñlcmd
 
	$xsh_¶ìp
(
«rgs
, *
¨gs
[])

13 
öt32
 
dñay
;

14 *
ch±r
;

15 
ch
;

19 i‡(
«rgs
 =2 && 
	`°∫cmp
(
¨gs
[1], "--help", 7) == 0) {

20 
	`¥ötf
("U£: %s\n\n", 
¨gs
[0]);

21 
	`¥ötf
("Description:\n");

22 
	`¥ötf
("\tDelay forá specifiedÇumber of seconds\n");

23 
	`¥ötf
("Options:\n");

24 
	`¥ötf
("\t--help\t displayÅhis helpándÉxit\n");

30 i‡(
«rgs
 > 2) {

31 
	`Ârötf
(
°dîr
, "%s:Åoÿm™yárgumíts\n", 
¨gs
[0]);

32 
	`Ârötf
(
°dîr
, "Try '%s --help' for more information\n",

33 
¨gs
[0]);

37 i‡(
«rgs
 != 2) {

38 
	`Ârötf
(
°dîr
, "%s:árgumíàöÉº‹\n", 
¨gs
[0]);

39 
	`Ârötf
(
°dîr
, "Try '%s --help' for more information\n",

40 
¨gs
[0]);

44 
ch±r
 = 
¨gs
[1];

45 
ch
 = *
ch±r
++;

46 
dñay
 = 0;

47 
ch
 !
NULLCH
) {

48 i‡–(
ch
 < '0') || (ch > '9') ) {

49 
	`Ârötf
(
°dîr
, "%s:Çondigit inárgument\n",

50 
¨gs
[0]);

53 
dñay
 = 10*dñay + (
ch
 - '0');

54 
ch
 = *
ch±r
++;

56 
	`¶ìp
(
dñay
);

58 
	}
}

	@shell/xsh_udpdump.c

3 
	~<xöu.h
>

4 
	~<°dio.h
>

5 
	~<°rög.h
>

11 
shñlcmd
 
	$xsh_udpdump
(
«rgs
, *
¨gs
[])

13 
öt32
 
i
;

14 *
udp°©e
[] = {

16 
ud≥¡ry
 *
u±r
;

17 
uöt32
 
ªmù
;

18 
öt32
 
r1
,
r2
,
r3
,
r4
;

19 
öt32
 
ªm¥t
, 
lo˝π
;

20 
öt32
 
°©e
;

21 
pid32
 
pid
;

26 i‡(
«rgs
 =2 && 
	`°∫cmp
(
¨gs
[1], "--help", 7) == 0) {

27 
	`¥ötf
("U£: %s\n\n", 
¨gs
[0]);

28 
	`¥ötf
("Description:\n");

29 
	`¥ötf
("\tDisplaysÑegisterd UDPÖorts\n");

30 
	`¥ötf
("Options:\n");

31 
	`¥ötf
("\t--help\t displayÅhis helpándÉxit\n");

37 i‡(
«rgs
 > 1) {

38 
	`Ârötf
(
°dîr
, "%s:Çÿ¨gumítdÉx≥˘ed\n", 
¨gs
[0]);

39 
	`Ârötf
(
°dîr
, "Try '%s --help' for more information\n",

40 
¨gs
[0]);

46 
	`¥ötf
("%5s %5s %5s %9s %8s %8s %3s %4s\n",

49 
	`¥ötf
("%5s %5s %5s %15s %8s %8s %3s %4s\n",

54 
i
 = 0; i < 
UDP_SLOTS
; i++) {

55 
u±r
 = &
ud±ab
[
i
];

56 i‡(
u±r
->
ud°©e
 =
UDP_FREE
) {

57 
	`¥ötf
("%3d ---- slŸ i†‰ì ---\n", 
i
);

60 
ªmù
 = 
u±r
->
udªmù
;

61 
r1
 = (
ªmù
 >> 24) & 0xff;

62 
r2
 = (
ªmù
 >> 16) & 0xff;

63 
r3
 = (
ªmù
 >> 8) & 0xff;

64 
r4
 = (
ªmù
 ) & 0xff;

65 
ªm¥t
 = 
u±r
->
udªmp‹t
;

66 
lo˝π
 = 
u±r
->
udlo˝‹t
;

67 
pid
 = 
u±r
->
udpid
;

68 
°©e
 = 
u±r
->
ud°©e
;

69 
	`¥ötf
(

71 
udp°©e
[
°©e
], 
r1
, 
r2
, 
r3
, 
r4
, 
ªm¥t
, 
lo˝π
, 
pid
,

72 
u±r
->
udcou¡
);

75 
	}
}

	@shell/xsh_udpecho.c

3 
	~<xöu.h
>

4 
	~<°dio.h
>

5 
	~<°rög.h
>

12 
shñlcmd
 
	$xsh_ud≥cho
(
«rgs
, *
¨gs
[])

14 
i
;

15 
ªtvÆ
;

16 
msg
[] = "XinuÅesting UDPÉcho";

17 
öbuf
[1500];

18 
öt32
 
¶Ÿ
;

19 
öt32
 
msgÀn
;

20 
uöt32
 
ªmŸeù
;

22 
uöt16
 
ech›‹t
= 7;

23 
uöt16
 
lo˝‹t
 = 52743;

24 
öt32
 
ªåõs
 = 3;

25 
öt32
 
dñay
 = 2000;

29 i‡(
«rgs
 =2 && 
	`°∫cmp
(
¨gs
[1], "--help", 7) == 0) {

30 
	`¥ötf
("U£: %† REMOTEIP\n\n", 
¨gs
[0]);

31 
	`¥ötf
("Description:\n");

32 
	`¥ötf
("\tBounceá message offáÑemote UDPÉcho server\n");

33 
	`¥ötf
("Options:\n");

34 
	`¥ötf
("\tREMOTEIP:\tIPáddress in dotted decimal\n");

35 
	`¥ötf
("\t--help\t displayÅhis helpándÉxit\n");

41 i‡(
«rgs
 != 2) {

42 
	`Ârötf
(
°dîr
, "%s: invÆidárgumít(s)\n", 
¨gs
[0]);

43 
	`Ârötf
(
°dîr
, "Try '%s --help' for more information\n",

44 
¨gs
[0]);

48 i‡(
	`dŸ2ù
(
¨gs
[1], &
ªmŸeù
Ë=
SYSERR
) {

49 
	`Ârötf
(
°dîr
, "%s: invalid IPáddressárgument\r\n",

50 
¨gs
[0]);

65 
¶Ÿ
 = 
	`udp_ªgi°î
(
ªmŸeù
, 
ech›‹t
, 
lo˝‹t
);

66 i‡(
¶Ÿ
 =
SYSERR
) {

67 
	`Ârötf
(
°dîr
, "%s: couldÇotÑeserve UDPÖort %d\n",

68 
¨gs
[0], 
lo˝‹t
);

74 
msgÀn
 = 
	`°∫Àn
(
msg
, 1200);

75 
i
=0; i<
ªåõs
; i++) {

76 
ªtvÆ
 = 
	`udp_£nd
(
¶Ÿ
, 
msg
, 
msgÀn
);

77 i‡(
ªtvÆ
 =
SYSERR
) {

78 
	`Ârötf
(
°dîr
, "%s:Érror sending UDP \n",

79 
¨gs
[0]);

83 
ªtvÆ
 = 
	`udp_ªcv
(
¶Ÿ
, 
öbuf
, (öbuf), 
dñay
);

84 i‡(
ªtvÆ
 =
TIMEOUT
) {

85 
	`Ârötf
(
°dîr
, "%s:Åimeout...\n", 
¨gs
[0]);

87 } i‡(
ªtvÆ
 =
SYSERR
) {

88 
	`Ârötf
(
°dîr
, "%s:Érror from udp_recv \n",

89 
¨gs
[0]);

90 
	`udp_ªÀa£
(
¶Ÿ
);

96 
	`udp_ªÀa£
(
¶Ÿ
);

97 i‡(
ªtvÆ
 =
TIMEOUT
) {

98 
	`Ârötf
(
°dîr
, "%s:ÑetryÜimitÉxceeded\n",

99 
¨gs
[0]);

105 i‡(
ªtvÆ
 !
msgÀn
) {

106 
	`Ârötf
(
°dîr
, "%s: sent %d bytesándÑeceived %d\n",

107 
¨gs
[0], 
msgÀn
, 
ªtvÆ
);

110 
i
 = 0; i < 
msgÀn
; i++) {

111 i‡(
msg
[
i
] !
öbuf
[i]) {

112 
	`Ârötf
(
°dîr
, "%s:Ñeply differsát byte %d\n",

113 
¨gs
[0], 
i
);

118 
	`¥ötf
("UDPÉchoÅest was successful\n");

120 
	}
}

	@shell/xsh_udpserver.c

3 
	~<xöu.h
>

4 
	~<°dio.h
>

5 
	~<°rög.h
>

12 
shñlcmd
 
	$xsh_ud≥£rvî
(
«rgs
, *
¨gs
[])

14 
öt32
 
ªtvÆ
;

15 
uöt32
 
loˇlù
;

16 
uöt32
 
ªmù
;

17 
uöt16
 
ªmp‹t
;

18 
buff
[1500];

19 
öt32
 
msgÀn
;

20 
öt32
 
¶Ÿ
;

21 
uöt16
 
echo£rvîp‹t
= 7;

25 i‡(
«rgs
 =2 && 
	`°∫cmp
(
¨gs
[1], "--help", 7) == 0) {

26 
	`¥ötf
("U£: %s\n\n", 
¨gs
[0]);

27 
	`¥ötf
("Description:\n");

28 
	`¥ötf
("\tBecomeá UDPÉcho server\n");

29 
	`¥ötf
("Options:\n");

30 
	`¥ötf
("\t--help\t displayÅhis helpándÉxit\n");

36 i‡(
«rgs
 != 1) {

37 
	`Ârötf
(
°dîr
, "%s:Çÿ¨gumít†ex≥˘ed\n", 
¨gs
[0]);

38 
	`Ârötf
(
°dîr
, "Try '%s --help' for more information\n",

39 
¨gs
[0]);

43 
loˇlù
 = 
	`gëloˇlù
();

44 i‡(
loˇlù
 =
SYSERR
) {

45 
	`Ârötf
(
°dîr
,

47 
¨gs
[0]);

53 
¶Ÿ
 = 
	`udp_ªgi°î
(0, 0, 
echo£rvîp‹t
);

54 i‡(
¶Ÿ
 =
SYSERR
) {

55 
	`Ârötf
(
°dîr
, "%s: couldÇotÑeserve UDPÖort %d\n",

56 
¨gs
[0], 
echo£rvîp‹t
);

62 
TRUE
) {

63 
ªtvÆ
 = 
	`udp_ªcvaddr
(
¶Ÿ
, &
ªmù
, &
ªmp‹t
, 
buff
,

64 (
buff
), 600000);

66 i‡(
ªtvÆ
 =
TIMEOUT
) {

68 } i‡(
ªtvÆ
 =
SYSERR
) {

69 
	`Ârötf
(
°dîr
, "%s:ÉrrorÑeceiving UDP\n",

70 
¨gs
[0]);

73 
msgÀn
 = 
ªtvÆ
;

74 
ªtvÆ
 = 
	`udp_£ndto
(
¶Ÿ
, 
ªmù
, 
ªmp‹t
, 
buff
, 
msgÀn
);

75 i‡(
ªtvÆ
 =
SYSERR
) {

76 
	`Ârötf
(
°dîr
, "%s: udp_sendto failed\n",

77 
¨gs
[0]);

82 
	}
}

	@shell/xsh_uptime.c

3 
	~<xöu.h
>

4 
	~<°dio.h
>

5 
	~<°rög.h
>

11 
shñlcmd
 
	$xsh_u±ime
(
«rgs
, *
¨gs
[])

13 
uöt32
 
days
, 
hrs
, 
mös
, 
£cs
;

15 
uöt32
 
£˝îday
 = 86400;

16 
uöt32
 
£˝îhr
 = 3600;

17 
uöt32
 
£˝îmö
 = 60;

21 i‡(
«rgs
 =2 && 
	`°∫cmp
(
¨gs
[1], "--help", 7) == 0) {

22 
	`¥ötf
("U£: %s\n\n", 
¨gs
[0]);

23 
	`¥ötf
("Description:\n");

24 
	`¥ötf
("\tDisplaysÅime sinceÅhe system booted\n");

25 
	`¥ötf
("Options:\n");

26 
	`¥ötf
("\t--help\t displayÅhis helpándÉxit\n");

32 i‡(
«rgs
 > 1) {

33 
	`Ârötf
(
°dîr
, "%s:Åoÿm™yárgumíts\n", 
¨gs
[0]);

34 
	`Ârötf
(
°dîr
, "Try '%s --help' for more information\n",

35 
¨gs
[0]);

39 
£cs
 = 
˛ktime
;

43 
days
 = 
£cs
/
£˝îday
;

44 
£cs
 -
days
*
£˝îday
;

48 
hrs
 = 
£cs
/
£˝îhr
;

49 
£cs
 -
hrs
*
£˝îhr
;

53 
mös
 = 
£cs
/
£˝îmö
;

54 
£cs
 -
mös
*
£˝îmö
;

56 
	`¥ötf
("Xinu has been up ");

57 i‡(
days
 > 0) {

58 
	`¥ötf
(" %d day(sË", 
days
);

61 i‡(
hrs
 > 0) {

62 
	`¥ötf
(" %d hour(sË", 
hrs
);

65 i‡(
mös
 > 0) {

66 
	`¥ötf
(" %d möuã(sË", 
mös
);

69 i‡(
£cs
 > 0) {

70 
	`¥ötf
(" %d sec⁄d(sË", 
£cs
);

72 
	`¥ötf
("\n");

75 
	}
}

	@system/apphello-contents.c

1 
	g≠phñlo_c⁄ã¡s
[] = {

573 
	g≠phñlo_c⁄ã¡s_size
 = (
≠phñlo_c⁄ã¡s
);

	@system/apphello_dyn_loading-contents.c

1 
	g≠phñlo_dyn_lﬂdög_c⁄ã¡s
[] = {

575 
	g≠phñlo_dyn_lﬂdög_c⁄ã¡s_size
 = (
≠phñlo_dyn_lﬂdög_c⁄ã¡s
);

	@system/ascdate.c

3 
	~<xöu.h
>

4 
	~<°dio.h
>

6 
d©eöfo
 
	gD©e
 = {0, 
FALSE
, 
DATE_DST_AUTO
,

16 
°©us
 
	$ascd©e
 (

17 
uöt32
 
now
,

18 *
°r


21 
uöt32
 
tmp
;

23 
öt32
 
yór
, 
m⁄th
, 
day
,

24 
hour
, 
möuã
, 
£c⁄d
;

25 
uöt32
 
days
;

26 
uöt32
 
À≠yrs
;

28 
uöt32
 
shi·
;

30 
uöt32
 
dayofwìk
;

32 
öt32
 
j™1
;

33 
öt32
 
m¨1
;

34 
öt32
 
nov1
;

35 
öt32
 
m¨ss
;

36 
öt32
 
novfs
;

37 
boﬁ8
 
d°
;

38 
öt32
 
i
;

40 *
z⁄es
[] = {"EST", "CST", "MST", "PST"};

41 *
dz⁄es
[] = {"EDT", "CDT", "MDT", "PDT"};

45 
yór
=1970 ; 
TRUE
 ; year++) {

46 
days
 = 
	`i¶óp
(
yór
) ? 366 : 365;

47 
tmp
 = 
days
 * 
SECPERDY
;

48 i‡(
tmp
 > 
now
)

50 
now
 -
tmp
;

56 
days
 = 
now
 / 
SECPERDY
;

60 
m⁄th
=0 ; month<12 ; month++) {

61 
tmp
 = 
D©e
.
dt_msize
[
m⁄th
] * 
SECPERDY
;

62 i‡((
m⁄th
 =1Ë&& 
	`i¶óp
(
yór
)) {

63 
tmp
 +
SECPERDY
;

65 i‡(
tmp
 > 
now
)

67 
now
 -
tmp
;

72 
day
 = (
öt32
)–
now
/
SECPERDY
 ) + 1;

73 
now
 %
SECPERDY
;

77 
hour
 = (
öt32
Ë–
now
/
SECPERHR
 );

78 
now
 %
SECPERHR
;

82 
möuã
 = 
now
 / 
SECPERMN
;

83 
now
 %
SECPERMN
;

86 
£c⁄d
 = (
öt32
Ë
now
;

96 
À≠yrs
 = (
yór
-1969)/4;

101 
shi·
 = 4 + (
yór
 - 1970Ë+ 
À≠yrs
;

105 
j™1
 = 
shi·
 % 7;

109 
shi·
 +
days
;

113 
dayofwìk
 = 
shi·
 % 7;

122 
d°
 = 
FALSE
;

123 i‡(
D©e
.
dt_daylight
 =
DATE_DST_ON
) {

124 
d°
 = 
TRUE
;

125 } i‡(
D©e
.
dt_daylight
 =
DATE_DST_AUTO
) {

133 
m¨1
 = (
j™1
 + 
D©e
.
dt_msize
[0] + Date.dt_msize[1] +

134 
	`i¶óp
(
yór
)) % 7;

138 i‡(
m¨1
 == 0) {

139 
m¨ss
 = 8;

141 
m¨ss
 = 15 - 
m¨1
;

146 
nov1
 = 
j™1
;

147 
i
=0; i<10; i++) {

148 
nov1
 +
D©e
.
dt_msize
[
i
];

150 i‡(
	`i¶óp
(
yór
)) {

151 
nov1
++;

153 
nov1
 =Çov1 % 7;

154 i‡(
nov1
 == 0) {

155 
novfs
 = 1;

157 
novfs
 = 8 - 
nov1
;

164 i‡–(
m⁄th
 == 11) || (month == 0) || (month == 1) ) {

165 
d°
 = 
FALSE
;

169 } i‡–(
m⁄th
>2) && (month<10) ) {

170 
d°
 = 
TRUE
;

174 } i‡(
m⁄th
 == 2) {

176 
d°
 = 
FALSE
;

177 i‡(
day
 > 
m¨ss
) {

178 
d°
 = 
TRUE
;

179 } i‡–(
day
 =
m¨ss
Ë&& (
hour
 >= 2) ) {

180 
d°
 = 
TRUE
;

186 } i‡(
m⁄th
 == 10) {

188 
d°
 = 
TRUE
;

189 i‡(
day
 > 
novfs
) {

190 
d°
 = 
FALSE
;

191 } i‡–(
day
 =
novfs
Ë&& (
hour
 >= 1) ) {

192 
d°
 = 
FALSE
;

200 i‡(
d°
) {

201 
hour
++;

205 i‡(
hour
 > 23) {

206 
hour
 = 0;

207 
day
++;

211 i‡(
day
 > 
D©e
.
dt_msize
[
m⁄th
]) {

212 
day
 = 1;

213 
m⁄th
++;

221 
	`•rötf
(
°r
, "%3s %3s %2d %2d:%02d:%02d %s %d",

222 
D©e
.
dt_d«m
[
dayofwìk
], D©e.
dt_m«m
[
m⁄th
],

223 
day
, 
hour
, 
möuã
, 
£c⁄d
, 
d°
? 
dz⁄es
[
TIMEZONE
-5]:

224 
z⁄es
[
TIMEZONE
-5], 
yór
);

225  
OK
;

226 
	}
}

	@system/bufinit.c

3 
	~<xöu.h
>

5 
b≥¡ry
 
	gbu·ab
[
NBPOOLS
];

6 
bpid32
 
	gnbpoﬁs
;

12 
°©us
 
	$buföô
()

14 
nbpoﬁs
 = 0;

15  
OK
;

16 
	}
}

	@system/chprio.c

3 
	~<xöu.h
>

9 
¥i16
 
	$ch¥io
(

10 
pid32
 
pid
,

11 
¥i16
 
√w¥io


14 
ötmask
 
mask
;

15 
¥o˚¡
 *
¥±r
;

16 
¥i16
 
ﬁd¥io
;

18 
mask
 = 
	`dißbÀ
();

19 i‡(
	`isbadpid
(
pid
)) {

20 
	`ª°‹e
(
mask
);

21  (
¥i16
Ë
SYSERR
;

23 
¥±r
 = &
¥o˘ab
[
pid
];

24 
ﬁd¥io
 = 
¥±r
->
¥¥io
;

25 
¥±r
->
¥¥io
 = 
√w¥io
;

26 
	`ª°‹e
(
mask
);

27  
ﬁd¥io
;

28 
	}
}

	@system/clkhandler.c

3 
	~<xöu.h
>

9 
	$˛kh™dÀr
(

10 
öt32
 
¨g


14 if(!(
h≥t
->
gis
 & 
HPET_GIS_T0
)) {

18 
h≥t
->
gis
 |
HPET_GIS_T0
;

22 if((++
cou¡1000
) >= 1000) {

26 
˛ktime
++;

30 
cou¡1000
 = 0;

35 if(!
	`i£m±y
(
¶ìpq
)) {

40 if((--
queuëab
[
	`fú°id
(
¶ìpq
)].
qkey
) <= 0) {

41 
	`wakeup
();

48 if((--
¥ìm±
) <= 0) {

49 
¥ìm±
 = 
QUANTUM
;

50 
	`ªsched
();

52 
	}
}

	@system/clkinit.c

3 
	~<xöu.h
>

5 
uöt32
 
	g˛ktime
;

6 
uöt32
 
	gcou¡1000
;

7 
qid16
 
	g¶ìpq
;

8 
uöt32
 
	g¥ìm±
;

10 vﬁ©ûê
h≥t_c§eg
 *
	gh≥t
 = (hpet_csreg *)

11 
HPET_BASE_ADDR
;

17 
	$˛köô
()

21 
¶ìpq
 = 
	`√wqueue
();

25 
¥ìm±
 = 
QUANTUM
;

29 
˛ktime
 = 0;

30 
cou¡1000
 = 0;

33 
	`iﬂpic_úq2vec
(2, 
IRQBASE
);

35 
	`£t_ivec
(
IRQBASE
, 
˛kh™dÀr
, 0);

37 
h≥t
->
gc
 = 0;

39 
h≥t
->
mcv_l
 = 0;

40 
h≥t
->
mcv_u
 = 0;

42 
h≥t
->
t0cc_l
 |
HPET_TXCC_TVS
;

43 
h≥t
->
t0cv_l
 = 14318;

44 
h≥t
->
t0cc_l
 |
HPET_TXCC_TVS
;

45 
h≥t
->
t0cv_u
 = 0;

47 
h≥t
->
t0cc_l
 = 
HPET_TXCC_IT
 | 
HPET_TXCC_TYP
 | 
HPET_TXCC_IE
;

49 
h≥t
->
gc
 = 
HPET_GC_OE
;

52 
	}
}

	@system/close.c

3 
	~<xöu.h
>

9 
sysˇŒ
 
	$˛o£
(

10 
did32
 
des¸p


13 
ötmask
 
mask
;

14 
díåy
 *
dev±r
;

15 
öt32
 
ªtvÆ
;

17 
mask
 = 
	`dißbÀ
();

18 i‡(
	`isbaddev
(
des¸p
)) {

19 
	`ª°‹e
(
mask
);

20  
SYSERR
;

22 
dev±r
 = (
díåy
 *Ë&
devèb
[
des¸p
];

23 
ªtvÆ
 = (*
dev±r
->
dv˛o£
) (devptr);

24 
	`ª°‹e
(
mask
);

25  
ªtvÆ
;

26 
	}
}

	@system/conf.c

3 
	~<xöu.h
>

6 
devˇŒ
 
i€º
();

7 
devˇŒ
 
i⁄uŒ
();

11 
díåy
 
	gdevèb
[
NDEVS
] =

24 (*)
âyöô
, (*)
i⁄uŒ
, (*)ionull,

25 (*)
âyªad
, (*)
âywrôe
, (*)
i€º
,

26 (*)
âygëc
, (*)
âyputc
, (*)
âyc⁄åﬁ
,

27 (*)0x3f8, (*)
âyh™dÀr
, 33 },

31 (*)
i⁄uŒ
, (*)ionull, (*)ionull,

32 (*)
i⁄uŒ
, (*)i⁄uŒ, (*)
i€º
,

33 (*)
i⁄uŒ
, (*)i⁄uŒ, (*)
i€º
,

34 (*)0x0, (*)
i€º
, 0 },

38 (*)
ëhöô
, (*)
i€º
, (*)ioerr,

39 (*)
ëhªad
, (*)
ëhwrôe
, (*)
i€º
,

40 (*)
i€º
, (*)i€º, (*)
ëhc⁄åﬁ
,

41 (*)0x0, (*)
ëhh™dÀr
, 34 },

45 (*)
«möô
, (*)
«m›í
, (*)
i€º
,

46 (*)
i€º
, (*)ioerr, (*)ioerr,

47 (*)
i€º
, (*)ioerr, (*)ioerr,

48 (*)0x0, (*)
i€º
, 0 },

52 (*)
rdsöô
, (*)
rds›í
, (*)
rds˛o£
,

53 (*)
rd§ód
, (*)
rdswrôe
, (*)
i€º
,

54 (*)
i€º
, (*)i€º, (*)
rdsc⁄åﬁ
,

55 (*)0x0, (*)
i⁄uŒ
, 0 },

59 (*)
ømöô
, (*)
øm›í
, (*)
øm˛o£
,

60 (*)
ømªad
, (*)
ømwrôe
, (*)
i€º
,

61 (*)
i€º
, (*)ioerr, (*)ioerr,

62 (*)0x0, (*)
i⁄uŒ
, 0 },

66 (*)
rfsöô
, (*)
rfs›í
, (*)
i€º
,

67 (*)
i€º
, (*)ioerr, (*)ioerr,

68 (*)
i€º
, (*)i€º, (*)
rfsc⁄åﬁ
,

69 (*)0x0, (*)
i⁄uŒ
, 0 },

73 (*)
rÊöô
, (*)
i€º
, (*)
rÊ˛o£
,

74 (*)
rÊªad
, (*)
rÊwrôe
, (*)
rÊ£ek
,

75 (*)
rÊgëc
, (*)
rÊputc
, (*)
i€º
,

76 (*)0x0, (*)
i⁄uŒ
, 0 },

80 (*)
rÊöô
, (*)
i€º
, (*)
rÊ˛o£
,

81 (*)
rÊªad
, (*)
rÊwrôe
, (*)
rÊ£ek
,

82 (*)
rÊgëc
, (*)
rÊputc
, (*)
i€º
,

83 (*)0x0, (*)
i⁄uŒ
, 0 },

87 (*)
rÊöô
, (*)
i€º
, (*)
rÊ˛o£
,

88 (*)
rÊªad
, (*)
rÊwrôe
, (*)
rÊ£ek
,

89 (*)
rÊgëc
, (*)
rÊputc
, (*)
i€º
,

90 (*)0x0, (*)
i⁄uŒ
, 0 },

94 (*)
rÊöô
, (*)
i€º
, (*)
rÊ˛o£
,

95 (*)
rÊªad
, (*)
rÊwrôe
, (*)
rÊ£ek
,

96 (*)
rÊgëc
, (*)
rÊputc
, (*)
i€º
,

97 (*)0x0, (*)
i⁄uŒ
, 0 },

101 (*)
rÊöô
, (*)
i€º
, (*)
rÊ˛o£
,

102 (*)
rÊªad
, (*)
rÊwrôe
, (*)
rÊ£ek
,

103 (*)
rÊgëc
, (*)
rÊputc
, (*)
i€º
,

104 (*)0x0, (*)
i⁄uŒ
, 0 },

108 (*)
rÊöô
, (*)
i€º
, (*)
rÊ˛o£
,

109 (*)
rÊªad
, (*)
rÊwrôe
, (*)
rÊ£ek
,

110 (*)
rÊgëc
, (*)
rÊputc
, (*)
i€º
,

111 (*)0x0, (*)
i⁄uŒ
, 0 },

115 (*)
rÊöô
, (*)
i€º
, (*)
rÊ˛o£
,

116 (*)
rÊªad
, (*)
rÊwrôe
, (*)
rÊ£ek
,

117 (*)
rÊgëc
, (*)
rÊputc
, (*)
i€º
,

118 (*)0x0, (*)
i⁄uŒ
, 0 },

122 (*)
rÊöô
, (*)
i€º
, (*)
rÊ˛o£
,

123 (*)
rÊªad
, (*)
rÊwrôe
, (*)
rÊ£ek
,

124 (*)
rÊgëc
, (*)
rÊputc
, (*)
i€º
,

125 (*)0x0, (*)
i⁄uŒ
, 0 },

129 (*)
rÊöô
, (*)
i€º
, (*)
rÊ˛o£
,

130 (*)
rÊªad
, (*)
rÊwrôe
, (*)
rÊ£ek
,

131 (*)
rÊgëc
, (*)
rÊputc
, (*)
i€º
,

132 (*)0x0, (*)
i⁄uŒ
, 0 },

136 (*)
rÊöô
, (*)
i€º
, (*)
rÊ˛o£
,

137 (*)
rÊªad
, (*)
rÊwrôe
, (*)
rÊ£ek
,

138 (*)
rÊgëc
, (*)
rÊputc
, (*)
i€º
,

139 (*)0x0, (*)
i⁄uŒ
, 0 },

143 (*)
lfsöô
, (*)
lfs›í
, (*)
i€º
,

144 (*)
i€º
, (*)ioerr, (*)ioerr,

145 (*)
i€º
, (*)ioerr, (*)ioerr,

146 (*)0x0, (*)
i⁄uŒ
, 0 },

150 (*)
lÊöô
, (*)
i€º
, (*)
lÊ˛o£
,

151 (*)
lÊªad
, (*)
lÊwrôe
, (*)
lÊ£ek
,

152 (*)
lÊgëc
, (*)
lÊputc
, (*)
lÊc⁄åﬁ
,

153 (*)0x0, (*)
i⁄uŒ
, 0 },

157 (*)
lÊöô
, (*)
i€º
, (*)
lÊ˛o£
,

158 (*)
lÊªad
, (*)
lÊwrôe
, (*)
lÊ£ek
,

159 (*)
lÊgëc
, (*)
lÊputc
, (*)
lÊc⁄åﬁ
,

160 (*)0x0, (*)
i⁄uŒ
, 0 },

164 (*)
lÊöô
, (*)
i€º
, (*)
lÊ˛o£
,

165 (*)
lÊªad
, (*)
lÊwrôe
, (*)
lÊ£ek
,

166 (*)
lÊgëc
, (*)
lÊputc
, (*)
lÊc⁄åﬁ
,

167 (*)0x0, (*)
i⁄uŒ
, 0 },

171 (*)
lÊöô
, (*)
i€º
, (*)
lÊ˛o£
,

172 (*)
lÊªad
, (*)
lÊwrôe
, (*)
lÊ£ek
,

173 (*)
lÊgëc
, (*)
lÊputc
, (*)
lÊc⁄åﬁ
,

174 (*)0x0, (*)
i⁄uŒ
, 0 },

178 (*)
lÊöô
, (*)
i€º
, (*)
lÊ˛o£
,

179 (*)
lÊªad
, (*)
lÊwrôe
, (*)
lÊ£ek
,

180 (*)
lÊgëc
, (*)
lÊputc
, (*)
lÊc⁄åﬁ
,

181 (*)0x0, (*)
i⁄uŒ
, 0 },

185 (*)
lÊöô
, (*)
i€º
, (*)
lÊ˛o£
,

186 (*)
lÊªad
, (*)
lÊwrôe
, (*)
lÊ£ek
,

187 (*)
lÊgëc
, (*)
lÊputc
, (*)
lÊc⁄åﬁ
,

188 (*)0x0, (*)
i⁄uŒ
, 0 }

	@system/control.c

3 
	~<xöu.h
>

9 
sysˇŒ
 
	$c⁄åﬁ
(

10 
did32
 
des¸p
,

11 
öt32
 
func
,

12 
öt32
 
¨g1
,

13 
öt32
 
¨g2


16 
ötmask
 
mask
;

17 
díåy
 *
dev±r
;

18 
öt32
 
ªtvÆ
;

20 
mask
 = 
	`dißbÀ
();

21 i‡(
	`isbaddev
(
des¸p
)) {

22 
	`ª°‹e
(
mask
);

23  
SYSERR
;

25 
dev±r
 = (
díåy
 *Ë&
devèb
[
des¸p
];

26 
ªtvÆ
 = (*
dev±r
->
dv˙é
Ë(dev±r, 
func
, 
¨g1
, 
¨g2
);

27 
	`ª°‹e
(
mask
);

28  
ªtvÆ
;

29 
	}
}

	@system/create.c

3 
	~<xöu.h
>

5 
loˇl
 
√wpid
();

11 
pid32
 
	$¸óã
(

12 *
funˇddr
,

13 
uöt32
 
ssize
,

14 
¥i16
 
¥i‹ôy
,

15 *
«me
,

16 
uöt32
 
«rgs
,

20 
uöt32
 
ßv•
, *
push•
;

21 
ötmask
 
mask
;

22 
pid32
 
pid
;

23 
¥o˚¡
 *
¥±r
;

24 
öt32
 
i
;

25 
uöt32
 *
a
;

26 
uöt32
 *
ßddr
;

28 
mask
 = 
	`dißbÀ
();

29 i‡(
ssize
 < 
MINSTK
)

30 
ssize
 = 
MINSTK
;

31 
ssize
 = (
uöt32
Ë
	`roundmb
(ssize);

32 i‡–(
¥i‹ôy
 < 1Ë|| ((
pid
=
	`√wpid
()Ë=
SYSERR
) ||

33 ((
ßddr
 = (
uöt32
 *)
	`gë°k
(
ssize
)Ë=(uöt32 *)
SYSERR
) ) {

34 
	`ª°‹e
(
mask
);

35  
SYSERR
;

38 
¥cou¡
++;

39 
¥±r
 = &
¥o˘ab
[
pid
];

42 
¥±r
->
¥°©e
 = 
PR_SUSP
;

43 
¥±r
->
¥¥io
 = 
¥i‹ôy
;

44 
¥±r
->
¥°kba£
 = (*)
ßddr
;

45 
¥±r
->
¥°kÀn
 = 
ssize
;

46 
¥±r
->
¥«me
[
PNMLEN
-1] = 
NULLCH
;

47 
i
=0 ; i<
PNMLEN
-1 && (
¥±r
->
¥«me
[i]=
«me
[i])!=
NULLCH
; i++)

49 
¥±r
->
¥£m
 = -1;

50 
¥±r
->
¥∑ª¡
 = (
pid32
)
	`gëpid
();

51 
¥±r
->
¥hasmsg
 = 
FALSE
;

54 
¥±r
->
¥desc
[0] = 
CONSOLE
;

55 
¥±r
->
¥desc
[1] = 
CONSOLE
;

56 
¥±r
->
¥desc
[2] = 
CONSOLE
;

60 *
ßddr
 = 
STACKMAGIC
;

61 
ßv•
 = (
uöt32
)
ßddr
;

64 
a
 = (
uöt32
 *)(&
«rgs
 + 1);

65 
a
 +
«rgs
 -1;

66  ; 
«rgs
 > 0 ;Çargs--)

67 *--
ßddr
 = *
a
--;

68 *--
ßddr
 = ()
INITRET
;

74 *--
ßddr
 = ()
funˇddr
;

78 *--
ßddr
 = 
ßv•
;

80 
ßv•
 = (
uöt32
Ë
ßddr
;

81 *--
ßddr
 = 0x00000200;

86 *--
ßddr
 = 0;

87 *--
ßddr
 = 0;

88 *--
ßddr
 = 0;

89 *--
ßddr
 = 0;

90 *--
ßddr
 = 0;

91 
push•
 = 
ßddr
;

92 *--
ßddr
 = 
ßv•
;

93 *--
ßddr
 = 0;

94 *--
ßddr
 = 0;

95 *
push•
 = (Ë(
¥±r
->
¥°k±r
 = (*)
ßddr
);

96 
	`ª°‹e
(
mask
);

97  
pid
;

98 
	}
}

104 
loˇl
 
pid32
 
	$√wpid
()

106 
uöt32
 
i
;

107 
pid32
 
√xçid
 = 1;

112 
i
 = 0; i < 
NPROC
; i++) {

113 
√xçid
 %
NPROC
;

114 i‡(
¥o˘ab
[
√xçid
].
¥°©e
 =
PR_FREE
) {

115  
√xçid
++;

117 
√xçid
++;

120  (
pid32
Ë
SYSERR
;

121 
	}
}

	@system/debug.c

3 
	~<xöu.h
>

4 
	~<°dio.h
>

5 
	~<debug.h
>

7 
hexdump_¥öt
(
byã
, byte);

13 
	$hexdump_¥öt
(

14 
byã
 
d©a
,

15 
byã
 
mode


18 
mode
)

20 
DEBUG_ASCII
:

21 
d©a
 = (' ' <= data && data <= '~') ? data : '.';

22 
	`Ârötf
(
°dout
, "%c", 
d©a
);

24 
DEBUG_HEX
:

25 
	`Ârötf
(
°dout
, "%02x ", 
d©a
);

30 
	}
}

37 
	$hexdump
(

38 *
buf„r
,

39 
uöt32
 
Àngth
,

40 
boﬁ8
 
ˇn⁄


43 
uöt32
 
m
, 
n
, 
ªmaö
;

45 
byã
 *
b
 = (byã *)
buf„r
;

47 
n
 = 0;Ç < 
Àngth
;Ç += 0x10) {

48 
	`Ârötf
(
°dout
, "%08x ", (
uöt32
)
buf„r
 + 
n
);

50 
ªmaö
 = 
Àngth
 - 
n
;

52 
m
 = 0; m < 
ªmaö
 && m < 0x10; m++) {

53 i‡(
m
 % 0x08 == 0) {

54 
	`Ârötf
(
°dout
, " ");

56 
	`hexdump_¥öt
(
b
[
n
 + 
m
], 
DEBUG_HEX
);

60 i‡(
ªmaö
 < 0x10) {

61 
m
 = 0; m < 0x10 - 
ªmaö
; m++) {

62 i‡((0 !
m
) && (0 == m % 0x08)) {

63 
	`Ârötf
(
°dout
, " ");

65 
	`Ârötf
(
°dout
, " ");

69 i‡(
ˇn⁄
 =
TRUE
) {

70 
	`Ârötf
(
°dout
, " |");

71 
m
 = 0; m < 
ªmaö
 && m < 0x10; m++) {

72 
	`hexdump_¥öt
(
b
[
n
 + 
m
], 
DEBUG_ASCII
);

74 
	`Ârötf
(
°dout
, "|");

76 
	`Ârötf
(
°dout
, "\n");

78 
	}
}

	@system/dlclose.c

3 
	~<xöu.h
>

5 
sysˇŒ
 
	$dl˛o£
(* 
h™dÀ
)

7 
öt32
 
i
;

8 
ötmask
 
mask
;

10 
mask
 = 
	`dißbÀ
();

12 
h™dÀ_n
 = ()
h™dÀ
;

13 
	`XDEBUG_KPRINTF
("[dl˛o£] h™dÀ: %d\n", 
h™dÀ_n
);

16 i‡(
h™dÀ_n
 < 0 || h™dÀ_¿>
NHANDLE
) {

17 
	`XDEBUG_KPRINTF
("[dlclose] handleÇot valid 1\n");

18 
	`ª°‹e
(
mask
);

19  
SYSERR
;

22 i‡(
h™dÀèb
[
h™dÀ_n
].
°©us
 =
HANDLE_CLOSE
) {

23 
	`XDEBUG_KPRINTF
("[dlclose] handleÇot valid 2\n");

24 
	`ª°‹e
(
mask
);

25  
SYSERR
;

29 i‡(
h™dÀèb
[
h™dÀ_n
].
pid
 !
cuºpid
) {

30 
	`XDEBUG_KPRINTF
("[dlclose] handleÇot valid 3\n");

31 
	`ª°‹e
(
mask
);

32  
SYSERR
;

35 
h™dÀèb
[
h™dÀ_n
].
°©us
 = 
DL_CLOSE
;

40 
	`‰ìmem
(
h™dÀèb
[
h™dÀ_n
].
exec
);

42 
	`XDEBUG_KPRINTF
("[dlclose] suceed");

43 
	`ª°‹e
(
mask
);

44  
OK
;

45 
	}
}

	@system/dlopen.c

3 
	~<xöu.h
>

5 * 
	$föd_sym
(c⁄° * 
«me
, 
Elf32_Sym
* 
syms
, 
sh_size
, c⁄° * 
°rögs
, * 
exec
)

7 
i
;

8 
i
 = 0; i < 
sh_size
 / (
Elf32_Sym
); i ++) {

9 i‡(
	`°rcmp
(
«me
, 
°rögs
 + 
syms
[
i
].
°_«me
) == 0) {

10  
exec
 + 
syms
[
i
].
°_vÆue
;

13  
NULL
;

14 
	}
}

17 
	$is_image_vÆid
(
Elf32_Ehdr
 *
hdr
)

19 * 
h
 = (*)
hdr
;

20 if–
h
[0] == 0x7f && h[1] == 0x45 && h[2] == 0x4c ) {

23 
	`XDEBUG_KPRINTF
("[dlopen] ELF file is invalid\n");

25 
	}
}

27 
sysˇŒ
 
	$image_lﬂd
 (*
ñf_°¨t
, 
size
)

30 
Elf32_Ehdr
 *
hdr
 = 
NULL
;

31 
Elf32_Phdr
 *
phdr
 = 
NULL
;

32 
Elf32_Shdr
 *
shdr
 = 
NULL
;

33 
Elf32_Sym
 *
sym_syms
 = 
NULL
;

34 *
sym_°rögs
 = 
NULL
;

35 
sym_sh_size
 = 0;

36 
Elf32_Sym
 *
dyn_syms
 = 
NULL
;

37 *
dyn_°rögs
 = 
NULL
;

38 
dyn_sh_size
 = 0;

39 *
°¨t
 = 
NULL
;

40 *
èddr
 = 
NULL
;

41 
i
 = 0;

42 *
exec
 = 
NULL
;

44 
hdr
 = (
Elf32_Ehdr
 *Ë
ñf_°¨t
;

45 i‡(
	`is_image_vÆid
(
hdr
) != 0) {

46 
	`XDEBUG_KPRINTF
("[dlopen] ELF file is valid\n");

49 
	`XDEBUG_KPRINTF
("[dlopen] ELF file is invalid\n");

50  
SYSERR
;

53 
bpid32
 
ñfbuÂoﬁ
 = 
	`mkbuÂoﬁ
(
size
, 1);

54 
exec
 = 
	`gëbuf
(
ñfbuÂoﬁ
);

56 if(!
exec
) {

57 
	`XDEBUG_KPRINTF
("image_load::Érrorállocating memory\n");

58  
SYSERR
;

62 
	`mem£t
(
exec
, 0x0, 
size
);

65 
phdr
 = (
Elf32_Phdr
 *)(
ñf_°¨t
 + 
hdr
->
e_phoff
);

66 
i
 = 0; i < 
hdr
->
e_phnum
; ++i) {

67 i‡(
phdr
[
i
].
p_ty≥
 !
PT_LOAD
) {

70 i‡(
phdr
[
i
].
p_fûesz
 >Öhdr[i].
p_memsz
) {

71 
	`XDEBUG_KPRINTF
("[dlopen] image_load::Ö_filesz >Ö_memsz\n");

72 
	`‰ìbuf
(
exec
);

73  
SYSERR
;

75 if(!
phdr
[
i
].
p_fûesz
) {

81 
°¨t
 = 
ñf_°¨t
 + 
phdr
[
i
].
p_off£t
;

82 
èddr
 = 
phdr
[
i
].
p_vaddr
 + 
exec
;

83 
	`XDEBUG_KPRINTF
("[dl›í] movê%x -> %x (%d byãs, off£à%xË\n", 
°¨t
, 
èddr
, 
phdr
[
i
].
p_fûesz
,Öhdr[i].
p_off£t
);

84 
	`mem˝y
(
èddr
, 
°¨t
, 
phdr
[
i
].
p_fûesz
);

89 
shdr
 = (
Elf32_Shdr
 *)(
ñf_°¨t
 + 
hdr
->
e_shoff
);

90 
Elf32_Shdr
* 
sh_°πab
 = &
shdr
[
hdr
->
e_sh°∫dx
];

91 * 
sh_°πab_p
 = 
ñf_°¨t
 + 
sh_°πab
->
sh_off£t
;

94 
i
 = 0; i < 
hdr
->
e_shnum
; ++i) {

95 i‡(
shdr
[
i
].
sh_ty≥
 =
SHT_SYMTAB
) {

96 
sym_syms
 = (
Elf32_Sym
*)(
ñf_°¨t
 + 
shdr
[
i
].
sh_off£t
);

97 
sym_°rögs
 = 
ñf_°¨t
 + 
shdr
[shdr[
i
].
sh_lök
].
sh_off£t
;

98 
sym_sh_size
 = 
shdr
[
i
].
sh_size
;

99 
	`XDEBUG_KPRINTF
("[dl›í] SYMTAB (sym_syms: %x, sym_°rögs: %x)\n", 
sym_syms
, 
sym_°rögs
 + 
shdr
[
i
].
sh_«me
);

100 * 
íåy
 = 
	`föd_sym
("_°¨t", 
sym_syms
, 
sym_sh_size
, 
sym_°rögs
, 
exec
);

121 
i
 = 0; i < 
hdr
->
e_shnum
; ++i) {

122 i‡(
shdr
[
i
].
sh_ty≥
 =
SHT_DYNSYM
) {

123 
dyn_syms
 = (
Elf32_Sym
*)(
ñf_°¨t
 + 
shdr
[
i
].
sh_off£t
);

124 
dyn_°rögs
 = 
ñf_°¨t
 + 
shdr
[shdr[
i
].
sh_lök
].
sh_off£t
;

125 
dyn_sh_size
 = 
shdr
[
i
].
sh_size
;

126 
	`XDEBUG_KPRINTF
("[dl›í] DYNSYM (dyn_syms: %x, dyn_°rögs: %x)\n", 
dyn_syms
, 
dyn_°rögs
);

128 i‡(
shdr
[
i
].
sh_ty≥
 =
SHT_REL
) {

130 
	`XDEBUG_KPRINTF
("[dlopen] Find REL, but we ignore\n");

135 
dl_h™dÀ_t
 
ªt_h™dÀ
;

136 
ªt_h™dÀ
.
°©us
 = 
HANDLE_OPEN
;

137 
ªt_h™dÀ
.
pid
 = 
cuºpid
;

138 
ªt_h™dÀ
.
ñf_°¨t
 =Élf_start;

139 
ªt_h™dÀ
.
exec
 =Éxec;

140 
ªt_h™dÀ
.
sym_syms
 = sym_syms;

141 
ªt_h™dÀ
.
sym_°rögs
 = sym_strings;

142 
ªt_h™dÀ
.
sym_sh_size
 = sym_sh_size;

143 
ªt_h™dÀ
.
dyn_syms
 = dyn_syms;

144 
ªt_h™dÀ
.
dyn_°rögs
 = dyn_strings;

145 
ªt_h™dÀ
.
dyn_sh_size
 = dyn_sh_size;

149 
i
 = 0; i < 
NHANDLE
; i++) {

150 i‡(
h™dÀèb
[
i
].
°©us
 =
HANDLE_CLOSE
) {

151 
h™dÀèb
[
i
] = 
ªt_h™dÀ
;

155 i‡(
i
 =
NHANDLE
) {

156 
	`XDEBUG_KPRINTF
("[dlopen]Çoávailable handle slot\n");

157  
SYSERR
;

160  
i
;

161 
	}
}

164 
sysˇŒ
 
	$dl›í
(* 
libøry_fûe_∑th
)

166 
öt32
 
i
;

167 
ötmask
 
mask
;

169 
mask
 = 
	`dißbÀ
();

172 
fûe_size
 = 0;

173 * 
fûe
 = 
	`fûe›í
(
libøry_fûe_∑th
, &
fûe_size
);

174 i‡((*)
SYSERR
 =
fûe
) {

175 
	`XDEBUG_KPRINTF
("[dlopen] fileÇotÉxist\n");

176  
SYSERR
;

180 
i
 = 0; i < 
NFILE
; i ++) {

181 i‡(
fûëab
[
i
].
fûe°©e
 =
FILE_OCCUPIED
) {

182 i‡(
	`°rcmp
(
fûëab
[
i
].
fûï©h
, 
libøry_fûe_∑th
) == 0) {

187 i‡(
fûëab
[
i
].
lﬂd_¥o˚ss
[
cuºpid
] =
DL_OPEN
) {

188 
	`XDEBUG_KPRINTF
("[dlopen] has been opened byÅhisÖrocess\n");

189 
	`ª°‹e
(
mask
);

190  
SYSERR
;

194 
h™dÀ
 = 
	`image_lﬂd
(
fûe
, 
fûe_size
);

195 i‡(
h™dÀ
 =
SYSERR
) {

196 
	`ª°‹e
(
mask
);

197  
SYSERR
;

201 
fûëab
[
i
].
lﬂd_¥o˚ss
[
cuºpid
] = 
DL_OPEN
;

203 
	`XDEBUG_KPRINTF
("[dl›í] h™dÀ: %d\n", 
h™dÀ
);

205 
	`fûe˛o£
(
libøry_fûe_∑th
);

207 
	`ª°‹e
(
mask
);

208  
h™dÀ
;

209 
	}
}

	@system/dlsym.c

3 
	~<xöu.h
>

5 * 
	$föd_sym
(c⁄° * 
«me
, 
Elf32_Sym
* 
syms
, 
sh_size
, c⁄° * 
°rögs
, * 
exec
)

7 
i
;

8 
i
 = 0; i < 
sh_size
 / (
Elf32_Sym
); i ++) {

10 i‡(
	`°rcmp
(
«me
, 
°rögs
 + 
syms
[
i
].
°_«me
) == 0) {

11  
exec
 + 
syms
[
i
].
°_vÆue
;

14  
NULL
;

15 
	}
}

17 
sysˇŒ
 
	$dlsym
(* 
h™dÀ
, c⁄° * 
symbﬁ
)

19 
öt32
 
i
;

20 
ötmask
 
mask
;

22 
mask
 = 
	`dißbÀ
();

24 
h™dÀ_n
 = ()
h™dÀ
;

26 i‡(
h™dÀ_n
 < 0 || h™dÀ_¿>
NHANDLE
) {

27 
	`XDEBUG_KPRINTF
("[dlsym] handleÇot valid\n");

28 
	`ª°‹e
(
mask
);

29  
SYSERR
;

32 i‡(
h™dÀèb
[
h™dÀ_n
].
°©us
 =
HANDLE_CLOSE
) {

33 
	`XDEBUG_KPRINTF
("[dlsym] handleÇot valid\n");

34 
	`ª°‹e
(
mask
);

35  
SYSERR
;

38 i‡(
h™dÀèb
[
h™dÀ_n
].
pid
 !
cuºpid
) {

39 
	`XDEBUG_KPRINTF
("[dlsym] handleÇot valid\n");

40 
	`ª°‹e
(
mask
);

41  
SYSERR
;

44 
	`XDEBUG_KPRINTF
("[dlsym] h™dÀ: %d\n", 
h™dÀ_n
);

45 
	`XDEBUG_KPRINTF
("[dlsym] symbﬁ: %s\n", 
symbﬁ
);

46 
dl_h™dÀ_t
 
h™dÀ_
 = 
h™dÀèb
[
h™dÀ_n
];

54 * 
symbﬁ_addr
;

57 
symbﬁ_addr
 = 
	`föd_sym
(
symbﬁ
, 
h™dÀ_
.
sym_syms
, h™dÀ_.
sym_sh_size
, h™dÀ_.
sym_°rögs
, h™dÀ_.
exec
);

58 i‡(
symbﬁ_addr
 =
NULL
) {

59 
	`XDEBUG_KPRINTF
("[dlsym] Wêd⁄àföd %†ö symèb\n", 
symbﬁ
);

62 
	`ª°‹e
(
mask
);

63 
	`XDEBUG_KPRINTF
("[dlsym] Föd %†ö symèb\n", 
symbﬁ
);

64  (
sysˇŒ
)
symbﬁ_addr
;

68 
symbﬁ_addr
 = 
	`föd_sym
(
symbﬁ
, 
h™dÀ_
.
dyn_syms
, h™dÀ_.
dyn_sh_size
, h™dÀ_.
dyn_°rögs
, h™dÀ_.
exec
);

69 i‡(
symbﬁ_addr
 =
NULL
) {

70 
	`XDEBUG_KPRINTF
("[dlsym] Wêd⁄àföd %†ö dy¡ab\n", 
symbﬁ
);

73 
	`ª°‹e
(
mask
);

74 
	`XDEBUG_KPRINTF
("[dlsym] Föd %†ö dy¡ab\n", 
symbﬁ
);

75  (
sysˇŒ
)
symbﬁ_addr
;

78 
	`ª°‹e
(
mask
);

79 
	`XDEBUG_KPRINTF
("[dlsym] symbolÇot found\n");

80  
SYSERR
;

81 
	}
}

	@system/early_imr.c

12 
	~<xöu.h
>

14 
	#INTEL_CLN_SB_CMD_ADDR
 (0x000000D0)

	)

15 
	#INTEL_CLN_SB_DATA_ADDR
 (0x000000D4)

	)

17 
	#INTEL_CLN_SB_MCR_SHIFT
 (24)

	)

18 
	#INTEL_CLN_SB_PORT_SHIFT
 (16)

	)

19 
	#INTEL_CLN_SB_REG_SHIFT
 (8)

	)

20 
	#INTEL_CLN_SB_BYTEEN
 (0xF0Ë

	)

23 
	#CFG_READ_OPCODE
 (0x10Ë

	)

24 
	#CFG_WRITE_OPCODE
 (0x11Ë

	)

25 
	#DRAM_IMR0L
 (0x40Ë

	)

26 
	#DRAM_IMR0H
 (0x41Ë

	)

27 
	#DRAM_IMR0RM
 (0x42Ë

	)

28 
	#DRAM_IMR0WM
 (0x43Ë

	)

29 
	#DRAM_IMR1L
 (0x44Ë

	)

30 
	#DRAM_IMR1H
 (0x45Ë

	)

31 
	#DRAM_IMR1RM
 (0x46Ë

	)

32 
	#DRAM_IMR1WM
 (0x47Ë

	)

33 
	#DRAM_IMR3L
 (0x4CË

	)

34 
	#DRAM_IMR3H
 (0x4DË

	)

35 
	#DRAM_IMR3RM
 (0x4EË

	)

36 
	#DRAM_IMR3WM
 (0x4FË

	)

37 
	#DRAM_IMR7L
 (0x5CË

	)

38 
	#DRAM_IMR7H
 (0x5DË

	)

39 
	#DRAM_IMR7RM
 (0x5EË

	)

40 
	#DRAM_IMR7WM
 (0x5FË

	)

42 
	#IMR_WRITE_ENABLE_ALL
 (0xFFFFFFFF)

	)

43 
	#IMR_READ_ENABLE_ALL
 (0xBFFFFFFF)

	)

44 
	#IMR_BASE_ADDR
 (0x0000)

	)

45 
	#IMR_LOCK_BIT
 (0x80000000)

	)

48 
	#IMR_MASK
 (0xFFFFFC)

	)

50 
	#IMR_SNOOP_NON_SMM_ENABLE
 (0x40000001)

	)

52 
	#IMR_NON_SMM_ENABLE
 (0x00000001)

	)

55 
	mSB_ID_HUNIT
 = 0x03,

56 
	mSB_ID_THERMAL
 = 0x04,

57 
	mSB_ID_ESRAM
 = 0x05,

58 }
	t˛n_sb_id
;

60 
uöt32
 
	gsb_pcidev
;

74 
	$öãl_˛n_óæy_sb_ªad_ªg
(
˛n_sb_id
 
id
, 
cmd
,

75 
ªg
, 
uöt32
 *
d©a
)

77 
uöt32
 
msg
 = (
cmd
 << 
INTEL_CLN_SB_MCR_SHIFT
) |

78 ((
id
 << 
INTEL_CLN_SB_PORT_SHIFT
) & 0xFF0000)|

79 ((
ªg
 << 
INTEL_CLN_SB_REG_SHIFT
) & 0xFF00)|

80 
INTEL_CLN_SB_BYTEEN
;

82 i‡(
d©a
 =
NULL
) {

86 
	`pci_wrôe_c⁄fig_dw‹d
(
sb_pcidev
, 
INTEL_CLN_SB_CMD_ADDR
, 
msg
);

87 
	`pci_ªad_c⁄fig_dw‹d
(
sb_pcidev
, 
INTEL_CLN_SB_DATA_ADDR
, 
d©a
);

89 
	}
}

101 
	$öãl_˛n_óæy_sb_wrôe_ªg
(
˛n_sb_id
 
id
, 
cmd
,

102 
ªg
, 
uöt32
 
d©a
)

104 
uöt32
 
msg
 = (
cmd
 << 
INTEL_CLN_SB_MCR_SHIFT
) |

105 ((
id
 << 
INTEL_CLN_SB_PORT_SHIFT
) & 0xFF0000)|

106 ((
ªg
 << 
INTEL_CLN_SB_REG_SHIFT
) & 0xFF00)|

107 
INTEL_CLN_SB_BYTEEN
;

109 
	`pci_wrôe_c⁄fig_dw‹d
(
sb_pcidev
, 
INTEL_CLN_SB_DATA_ADDR
, 
d©a
);

110 
	`pci_wrôe_c⁄fig_dw‹d
(
sb_pcidev
, 
INTEL_CLN_SB_CMD_ADDR
, 
msg
);

111 
	}
}

114 
	#PCI_VENDOR_ID_INTEL
 0x8086

	)

115 
	#PCI_DEVICE_ID_CLANTON_SB
 0x0958

	)

127 
	$öãl_˛n_óæy_sb_¥obe
()

129 
sb_dev
;

131 
sb_dev
 = 
	`föd_pci_devi˚
(
PCI_DEVICE_ID_CLANTON_SB
,

132 
PCI_VENDOR_ID_INTEL
, 0);

133 i‡(
sb_dev
 < 0) {

134 
	`k¥ötf
("%s():Érror finding PCI device DID 0x%x\n",

135 
__FUNCTION__
, 
PCI_DEVICE_ID_CLANTON_SB
);

137  
sb_dev
;

140 
	}
}

148 
	$˛n_ªmove_imr
(
ªg_l
, 
ªg_h
,

149 
ªg_rm
, 
ªg_wm
)

151 
	`öãl_˛n_óæy_sb_wrôe_ªg
(
SB_ID_ESRAM
, 
CFG_WRITE_OPCODE
,

152 
ªg_rm
, 
IMR_READ_ENABLE_ALL
);

153 
	`öãl_˛n_óæy_sb_wrôe_ªg
(
SB_ID_ESRAM
, 
CFG_WRITE_OPCODE
,

154 
ªg_wm
, 
IMR_WRITE_ENABLE_ALL
);

155 
	`öãl_˛n_óæy_sb_wrôe_ªg
(
SB_ID_ESRAM
, 
CFG_WRITE_OPCODE
,

156 
ªg_h
, 
IMR_BASE_ADDR
);

157 
	`öãl_˛n_óæy_sb_wrôe_ªg
(
SB_ID_ESRAM
, 
CFG_WRITE_OPCODE
,

158 
ªg_l
, 
IMR_BASE_ADDR
);

159 
	}
}

167 
	$˛n_ªmove_imr_grub
()

169 
	`˛n_ªmove_imr
(
DRAM_IMR0L
, 
DRAM_IMR0H
, 
DRAM_IMR0RM
, 
DRAM_IMR0WM
);

170 
	}
}

178 
	$˛n_ªmove_imr_boŸ_∑øms
()

180 
	`˛n_ªmove_imr
(
DRAM_IMR1L
, 
DRAM_IMR1H
, 
DRAM_IMR1RM
, 
DRAM_IMR1WM
);

181 
	}
}

189 
	$˛n_ªmove_imr_bzimage
()

191 
	`˛n_ªmove_imr
(
DRAM_IMR7L
, 
DRAM_IMR7H
, 
DRAM_IMR7RM
, 
DRAM_IMR7WM
);

192 
	}
}

194 
	$ªmove_úm_¥Ÿe˘i⁄s
()

196 
uöt32
 
tmp_addr
;

198 i‡(
	`öãl_˛n_óæy_sb_¥obe
() != 0) {

199 
	`k¥ötf
("%s(Ëîr‹Örobög f‹ IRM devi˚\n", 
__FUNCTION__
);

201  
SYSERR
;

204 
	`öãl_˛n_óæy_sb_ªad_ªg
(
SB_ID_ESRAM
, 
CFG_READ_OPCODE
,

205 
DRAM_IMR3L
, &
tmp_addr
);

206 i‡(
tmp_addr
 & 
IMR_LOCK_BIT
) {

207  
SYSERR
;

210 i‡(
tmp_addr
) {

211 
	`öãl_˛n_óæy_sb_wrôe_ªg
(
SB_ID_ESRAM
, 
CFG_WRITE_OPCODE
,

212 
DRAM_IMR3RM
, 
IMR_READ_ENABLE_ALL
);

213 
	`öãl_˛n_óæy_sb_wrôe_ªg
(
SB_ID_ESRAM
, 
CFG_WRITE_OPCODE
,

214 
DRAM_IMR3WM
,

215 
IMR_WRITE_ENABLE_ALL
);

218 
	`˛n_ªmove_imr_boŸ_∑øms
();

219 
	`˛n_ªmove_imr_bzimage
();

220 
	`˛n_ªmove_imr_grub
();

222  
OK
;

223 
	}
}

	@system/evec.c

3 
	~<xöu.h
>

7 
__©åibuã__
 ((
__∑cked__
)Ë
	gidt
 {

8 
	gigd_loff£t
;

9 
	gigd_£g£l
;

10 
	gigd_rsvd
 : 5;

11 
	gigd_mbz
 : 3;

12 
	gigd_ty≥
 : 5;

13 
	gigd_d∂
 : 2;

14 
	gigd_¥e£¡
 : 1;

15 
	gigd_hoff£t
;

23 
uöt16
 
	ggúmask
;

25 
	#IMR1
 0x21

	)

26 
	#IMR2
 0xA1

	)

28 
	#ICU1
 0x20

	)

29 
	#ICU2
 0xA0

	)

31 
	#OCR
 
ICU1


	)

32 
	#IMR
 (
ICU1
+1Ë

	)

34 
	#EOI
 0x20

	)

36 
	#NID
 49

	)

37 
	#IGDT_TRAPG
 15

	)

38 
	#IGDT_INTRG
 0xê

	)

40 
_8259_£túmask
();

42 
öt_íåy
 
	göt_a˘i⁄s
[
MAX_EXT_IRQS
];

44 
idt
 idt[
NID
];

45 
de„vec
[];

48 vﬁ©ûê
œpic_c§eg
 *
	gœpic
 = (lapic_csreg *)

49 
LAPIC_BASE_ADDR
;

55 
öt32
 
	$öôevec
()

57 
i
;

59 
i
 = 0; i < 
MAX_EXT_IRQS
; i++) {

60 
öt_a˘i⁄s
[
i
].
nôems
 = 0;

65 
i
 = 0; i < 
NID
 - 1; i++) {

66 
	`£t_evec
(
i
, 
de„vec
[i]);

71 
	`lidt
();

75 
gúmask
 = 0xfffb;

80 
	`outb
(
ICU1
, 0x11);

81 
	`outb
(
ICU1
+1, 0x20);

82 
	`outb
(
ICU1
+1, 0x4);

83 
	`outb
(
ICU1
+1, 0x1);

84 
	`outb
(
ICU1
, 0xb);

87 
	`outb
(
ICU2
, 0x11);

88 
	`outb
(
ICU2
+1, 0x28);

89 
	`outb
(
ICU2
+1, 0x2);

90 
	`outb
(
ICU2
+1, 0xb);

91 
	`outb
(
ICU2
, 0xb);

93 
	`_8259_£túmask
();

97 
i
 = 0; i < 24; i++) {

98 *((
uöt32
 *)
IOAPIC_IDX_ADDR
Ë0x10 + (2 * 
i
);

99 *((
uöt32
 *)
IOAPIC_WIN_ADDR
) |= 0x00010000;

102  
OK
;

103 
	}
}

109 
öt32
 
	$£t_evec
(
uöt32
 
xnum
, uöt32 
h™dÀr
)

111 
idt
 *
pidt
;

113 
pidt
 = &
idt
[
xnum
];

114 
pidt
->
igd_loff£t
 = 
h™dÀr
;

115 
pidt
->
igd_£g£l
 = 0x8;

116 
pidt
->
igd_mbz
 = 0;

117 
pidt
->
igd_ty≥
 = 
IGDT_INTRG
;

118 
pidt
->
igd_d∂
 = 0;

119 
pidt
->
igd_¥e£¡
 = 1;

120 
pidt
->
igd_hoff£t
 = 
h™dÀr
 >> 16;

122  
OK
;

123 
	}
}

129 
	$£t_ivec
 (

130 
uöt32
 
öum
,

131 *
h™dÀr
,

132 
öt32
 
¨g


135 
öt_íåy
 *
õ¡
;

136 
öt_öfo
 *
iöfo
;

137 
ötmask
 
mask
;

139 
	`XDEBUG_KPRINTF
("[£t_ivec] inum: %d,Üimô: %d\n", 
öum
, 
IRQBASE
 + 
MAX_EXT_IRQS
);

143 if–(
öum
 < 
IRQBASE
Ë|| (öum >(IRQBASE + 
MAX_EXT_IRQS
)) ) {

144 
	`XDEBUG_KPRINTF
("[set_ivec] fail sanity check\n");

145  
SYSERR
;

148 
mask
 = 
	`dißbÀ
();

150 
õ¡
 = &
öt_a˘i⁄s
[
öum
-
IRQBASE
];

154 if(
õ¡
->
nôems
 >
MAX_IRQ_SHARING
) {

155 
	`ª°‹e
(
mask
);

156 
	`XDEBUG_KPRINTF
("[set_ivec] max handlersÑegistered\n");

157  
SYSERR
;

160 
iöfo
 = &
õ¡
->
öt_ôems
[õ¡->
nôems
++];

164 
iöfo
->
öt_h™dÀr
 = ((*)(
öt32
))
h™dÀr
;

165 
iöfo
->
öt_¨g
 = 
¨g
;

167 
	`ª°‹e
(
mask
);

168  
OK
;

169 
	}
}

175 
öt32
 
	$iﬂpic_úq2vec
 (

176 
öt32
 
úq
,

177 
öt32
 
vec


180 *((
uöt32
 *)
IOAPIC_IDX_ADDR
Ë0x10 + (2 * 
úq
) + 1;

181 *((
uöt32
 *)
IOAPIC_WIN_ADDR
) = 0;

183 *((
uöt32
 *)
IOAPIC_IDX_ADDR
Ë0x10 + (2 * 
úq
);

184 *((
uöt32
 *)
IOAPIC_WIN_ADDR
Ë0x0000a000 | 
vec
;

186  
OK
;

187 
	}
}

193 
sysˇŒ
 
	$öt_di•©ch
 (

194 
öt32
 
öum
,

195 *
ßved•


198 
öt_íåy
 *
õ¡
;

199 
öt_öfo
 *
iöfo
;

200 
öt32
 
i
;

202 
œpic
->
eoi
 = 0;

206 if–(
öum
 < 
IRQBASE
Ë|| (öum >(IRQBASE + 
MAX_EXT_IRQS
)) ) {

210 
õ¡
 = &
öt_a˘i⁄s
[
öum
-
IRQBASE
];

212 if(
õ¡
->
nôems
 == 0) {

214 
	`XDEBUG_KPRINTF
("[int_dispatch] No handler forÅhis\n");

215 
	`XDEBUG_KPRINTF
("[öt_di•©ch] inum: %d\n", 
öum
);

216 
	`å≠
(
öum
, 
ßved•
);

222 
i
 = 0; i < 
õ¡
->
nôems
; i++) {

224 
iöfo
 = &
õ¡
->
öt_ôems
[
i
];

225 i‡(
öum
 == 0x80) {

226 
ªt
 = 
	`sysˇŒh™dÀr
(
iöfo
->
öt_¨g
, 
ßved•
);

227 
	`XDEBUG_KPRINTF
("[öt_di•©ch]Ñë: %d\n", 
ªt
);

228  
ªt
;

231 
iöfo
->
	`öt_h™dÀr
(iöfo->
öt_¨g
);

238 
	}
}

244 
	$_8259_£túmask
()

246 i‡(
gúmask
 == 0) {

249 
	`outb
(
IMR1
, 
gúmask
&0xff);

250 
	`outb
(
IMR2
, (
gúmask
>>8)&0xff);

252 
	}
}

254 *
	göames
[] = {

277 
	$å≠
 (

278 
öum
,

279 *
•


282 
ötmask
 
mask
;

283 *
ªgs
;

287 
mask
 = 
	`dißbÀ
();

291 
ªgs
 = 
•
;

295 
	`k¥ötf
("XinuÅrap!\n");

296 i‡(
öum
 < 16) {

297 
	`k¥ötf
("ex˚±i⁄ %d (%sËcuºpid %d (%s)\n", 
öum
,

298 
öames
[
öum
], 
cuºpid
, 
¥o˘ab
[cuºpid].
¥«me
);

300 
	`k¥ötf
("ex˚±i⁄ %d cuºpid %d (%s)\n", 
öum
, 
cuºpid
,

301 
¥o˘ab
[
cuºpid
].
¥«me
);

307 
•
 = 
ªgs
 + 8;

311 i‡(
öum
 == 8 || (inum >= 10 && inum <= 14)) {

312 
	`k¥ötf
("îr‹ codê%08x (%u)\n", *
•
, *sp);

313 
•
++;

316 
	`k¥ötf
("CS %XÉù %X\n", *(
•
 + 1), *sp);

317 
	`k¥ötf
("eÊag†%X\n", *(
•
 + 2));

321 
•
 = 
ªgs
 + 7;

323 
	`k¥ötf
("register dump:\n");

324 
	`k¥ötf
("óx %08X (%u)\n", *
•
, *sp);

325 
•
--;

326 
	`k¥ötf
("ecx %08X (%u)\n", *
•
, *sp);

327 
•
--;

328 
	`k¥ötf
("edx %08X (%u)\n", *
•
, *sp);

329 
•
--;

330 
	`k¥ötf
("ebx %08X (%u)\n", *
•
, *sp);

331 
•
--;

332 
	`k¥ötf
("e• %08X (%u)\n", *
•
, *sp);

333 
•
--;

334 
	`k¥ötf
("eb∞%08X (%u)\n", *
•
, *sp);

335 
•
--;

336 
	`k¥ötf
("esò%08X (%u)\n", *
•
, *sp);

337 
•
--;

338 
	`k¥ötf
("edò%08X (%u)\n", *
•
, *sp);

339 
•
--;

341 
	`∑nic
("TrapÖrocessing complete...\n");

342 
	`ª°‹e
(
mask
);

343 
	}
}

	@system/exit.c

3 
	~<xöu.h
>

9 
	$exô
()

11 
	`kûl
(
	`gëpid
());

12 
	}
}

	@system/fileclose.c

3 
	~<xöu.h
>

9 
	$fûe˛o£
(* 
∑th
)

11 
öt32
 
i
;

12 
ötmask
 
mask
;

14 
mask
 = 
	`dißbÀ
();

16 
i
 = 0; i < 
NFILE
; i ++) {

17 i‡(
fûëab
[
i
].
fûe°©e
 =
FILE_OCCUPIED
) {

18 i‡(
	`°rcmp
(
fûëab
[
i
].
fûï©h
, 
∑th
) == 0) {

19 i‡(
fûëab
[
i
].
fûe›í
 =
FILE_OPEN
) {

20 
	`ª°‹e
(
mask
);

21  
OK
;

24 
	`ª°‹e
(
mask
);

25  
SYSERR
;

31 
	`ª°‹e
(
mask
);

32  
SYSERR
;

34 
	}
}

	@system/filelist.c

3 
	~<xöu.h
>

9 
	$fûñi°
(* 
buf_li°_out
, 
buf_li°_max
)

11 
öt32
 
i
;

12 
ötmask
 
mask
;

14 
mask
 = 
	`dißbÀ
();

16 *
buf_li°_out
 = '\0';

17 
buf_li°_cou¡î
 = 0;

18 
i
 = 0; i < 
NFILE
; i++) {

19 i‡(
fûëab
[
i
].
fûe°©e
 =
FILE_OCCUPIED
) {

20 i‡(
buf_li°_cou¡î
 + 
	`°æí
(
fûëab
[
i
].
fûï©h
Ë<
buf_li°_max
) {

21 
j
;

22 
j
 = 0; j < 
	`°æí
(
fûëab
[
i
].
fûï©h
); j ++) {

23 
buf_li°_out
[
buf_li°_cou¡î
 + 
j
] = 
fûëab
[
i
].
fûï©h
[j];

26 
buf_li°_cou¡î
 +(
	`°æí
(
fûëab
[
i
].
fûï©h
));

27 
buf_li°_out
[
buf_li°_cou¡î
] = '\n';

28 
buf_li°_cou¡î
 ++;

31 
loˇl_cou¡î
 = 0;

32  ; 
buf_li°_cou¡î
 < 
buf_li°_max
; buf_list_counter ++) {

33 *(
buf_li°_out
 + 
buf_li°_cou¡î
Ë*(
fûëab
[
i
].
fûï©h
 + 
loˇl_cou¡î
);

34 
loˇl_cou¡î
 ++;

36 
buf_li°_out
[
buf_li°_cou¡î
] = '\0';

37 
	`XDEBUG_KPRINTF
("[fûñi°]Öªfix: %s\n", 
buf_li°_out
);

38 
	`ª°‹e
(
mask
);

39  
SYSERR
;

43 
buf_li°_out
[
buf_li°_cou¡î
] = '\0';

45 
	`ª°‹e
(
mask
);

46  
OK
;

47 
	}
}

	@system/fileopen.c

3 
	~<xöu.h
>

9 * 
	$fûe›í
(* 
∑th
, * 
fûe_size_out
)

11 
öt32
 
i
;

12 
ötmask
 
mask
;

14 
mask
 = 
	`dißbÀ
();

17 
i
 = 0; i < 
NFILE
; i ++) {

18 i‡(
fûëab
[
i
].
fûe°©e
 =
FILE_OCCUPIED
) {

21 i‡(
	`°rcmp
(
fûëab
[
i
].
fûï©h
, 
∑th
) == 0) {

23 i‡(
fûëab
[
i
].
fûe›í
 =
FILE_OPEN
) {

24 
	`ª°‹e
(
mask
);

25  
SYSERR
;

27 *
fûe_size_out
 = 
fûëab
[
i
].
fûesize
;

28 
	`ª°‹e
(
mask
);

29  
fûëab
[
i
].
fûec⁄ã¡
;

34 
	`ª°‹e
(
mask
);

35  
SYSERR
;

36 
	}
}

	@system/fileregister.c

3 
	~<xöu.h
>

9 
	$fûîegi°î
(* 
∑th
, * 
fûe
, 
fûe_size
)

11 
fûì¡
* 
fûïr
;

12 
öt32
 
i
;

13 
ötmask
 
mask
;

15 
mask
 = 
	`dißbÀ
();

18 
i
 = 0; i < 
NFILE
; i ++) {

19 i‡(
fûëab
[
i
].
fûe°©e
 =
FILE_OCCUPIED
) {

20 i‡(
	`°rcmp
(
fûëab
[
i
].
fûï©h
, 
∑th
) == 0) {

21 
	`ª°‹e
(
mask
);

22  
SYSERR
;

28 
i
 = 0; i < 
NFILE
; i++) {

29 i‡(
fûëab
[
i
].
fûe°©e
 =
FILE_FREE
) {

33 i‡(
i
 =
NFILE
 - 1) {

34 
	`ª°‹e
(
mask
);

35  
SYSERR
;

39 
fûïr
 = &
fûëab
[
i
];

40 
fûïr
->
fûe°©e
 = 
FILE_OCCUPIED
;

41 
fûïr
->
fûï©h
 = 
∑th
;

42 
fûïr
->
fûec⁄ã¡
 = 
fûe
;

43 
fûïr
->
fûesize
 = 
fûe_size
;

44 
fûïr
->
fûe›í
 = 
FILE_UNOPEN
;

47 
	`XDEBUG_KPRINTF
("[fûîegi°î] fûï©h: %s\n", 
fûïr
->
fûï©h
);

48 
	`XDEBUG_KPRINTF
("[fûîegi°î] fûec⁄ã¡: %s\n", 
fûïr
->
fûec⁄ã¡
);

49 
	`XDEBUG_KPRINTF
("[fûîegi°î] fûesize: %d\n", 
fûïr
->
fûesize
);

51 
	`ª°‹e
(
mask
);

52  
OK
;

53 
	}
}

	@system/fileunregister.c

3 
	~<xöu.h
>

9 
	$fûeuƒegi°î
(* 
∑th
)

11 
fûì¡
* 
fûïr
;

12 
öt32
 
i
;

13 
ötmask
 
mask
;

15 
mask
 = 
	`dißbÀ
();

18 
i
 = 0; i < 
NFILE
; i ++) {

19 i‡(
fûëab
[
i
].
fûe°©e
 =
FILE_OCCUPIED
) {

20 i‡(
	`°rcmp
(
fûëab
[
i
].
fûï©h
, 
∑th
) == 0) {

21 i‡(
fûëab
[
i
].
fûe›í
 =
FILE_OPEN
) {

22 
	`ª°‹e
(
mask
);

23  
SYSERR
;

25 
fûëab
[
i
].
fûe°©e
 = 
FILE_FREE
;

26 
	`ª°‹e
(
mask
);

27  
OK
;

32 
	`ª°‹e
(
mask
);

33  
SYSERR
;

34 
	}
}

	@system/freebuf.c

3 
	~<xöu.h
>

9 
sysˇŒ
 
	$‰ìbuf
(

10 *
buÁddr


13 
ötmask
 
mask
;

14 
b≥¡ry
 *
bµå
;

15 
bpid32
 
poﬁid
;

17 
mask
 = 
	`dißbÀ
();

21 
buÁddr
 -(
bpid32
);

22 
poﬁid
 = *(
bpid32
 *)
buÁddr
;

23 i‡(
poﬁid
 < 0 ||Öoﬁid >
nbpoﬁs
) {

24 
	`ª°‹e
(
mask
);

25  
SYSERR
;

30 
bµå
 = &
bu·ab
[
poﬁid
];

34 ((
b≥¡ry
 *)
buÁddr
)->
b≤ext
 = 
bµå
->bpnext;

35 
bµå
->
b≤ext
 = (
b≥¡ry
 *)
buÁddr
;

36 
	`sig«l
(
bµå
->
bp£m
);

37 
	`ª°‹e
(
mask
);

38  
OK
;

39 
	}
}

	@system/freemem.c

3 
	~<xöu.h
>

9 
sysˇŒ
 
	$‰ìmem
(

10 *
blkaddr
,

11 
uöt32
 
nbyãs


14 
ötmask
 
mask
;

15 
memblk
 *
√xt
, *
¥ev
, *
block
;

16 
uöt32
 
t›
;

18 
mask
 = 
	`dißbÀ
();

19 i‡((
nbyãs
 =0Ë|| ((
uöt32
Ë
blkaddr
 < (uöt32Ë
möhóp
)

20 || ((
uöt32
Ë
blkaddr
 > (uöt32Ë
maxhóp
)) {

21 
	`ª°‹e
(
mask
);

22  
SYSERR
;

25 
nbyãs
 = (
uöt32
Ë
	`roundmb
(nbytes);

26 
block
 = (
memblk
 *)
blkaddr
;

28 
¥ev
 = &
memli°
;

29 
√xt
 = 
memli°
.
m√xt
;

30 (
√xt
 !
NULL
Ë&& (√xà< 
block
)) {

31 
¥ev
 = 
√xt
;

32 
√xt
 =Çext->
m√xt
;

35 i‡(
¥ev
 =&
memli°
) {

36 
t›
 = (
uöt32
Ë
NULL
;

38 
t›
 = (
uöt32
Ë
¥ev
 +Öªv->
mÀngth
;

43 i‡(((
¥ev
 !&
memli°
Ë&& (
uöt32
Ë
block
 < 
t›
)

44 || ((
√xt
 !
NULL
Ë&& (
uöt32
Ë
block
+
nbyãs
>(uint32)next)) {

45 
	`ª°‹e
(
mask
);

46  
SYSERR
;

49 
memli°
.
mÀngth
 +
nbyãs
;

53 i‡(
t›
 =(
uöt32
Ë
block
) {

54 
¥ev
->
mÀngth
 +
nbyãs
;

55 
block
 = 
¥ev
;

57 
block
->
m√xt
 = 
√xt
;

58 
block
->
mÀngth
 = 
nbyãs
;

59 
¥ev
->
m√xt
 = 
block
;

64 i‡(((
uöt32
Ë
block
 + block->
mÀngth
Ë=(uöt32Ë
√xt
) {

65 
block
->
mÀngth
 +
√xt
->mlength;

66 
block
->
m√xt
 = 
√xt
->mnext;

68 
	`ª°‹e
(
mask
);

69  
OK
;

70 
	}
}

	@system/getbuf.c

3 
	~<xöu.h
>

9 *
	$gëbuf
(

10 
bpid32
 
poﬁid


13 
ötmask
 
mask
;

14 
b≥¡ry
 *
bµå
;

15 
b≥¡ry
 *
buÂå
;

17 
mask
 = 
	`dißbÀ
();

21 i‡–(
poﬁid
 < 0 ||Öoﬁid >
nbpoﬁs
) ) {

22 
	`ª°‹e
(
mask
);

23  (*)
SYSERR
;

26 
bµå
 = &
bu·ab
[
poﬁid
];

30 
	`waô
(
bµå
->
bp£m
);

31 
buÂå
 = 
bµå
->
b≤ext
;

35 
bµå
->
b≤ext
 = 
buÂå
->bpnext;

39 *(
bpid32
 *)
buÂå
 = 
poﬁid
;

40 
buÂå
 = (
b≥¡ry
 *)((
bpid32
) + (*)bufptr);

41 
	`ª°‹e
(
mask
);

42  (*)
buÂå
;

43 
	}
}

	@system/getc.c

3 
	~<xöu.h
>

9 
sysˇŒ
 
	$gëc
(

10 
did32
 
des¸p


13 
ötmask
 
mask
;

14 
díåy
 *
dev±r
;

15 
öt32
 
ªtvÆ
;

17 
mask
 = 
	`dißbÀ
();

18 i‡(
	`isbaddev
(
des¸p
)) {

19 
	`ª°‹e
(
mask
);

20  
SYSERR
;

22 
dev±r
 = (
díåy
 *Ë&
devèb
[
des¸p
];

23 
ªtvÆ
 = (*
dev±r
->
dvgëc
) (devptr);

24 
	`ª°‹e
(
mask
);

25  
ªtvÆ
;

26 
	}
}

	@system/getdev.c

3 
	~<xöu.h
>

4 
	~<°rög.h
>

10 
did32
 
	$gëdev
(

11 *
dev«me


14 
ötmask
 
mask
;

15 
did32
 
id
;

17 
mask
 = 
	`dißbÀ
();

18 
id
 = 0; id < 
NDEVS
; id++) {

19 i‡(
	`°∫cmp
(
dev«me
, 
devèb
[
id
].
dv«me
, 
DEVNAMLEN
)) {

20 
	`ª°‹e
(
mask
);

21  
id
;

24 
	`ª°‹e
(
mask
);

25  (
did32
Ë
SYSERR
;

26 
	}
}

	@system/getitem.c

3 
	~<xöu.h
>

9 
pid32
 
	$gëfú°
(

10 
qid16
 
q


14 
pid32
 
hód
;

16 i‡(
	`i£m±y
(
q
)) {

17  
EMPTY
;

20 
hód
 = 
	`queuehód
(
q
);

21  
	`gëôem
(
queuëab
[
hód
].
q√xt
);

22 
	}
}

28 
pid32
 
	$gëœ°
(

29 
qid16
 
q


33 
pid32
 
èû
;

35 i‡(
	`i£m±y
(
q
)) {

36  
EMPTY
;

39 
èû
 = 
	`queuëaû
(
q
);

40  
	`gëôem
(
queuëab
[
èû
].
q¥ev
);

41 
	}
}

47 
pid32
 
	$gëôem
(

48 
pid32
 
pid


51 
pid32
 
¥ev
, 
√xt
;

53 
√xt
 = 
queuëab
[
pid
].
q√xt
;

54 
¥ev
 = 
queuëab
[
pid
].
q¥ev
;

55 
queuëab
[
¥ev
].
q√xt
 = 
√xt
;

56 
queuëab
[
√xt
].
q¥ev
 = 
¥ev
;

57  
pid
;

58 
	}
}

	@system/getmem.c

3 
	~<xöu.h
>

9 *
	$gëmem
(

10 
uöt32
 
nbyãs


13 
ötmask
 
mask
;

14 
memblk
 *
¥ev
, *
cuº
, *
À·ovî
;

16 
mask
 = 
	`dißbÀ
();

17 i‡(
nbyãs
 == 0) {

18 
	`ª°‹e
(
mask
);

19  (*)
SYSERR
;

22 
nbyãs
 = (
uöt32
Ë
	`roundmb
(nbytes);

24 
¥ev
 = &
memli°
;

25 
cuº
 = 
memli°
.
m√xt
;

26 
cuº
 !
NULL
) {

28 i‡(
cuº
->
mÀngth
 =
nbyãs
) {

29 
¥ev
->
m√xt
 = 
cuº
->mnext;

30 
memli°
.
mÀngth
 -
nbyãs
;

31 
	`ª°‹e
(
mask
);

32  (*)(
cuº
);

34 } i‡(
cuº
->
mÀngth
 > 
nbyãs
) {

35 
À·ovî
 = (
memblk
 *)((
uöt32
Ë
cuº
 +

36 
nbyãs
);

37 
¥ev
->
m√xt
 = 
À·ovî
;

38 
À·ovî
->
m√xt
 = 
cuº
->mnext;

39 
À·ovî
->
mÀngth
 = 
cuº
->mÀngth - 
nbyãs
;

40 
memli°
.
mÀngth
 -
nbyãs
;

41 
	`ª°‹e
(
mask
);

42  (*)(
cuº
);

44 
¥ev
 = 
cuº
;

45 
cuº
 = cuº->
m√xt
;

48 
	`ª°‹e
(
mask
);

49  (*)
SYSERR
;

50 
	}
}

	@system/getpid.c

3 
	~<xöu.h
>

9 
pid32
 
	$gëpid
()

11  (
cuºpid
);

12 
	}
}

	@system/getprio.c

3 
	~<xöu.h
>

9 
sysˇŒ
 
	$gë¥io
(

10 
pid32
 
pid


13 
ötmask
 
mask
;

14 
uöt32
 
¥io
;

16 
mask
 = 
	`dißbÀ
();

17 i‡(
	`isbadpid
(
pid
)) {

18 
	`ª°‹e
(
mask
);

19  
SYSERR
;

21 
¥io
 = 
¥o˘ab
[
pid
].
¥¥io
;

22 
	`ª°‹e
(
mask
);

23  
¥io
;

24 
	}
}

	@system/getstk.c

3 
	~<xöu.h
>

9 *
	$gë°k
(

10 
uöt32
 
nbyãs


13 
ötmask
 
mask
;

14 
memblk
 *
¥ev
, *
cuº
;

15 
memblk
 *
fôs
, *
fô•ªv
;

17 
mask
 = 
	`dißbÀ
();

18 i‡(
nbyãs
 == 0) {

19 
	`ª°‹e
(
mask
);

20  (*)
SYSERR
;

23 
nbyãs
 = (
uöt32
Ë
	`roundmb
(nbytes);

25 
¥ev
 = &
memli°
;

26 
cuº
 = 
memli°
.
m√xt
;

27 
fôs
 = 
NULL
;

28 
fô•ªv
 = 
NULL
;

30 
cuº
 !
NULL
) {

31 i‡(
cuº
->
mÀngth
 >
nbyãs
) {

32 
fôs
 = 
cuº
;

33 
fô•ªv
 = 
¥ev
;

35 
¥ev
 = 
cuº
;

36 
cuº
 = cuº->
m√xt
;

39 i‡(
fôs
 =
NULL
) {

40 
	`ª°‹e
(
mask
);

41  (*)
SYSERR
;

43 i‡(
nbyãs
 =
fôs
->
mÀngth
) {

44 
fô•ªv
->
m√xt
 = 
fôs
->mnext;

46 
fôs
->
mÀngth
 -
nbyãs
;

47 
fôs
 = (
memblk
 *)((
uöt32
)fô†+ fôs->
mÀngth
);

49 
memli°
.
mÀngth
 -
nbyãs
;

50 
	`ª°‹e
(
mask
);

51  (*)((
uöt32
Ë
fôs
 + 
nbyãs
 - (uint32));

52 
	}
}

	@system/getticks.c

3 
	~<xöu.h
>

9 
uöt64
 
	$gëticks
()

11 
uöt64
 
ªt
;

12 
asm
 vﬁ©ûê–"rdtsc" : "=A"(
ªt
) );

13  
ªt
;

14 
	}
}

	@system/gettime.c

3 
	~<xöu.h
>

9 
°©us
 
	$gëtime
(

10 
uöt32
 *
timv¨


13 
uöt32
 
now
;

14 
öt32
 
ªtvÆ
;

18 
ªtvÆ
 = 
	`gëutime
(&
now
);

19 i‡(
ªtvÆ
 =
SYSERR
) {

20  
SYSERR
;

25 *
timv¨
 = 
	`utim2…im
(
now
);

26  
OK
;

27 
	}
}

	@system/getutime.c

3 
	~<xöu.h
>

4 
	~<°dio.h
>

10 
°©us
 
	$gëutime
(

11 
uöt32
 *
timv¨


14 
uöt32
 
now
;

15 
öt32
 
ªtvÆ
;

16 
uid32
 
¶Ÿ
;

17 
	s¡p
 {

18 
byã
 
livn
;

19 
byã
 
°øt
;

20 
byã
 
pﬁl
;

21 
byã
 
¥ecisi⁄
;

22 
uöt32
 
roŸdñay
;

23 
uöt32
 
roŸdi•
;

24 
uöt32
 
ªfid
;

25 
uöt32
 
ª·ime°amp
[2];

26 
uöt32
 
‹ôime°amp
[2];

27 
uöt32
 
ª˘ime°amp
[2];

28 
uöt32
 
å¡ime°amp
[2];

29 } 
¡pmsg
;

31 i‡(
D©e
.
dt_boŸvÆid
) {

32 *
timv¨
 = 
D©e
.
dt_boŸ
 + 
˛ktime
;

33  
OK
;

38 i‡(
	`gëloˇlù
(Ë=
SYSERR
) {

39  
SYSERR
;

45 i‡(
NëD©a
.
¡p£rvî
 == 0) {

46 i‡(
	`dŸ2ù
(
TIMESERVER
, &
NëD©a
.
¡p£rvî
Ë=
SYSERR
) {

47  
SYSERR
;

53 
¶Ÿ
 = 
	`udp_ªgi°î
(
NëD©a
.
¡p£rvî
, 
TIMERPORT
, 
TIMELPORT
);

54 i‡(
¶Ÿ
 =
SYSERR
) {

55 
	`Ârötf
(
°dîr
,"getutime: cannotÑegisterá udpÖort %d\n",

56 
TIMERPORT
);

57  
SYSERR
;

62 
	`mem£t
((*)&
¡pmsg
, 0x00, (ntpmsg));

63 
¡pmsg
.
livn
 = 0x1b;

64 
ªtvÆ
 = 
	`udp_£nd
(
¶Ÿ
, (*)&
¡pmsg
, (ntpmsg));

65 i‡(
ªtvÆ
 =
SYSERR
) {

66 
	`Ârötf
(
°dîr
,"getutime: cannot sendÅoÅhe server\n");

67 
	`udp_ªÀa£
(
¶Ÿ
);

68  
SYSERR
;

73 
ªtvÆ
 = 
	`udp_ªcv
(
¶Ÿ
, (*Ë&
¡pmsg
, (ntpmsg),

74 
TIMETIMEOUT
);

75 i‡–(
ªtvÆ
 =
SYSERR
Ë|| (ªtvÆ =
TIMEOUT
) ) {

76 
	`udp_ªÀa£
(
¶Ÿ
);

77  
SYSERR
;

79 
	`udp_ªÀa£
(
¶Ÿ
);

83 
now
 = 
	`¡im2xtim
–
	`¡ohl
(
¡pmsg
.
å¡ime°amp
[0]) );

84 
D©e
.
dt_boŸ
 = 
now
 - 
˛ktime
;

85 
D©e
.
dt_boŸvÆid
 = 
TRUE
;

86 *
timv¨
 = 
now
;

87  
OK
;

88 
	}
}

	@system/init.c

3 
	~<xöu.h
>

9 
sysˇŒ
 
	$öô
(

10 
did32
 
des¸p


13 
ötmask
 
mask
;

14 
díåy
 *
dev±r
;

15 
öt32
 
ªtvÆ
;

17 
mask
 = 
	`dißbÀ
();

18 i‡(
	`isbaddev
(
des¸p
)) {

19 
	`ª°‹e
(
mask
);

20  
SYSERR
;

22 
dev±r
 = (
díåy
 *Ë&
devèb
[
des¸p
];

23 
ªtvÆ
 = (*
dev±r
->
dvöô
) (devptr);

24 
	`ª°‹e
(
mask
);

25  
ªtvÆ
;

26 
	}
}

	@system/initialize.c

5 
	~<xöu.h
>

6 
	~<°rög.h
>

8 
°¨t
();

9 *
_íd
;

13 
maö
();

14 
sysöô
();

15 
memöô
();

16 
loˇl
 
¥o˚ss
 
°¨tup
();

19 #i‡
XDEBUG


20 
ã°ˇ£_1
();

21 
ã°ˇ£_2
();

22 
ã°ˇ£_3
();

23 
ã°ˇ£_4
();

28 
¥o˚¡
 
	g¥o˘ab
[
NPROC
];

29 
£¡ry
 
	g£mèb
[
NSEM
];

30 
memblk
 
	gmemli°
;

31 
fûì¡
 
	gfûëab
[
NFILE
];

34 
lﬂd_t
 
	glﬂdèb
[
NLOAD
];

37 
dl_h™dÀ_t
 
	gh™dÀèb
[
NHANDLE
];

41 
	g¥cou¡
;

42 
pid32
 
	gcuºpid
;

46 
	#CONSOLE_RESET
 " \033[0m\033[2J\033[;H"

	)

62 
	$nuŒu£r
()

64 
memblk
 *
mem±r
;

65 
uöt32
 
‰ì_mem
;

69 
	`sysöô
();

72 
‰ì_mem
 = 0;

73 
mem±r
 = 
memli°
.
m√xt
; mem±∏!
NULL
;

74 
mem±r
 = mem±r->
m√xt
) {

75 
‰ì_mem
 +
mem±r
->
mÀngth
;

77 
	`k¥ötf
("%10d byã†o‡‰ì mem‹y. Fªêli°:\n", 
‰ì_mem
);

78 
mem±r
=
memli°
.
m√xt
; mem±r!=
NULL
;memptr = memptr->mnext) {

79 
	`k¥ötf
(" [0x%08XÅo 0x%08X]\n",

80 (
uöt32
)
mem±r
, ((uöt32)mem±rË+ mem±r->
mÀngth
 - 1);

83 
	`k¥ötf
("%10d bytes of Xinu code.\n",

84 (
uöt32
)&
ëext
 - (uöt32)&
ãxt
);

85 
	`k¥ötf
(" [0x%08XÅo 0x%08X]\n",

86 (
uöt32
)&
ãxt
, (uöt32)&
ëext
 - 1);

87 
	`k¥ötf
("%10d bytes of data.\n",

88 (
uöt32
)&
ebss
 - (uöt32)&
d©a
);

89 
	`k¥ötf
(" [0x%08XÅo 0x%08X]\n\n",

90 (
uöt32
)&
d©a
, (uöt32)&
ebss
 - 1);

94 
	`íabÀ
();

98 
	`√t_öô
();

102 
	`ªsume
(
	`¸óã
((*)
°¨tup
, 
INITSTK
, 
INITPRIO
,

103 "Sèπu∞¥o˚ss", 0, 
NULL
));

108 
TRUE
) {

112 
asm
 volatile ("hlt");

115 
	}
}

125 
loˇl
 
¥o˚ss
 
	$°¨tup
()

127 
uöt32
 
ùaddr
;

128 
°r
[128];

133 
ùaddr
 = 
	`gëloˇlù
();

134 i‡((
öt32
)
ùaddr
 =
SYSERR
) {

135 
	`k¥ötf
("Cannot obtainán IPáddress\n");

138 
ùaddr
 = 
NëD©a
.
ùuˇ°
;

139 
	`•rötf
(
°r
, "%d.%d.%d.%d",

140 (
ùaddr
>>24)&0xff, (ipaddr>>16)&0xff,

141 (
ùaddr
>>8)&0xff, ipaddr&0xff);

143 
	`k¥ötf
("Obèöed IPáddªs† %† (0x%08x)\n", 
°r
,

144 
ùaddr
);

149 #i‡
XTEST


150 
	`ªsume
(
	`¸óã
((*)
maö
, 
INITSTK
, 
INITPRIO
,

151 "MaöÖro˚ss", 0, 
NULL
));

157 #i‡
XDEBUG


167 
	`ªsume
(
	`¸óã
((*)
ã°ˇ£_4
, 
INITSTK
, 50, "testcase 4", 0,

168 
NULL
));

174  
OK
;

175 
	}
}

184 
	$sysöô
()

186 
öt32
 
i
;

187 
¥o˚¡
 *
¥±r
;

188 
£¡ry
 *
£m±r
;

189 
fûì¡
 *
fûïr
;

193 
	`∂©öô
();

197 
	`k¥ötf
(
CONSOLE_RESET
);

198 
	`k¥ötf
("\n%s\n\n", 
VERSION
);

202 
	`öôevec
();

206 
	`memöô
();

212 
¥cou¡
 = 1;

216 
De„r
.
nde„rs
 = 0;

220 
i
 = 0; i < 
NPROC
; i++) {

221 
¥±r
 = &
¥o˘ab
[
i
];

222 
¥±r
->
¥°©e
 = 
PR_FREE
;

223 
¥±r
->
¥«me
[0] = 
NULLCH
;

224 
¥±r
->
¥°kba£
 = 
NULL
;

225 
¥±r
->
¥¥io
 = 0;

230 
¥±r
 = &
¥o˘ab
[
NULLPROC
];

231 
¥±r
->
¥°©e
 = 
PR_CURR
;

232 
¥±r
->
¥¥io
 = 0;

233 
	`°∫˝y
(
¥±r
->
¥«me
, "prnull", 7);

234 
¥±r
->
¥°kba£
 = 
	`gë°k
(
NULLSTK
);

235 
¥±r
->
¥°kÀn
 = 
NULLSTK
;

236 
¥±r
->
¥°k±r
 = 0;

237 
cuºpid
 = 
NULLPROC
;

241 
i
 = 0; i < 
NSEM
; i++) {

242 
£m±r
 = &
£mèb
[
i
];

243 
£m±r
->
s°©e
 = 
S_FREE
;

244 
£m±r
->
scou¡
 = 0;

245 
£m±r
->
squeue
 = 
	`√wqueue
();

250 
	`buföô
();

254 
i
 = 0; i < 
NFILE
; i++) {

255 
fûïr
 = &
fûëab
[
i
];

256 
fûïr
->
fûe°©e
 = 
FILE_FREE
;

257 
fûïr
->
fûï©h
 = 
NULL
;

258 
fûïr
->
fûec⁄ã¡
 = 
NULL
;

259 
fûïr
->
fûesize
 = 0;

260 
fûïr
->
fûe›í
 = 
FILE_UNOPEN
;

261 
j
;

262 
j
 = 0; j < 
NPROC
; j ++) {

263 
fûïr
->
lﬂd_¥o˚ss
[
j
] = 
DL_CLOSE
;

268 
	`sysˇŒöô
();

271 
i
 = 0; i < 
NLOAD
; i++) {

272 
lﬂdèb
[
i
].
°©us
 = 
LOAD_FREE
;

276 
i
 = 0; i < 
NHANDLE
; i++) {

277 
h™dÀèb
[
i
].
°©us
 = 
HANDLE_CLOSE
;

282 
ªadyli°
 = 
	`√wqueue
();

286 
	`˛köô
();

293 
i
 = 0; i < 
NDEVS
; i++) {

294 
	`öô
(
i
);

297 
	}
}

299 
öt32
 
	$°›
(*
s
)

301 
	`k¥ötf
("%s\n", 
s
);

302 
	`k¥ötf
("looping...ÖressÑeset\n");

305 
	}
}

307 
öt32
 
	$dñay
(
n
)

309 
	`DELAY
(
n
);

310  
OK
;

311 
	}
}

	@system/insert.c

3 
	~<xöu.h
>

9 
°©us
 
	$ö£π
(

10 
pid32
 
pid
,

11 
qid16
 
q
,

12 
öt32
 
key


15 
qid16
 
cuº
;

16 
qid16
 
¥ev
;

18 i‡(
	`isbadqid
(
q
Ë|| 
	`isbadpid
(
pid
)) {

19  
SYSERR
;

22 
cuº
 = 
	`fú°id
(
q
);

23 
queuëab
[
cuº
].
qkey
 >
key
) {

24 
cuº
 = 
queuëab
[cuº].
q√xt
;

29 
¥ev
 = 
queuëab
[
cuº
].
q¥ev
;

30 
queuëab
[
pid
].
q√xt
 = 
cuº
;

31 
queuëab
[
pid
].
q¥ev
 = 
¥ev
;

32 
queuëab
[
pid
].
qkey
 = 
key
;

33 
queuëab
[
¥ev
].
q√xt
 = 
pid
;

34 
queuëab
[
cuº
].
q¥ev
 = 
pid
;

35  
OK
;

36 
	}
}

	@system/insertd.c

3 
	~<xöu.h
>

9 
°©us
 
	$ö£πd
(

10 
pid32
 
pid
,

11 
qid16
 
q
,

12 
öt32
 
key


15 
öt32
 
√xt
;

16 
öt32
 
¥ev
;

18 i‡(
	`isbadqid
(
q
Ë|| 
	`isbadpid
(
pid
)) {

19  
SYSERR
;

22 
¥ev
 = 
	`queuehód
(
q
);

23 
√xt
 = 
queuëab
[
	`queuehód
(
q
)].
q√xt
;

24 (
√xt
 !
	`queuëaû
(
q
)Ë&& (
queuëab
[√xt].
qkey
 <
key
)) {

25 
key
 -
queuëab
[
√xt
].
qkey
;

26 
¥ev
 = 
√xt
;

27 
√xt
 = 
queuëab
[√xt].
q√xt
;

32 
queuëab
[
pid
].
q√xt
 = 
√xt
;

33 
queuëab
[
pid
].
q¥ev
 = 
¥ev
;

34 
queuëab
[
pid
].
qkey
 = 
key
;

35 
queuëab
[
¥ev
].
q√xt
 = 
pid
;

36 
queuëab
[
√xt
].
q¥ev
 = 
pid
;

37 i‡(
√xt
 !
	`queuëaû
(
q
)) {

38 
queuëab
[
√xt
].
qkey
 -
key
;

41  
OK
;

42 
	}
}

	@system/ioerr.c

3 
	~<xöu.h
>

9 
devˇŒ
 
	$i€º
()

11  
SYSERR
;

12 
	}
}

	@system/ionull.c

3 
	~<xöu.h
>

9 
devˇŒ
 
	$i⁄uŒ
()

11  
OK
;

12 
	}
}

	@system/kill.c

3 
	~<xöu.h
>

9 
sysˇŒ
 
	$kûl
(

10 
pid32
 
pid


13 
ötmask
 
mask
;

14 
¥o˚¡
 *
¥±r
;

15 
öt32
 
i
;

17 
mask
 = 
	`dißbÀ
();

18 i‡(
	`isbadpid
(
pid
Ë|| (pid =
NULLPROC
)

19 || ((
¥±r
 = &
¥o˘ab
[
pid
])->
¥°©e
Ë=
PR_FREE
) {

20 
	`ª°‹e
(
mask
);

21  
SYSERR
;

24 i‡(--
¥cou¡
 <= 1) {

25 
	`xd⁄e
();

28 
	`£nd
(
¥±r
->
¥∑ª¡
, 
pid
);

29 
i
=0; i<3; i++) {

30 
	`˛o£
(
¥±r
->
¥desc
[
i
]);

32 
	`‰ì°k
(
¥±r
->
¥°kba£
,ÖΩå->
¥°kÀn
);

34 
¥±r
->
¥°©e
) {

35 
PR_CURR
:

36 
¥±r
->
¥°©e
 = 
PR_FREE
;

37 
	`ªsched
();

39 
PR_SLEEP
:

40 
PR_RECTIM
:

41 
	`un¶ìp
(
pid
);

42 
¥±r
->
¥°©e
 = 
PR_FREE
;

45 
PR_WAIT
:

46 
£mèb
[
¥±r
->
¥£m
].
scou¡
++;

49 
PR_READY
:

50 
	`gëôem
(
pid
);

54 
¥±r
->
¥°©e
 = 
PR_FREE
;

57 
	`ª°‹e
(
mask
);

58  
OK
;

59 
	}
}

	@system/kprintf.c

3 
	~<xöu.h
>

4 
	~<°d¨g.h
>

11 
sysˇŒ
 
	$kputc
(
byã
 
c
)

13 
díåy
 *
dev±r
;

14 vﬁ©ûê
u¨t_c§eg
 *
c§±r
;

15 
ötmask
 
mask
;

18 
mask
 = 
	`dißbÀ
();

20 
dev±r
 = (
díåy
 *Ë&
devèb
[
CONSOLE
];

21 
c§±r
 = (
u¨t_c§eg
 *)
dev±r
->
dvc§
;

24 i‡(
c§±r
 =
NULL
) {

25 
	`ª°‹e
(
mask
);

26  
SYSERR
;

30 (
c§±r
->
l§
 & 
UART_LSR_THRE
) == 0) {

35 
c§±r
->
buf„r
 = 
c
;

38 i‡(
c
 == '\n') {

40 (
c§±r
->
l§
 & 
UART_LSR_THRE
) == 0) {

43 
c§±r
->
buf„r
 = '\r';

46 
	`ª°‹e
(
mask
);

47  
OK
;

48 
	}
}

54 
sysˇŒ
 
	$kgëc
()

56 
úmask
;

57 vﬁ©ûê
u¨t_c§eg
 *
c§±r
;

58 
byã
 
c
;

59 
díåy
 *
dev±r
;

60 
ötmask
 
mask
;

63 
mask
 = 
	`dißbÀ
();

65 
dev±r
 = (
díåy
 *Ë&
devèb
[
CONSOLE
];

66 
c§±r
 = (
u¨t_c§eg
 *)
dev±r
->
dvc§
;

69 i‡(
c§±r
 =
NULL
) {

70 
	`ª°‹e
(
mask
);

71  
SYSERR
;

74 
úmask
 = 
c§±r
->
õr
;

75 
c§±r
->
õr
 = 0;

79 0 =(
c§±r
->
l§
 & 
UART_LSR_DR
)) {

85 
c
 = 
c§±r
->
rbr
;

86 
c§±r
->
õr
 = 
úmask
;

88 
	`ª°‹e
(
mask
);

89  
c
;

90 
	}
}

92 
_d›∫t
(*, 
va_li°
 
≠
, (*)());

98 
sysˇŒ
 
	$k¥ötf
(*
fmt
, ...)

100 
va_li°
 
≠
;

102 
	`va_°¨t
(
≠
, 
fmt
);

103 
	`_d›∫t
(
fmt
, 
≠
, ((*)())
kputc
);

104 
	`va_íd
(
≠
);

105  
OK
;

106 
	}
}

	@system/libmy-contents.c

1 
	glibmy_c⁄ã¡s
[] = {

559 
	glibmy_c⁄ã¡s_size
 = (
libmy_c⁄ã¡s
);

	@system/load.c

	@system/loadopen.c

3 
	~<xöu.h
>

5 * 
	$föd_sym
(c⁄° * 
«me
, 
Elf32_Sym
* 
syms
, 
sh_size
, c⁄° * 
°rögs
, * 
exec
)

7 
i
;

8 
i
 = 0; i < 
sh_size
 / (
Elf32_Sym
); i ++) {

9 i‡(
	`°rcmp
(
«me
, 
°rögs
 + 
syms
[
i
].
°_«me
) == 0) {

10  
exec
 + 
syms
[
i
].
°_vÆue
;

13  
NULL
;

14 
	}
}

17 
	$is_image_vÆid
(
Elf32_Ehdr
 *
hdr
)

19 * 
h
 = (*)
hdr
;

20 if–
h
[0] == 0x7f && h[1] == 0x45 && h[2] == 0x4c ) {

23 
	`XDEBUG_KPRINTF
("[dlopen] ELF file is invalid\n");

25 
	}
}

27 
sysˇŒ
 
	$image_lﬂd
 (*
ñf_°¨t
, 
size
)

30 
Elf32_Ehdr
 *
hdr
 = 
NULL
;

31 
Elf32_Phdr
 *
phdr
 = 
NULL
;

32 
Elf32_Shdr
 *
shdr
 = 
NULL
;

33 
Elf32_Sym
 *
sym_syms
 = 
NULL
;

34 *
sym_°rögs
 = 
NULL
;

35 
sym_sh_size
 = 0;

36 
Elf32_Sym
 *
dyn_syms
 = 
NULL
;

37 *
dyn_°rögs
 = 
NULL
;

38 
dyn_sh_size
 = 0;

39 *
°¨t
 = 
NULL
;

40 *
èddr
 = 
NULL
;

41 
i
 = 0;

42 *
exec
 = 
NULL
;

44 
hdr
 = (
Elf32_Ehdr
 *Ë
ñf_°¨t
;

45 i‡(
	`is_image_vÆid
(
hdr
) != 0) {

46 
	`XDEBUG_KPRINTF
("[dlopen] ELF file is valid\n");

49 
	`XDEBUG_KPRINTF
("[dlopen] ELF file is invalid\n");

50  
SYSERR
;

53 
bpid32
 
ñfbuÂoﬁ
 = 
	`mkbuÂoﬁ
(
size
, 1);

54 
exec
 = 
	`gëbuf
(
ñfbuÂoﬁ
);

56 if(!
exec
) {

57 
	`XDEBUG_KPRINTF
("image_load::Érrorállocating memory\n");

58  
SYSERR
;

62 
	`mem£t
(
exec
, 0x0, 
size
);

65 
phdr
 = (
Elf32_Phdr
 *)(
ñf_°¨t
 + 
hdr
->
e_phoff
);

66 
i
 = 0; i < 
hdr
->
e_phnum
; ++i) {

67 i‡(
phdr
[
i
].
p_ty≥
 !
PT_LOAD
) {

70 i‡(
phdr
[
i
].
p_fûesz
 >Öhdr[i].
p_memsz
) {

71 
	`XDEBUG_KPRINTF
("[dlopen] image_load::Ö_filesz >Ö_memsz\n");

72 
	`‰ìbuf
(
exec
);

73  
SYSERR
;

75 if(!
phdr
[
i
].
p_fûesz
) {

81 
°¨t
 = 
ñf_°¨t
 + 
phdr
[
i
].
p_off£t
;

82 
èddr
 = 
phdr
[
i
].
p_vaddr
 + 
exec
;

83 
	`XDEBUG_KPRINTF
("[dl›í] movê%x -> %x (%d byãs, off£à%xË\n", 
°¨t
, 
èddr
, 
phdr
[
i
].
p_fûesz
,Öhdr[i].
p_off£t
);

84 
	`mem˝y
(
èddr
, 
°¨t
, 
phdr
[
i
].
p_fûesz
);

89 
shdr
 = (
Elf32_Shdr
 *)(
ñf_°¨t
 + 
hdr
->
e_shoff
);

90 
Elf32_Shdr
* 
sh_°πab
 = &
shdr
[
hdr
->
e_sh°∫dx
];

91 * 
sh_°πab_p
 = 
ñf_°¨t
 + 
sh_°πab
->
sh_off£t
;

94 
i
 = 0; i < 
hdr
->
e_shnum
; ++i) {

95 i‡(
shdr
[
i
].
sh_ty≥
 =
SHT_SYMTAB
) {

96 
sym_syms
 = (
Elf32_Sym
*)(
ñf_°¨t
 + 
shdr
[
i
].
sh_off£t
);

97 
sym_°rögs
 = 
ñf_°¨t
 + 
shdr
[shdr[
i
].
sh_lök
].
sh_off£t
;

98 
sym_sh_size
 = 
shdr
[
i
].
sh_size
;

99 
	`XDEBUG_KPRINTF
("[dl›í] SYMTAB (sym_syms: %x, sym_°rögs: %x)\n", 
sym_syms
, 
sym_°rögs
 + 
shdr
[
i
].
sh_«me
);

101 * 
íåy
 = 
	`föd_sym
("_°¨t", 
sym_syms
, 
sym_sh_size
, 
sym_°rögs
, 
exec
);

122 
i
 = 0; i < 
hdr
->
e_shnum
; ++i) {

123 i‡(
shdr
[
i
].
sh_ty≥
 =
SHT_DYNSYM
) {

124 
dyn_syms
 = (
Elf32_Sym
*)(
ñf_°¨t
 + 
shdr
[
i
].
sh_off£t
);

125 
dyn_°rögs
 = 
ñf_°¨t
 + 
shdr
[shdr[
i
].
sh_lök
].
sh_off£t
;

126 
dyn_sh_size
 = 
shdr
[
i
].
sh_size
;

127 
	`XDEBUG_KPRINTF
("[dl›í] DYNSYM (dyn_syms: %x, dyn_°rögs: %x)\n", 
dyn_syms
, 
dyn_°rögs
);

129 i‡(
shdr
[
i
].
sh_ty≥
 =
SHT_REL
) {

131 
	`XDEBUG_KPRINTF
("[dlopen] Find REL, but we ignore\n");

136 
dl_h™dÀ_t
 
ªt_h™dÀ
;

137 
ªt_h™dÀ
.
°©us
 = 
HANDLE_OPEN
;

138 
ªt_h™dÀ
.
pid
 = 
cuºpid
;

139 
ªt_h™dÀ
.
ñf_°¨t
 =Élf_start;

140 
ªt_h™dÀ
.
exec
 =Éxec;

141 
ªt_h™dÀ
.
sym_syms
 = sym_syms;

142 
ªt_h™dÀ
.
sym_°rögs
 = sym_strings;

143 
ªt_h™dÀ
.
sym_sh_size
 = sym_sh_size;

144 
ªt_h™dÀ
.
dyn_syms
 = dyn_syms;

145 
ªt_h™dÀ
.
dyn_°rögs
 = dyn_strings;

146 
ªt_h™dÀ
.
dyn_sh_size
 = dyn_sh_size;

150 
i
 = 0; i < 
NHANDLE
; i++) {

151 i‡(
h™dÀèb
[
i
].
°©us
 =
HANDLE_CLOSE
) {

152 
h™dÀèb
[
i
] = 
ªt_h™dÀ
;

156 i‡(
i
 =
NHANDLE
) {

157 
	`XDEBUG_KPRINTF
("[dlopen]Çoávailable handle slot\n");

158  
SYSERR
;

161  
i
;

162 
	}
}

165 * 
	$fûe›í_lﬂd
(* 
∑th
, * 
fûe_size_out
)

167 
öt32
 
i
;

170 
i
 = 0; i < 
NFILE
; i ++) {

171 i‡(
fûëab
[
i
].
fûe°©e
 =
FILE_OCCUPIED
) {

172 i‡(
	`°rcmp
(
fûëab
[
i
].
fûï©h
, 
∑th
) == 0) {

173 *
fûe_size_out
 = 
fûëab
[
i
].
fûesize
;

174  
fûëab
[
i
].
fûec⁄ã¡
;

178  
SYSERR
;

179 
	}
}

181 
sysˇŒ
 
	$lﬂd›í
(* 
libøry_fûe_∑th
, 
id
)

183 
öt32
 
i
;

186 
fûe_size
 = 0;

187 * 
fûe
 = 
	`fûe›í_lﬂd
(
libøry_fûe_∑th
, &
fûe_size
);

188 i‡((*)
SYSERR
 =
fûe
) {

189 
	`XDEBUG_KPRINTF
("[loadopen] fileÇotÉxist\n");

190  
SYSERR
;

193 
h™dÀ
 = 
	`image_lﬂd
(
fûe
, 
fûe_size
);

194 i‡(
h™dÀ
 =
SYSERR
) {

195  
SYSERR
;

198 
lﬂd_t
 
ld_°©s
;

199 
ld_°©s
.
°©us
 = 
LOAD_FREE
;

200 
ld_°©s
.
autom©ic_lﬂd_°©e
 = 
AUTOMATIC_ON
;

201 
ld_°©s
.
lﬂd_by
 = 
id
;

204 
i
 = 0; i < 
NLOAD
; i ++) {

205 i‡(
lﬂdèb
[
i
].
°©us
 =
LOAD_FREE
) {

206 
lﬂdèb
[
i
] = 
ld_°©s
;

211  
h™dÀ
;

212 
	}
}

	@system/main.c

3 
	~<xöu.h
>

5 
¥o˚ss
 
	$maö
()

10 
	`ªcv˛r
();

11 
	`ªsume
(
	`¸óã
(
shñl
, 8192, 50, "shñl", 1, 
CONSOLE
));

15 
TRUE
) {

16 
	`ª˚ive
();

17 
	`¶ìpms
(200);

18 
	`k¥ötf
("\n\nMainÖrocessÑecreating shell\n\n");

19 
	`ªsume
(
	`¸óã
(
shñl
, 4096, 20, "shñl", 1, 
CONSOLE
));

21  
OK
;

23 
	}
}

	@system/mark.c

3 
	~<xöu.h
>

5 
öt32
 *
	gm¨ks
[
MAXMARK
];

6 
öt32
 
	gnm¨ks
;

7 
sid32
 
	gmkmuãx
;

13 
	$m¨köô
()

15 
nm¨ks
 = 0;

16 
mkmuãx
 = 
	`£m¸óã
(1);

17 
	}
}

24 
°©us
 
	$m¨k
(

25 
öt32
 *
loc


31 i‡–(*
loc
>=0Ë&& (*loc<
nm¨ks
Ë&& (
m¨ks
[*loc]==loc) ) {

32  
OK
;

37 i‡(
nm¨ks
 >
MAXMARK
) {

38  
SYSERR
;

43 
	`waô
(
mkmuãx
);

44 
m¨ks
[ (*
loc
Ë
nm¨ks
++ ] =Üoc;

45 
	`sig«l
(
mkmuãx
);

46  
OK
;

47 
	}
}

	@system/meminit.c

3 
	~<xöu.h
>

7 *
	gmöhóp
;

8 *
	gmaxhóp
;

12 
uöt32
 
	gboŸsign
 = 1;

14 
mboŸöfo
 *
	gboŸöfo
 = (mbootinfo *)1;

24 
__©åibuã__
 ((
__∑cked__
)Ë
	gsd
 {

25 
	gsd_lﬁimô
;

26 
	gsd_loba£
;

27 
	gsd_midba£
;

28 
	gsd_ac˚ss
;

29 
	gsd_hûim_Ê
;

30 
	gsd_hiba£
;

33 
	#NGD
 4

	)

34 
	#FLAGS_GRANULARITY
 0x80

	)

35 
	#FLAGS_SIZE
 0x40

	)

36 
	#FLAGS_SETTINGS
 (
FLAGS_GRANULARITY
 | 
FLAGS_SIZE
)

	)

38 
sd
 
	ggdt_c›y
[
NGD
] = {

50 
sd
 
gdt
[];

56 
	$memöô
() {

58 
memblk
 *
mem±r
;

59 
mbmªgi⁄
 *
mm≠_addr
;

60 
mbmªgi⁄
 *
mm≠_addªnd
;

61 
memblk
 *
√xt_mem±r
;

62 
uöt32
 
√xt_block_Àngth
;

64 
mm≠_addr
 = (
mbmªgi⁄
*)
NULL
;

65 
mm≠_addªnd
 = (
mbmªgi⁄
*)
NULL
;

68 
mem±r
 = &
memli°
;

69 
mem±r
->
m√xt
 = (
memblk
 *)
NULL
;

70 
mem±r
->
mÀngth
 = 0;

74 
möhóp
 = (*)&
íd
;

75 
maxhóp
 = 
möhóp
;

79 if(
boŸsign
 !
MULTIBOOT_SIGNATURE
) {

80 
	`∑nic
("couldÇot find multiboot signature");

82 if(!(
boŸöfo
->
Êags
 & 
MULTIBOOT_BOOTINFO_MMAP
)) {

83 
	`∑nic
("no mmap found in boot info");

87 
mm≠_addr
 = (
mbmªgi⁄
*)
boŸöfo
->mmap_addr;

90 
mm≠_addªnd
 = (
mbmªgi⁄
*)((
uöt8
*)
mm≠_addr
 + 
boŸöfo
->
mm≠_Àngth
);

93 
mm≠_addr
 < 
mm≠_addªnd
) {

96 if(
mm≠_addr
->
ty≥
 !
MULTIBOOT_MMAP_TYPE_USABLE
) {

97 
mm≠_addr
 = (
mbmªgi⁄
*)((
uöt8
*)mm≠_add∏+ mm≠_addr->
size
 + 4);

101 if((
uöt32
)
maxhóp
 < ((uöt32)
mm≠_addr
->
ba£_addr
 + (uöt32)mm≠_addr->
Àngth
)) {

102 
maxhóp
 = (*)((
uöt32
)
mm≠_addr
->
ba£_addr
 + (uöt32)mm≠_addr->
Àngth
);

106 if((
mm≠_addr
->
ba£_addr
 + mm≠_addr->
Àngth
Ë< ((
uöt32
)
möhóp
)) {

107 
mm≠_addr
 = (
mbmªgi⁄
*)((
uöt8
*)mm≠_add∏+ mm≠_addr->
size
 + 4);

114 if((
mm≠_addr
->
ba£_addr
 <(
uöt32
)
möhóp
) &&

115 ((
mm≠_addr
->
ba£_addr
 + mm≠_addr->
Àngth
) >

116 (
uöt32
)
möhóp
)) {

119 
√xt_mem±r
 = (
memblk
 *)
	`roundmb
(
möhóp
);

122 
√xt_block_Àngth
 = (
uöt32
)
	`åuncmb
(
mm≠_addr
->
ba£_addr
 + mm≠_addr->
Àngth
 - (uöt32)
möhóp
);

126 
√xt_mem±r
 = (
memblk
 *)
	`roundmb
(
mm≠_addr
->
ba£_addr
);

129 
√xt_block_Àngth
 = (
uöt32
)
	`åuncmb
(
mm≠_addr
->
Àngth
);

133 
mem±r
->
m√xt
 = 
√xt_mem±r
;

134 
mem±r
 = mem±r->
m√xt
;

135 
mem±r
->
mÀngth
 = 
√xt_block_Àngth
;

136 
memli°
.
mÀngth
 +
√xt_block_Àngth
;

139 
mm≠_addr
 = (
mbmªgi⁄
*)((
uöt8
*)mm≠_add∏+ mm≠_addr->
size
 + 4);

143 if(
mem±r
) {

144 
mem±r
->
m√xt
 = (
memblk
 *)
NULL
;

146 
	}
}

153 
	$£t£gs
()

155 
ëext
;

156 
sd
 *
psd
;

157 
uöt32
 
≈
, 
ds_íd
;

159 
ds_íd
 = 0xffffffff/
PAGE_SIZE
;

161 
psd
 = &
gdt_c›y
[1];

164 
≈
 = 
ds_íd
;

165 
psd
->
sd_lﬁimô
 = 
≈
;

166 
psd
->
sd_hûim_Ê
 = 
FLAGS_SETTINGS
 | ((
≈
 >> 16) & 0xff);

168 
psd
 = &
gdt_c›y
[2];

169 
psd
->
sd_lﬁimô
 = 
ds_íd
;

170 
psd
->
sd_hûim_Ê
 = 
FLAGS_SETTINGS
 | ((
ds_íd
 >> 16) & 0xff);

172 
psd
 = &
gdt_c›y
[3];

173 
psd
->
sd_lﬁimô
 = 
ds_íd
;

174 
psd
->
sd_hûim_Ê
 = 
FLAGS_SETTINGS
 | ((
ds_íd
 >> 16) & 0xff);

176 
	`mem˝y
(
gdt
, 
gdt_c›y
, (gdt_copy));

177 
	}
}

	@system/mkbufpool.c

3 
	~<xöu.h
>

9 
bpid32
 
	$mkbuÂoﬁ
(

10 
öt32
 
bufsiz
,

11 
öt32
 
numbufs


14 
ötmask
 
mask
;

15 
bpid32
 
poﬁid
;

16 
b≥¡ry
 *
bµå
;

17 *
buf
;

19 
mask
 = 
	`dißbÀ
();

20 i‡(
bufsiz
<
BP_MINB
 || bufsiz>
BP_MAXB


21 || 
numbufs
<1 ||Çumbufs>
BP_MAXN


22 || 
nbpoﬁs
 >
NBPOOLS
) {

23 
	`ª°‹e
(
mask
);

24  (
bpid32
)
SYSERR
;

28 
bufsiz
 = ( (bufsiz + 3) & (~3) );

30 
buf
 = (*)
	`gëmem
–
numbufs
 * (
bufsiz
+(
bpid32
)) );

31 i‡((
öt32
)
buf
 =
SYSERR
) {

32 
	`ª°‹e
(
mask
);

33  (
bpid32
)
SYSERR
;

35 
poﬁid
 = 
nbpoﬁs
++;

36 
bµå
 = &
bu·ab
[
poﬁid
];

37 
bµå
->
b≤ext
 = (
b≥¡ry
 *)
buf
;

38 
bµå
->
bpsize
 = 
bufsiz
;

39 i‡–(
bµå
->
bp£m
 = 
	`£m¸óã
(
numbufs
)Ë=
SYSERR
) {

40 
	`‰ìmem
(
buf
, 
numbufs
 * (
bufsiz
+(
bpid32
)) );

41 
nbpoﬁs
--;

42 
	`ª°‹e
(
mask
);

43  (
bpid32
)
SYSERR
;

45 
bufsiz
+=(
bpid32
);

46 
numbufs
-- ;Çumbufs>0 ;Çumbufs-- ) {

47 
bµå
 = (
b≥¡ry
 *)
buf
;

48 
buf
 +
bufsiz
;

49 
bµå
->
b≤ext
 = (
b≥¡ry
 *)
buf
;

51 
bµå
 = (
b≥¡ry
 *)
buf
;

52 
bµå
->
b≤ext
 = (
b≥¡ry
 *)
NULL
;

53 
	`ª°‹e
(
mask
);

54  
poﬁid
;

55 
	}
}

	@system/my_load.c

3 
	~<xöu.h
>

10 
	glﬂdèb_id
 = 0;

12 *
	$ªsﬁve
(c⁄° * 
sym
)

14 
	`XDEBUG_KPRINTF
("[lﬂdî]Ñesﬁvê- sym: %s\n", 
sym
);

16 
i
;

17 * 
fûe
;

18 
i
 = 0; i < 
NFILE
; i++) {

19 i‡(
fûëab
[
i
].
fûe°©e
 =
FILE_OCCUPIED
) {

20 * 
h™dÀ
 = 
	`lﬂd›í
(
fûëab
[
i
].
fûï©h
, 
lﬂdèb_id
);

21 i‡((
sysˇŒ
)
h™dÀ
 =
SYSERR
) {

22 
	`XDEBUG_KPRINTF
("[loader]Ñesolve -Üoad fail\n");

26 * 
ªt_dlsym
 = 
	`dlsym
(
h™dÀ
, 
sym
);

27 i‡(
ªt_dlsym
 =(*)
SYSERR
) {

28 
	`XDEBUG_KPRINTF
("[loader]Ñesolve -Çot find sym\n");

32 
	`XDEBUG_KPRINTF
("[loader]Ñesolve - find sym\n");

33  
ªt_dlsym
;

38 
	`XDEBUG_KPRINTF
("[loader]Ñesolve - we canÇotÑesolve symbol\n");

39  
SYSERR
;

40 
	}
}

42 
sysˇŒ
 
	$ªloˇã
(
Elf32_Shdr
* 
shdr
, c⁄° 
Elf32_Sym
* 
syms
, c⁄° * 
°rögs
, c⁄° * 
§c
, * 
d°
)

44 
Elf32_Rñ
* 
ªl
 = (Elf32_Rñ*)(
§c
 + 
shdr
->
sh_off£t
);

45 
j
;

47 
j
 = 0; j < 
shdr
->
sh_size
 / (
Elf32_Rñ
); j += 1) {

48 c⁄° * 
sym
 = 
°rögs
 + 
syms
[
	`ELF32_R_SYM
(
ªl
[
j
].
r_öfo
)].
°_«me
;

50 
Elf32_W‹d
 
ªt_ªsﬁve
;

51 
	`ELF32_R_TYPE
(
ªl
[
j
].
r_öfo
)) {

52 
R_386_JMP_SLOT
:

53 
R_386_GLOB_DAT
:

54 
ªt_ªsﬁve
 = (
Elf32_W‹d
)
	`ªsﬁve
(
sym
);

55 i‡((
sysˇŒ
)
ªt_ªsﬁve
 =
SYSERR
) {

56  
SYSERR
;

58 *(
Elf32_W‹d
*)(
d°
 + 
ªl
[
j
].
r_off£t
Ë
ªt_ªsﬁve
;

62 
	}
}

65 
	$is_image_vÆid
(
Elf32_Ehdr
 *
hdr
)

67 * 
h
 = (*)
hdr
;

68 if–
h
[0] == 0x7f && h[1] == 0x45 && h[2] == 0x4c ) {

71 
	`XDEBUG_KPRINTF
("[loader] ELF file is invalid\n");

73 
	}
}

75 * 
	$föd_sym
(c⁄° * 
«me
, 
Elf32_Shdr
* 
shdr
, c⁄° * 
°rögs
, c⁄° * 
§c
, * 
d°
)

77 
Elf32_Sym
* 
syms
 = (Elf32_Sym*)(
§c
 + 
shdr
->
sh_off£t
);

78 
i
;

79 
i
 = 0; i < 
shdr
->
sh_size
 / (
Elf32_Sym
); i ++) {

80 i‡(
	`°rcmp
(
«me
, 
°rögs
 + 
syms
[
i
].
°_«me
) == 0) {

81  
d°
 + 
syms
[
i
].
°_vÆue
;

84  
NULL
;

85 
	}
}

87 *
	$image_lﬂd
 (*
ñf_°¨t
, 
size
, 
lﬂd_t
* 
ld_°©s
)

90 
Elf32_Ehdr
 *
hdr
 = 
NULL
;

91 
Elf32_Phdr
 *
phdr
 = 
NULL
;

92 
Elf32_Shdr
 *
shdr
 = 
NULL
;

93 
Elf32_Sym
 *
syms
 = 
NULL
;

94 *
°rögs
 = 
NULL
;

95 *
°¨t
 = 
NULL
;

96 *
èddr
 = 
NULL
;

97 *
íåy
 = 
NULL
;

98 
i
 = 0;

99 *
exec
 = 
NULL
;

101 
hdr
 = (
Elf32_Ehdr
 *Ë
ñf_°¨t
;

102 i‡(
	`is_image_vÆid
(
hdr
) != 0) {

103 
	`XDEBUG_KPRINTF
("[loader] ELF file is valid\n");

106 
	`XDEBUG_KPRINTF
("[loader] ELF file is invalid\n");

107  
SYSERR
;

113 
exec
 = 
	`gëmem
(
size
);

115 if(!
exec
) {

116 
	`XDEBUG_KPRINTF
("image_load::Érrorállocating memory\n");

117  
SYSERR
;

121 
	`mem£t
(
exec
,0x0,
size
);

129 
phdr
 = (
Elf32_Phdr
 *)(
ñf_°¨t
 + 
hdr
->
e_phoff
);

130 
i
 = 0; i < 
hdr
->
e_phnum
; ++i) {

131 i‡(
phdr
[
i
].
p_ty≥
 !
PT_LOAD
) {

134 i‡(
phdr
[
i
].
p_fûesz
 >Öhdr[i].
p_memsz
) {

135 
	`XDEBUG_KPRINTF
("[loader] image_load::Ö_filesz >Ö_memsz\n");

136 
	`‰ìmem
(
exec
);

137  
SYSERR
;

139 if(!
phdr
[
i
].
p_fûesz
) {

145 
°¨t
 = 
ñf_°¨t
 + 
phdr
[
i
].
p_off£t
;

146 
èddr
 = 
phdr
[
i
].
p_vaddr
 + 
exec
;

147 
	`XDEBUG_KPRINTF
("[lﬂdî] movê%x -> %x (%d byãs, off£à%xË\n", 
°¨t
, 
èddr
, 
phdr
[
i
].
p_fûesz
,Öhdr[i].
p_off£t
);

148 
	`mem˝y
(
èddr
, 
°¨t
, 
phdr
[
i
].
p_fûesz
);

167 
shdr
 = (
Elf32_Shdr
 *)(
ñf_°¨t
 + 
hdr
->
e_shoff
);

168 
Elf32_Shdr
* 
sh_°πab
 = &
shdr
[
hdr
->
e_sh°∫dx
];

169 * 
sh_°πab_p
 = 
ñf_°¨t
 + 
sh_°πab
->
sh_off£t
;

172 
i
 = 0; i < 
hdr
->
e_shnum
; ++i) {

173 i‡(
shdr
[
i
].
sh_ty≥
 =
SHT_SYMTAB
) {

174 
syms
 = (
Elf32_Sym
*)(
ñf_°¨t
 + 
shdr
[
i
].
sh_off£t
);

175 
°rögs
 = 
ñf_°¨t
 + 
shdr
[shdr[
i
].
sh_lök
].
sh_off£t
;

176 
	`XDEBUG_KPRINTF
("[lﬂdî] SYMTAB (syms: %x, såögs: %x)\n", 
syms
, 
°rögs
 + 
shdr
[
i
].
sh_«me
);

177 
íåy
 = 
	`föd_sym
("_°¨t", 
shdr
 + 
i
, 
°rögs
, 
ñf_°¨t
, 
exec
);

178 
ld_°©s
->
_°¨t_addr
 = 
íåy
;

180 i‡(
shdr
[
i
].
sh_ty≥
 =
SHT_PROGBITS
) {

181 i‡(
	`°rcmp
(".d©a", 
sh_°πab_p
 + 
shdr
[
i
].
sh_«me
) == 0) {

182 
ld_°©s
->
ld_d©a_addr
 = 
shdr
[
i
].
sh_addr
 + 
exec
;

183 
ld_°©s
->
ld_d©a_size
 = 
shdr
[
i
].
sh_size
;

185 i‡(
	`°rcmp
(".ãxt", 
sh_°πab_p
 + 
shdr
[
i
].
sh_«me
) == 0) {

186 
ld_°©s
->
ld_ãxt_addr
 = 
shdr
[
i
].
sh_addr
 + 
exec
;

187 
ld_°©s
->
ld_ãxt_size
 = 
shdr
[
i
].
sh_size
;

190 i‡(
shdr
[
i
].
sh_ty≥
 =
SHT_NOBITS
) {

191 i‡(!
shdr
[
i
].
sh_size
) {

194 
ld_°©s
->
ld_bss_addr
 = 
shdr
[
i
].
sh_addr
 + 
exec
;

195 
ld_°©s
->
ld_bss_size
 = 
shdr
[
i
].
sh_size
;

200 
i
=0; i < 
hdr
->
e_shnum
; ++i) {

201 i‡(
shdr
[
i
].
sh_ty≥
 =
SHT_DYNSYM
) {

202 
syms
 = (
Elf32_Sym
*)(
ñf_°¨t
 + 
shdr
[
i
].
sh_off£t
);

203 
°rögs
 = 
ñf_°¨t
 + 
shdr
[shdr[
i
].
sh_lök
].
sh_off£t
;

210 
i
 = 0; i < 
hdr
->
e_shnum
; ++i) {

211 i‡(
shdr
[
i
].
sh_ty≥
 =
SHT_REL
) {

212 i‡(
	`ªloˇã
(
shdr
 + 
i
, 
syms
, 
°rögs
, 
ñf_°¨t
, 
exec
Ë=
SYSERR
) {

213  
SYSERR
;

218 
	`XDEBUG_KPRINTF
("[lﬂdî]É¡ry: %x\n", 
íåy
);

220 
ld_°©s
->
exec
 =Éxec;

221 
ld_°©s
->
size
 = size;

222 
ld_°©s
->
°©us
 = 
LOAD_OCCUPIED
;

225 
i
 = 0; i < 
NLOAD
; i ++) {

226 i‡(
lﬂdèb
[
i
].
°©us
 =
LOAD_FREE
) {

227 
lﬂdèb
[
i
] = *
ld_°©s
;

231 
lﬂdèb_id
 = 
i
;

233 
	`XDEBUG_KPRINTF
("[lﬂdî] cuºpid: %d\n", 
cuºpid
);

235  
íåy
;

236 
	}
}

238 
sysˇŒ
 
	$lﬂd
(* 
¥ogøm_fûe_∑th
, 
lﬂd_t
* 
ld_°©s
)

240 
ötmask
 
mask
;

241 
mask
 = 
	`dißbÀ
();

243 
fûe_sz
 = 0;

244 * 
fûe
 = 
	`fûe›í
(
¥ogøm_fûe_∑th
, &
fûe_sz
);

245 i‡(
fûe
 =(*)
SYSERR
) {

246 
	`XDEBUG_KPRINTF
("[load] file openÉrror\n");

247 
	`ª°‹e
(
mask
);

248  
SYSERR
;

251 i‡(
	`image_lﬂd
(
fûe
, 
fûe_sz
, 
ld_°©s
Ë=(*)
SYSERR
) {

252 
	`XDEBUG_KPRINTF
("[loader]ÜoadÉrror\n");

253 
	`ª°‹e
(
mask
);

254  
SYSERR
;

257 
	`fûe˛o£
(
¥ogøm_fûe_∑th
);

258 
	`ª°‹e
(
mask
);

259  
OK
;

260 
	}
}

	@system/newqueue.c

3 
	~<xöu.h
>

9 
qid16
 
	$√wqueue
()

11 
qid16
 
√xtqid
=
NPROC
;

12 
qid16
 
q
;

14 
q
 = 
√xtqid
;

15 i‡(
q
 >
NQENT
) {

16  
SYSERR
;

19 
√xtqid
 += 2;

23 
queuëab
[
	`queuehód
(
q
)].
q√xt
 = 
	`queuëaû
(q);

24 
queuëab
[
	`queuehód
(
q
)].
q¥ev
 = 
EMPTY
;

25 
queuëab
[
	`queuehód
(
q
)].
qkey
 = 
MAXKEY
;

26 
queuëab
[
	`queuëaû
(
q
)].
q√xt
 = 
EMPTY
;

27 
queuëab
[
	`queuëaû
(
q
)].
q¥ev
 = 
	`queuehód
(q);

28 
queuëab
[
	`queuëaû
(
q
)].
qkey
 = 
MINKEY
;

29  
q
;

30 
	}
}

	@system/open.c

3 
	~<xöu.h
>

9 
sysˇŒ
 
	$›í
(

10 
did32
 
des¸p
,

11 *
«me
,

12 *
mode


15 
ötmask
 
mask
;

16 
díåy
 *
dev±r
;

17 
öt32
 
ªtvÆ
;

19 
mask
 = 
	`dißbÀ
();

20 i‡(
	`isbaddev
(
des¸p
)) {

21 
	`ª°‹e
(
mask
);

22  
SYSERR
;

24 
dev±r
 = (
díåy
 *Ë&
devèb
[
des¸p
];

25 
ªtvÆ
 = (*
dev±r
->
dv›í
Ë(dev±r, 
«me
, 
mode
);

26 
	`ª°‹e
(
mask
);

27  
ªtvÆ
;

28 
	}
}

	@system/panic.c

3 
	~<xöu.h
>

9 
	$∑nic
 (

10 *
msg


13 
	`dißbÀ
();

14 
	`k¥ötf
("\n\n\Ω™ic: %s\n\n", 
msg
);

15 
TRUE
) {;}

16 
	}
}

	@system/pci.c

3 
	~<xöu.h
>

18 
	#MMCONFIG_BASE
 0xe0000000

	)

19 
	#MMCONFIG_LEN
 0x10000000

	)

25 
öt32
 
	$pci_öô
()

27  
OK
;

28 
	}
}

34 
ölöe
 *
	$ªgAddªss_MMC⁄fig
(

35 
uöt32
 
mmc⁄figBa£
,

36 
uöt32
 
bus
,

37 
uöt32
 
devi˚
,

38 
uöt32
 
fun˘i⁄
,

39 
uöt32
 
off£t


42 *
ªtvÆ
;

44 
ªtvÆ
 = (*)

45 (
mmc⁄figBa£
 +

46 (
bus
 * 
PCIE_BYTES_PER_BUS
) +

47 (
devi˚
 * 
PCIE_BYTES_PER_DEVICE
) +

48 (
fun˘i⁄
 * 
PCIE_BYTES_PER_FUNCTION
) +

49 
off£t
);

50  
ªtvÆ
;

51 
	}
}

57 
ölöe
 
uöt32
 
	$ícodePCIDevi˚
(

58 
uöt32
 
bus
,

59 
uöt32
 
dev
,

60 
uöt32
 
func


63 
uöt32
 
ªtvÆ
;

65 
ªtvÆ
 = (
bus
 << 
PCI_BUS_SHIFT
Ë| (
dev
 << 
PCI_DEV_SHIFT
Ë| 
func
;

66  
ªtvÆ
;

67 
	}
}

73 
ölöe
 
uöt32
 
	$ícodedPCIDevToBus
(

74 
uöt32
 
ícodedDev


77  ((
ícodedDev
 >> 
PCI_BUS_SHIFT
Ë& 
PCI_BUS_MASK
);

78 
	}
}

84 
ölöe
 
uöt32
 
	$ícodedPCIDevToDevi˚
(

85 
uöt32
 
ícodedDev


88  ((
ícodedDev
 >> 
PCI_DEV_SHIFT
Ë& 
PCI_DEV_MASK
);

89 
	}
}

95 
ölöe
 
uöt32
 
	$ícodedPCIDevToFun˘i⁄
(

96 
uöt32
 
ícodedDev


99  
ícodedDev
 & 
PCI_FUNC_MASK
;

100 
	}
}

106 
öt32
 
	$föd_pci_devi˚
(

107 
öt32
 
devi˚ID
,

108 
öt32
 
víd‹ID
,

109 
öt32
 
ödex


112 
öt32
 
cou¡
;

113 
öt32
 
mu…ifun˘i⁄
;

114 
uöt32
 
öfo
;

115 
uöt32
 
bus
, 
dev
, 
func
;

116 
pci_c⁄fig_hódî
 *
devfuncHdr
;

121 
cou¡
 = 0;

122 
bus
 = 0; bu†< 
PCI_MAX_BUSES
; bus++) {

123 
dev
 = 0; dev < 
PCI_DEVICES_PER_BUS
; dev++) {

124 
func
 = 0; fun¯< 
PCI_FUNCTIONS_PER_DEVICE
;

125 
func
++) {

126 
devfuncHdr
 =

127 
	`ªgAddªss_MMC⁄fig
(
MMCONFIG_BASE
,

128 
bus
, 
dev
, 
func
, 0);

129 i‡((
devfuncHdr
->
víd‹ID
 == vendorID) &&

130 (
devfuncHdr
->
devi˚ID
 == deviceID) &&

131 (
ödex
 =
cou¡
++)) {

135 
öfo
 = 
	`ícodePCIDevi˚
(
bus
, 
dev
,

136 
func
);

137  
öfo
;

141 i‡(
func
 == 0) {

142 
mu…ifun˘i⁄
 =

143 
devfuncHdr
->
hódîTy≥
 &

144 
PCI_HDR_TYPE_MULTIFCN
;

145 i‡(!
mu…ifun˘i⁄
) {

153  
SYSERR
;

154 
	}
}

160 
öt32
 
	$pci_ªad_c⁄fig_byã
(

161 
uöt32
 
ícodedDev
,

162 
off£t
,

163 
byã
 *
vÆue


166 
uöt32
 
bus
, 
dev
, 
func
;

167 *
ªg
;

169 
bus
 = 
	`ícodedPCIDevToBus
(
ícodedDev
);

170 
dev
 = 
	`ícodedPCIDevToDevi˚
(
ícodedDev
);

171 
func
 = 
	`ícodedPCIDevToFun˘i⁄
(
ícodedDev
);

172 
ªg
 = 
	`ªgAddªss_MMC⁄fig
(
MMCONFIG_BASE
, 
bus
, 
dev
, 
func
, 
off£t
);

173 *
vÆue
 = *((
uöt8
 vﬁ©ûê*Ë
ªg
);

174  
OK
;

175 
	}
}

181 
	$pci_ªad_c⁄fig_w‹d
(

182 
uöt32
 
ícodedDev
,

183 
öt32
 
off£t
,

184 
uöt16
 *
vÆue


187 
uöt32
 
bus
, 
dev
, 
func
;

188 *
ªg
;

190 
bus
 = 
	`ícodedPCIDevToBus
(
ícodedDev
);

191 
dev
 = 
	`ícodedPCIDevToDevi˚
(
ícodedDev
);

192 
func
 = 
	`ícodedPCIDevToFun˘i⁄
(
ícodedDev
);

193 
ªg
 = 
	`ªgAddªss_MMC⁄fig
(
MMCONFIG_BASE
, 
bus
, 
dev
, 
func
, 
off£t
);

194 *
vÆue
 = *(
uöt16
 vﬁ©ûê*Ë
ªg
;

195  
OK
;

196 
	}
}

202 
	$pci_ªad_c⁄fig_dw‹d
(

203 
uöt32
 
ícodedDev
,

204 
öt32
 
off£t
,

205 
uöt32
 *
vÆue


208 
uöt32
 
bus
, 
dev
, 
func
;

209 *
ªg
;

211 
bus
 = 
	`ícodedPCIDevToBus
(
ícodedDev
);

212 
dev
 = 
	`ícodedPCIDevToDevi˚
(
ícodedDev
);

213 
func
 = 
	`ícodedPCIDevToFun˘i⁄
(
ícodedDev
);

214 
ªg
 = 
	`ªgAddªss_MMC⁄fig
(
MMCONFIG_BASE
, 
bus
, 
dev
, 
func
, 
off£t
);

215 *
vÆue
 = *(
uöt32
 vﬁ©ûê*Ë
ªg
;

216  
OK
;

217 
	}
}

223 
	$pci_wrôe_c⁄fig_byã
(

224 
uöt32
 
ícodedDev
,

225 
öt32
 
off£t
,

226 
byã
 
vÆue


229 
uöt32
 
bus
, 
dev
, 
func
;

230 *
ªg
;

232 
bus
 = 
	`ícodedPCIDevToBus
(
ícodedDev
);

233 
dev
 = 
	`ícodedPCIDevToDevi˚
(
ícodedDev
);

234 
func
 = 
	`ícodedPCIDevToFun˘i⁄
(
ícodedDev
);

235 
ªg
 = 
	`ªgAddªss_MMC⁄fig
(
MMCONFIG_BASE
, 
bus
, 
dev
, 
func
, 
off£t
);

236 *(
uöt8
 vﬁ©ûê*Ë
ªg
 = 
vÆue
;

237  
OK
;

238 
	}
}

244 
	$pci_wrôe_c⁄fig_w‹d
(

245 
uöt32
 
ícodedDev
,

246 
öt32
 
off£t
,

247 
uöt16
 
vÆue


250 
uöt32
 
bus
, 
dev
, 
func
;

251 *
ªg
;

253 
bus
 = 
	`ícodedPCIDevToBus
(
ícodedDev
);

254 
dev
 = 
	`ícodedPCIDevToDevi˚
(
ícodedDev
);

255 
func
 = 
	`ícodedPCIDevToFun˘i⁄
(
ícodedDev
);

256 
ªg
 = 
	`ªgAddªss_MMC⁄fig
(
MMCONFIG_BASE
, 
bus
, 
dev
, 
func
, 
off£t
);

257 *(
uöt16
 vﬁ©ûê*Ë
ªg
 = 
vÆue
;

258  
OK
;

259 
	}
}

265 
	$pci_wrôe_c⁄fig_dw‹d
(

266 
uöt32
 
ícodedDev
,

267 
öt32
 
off£t
,

268 
uöt32
 
vÆue


271 
uöt32
 
bus
, 
dev
, 
func
;

272 *
ªg
;

274 
bus
 = 
	`ícodedPCIDevToBus
(
ícodedDev
);

275 
dev
 = 
	`ícodedPCIDevToDevi˚
(
ícodedDev
);

276 
func
 = 
	`ícodedPCIDevToFun˘i⁄
(
ícodedDev
);

277 
ªg
 = 
	`ªgAddªss_MMC⁄fig
(
MMCONFIG_BASE
, 
bus
, 
dev
, 
func
, 
off£t
);

278 *(
uöt32
 vﬁ©ûê*Ë
ªg
 = 
vÆue
;

279  
OK
;

280 
	}
}

286 
öt32
 
	$pci_gë_dev_mmio_ba£_addr
(

287 
uöt32
 
ícodedDev
,

288 
öt32
 
b¨Index
,

289 **
mmio_ba£_addªss


293 
uöt32
 
b¨_vÆue
;

294 
öt32
 
°©us
;

298 
b¨_vÆue
 = 0;

299 
°©us
 = 
	`pci_ªad_c⁄fig_dw‹d
(
ícodedDev
,

300 
	`off£tof
(
pci_c⁄fig_hódî
,

301 
b¨s
[
b¨Index
]),

302 &
b¨_vÆue
);

303 i‡(
°©us
 < 0) {

304  
°©us
;

306 i‡(
b¨_vÆue
 & 
PCI_BAR_REGION_TYPE_IO_MASK
) {

308  
SYSERR
;

310 i‡(
b¨_vÆue
 & 
PCI_BAR_LOCATABLE_64B_MASK
) {

312  
SYSERR
;

314 *
mmio_ba£_addªss
 = (*Ë(
b¨_vÆue
 &

315 
PCI_BAR_BASE_ADDRESS_MASK
);

316  
OK
;

317 
	}
}

323 
öt32
 
	$pci_£t_ivec
 (

324 
uöt32
 
pcidev
,

325 
öt32
 
öum
,

326 *
h™dÀr
,

327 
öt32
 
¨g


330 
uöt16
 
pci_˘æ
, 
msi_˘æ
;

331 
byã
 
ˇp
;

332 
byã
 
√xt
;

336 
	`pci_ªad_c⁄fig_byã
(
pcidev
, 0x34, &
√xt
);

340 
√xt
 != 0) {

342 
	`pci_ªad_c⁄fig_byã
(
pcidev
, 
√xt
, &
ˇp
);

344 if(
ˇp
 == 0x05) {

348 
	`pci_ªad_c⁄fig_byã
(
pcidev
, 
√xt
+1, &next);

353 if(
√xt
 == 0) {

354 
	`∑nic
("PCI device doesÇot support MSI");

359 
	`£t_ivec
(
öum
, 
h™dÀr
, 
¨g
);

363 
	`pci_ªad_c⁄fig_w‹d
(
pcidev
, 0x04, &
pci_˘æ
);

364 
pci_˘æ
 &= 0xFBFF;

365 
	`pci_wrôe_c⁄fig_w‹d
(
pcidev
, 0x04, 
pci_˘æ
);

369 
	`pci_wrôe_c⁄fig_dw‹d
(
pcidev
, 
√xt
+4, 0xFEE00000);

370 
	`pci_wrôe_c⁄fig_dw‹d
(
pcidev
, 
√xt
+8, 
öum
);

374 
	`pci_ªad_c⁄fig_w‹d
(
pcidev
, 
√xt
+2, &
msi_˘æ
);

375 
msi_˘æ
 |= 0x0001;

376 
	`pci_wrôe_c⁄fig_w‹d
(
pcidev
, 
√xt
+2, 
msi_˘æ
);

378  
OK
;

379 
	}
}

	@system/platinit.c

2 
	~<xöu.h
>

4 
	#QUARK_CONS_PORT
 1

	)

5 
	#QUARK_CONS_BAR_INDEX
 0

	)

7 
	#QUARK_CPUID_VALUE
 0x590

	)

9 
	#CPUID_MAJOR_MASK
 0xfffffff0

	)

17 
	$˝u_is_qu¨k
()

19  (
	`˝uid
(Ë& 
CPUID_MAJOR_MASK
Ë=
QUARK_CPUID_VALUE
;

20 
	}
}

27 
	$c⁄sﬁe_öô
()

29 
°©us
;

30 
pciDev
;

32 
pciDev
 = 
	`föd_pci_devi˚
(
INTEL_QUARK_UART_PCI_DID
,

33 
INTEL_QUARK_UART_PCI_VID
,

34 
QUARK_CONS_PORT
);

35 i‡(
pciDev
 < 0) {

37  
pciDev
;

41 
°©us
 = 
	`pci_gë_dev_mmio_ba£_addr
(
pciDev
, 
QUARK_CONS_BAR_INDEX
,

42 &
devèb
[
CONSOLE
].
dvc§
);

43  
°©us
;

44 
	}
}

50 
	$∂©öô
()

53 
öt32
 
pcidev
;

56 
	`pci_öô
();

59 
	`c⁄sﬁe_öô
();

61 i‡(
	`˝u_is_qu¨k
()) {

63 
	`ªmove_úm_¥Ÿe˘i⁄s
();

67 
	`qu¨k_úq_routög
();

70 
pcidev
 = 
	`föd_pci_devi˚
(
INTEL_ETH_QUARK_PCI_DID
,

71 
INTEL_ETH_QUARK_PCI_VID
, 0);

72 if(
pcidev
 !
SYSERR
) {

75 
ëhîèb
[0].
pcidev
 =Öcidev;

77 
	`pci_gë_dev_mmio_ba£_addr
(
pcidev
, 0,

78 &
devèb
[
ETHER0
].
dvc§
);

80 
	}
}

	@system/ptclear.c

3 
	~<xöu.h
>

11 
	$_±˛ór
(

12 
±íåy
 *
±±r
,

13 
uöt16
 
√w°©e
,

14 
	$öt32
 (*
di•o£
)(
öt32
)

17 
±node
 *
wÆk
;

21 
±±r
->
±°©e
 = 
PT_LIMBO
;

23 
±±r
->
±£q
++;

24 
wÆk
 = 
±±r
->
±hód
;

26 i‡–
wÆk
 !
NULL
 ) {

30  ; 
wÆk
!=
NULL
 ; wÆk=wÆk->
±√xt
) {

31 (*
di•o£
)–
wÆk
->
±msg
 );

36 (
±±r
->
±èû
)->
±√xt
 = 
±‰ì
;

37 
±‰ì
 = 
±±r
->
±hód
;

40 i‡(
√w°©e
 =
PT_ALLOC
) {

41 
±±r
->
±èû
 =Öçå->
±hód
 = 
NULL
;

42 
	`£mª£t
(
±±r
->
±s£m
,Öçå->
±max˙t
);

43 
	`£mª£t
(
±±r
->
±r£m
, 0);

45 
	`£mdñëe
(
±±r
->
±s£m
);

46 
	`£mdñëe
(
±±r
->
±r£m
);

48 
±±r
->
±°©e
 = 
√w°©e
;

50 
	}
}

	@system/ptcount.c

3 
	~<xöu.h
>

14 
öt32
 
	$±cou¡
(

15 
öt32
 
p‹tid


18 
ötmask
 
mask
;

19 
öt32
 
cou¡
;

20 
öt32
 
¢d˙t
;

21 
±íåy
 *
±±r
;

23 
mask
 = 
	`dißbÀ
();

24 i‡–
	`isbadp‹t
(
p‹tid
) ||

25 (
±±r
&
p‹âab
[
p‹tid
])->
±°©e
 !
PT_ALLOC
 ) {

26 
	`ª°‹e
(
mask
);

27  
SYSERR
;

32 
cou¡
 = 
	`£mcou¡
(
±±r
->
±r£m
);

36 i‡(
cou¡
 >= 0) {

37 
¢d˙t
 = 
	`£mcou¡
(
±±r
->
±s£m
);

38 i‡(
¢d˙t
 < 0) {

39 
cou¡
 +-
¢d˙t
;

42 
	`ª°‹e
(
mask
);

43  
cou¡
;

44 
	}
}

	@system/ptcreate.c

3 
	~<xöu.h
>

9 
sysˇŒ
 
	$±¸óã
(

10 
öt32
 
cou¡


13 
ötmask
 
mask
;

14 
öt32
 
i
;

15 
öt32
 
±num
;

16 
±íåy
 *
±±r
;

18 
mask
 = 
	`dißbÀ
();

19 i‡(
cou¡
 < 0) {

20 
	`ª°‹e
(
mask
);

21  
SYSERR
;

24 
i
=0 ; i<
NPORTS
 ; i++) {

25 
±num
 = 
±√xtid
;

26 i‡(++
±√xtid
 >
NPORTS
) {

27 
±√xtid
 = 0;

32 
±±r
&
p‹âab
[
±num
];

33 i‡(
±±r
->
±°©e
 =
PT_FREE
) {

34 
±±r
->
±°©e
 = 
PT_ALLOC
;

35 
±±r
->
±s£m
 = 
	`£m¸óã
(
cou¡
);

36 
±±r
->
±r£m
 = 
	`£m¸óã
(0);

37 
±±r
->
±hód
 =Öçå->
±èû
 = 
NULL
;

38 
±±r
->
±£q
++;

39 
±±r
->
±max˙t
 = 
cou¡
;

40 
	`ª°‹e
(
mask
);

41  
±num
;

44 
	`ª°‹e
(
mask
);

45  
SYSERR
;

46 
	}
}

	@system/ptdelete.c

3 
	~<xöu.h
>

9 
sysˇŒ
 
	$±dñëe
(

10 
öt32
 
p‹tid
,

11 
	$öt32
 (*
di•
)(
öt32
)

14 
ötmask
 
mask
;

15 
±íåy
 *
±±r
;

17 
mask
 = 
	`dißbÀ
();

18 i‡–
	`isbadp‹t
(
p‹tid
) ||

19 (
±±r
&
p‹âab
[
p‹tid
])->
±°©e
 !
PT_ALLOC
 ) {

20 
	`ª°‹e
(
mask
);

21  
SYSERR
;

23 
	`_±˛ór
(
±±r
, 
PT_FREE
, 
di•
);

24 
±√xtid
 = 
p‹tid
;

25 
	`ª°‹e
(
mask
);

26  
OK
;

27 
	}
}

	@system/ptinit.c

3 
	~<xöu.h
>

5 
±node
 *
	g±‰ì
;

6 
±íåy
 
	gp‹âab
[
NPORTS
];

7 
öt32
 
	g±√xtid
;

13 
sysˇŒ
 
	$±öô
(

14 
öt32
 
maxmsgs


17 
öt32
 
i
;

18 
±node
 *
√xt
, *
cuº
;

22 
±‰ì
 = (
±node
 *)
	`gëmem
(
maxmsgs
*(ptnode));

23 i‡(
±‰ì
 =(
±node
 *)
SYSERR
) {

24 
	`∑nic
("ptinit - insufficient memory");

29 
i
=0 ; i<
NPORTS
 ; i++) {

30 
p‹âab
[
i
].
±°©e
 = 
PT_FREE
;

31 
p‹âab
[
i
].
±£q
 = 0;

33 
±√xtid
 = 0;

37  
cuº
=
√xt
=
±‰ì
 ; --
maxmsgs
 > 0 ; curr=next ) {

38 
cuº
->
±√xt
 = ++
√xt
;

43 
cuº
->
±√xt
 = 
NULL
;

44  
OK
;

45 
	}
}

	@system/ptrecv.c

3 
	~<xöu.h
>

9 
uöt32
 
	$±ªcv
(

10 
öt32
 
p‹tid


13 
ötmask
 
mask
;

14 
±íåy
 *
±±r
;

15 
öt32
 
£q
;

16 
umsg32
 
msg
;

17 
±node
 *
msgnode
;

19 
mask
 = 
	`dißbÀ
();

20 i‡–
	`isbadp‹t
(
p‹tid
) ||

21 (
±±r
&
p‹âab
[
p‹tid
])->
±°©e
 !
PT_ALLOC
 ) {

22 
	`ª°‹e
(
mask
);

23  (
uöt32
)
SYSERR
;

28 
£q
 = 
±±r
->
±£q
;

29 i‡(
	`waô
(
±±r
->
±r£m
Ë=
SYSERR
 ||Öçå->
±°©e
 !
PT_ALLOC


30 || 
±±r
->
±£q
 !
£q
) {

31 
	`ª°‹e
(
mask
);

32  (
uöt32
)
SYSERR
;

37 
msgnode
 = 
±±r
->
±hód
;

38 
msg
 = 
msgnode
->
±msg
;

39 i‡(
±±r
->
±hód
 =±±r->
±èû
)

40 
±±r
->
±hód
 =Öçå->
±èû
 = 
NULL
;

42 
±±r
->
±hód
 = 
msgnode
->
±√xt
;

43 
msgnode
->
±√xt
 = 
±‰ì
;

44 
±‰ì
 = 
msgnode
;

45 
	`sig«l
(
±±r
->
±s£m
);

46 
	`ª°‹e
(
mask
);

47  
msg
;

48 
	}
}

	@system/ptreset.c

3 
	~<xöu.h
>

10 
sysˇŒ
 
	$±ª£t
(

11 
öt32
 
p‹tid
,

12 
	$öt32
 (*
di•
)(
öt32
)

15 
ötmask
 
mask
;

16 
±íåy
 *
±±r
;

18 
mask
 = 
	`dißbÀ
();

19 i‡–
	`isbadp‹t
(
p‹tid
) ||

20 (
±±r
&
p‹âab
[
p‹tid
])->
±°©e
 !
PT_ALLOC
 ) {

21 
	`ª°‹e
(
mask
);

22  
SYSERR
;

24 
	`_±˛ór
(
±±r
, 
PT_ALLOC
, 
di•
);

25 
	`ª°‹e
(
mask
);

26  
OK
;

27 
	}
}

	@system/ptsend.c

3 
	~<xöu.h
>

9 
sysˇŒ
 
	$±£nd
(

10 
öt32
 
p‹tid
,

11 
umsg32
 
msg


14 
ötmask
 
mask
;

15 
±íåy
 *
±±r
;

16 
öt32
 
£q
;

17 
±node
 *
msgnode
;

18 
±node
 *
èûnode
;

20 
mask
 = 
	`dißbÀ
();

21 i‡–
	`isbadp‹t
(
p‹tid
) ||

22 (
±±r
&
p‹âab
[
p‹tid
])->
±°©e
 !
PT_ALLOC
 ) {

23 
	`ª°‹e
(
mask
);

24  
SYSERR
;

29 
£q
 = 
±±r
->
±£q
;

30 i‡(
	`waô
(
±±r
->
±s£m
Ë=
SYSERR


31 || 
±±r
->
±°©e
 !
PT_ALLOC


32 || 
±±r
->
±£q
 !
£q
) {

33 
	`ª°‹e
(
mask
);

34  
SYSERR
;

36 i‡(
±‰ì
 =
NULL
) {

37 
	`∑nic
("Port systemÑan out of messageÇodes");

42 
msgnode
 = 
±‰ì
;

43 
±‰ì
 = 
msgnode
->
±√xt
;

44 
msgnode
->
±√xt
 = 
NULL
;

45 
msgnode
->
±msg
 = 
msg
;

49 
èûnode
 = 
±±r
->
±èû
;

50 i‡(
èûnode
 =
NULL
) {

51 
±±r
->
±èû
 =Öçå->
±hód
 = 
msgnode
;

53 
èûnode
->
±√xt
 = 
msgnode
;

54 
±±r
->
±èû
 = 
msgnode
;

56 
	`sig«l
(
±±r
->
±r£m
);

57 
	`ª°‹e
(
mask
);

58  
OK
;

59 
	}
}

	@system/putc.c

3 
	~<xöu.h
>

9 
sysˇŒ
 
	$putc
(

10 
did32
 
des¸p
,

11 
ch


14 
ötmask
 
mask
;

15 
díåy
 *
dev±r
;

16 
öt32
 
ªtvÆ
;

18 
mask
 = 
	`dißbÀ
();

19 i‡(
	`isbaddev
(
des¸p
)) {

20 
	`ª°‹e
(
mask
);

21  
SYSERR
;

23 
dev±r
 = (
díåy
 *Ë&
devèb
[
des¸p
];

24 
ªtvÆ
 = (*
dev±r
->
dvputc
Ë(dev±r, 
ch
);

25 
	`ª°‹e
(
mask
);

26  
ªtvÆ
;

27 
	}
}

	@system/quark_irq.c

3 
	~<xöu.h
>

9 
öt32
 
	$qu¨k_úq_routög
()

11 
pciöfo
;

12 
uöt32
 
rcba
;

14 
pciöfo
 = 
	`föd_pci_devi˚
(
INTEL_QUARK_LEGBR_PCI_DID
,

15 
INTEL_QUARK_LEGBR_PCI_VID
, 0);

16 if(
pciöfo
 =
SYSERR
) {

17  
SYSERR
;

22 
	`pci_wrôe_c⁄fig_dw‹d
(
pciöfo
, 
PABCDRC_OFFSET
, 
PABCDRC_VALUE
);

26 
	`pci_wrôe_c⁄fig_dw‹d
(
pciöfo
, 
PEFGHRC_OFFSET
, 
PEFGHRC_VALUE
);

30 
	`pci_ªad_c⁄fig_dw‹d
(
pciöfo
, 
RCBA_OFFSET
, &
rcba
);

31 
rcba
 &
RCBA_MASK
;

36 *(
uöt16
 *)(
rcba
 + 
IRQAGENT0_OFFSET
Ë
IRQAGENT0_VALUE
;

37 *(
uöt16
 *)(
rcba
 + 
IRQAGENT1_OFFSET
Ë
IRQAGENT1_VALUE
;

38 *(
uöt16
 *)(
rcba
 + 
IRQAGENT2_OFFSET
Ë
IRQAGENT2_VALUE
;

39 *(
uöt16
 *)(
rcba
 + 
IRQAGENT3_OFFSET
Ë
IRQAGENT3_VALUE
;

41 
	`outb
(0x4d1, 0x1E);

42  
OK
;

43 
	}
}

	@system/quark_pdat.c

3 
	~<xöu.h
>

9 
	$gë_qu¨k_pd©_íåy_d©a_by_id
(
uöt16
 
ty≥_id
, * 
buf
, 
uöt32
 
size
)

11 
uöt32
 
off£t
 = 0;

12 
qu¨k_pd©_hódî
* 
hódî
 = (qu¨k_pd©_hódî*)
QUARK_PDAT_MEMORY_LOC
;

14 if(
	`memcmp
(
hódî
->
qu¨k_pd©_magic
, 
QUARK_PDAT_MAGIC
, 4) != 0) {

15 
	`k¥ötf
("InvalidÖlatform data magic\n");

16  
SYSERR
;

19 
qu¨k_pd©_íåy
* 
íåy
 = (qu¨k_pd©_íåy*)(
hódî
 + 1);

20 
off£t
 < 
hódî
->
qu¨k_pd©_Àn
) {

23 if(
íåy
->
pd©_íåy_id
 =
ty≥_id
) {

24 
	`mem£t
(
buf
, 0x00, 
size
);

25 
size
 = sizê< 
íåy
->
pd©_íåy_Àn
 ? size :Éntry->pdat_entry_len;

26 
	`mem˝y
(
buf
, (*)(
íåy
 + 1), 
size
);

27  
size
;

30 
íåy
 = (
qu¨k_pd©_íåy
*)(((*Î¡ryË+ ((qu¨k_pd©_íåyË+É¡ry->
pd©_íåy_Àn
));

31 
off£t
 +((
qu¨k_pd©_íåy
Ë+ 
íåy
->
pd©_íåy_Àn
);

34  
SYSERR
;

35 
	}
}

41 
	$gë_qu¨k_pd©_íåy_d©a_by_desc
(c⁄° * 
íåy_desc
, * 
buf
, 
uöt32
 
size
)

43 
uöt32
 
off£t
 = 0;

44 
qu¨k_pd©_hódî
* 
hódî
 = (qu¨k_pd©_hódî*)
QUARK_PDAT_MEMORY_LOC
;

46 if(
	`memcmp
(
hódî
->
qu¨k_pd©_magic
, 
QUARK_PDAT_MAGIC
, 4) != 0) {

47 
	`k¥ötf
("InvalidÖlatform data magic\n");

48  
SYSERR
;

51 
qu¨k_pd©_íåy
* 
íåy
 = (qu¨k_pd©_íåy*)(
hódî
 + 1);

52 
off£t
 < 
hódî
->
qu¨k_pd©_Àn
) {

55 if(
	`°∫cmp
(
íåy
->
pd©_íåy_desc
, 
íåy_desc
, 10) == 0) {

56 
	`mem£t
(
buf
, 0x00, 
size
);

57 
size
 = sizê< 
íåy
->
pd©_íåy_Àn
 ? size :Éntry->pdat_entry_len;

58 
	`mem˝y
(
buf
, (*)(
íåy
 + 1), 
size
);

59  
size
;

62 
íåy
 = (
qu¨k_pd©_íåy
*)(((*Î¡ryË+ ((qu¨k_pd©_íåyË+É¡ry->
pd©_íåy_Àn
));

63 
off£t
 +((
qu¨k_pd©_íåy
Ë+ 
íåy
->
pd©_íåy_Àn
);

66  
SYSERR
;

67 
	}
}

	@system/queue.c

3 
	~<xöu.h
>

5 
qíåy
 
	gqueuëab
[
NQENT
];

11 
pid32
 
	$íqueue
(

12 
pid32
 
pid
,

13 
qid16
 
q


16 
qid16
 
èû
, 
¥ev
;

18 i‡(
	`isbadqid
(
q
Ë|| 
	`isbadpid
(
pid
)) {

19  
SYSERR
;

22 
èû
 = 
	`queuëaû
(
q
);

23 
¥ev
 = 
queuëab
[
èû
].
q¥ev
;

25 
queuëab
[
pid
].
q√xt
 = 
èû
;

26 
queuëab
[
pid
].
q¥ev
 = 
¥ev
;

27 
queuëab
[
¥ev
].
q√xt
 = 
pid
;

28 
queuëab
[
èû
].
q¥ev
 = 
pid
;

29  
pid
;

30 
	}
}

36 
pid32
 
	$dequeue
(

37 
qid16
 
q


40 
pid32
 
pid
;

42 i‡(
	`isbadqid
(
q
)) {

43  
SYSERR
;

44 } i‡(
	`i£m±y
(
q
)) {

45  
EMPTY
;

48 
pid
 = 
	`gëfú°
(
q
);

49 
queuëab
[
pid
].
q¥ev
 = 
EMPTY
;

50 
queuëab
[
pid
].
q√xt
 = 
EMPTY
;

51  
pid
;

52 
	}
}

	@system/read.c

3 
	~<xöu.h
>

9 
sysˇŒ
 
	$ªad
(

10 
did32
 
des¸p
,

11 *
buf„r
,

12 
uöt32
 
cou¡


15 
ötmask
 
mask
;

16 
díåy
 *
dev±r
;

17 
öt32
 
ªtvÆ
;

19 
mask
 = 
	`dißbÀ
();

20 i‡(
	`isbaddev
(
des¸p
)) {

21 
	`ª°‹e
(
mask
);

22  
SYSERR
;

24 
dev±r
 = (
díåy
 *Ë&
devèb
[
des¸p
];

25 
ªtvÆ
 = (*
dev±r
->
dvªad
Ë(dev±r, 
buf„r
, 
cou¡
);

26 
	`ª°‹e
(
mask
);

27  
ªtvÆ
;

28 
	}
}

	@system/ready.c

3 
	~<xöu.h
>

5 
qid16
 
	gªadyli°
;

11 
°©us
 
	$ªady
(

12 
pid32
 
pid


15 
¥o˚¡
 *
¥±r
;

17 i‡(
	`isbadpid
(
pid
)) {

18  
SYSERR
;

23 
¥±r
 = &
¥o˘ab
[
pid
];

24 
¥±r
->
¥°©e
 = 
PR_READY
;

25 
	`ö£π
(
pid
, 
ªadyli°
, 
¥±r
->
¥¥io
);

26 
	`ªsched
();

28  
OK
;

29 
	}
}

	@system/receive.c

3 
	~<xöu.h
>

9 
umsg32
 
	$ª˚ive
()

11 
ötmask
 
mask
;

12 
¥o˚¡
 *
¥±r
;

13 
umsg32
 
msg
;

15 
mask
 = 
	`dißbÀ
();

16 
¥±r
 = &
¥o˘ab
[
cuºpid
];

17 i‡(
¥±r
->
¥hasmsg
 =
FALSE
) {

18 
¥±r
->
¥°©e
 = 
PR_RECV
;

19 
	`ªsched
();

21 
msg
 = 
¥±r
->
¥msg
;

22 
¥±r
->
¥hasmsg
 = 
FALSE
;

23 
	`ª°‹e
(
mask
);

24  
msg
;

25 
	}
}

	@system/recvclr.c

3 
	~<xöu.h
>

9 
umsg32
 
	$ªcv˛r
()

11 
ötmask
 
mask
;

12 
¥o˚¡
 *
¥±r
;

13 
umsg32
 
msg
;

15 
mask
 = 
	`dißbÀ
();

16 
¥±r
 = &
¥o˘ab
[
cuºpid
];

17 i‡(
¥±r
->
¥hasmsg
 =
TRUE
) {

18 
msg
 = 
¥±r
->
¥msg
;

19 
¥±r
->
¥hasmsg
 = 
FALSE
;

21 
msg
 = 
OK
;

23 
	`ª°‹e
(
mask
);

24  
msg
;

25 
	}
}

	@system/recvtime.c

3 
	~<xöu.h
>

9 
umsg32
 
	$ªcvtime
(

10 
öt32
 
maxwaô


13 
ötmask
 
mask
;

14 
¥o˚¡
 *
¥±r
;

15 
umsg32
 
msg
;

17 i‡(
maxwaô
 < 0) {

18  
SYSERR
;

20 
mask
 = 
	`dißbÀ
();

24 
¥±r
 = &
¥o˘ab
[
cuºpid
];

25 i‡(
¥±r
->
¥hasmsg
 =
FALSE
) {

26 i‡(
	`ö£πd
(
cuºpid
,
¶ìpq
,
maxwaô
Ë=
SYSERR
) {

27 
	`ª°‹e
(
mask
);

28  
SYSERR
;

30 
¥±r
->
¥°©e
 = 
PR_RECTIM
;

31 
	`ªsched
();

36 i‡(
¥±r
->
¥hasmsg
) {

37 
msg
 = 
¥±r
->
¥msg
;

38 
¥±r
->
¥hasmsg
 = 
FALSE
;

40 
msg
 = 
TIMEOUT
;

42 
	`ª°‹e
(
mask
);

43  
msg
;

44 
	}
}

	@system/resched.c

3 
	~<xöu.h
>

5 
de„r
 
	gDe„r
;

11 
	$ªsched
()

13 
¥o˚¡
 *
±ﬁd
;

14 
¥o˚¡
 *
±√w
;

18 i‡(
De„r
.
nde„rs
 > 0) {

19 
De„r
.
©ãm±
 = 
TRUE
;

25 
±ﬁd
 = &
¥o˘ab
[
cuºpid
];

27 i‡(
±ﬁd
->
¥°©e
 =
PR_CURR
) {

28 i‡(
±ﬁd
->
¥¥io
 > 
	`fú°key
(
ªadyli°
)) {

34 
±ﬁd
->
¥°©e
 = 
PR_READY
;

35 
	`ö£π
(
cuºpid
, 
ªadyli°
, 
±ﬁd
->
¥¥io
);

40 
cuºpid
 = 
	`dequeue
(
ªadyli°
);

41 
±√w
 = &
¥o˘ab
[
cuºpid
];

42 
±√w
->
¥°©e
 = 
PR_CURR
;

43 
¥ìm±
 = 
QUANTUM
;

44 
	`˘xsw
(&
±ﬁd
->
¥°k±r
, &
±√w
->prstkptr);

49 
	}
}

55 
°©us
 
	$ªsched_˙é
(

56 
öt32
 
de„r


59 
de„r
) {

61 
DEFER_START
:

63 i‡(
De„r
.
nde„rs
++ == 0) {

64 
De„r
.
©ãm±
 = 
FALSE
;

66  
OK
;

68 
DEFER_STOP
:

69 i‡(
De„r
.
nde„rs
 <= 0) {

70  
SYSERR
;

72 i‡–(--
De„r
.
nde„rs
 =0Ë&& De„r.
©ãm±
 ) {

73 
	`ªsched
();

75  
OK
;

78  
SYSERR
;

80 
	}
}

	@system/resume.c

3 
	~<xöu.h
>

9 
¥i16
 
	$ªsume
(

10 
pid32
 
pid


13 
ötmask
 
mask
;

14 
¥o˚¡
 *
¥±r
;

15 
¥i16
 
¥io
;

17 
mask
 = 
	`dißbÀ
();

18 i‡(
	`isbadpid
(
pid
)) {

19 
	`ª°‹e
(
mask
);

20  (
¥i16
)
SYSERR
;

22 
¥±r
 = &
¥o˘ab
[
pid
];

23 i‡(
¥±r
->
¥°©e
 !
PR_SUSP
) {

24 
	`ª°‹e
(
mask
);

25  (
¥i16
)
SYSERR
;

27 
¥io
 = 
¥±r
->
¥¥io
;

28 
	`ªady
(
pid
);

29 
	`ª°‹e
(
mask
);

30  
¥io
;

31 
	}
}

	@system/seek.c

3 
	~<xöu.h
>

9 
sysˇŒ
 
	$£ek
(

10 
did32
 
des¸p
,

11 
uöt32
 
pos


14 
ötmask
 
mask
;

15 
díåy
 *
dev±r
;

16 
öt32
 
ªtvÆ
;

18 
mask
 = 
	`dißbÀ
();

19 i‡(
	`isbaddev
(
des¸p
)) {

20 
	`ª°‹e
(
mask
);

21  
SYSERR
;

23 
dev±r
 = (
díåy
 *Ë&
devèb
[
des¸p
];

24 
ªtvÆ
 = (*
dev±r
->
dv£ek
Ë(dev±r, 
pos
);

25 
	`ª°‹e
(
mask
);

26  
ªtvÆ
;

27 
	}
}

	@system/semcount.c

3 
	~<xöu.h
>

10 
sysˇŒ
 
	$£mcou¡
(

11 
sid32
 
£mid


14 
ötmask
 
mask
;

15 
öt32
 
cou¡
;

17 
mask
 = 
	`dißbÀ
();

19 i‡(
	`isbad£m
(
£mid
Ë|| 
£mèb
[£mid].
s°©e
 =
S_FREE
) {

20 
	`ª°‹e
(
mask
);

21  
SYSERR
;

23 
cou¡
 = 
£mèb
[
£mid
].
scou¡
;

24 
	`ª°‹e
(
mask
);

25  
cou¡
;

26 
	}
}

	@system/semcreate.c

3 
	~<xöu.h
>

5 
loˇl
 
sid32
 
√w£m
();

11 
sid32
 
	$£m¸óã
(

12 
öt32
 
cou¡


15 
ötmask
 
mask
;

16 
sid32
 
£m
;

18 
mask
 = 
	`dißbÀ
();

20 i‡(
cou¡
 < 0 || ((
£m
=
	`√w£m
())==
SYSERR
)) {

21 
	`ª°‹e
(
mask
);

22  
SYSERR
;

24 
£mèb
[
£m
].
scou¡
 = 
cou¡
;

26 
	`ª°‹e
(
mask
);

27  
£m
;

28 
	}
}

34 
loˇl
 
sid32
 
	$√w£m
()

36 
sid32
 
√xt£m
 = 0;

37 
sid32
 
£m
;

38 
öt32
 
i
;

40 
i
=0 ; i<
NSEM
 ; i++) {

41 
£m
 = 
√xt£m
++;

42 i‡(
√xt£m
 >
NSEM
)

43 
√xt£m
 = 0;

44 i‡(
£mèb
[
£m
].
s°©e
 =
S_FREE
) {

45 
£mèb
[
£m
].
s°©e
 = 
S_USED
;

46  
£m
;

49  
SYSERR
;

50 
	}
}

	@system/semdelete.c

3 
	~<xöu.h
>

9 
sysˇŒ
 
	$£mdñëe
(

10 
sid32
 
£m


13 
ötmask
 
mask
;

14 
£¡ry
 *
£m±r
;

16 
mask
 = 
	`dißbÀ
();

17 i‡(
	`isbad£m
(
£m
)) {

18 
	`ª°‹e
(
mask
);

19  
SYSERR
;

22 
£m±r
 = &
£mèb
[
£m
];

23 i‡(
£m±r
->
s°©e
 =
S_FREE
) {

24 
	`ª°‹e
(
mask
);

25  
SYSERR
;

27 
£m±r
->
s°©e
 = 
S_FREE
;

29 
	`ªsched_˙é
(
DEFER_START
);

30 
£m±r
->
scou¡
++ < 0) {

31 
	`ªady
(
	`gëfú°
(
£m±r
->
squeue
));

33 
	`ªsched_˙é
(
DEFER_STOP
);

34 
	`ª°‹e
(
mask
);

35  
OK
;

36 
	}
}

	@system/semreset.c

3 
	~<xöu.h
>

9 
sysˇŒ
 
	$£mª£t
(

10 
sid32
 
£m
,

11 
öt32
 
cou¡


14 
ötmask
 
mask
;

15 
£¡ry
 *
£m±r
;

16 
qid16
 
£mqueue
;

17 
pid32
 
pid
;

19 
mask
 = 
	`dißbÀ
();

21 i‡(
cou¡
 < 0 || 
	`isbad£m
(
£m
Ë|| 
£mèb
[£m].
s°©e
==
S_FREE
) {

22 
	`ª°‹e
(
mask
);

23  
SYSERR
;

26 
£m±r
 = &
£mèb
[
£m
];

27 
£mqueue
 = 
£m±r
->
squeue
;

28 
	`ªsched_˙é
(
DEFER_START
);

29 (
pid
=
	`gëfú°
(
£mqueue
)Ë!
EMPTY
)

30 
	`ªady
(
pid
);

31 
£m±r
->
scou¡
 = 
cou¡
;

32 
	`ªsched_˙é
(
DEFER_STOP
);

33 
	`ª°‹e
(
mask
);

34  
OK
;

35 
	}
}

	@system/send.c

3 
	~<xöu.h
>

9 
sysˇŒ
 
	$£nd
(

10 
pid32
 
pid
,

11 
umsg32
 
msg


14 
ötmask
 
mask
;

15 
¥o˚¡
 *
¥±r
;

17 
mask
 = 
	`dißbÀ
();

18 i‡(
	`isbadpid
(
pid
)) {

19 
	`ª°‹e
(
mask
);

20  
SYSERR
;

23 
¥±r
 = &
¥o˘ab
[
pid
];

24 i‡(
¥±r
->
¥hasmsg
) {

25 
	`ª°‹e
(
mask
);

26  
SYSERR
;

28 
¥±r
->
¥msg
 = 
msg
;

29 
¥±r
->
¥hasmsg
 = 
TRUE
;

33 i‡(
¥±r
->
¥°©e
 =
PR_RECV
) {

34 
	`ªady
(
pid
);

35 } i‡(
¥±r
->
¥°©e
 =
PR_RECTIM
) {

36 
	`un¶ìp
(
pid
);

37 
	`ªady
(
pid
);

39 
	`ª°‹e
(
mask
);

40  
OK
;

41 
	}
}

	@system/signal.c

3 
	~<xöu.h
>

9 
sysˇŒ
 
	$sig«l
(

10 
sid32
 
£m


13 
ötmask
 
mask
;

14 
£¡ry
 *
£m±r
;

16 
mask
 = 
	`dißbÀ
();

17 i‡(
	`isbad£m
(
£m
)) {

18 
	`ª°‹e
(
mask
);

19  
SYSERR
;

21 
£m±r
&
£mèb
[
£m
];

22 i‡(
£m±r
->
s°©e
 =
S_FREE
) {

23 
	`ª°‹e
(
mask
);

24  
SYSERR
;

26 i‡((
£m±r
->
scou¡
++) < 0) {

27 
	`ªady
(
	`dequeue
(
£m±r
->
squeue
));

29 
	`ª°‹e
(
mask
);

30  
OK
;

31 
	}
}

	@system/signaln.c

3 
	~<xöu.h
>

9 
sysˇŒ
 
	$sig« 
(

10 
sid32
 
£m
,

11 
öt32
 
cou¡


14 
ötmask
 
mask
;

15 
£¡ry
 *
£m±r
;

17 
mask
 = 
	`dißbÀ
();

18 i‡(
	`isbad£m
(
£m
Ë|| (
cou¡
 < 0)) {

19 
	`ª°‹e
(
mask
);

20  
SYSERR
;

22 
£m±r
 = &
£mèb
[
£m
];

23 i‡(
£m±r
->
s°©e
 =
S_FREE
) {

24 
	`ª°‹e
(
mask
);

25  
SYSERR
;

28 
	`ªsched_˙é
(
DEFER_START
);

29 ; 
cou¡
 > 0; count--) {

30 i‡((
£m±r
->
scou¡
++) < 0) {

31 
	`ªady
(
	`dequeue
(
£m±r
->
squeue
));

34 
	`ªsched_˙é
(
DEFER_STOP
);

35 
	`ª°‹e
(
mask
);

36  
OK
;

37 
	}
}

	@system/sleep.c

3 
	~<xöu.h
>

5 
	#MAXSECONDS
 2147483

	)

11 
sysˇŒ
 
	$¶ìp
(

12 
öt32
 
dñay


15 
	`XDEBUG_KPRINTF
("[¶ìp] dñay: %d\n", 
dñay
);

17 i‡–(
dñay
 < 0Ë|| (dñay > 
MAXSECONDS
) ) {

18  
SYSERR
;

20 
	`¶ìpms
(1000*
dñay
);

21  
OK
;

22 
	}
}

28 
sysˇŒ
 
	$¶ìpms
(

29 
öt32
 
dñay


32 
ötmask
 
mask
;

34 i‡(
dñay
 < 0) {

35  
SYSERR
;

38 i‡(
dñay
 == 0) {

39 
	`yõld
();

40  
OK
;

45 
mask
 = 
	`dißbÀ
();

46 i‡(
	`ö£πd
(
cuºpid
, 
¶ìpq
, 
dñay
Ë=
SYSERR
) {

47 
	`ª°‹e
(
mask
);

48  
SYSERR
;

51 
¥o˘ab
[
cuºpid
].
¥°©e
 = 
PR_SLEEP
;

52 
	`ªsched
();

53 
	`ª°‹e
(
mask
);

54  
OK
;

55 
	}
}

	@system/stacktrace.c

2 
	~<xöu.h
>

4 
	#STKDETAIL


	)

10 
sysˇŒ
 
	$°ackåa˚
(
pid
)

12 
¥o˚¡
 *
¥oc
 = &
¥o˘ab
[
pid
];

13 *
•
, *
Â
;

15 i‡(
pid
 !0 && 
	`isbadpid
(pid))

16  
SYSERR
;

17 i‡(
pid
 =
cuºpid
) {

18 
	`asm
("mov»%%e•, %0\n" :"Ù"(
•
));

19 
	`asm
("mov»%%ebp, %0\n" :"Ù"(
Â
));

21 
•
 = (*)
¥oc
->
¥°k±r
;

22 
Â
 = 
•
 + 2;

24 
	`k¥ötf
("• %X f∞%XÖroc->¥°kba£ %X\n", 
•
, 
Â
, 
¥oc
->
¥°kba£
);

25 #ifde‡
STKDETAIL


26 
•
 < (*)
¥oc
->
¥°kba£
) {

27 ; 
•
 < 
Â
; sp++)

28 
	`k¥ötf
("DATA (%08XË%08X (%d)\n", 
•
, *sp, *sp);

29 i‡(*
•
 =
STACKMAGIC
)

31 
	`k¥ötf
("\nFP (%08XË%08X (%d)\n", 
•
, *sp, *sp);

32 
Â
 = (*Ë*
•
++;

33 i‡(
Â
 <
•
) {

34 
	`k¥ötf
("bad sèck, f∞(%08XË<• (%08X)\n", 
Â
, 
•
);

35  
SYSERR
;

37 
	`k¥ötf
("RET 0x%X\n", *
•
);

38 
•
++;

40 
	`k¥ötf
("STACKMAGIC (should bê%X): %X\n", 
STACKMAGIC
, *
•
);

41 i‡(
•
 !(*)
¥oc
->
¥°kba£
) {

42 
	`k¥ötf
("unexpected short stack\n");

43  
SYSERR
;

46  
OK
;

47 
	}
}

	@system/suspend.c

3 
	~<xöu.h
>

9 
sysˇŒ
 
	$su•íd
(

10 
pid32
 
pid


13 
ötmask
 
mask
;

14 
¥o˚¡
 *
¥±r
;

15 
¥i16
 
¥io
;

17 
mask
 = 
	`dißbÀ
();

18 i‡(
	`isbadpid
(
pid
Ë|| (pid =
NULLPROC
)) {

19 
	`ª°‹e
(
mask
);

20  
SYSERR
;

25 
¥±r
 = &
¥o˘ab
[
pid
];

26 i‡((
¥±r
->
¥°©e
 !
PR_CURR
Ë&& (¥±r->¥°©ê!
PR_READY
)) {

27 
	`ª°‹e
(
mask
);

28  
SYSERR
;

30 i‡(
¥±r
->
¥°©e
 =
PR_READY
) {

31 
	`gëôem
(
pid
);

33 
¥±r
->
¥°©e
 = 
PR_SUSP
;

35 
¥±r
->
¥°©e
 = 
PR_SUSP
;

36 
	`ªsched
();

38 
¥io
 = 
¥±r
->
¥¥io
;

39 
	`ª°‹e
(
mask
);

40  
¥io
;

41 
	}
}

	@system/syscall_interface_tab.c

1 
	~<xöu.h
>

3 c⁄° 
sysˇŒ_öãrÁ˚_ít
 
	gsysˇŒ_öãrÁ˚_èb
[] = {

4 {"dl›í",
dl›í
},

5 {"dl˛o£",
dl˛o£
},

6 {"dlsym",
dlsym
},

7 {"˛o£",
˛o£
},

8 {"c⁄åﬁ",
c⁄åﬁ
},

9 {"‰ìbuf",
‰ìbuf
},

10 {"‰ìmem",
‰ìmem
},

11 {"gëc",
gëc
},

12 {"gë¥io",
gë¥io
},

13 {"öô",
öô
},

14 {"kûl",
kûl
},

15 {"mou¡",
mou¡
},

16 {"›í",
›í
},

17 {"±¸óã",
±¸óã
},

18 {"±dñëe",
±dñëe
},

19 {"±öô",
±öô
},

20 {"±ª£t",
±ª£t
},

21 {"±£nd",
±£nd
},

22 {"ªad",
ªad
},

23 {"£ek",
£ek
},

24 {"£mcou¡",
£mcou¡
},

25 {"£mdñëe",
£mdñëe
},

26 {"£mª£t",
£mª£t
},

27 {"£nd",
£nd
},

28 {"sig«l",
sig«l
},

29 {"sig« ",
sig« 
},

30 {"¶ìp",
¶ìp
},

31 {"¶ìpms",
¶ìpms
},

32 {"su•íd",
su•íd
},

33 {"su•íd",
su•íd
},

34 {"waô",
waô
},

35 {"wrôe",
wrôe
},

36 {"yõld",
yõld
}

	@system/syscallhandler.c

3 
	~<xöu.h
>

5 
	#OFFSET
 12

	)

11 
sysˇŒ
 
	$sysˇŒh™dÀr
(

12 
öt32
 
¨g
,

13 * 
ßved•


16 
	`XDEBUG_KPRINTF
("[sysˇŒh™dÀr] *ßved•: %d\n", *(
ßved•
+12));

34 i‡(*(
ßved•
 + 
OFFSET
) == 1) {

35  
sysˇŒ_öãrÁ˚_èb
[*(
ßved•
 + 
OFFSET
 + 1)].
	`funˇddr
();

37 i‡(*(
ßved•
 + 
OFFSET
) == 2) {

38 
ªt
 = 
sysˇŒ_öãrÁ˚_èb
[*(
ßved•
 + 
OFFSET
 + 1)].
	`funˇddr
(

39 *(
ßved•
 + 
OFFSET
 + 2));

40  
ªt
;

42 i‡(*(
ßved•
 + 
OFFSET
) == 3) {

43  
sysˇŒ_öãrÁ˚_èb
[*(
ßved•
 + 
OFFSET
 + 1)].
	`funˇddr
(

44 *(
ßved•
 + 
OFFSET
 + 2),

45 *(
ßved•
 + 
OFFSET
 + 3));

47 i‡(*(
ßved•
 + 
OFFSET
) == 4) {

48 
sysˇŒ_öãrÁ˚_èb
[*(
ßved•
 + 
OFFSET
 + 1)].
	`funˇddr
(

49 *(
ßved•
 + 
OFFSET
 + 2),

50 *(
ßved•
 + 
OFFSET
 + 3),

51 *(
ßved•
 + 
OFFSET
 + 4));

53 i‡(*(
ßved•
 + 
OFFSET
) == 5) {

54 
sysˇŒ_öãrÁ˚_èb
[*(
ßved•
 + 
OFFSET
 + 1)].
	`funˇddr
(

55 *(
ßved•
 + 
OFFSET
 + 2),

56 *(
ßved•
 + 
OFFSET
 + 3),

57 *(
ßved•
 + 
OFFSET
 + 4),

58 *(
ßved•
 + 
OFFSET
 + 5));

61 
	`XDEBUG_KPRINTF
("[syscallhandler]Åoo muchárgument\n");

62  
SYSERR
;

65 
	}
}

	@system/syscallinit.c

3 
	~<xöu.h
>

5 
de„vec
[];

6 
	#NID
 49

	)

12 
	$sysˇŒöô
()

18 
	`£t_evec
(0x80, 
de„vec
[
NID
 - 1]);

19 
	`£t_ivec
(0x80, 
sysˇŒh™dÀr
, 0);

22 
	}
}

	@system/testcase_1.c

1 
	~<xöu.h
>

3 
	$t1_¥oc1
() {

4 
bpid32
 
fûebuÂoﬁ
;

5 
fûebuÂoﬁ
 = 
	`mkbuÂoﬁ
(256, 50);

8 
°©us
;

11 * 
fûe1
 = 
	`gëbuf
(
fûebuÂoﬁ
);

12 
	`°∫˝y
(
fûe1
, "This is file1", 14);

13 
°©us
 = 
	`fûîegi°î
("/somewhîe/fûe1", 
fûe1
, 14);

21 * 
fûe2
 = 
	`gëbuf
(
fûebuÂoﬁ
);

22 
	`°∫˝y
(
fûe2
, "This is file2", 14);

23 
	`fûîegi°î
("/ñ£whîe/fûe2", 
fûe2
, 14);

26 * 
fûe_li°_2
 = 
	`gëbuf
(
fûebuÂoﬁ
);

27 
	`fûñi°
(
fûe_li°_2
, 256);

28 
	`XDEBUG_KPRINTF
("[ã°ˇ£_1] fûñi° buf: %s\n", 
fûe_li°_2
);

31 
fûe1_size_t
 = 0;

32 * 
fûe1_t
 = 
	`fûe›í
("/somewhîe/fûe1", &
fûe1_size_t
);

33 i‡((*)
SYSERR
 =
fûe1_t
) {

34 
	`XDEBUG_KPRINTF
("[testcase_1] open file1 FAIL\n");

36 
	`XDEBUG_KPRINTF
("[ã°ˇ£_1] fûe1_t: %s\n", 
fûe1_t
);

37 i‡(
fûe1_size_t
 != 14) {

38 
	`XDEBUG_KPRINTF
("[testcase_1] ERR: fileopen file1 size wrong\n");

40 i‡(
	`°rcmp
(
fûe1_t
, "This is file1") != 0) {

41 
	`XDEBUG_KPRINTF
("[testcase_1] ERR: fileopen file1 content wrong\n");

45 
fûe_n_size
 = 0;

46 * 
fûe_n
 = 
	`fûe›í
("nowhîe/fûe1", &
fûe_n_size
);

47 i‡((*)
SYSERR
 !
fûe_n
) {

48 
	`XDEBUG_KPRINTF
("[testcase_1] file shouldÇotÉxist");

64 
	}
}

67 
¥o˚ss
 
	$ã°ˇ£_1
() {

68 
	`ªsume
(
	`¸óã
(
t1_¥oc1
, 1024, 50, "t1_¥oc1", 0, 
NULL
));

70  
OK
;

71 
	}
}

	@system/testcase_2.c

1 
	~<xöu.h
>

2 
	~<sysˇŒ_öãrÁ˚.h
>

4 
	$t2_¥oc1
() {

5 
i
;

7 
i
 = 
	`gë¥io
(
cuºpid
);

8 
	`XDEBUG_KPRINTF
("[ã°ˇ£_2] cuºpid: %d\n", 
cuºpid
);

9 
	`XDEBUG_KPRINTF
("[ã°ˇ£_2]Örio: %d\n", 
i
);

12 
i
 = 
	`sysˇŒ_öãrÁ˚
(2, 8, 
cuºpid
);

13 
	`XDEBUG_KPRINTF
("[ã°ˇ£_2]Örio: %d\n", 
i
);

16 
	}
}

19 
¥o˚ss
 
	$ã°ˇ£_2
() {

20 
	`ªsume
(
	`¸óã
(
t2_¥oc1
, 1024, 50, "t2_¥oc1", 0, 
NULL
));

22  
OK
;

23 
	}
}

	@system/testcase_3.c

1 
	~<xöu.h
>

2 
	~<sysˇŒ_öãrÁ˚.h
>

4 
	$t3_¥oc1
() {

5 
°©us
;

8 * 
hñlo_ñf
 = 
≠phñlo_c⁄ã¡s
;

9 
	`fûîegi°î
("/ñf/hñlo_ñf", 
hñlo_ñf
, 
≠phñlo_c⁄ã¡s_size
);

11 
	`XDEBUG_KPRINTF
("[ã°ˇ£_3] hñlÿñ‡c⁄ã¡: %s\n", 
hñlo_ñf
);

12 
	`XDEBUG_KPRINTF
("[ã°ˇ£_3] hñlÿñ‡size: %d\n", 
≠phñlo_c⁄ã¡s_size
);

15 
bpid32
 
fûebuÂoﬁ
;

16 
fûebuÂoﬁ
 = 
	`mkbuÂoﬁ
(256, 128);

17 * 
fûe_li°
 = 
	`gëbuf
(
fûebuÂoﬁ
);

18 
	`fûñi°
(
fûe_li°
, 256);

19 
	`XDEBUG_KPRINTF
("[ã°ˇ£_3] fûêli°: %s\n", 
fûe_li°
);

22 
lﬂd_t
 
ld_°©s
;

23 
°©us
 = 
	`lﬂd
("/ñf/hñlo_ñf", &
ld_°©s
);

26 
	`XDEBUG_KPRINTF
("[ã°ˇ£_3] sèπ_addr: %x\n", 
ld_°©s
.
_°¨t_addr
);

27 
	`XDEBUG_KPRINTF
("[ã°ˇ£_3]Üd_ãxt_addr: %x\n", 
ld_°©s
.
ld_ãxt_addr
);

28 
	`XDEBUG_KPRINTF
("[ã°ˇ£_3]Üd_ãxt_size: %d\n", 
ld_°©s
.
ld_ãxt_size
);

29 
	`XDEBUG_KPRINTF
("[ã°ˇ£_3]Üd_bss_addr: %x\n", 
ld_°©s
.
ld_bss_addr
);

30 
	`XDEBUG_KPRINTF
("[ã°ˇ£_3]Üd_bss_size: %d\n", 
ld_°©s
.
ld_bss_size
);

31 
	`XDEBUG_KPRINTF
("[ã°ˇ£_3]Üd_d©a_addr: %x\n", 
ld_°©s
.
ld_d©a_addr
);

32 
	`XDEBUG_KPRINTF
("[ã°ˇ£_3]Üd_d©a_size: %d\n", 
ld_°©s
.
ld_d©a_size
);

34 
	`XDEBUG_KPRINTF
("[ã°ˇ£_3] cuºpid: %d\n", 
cuºpid
);

35 
	`XDEBUG_KPRINTF
("[ã°ˇ£_3] PROC 1Örio: %d\n", 
¥o˘ab
[1].
¥¥io
);

36 
	`XDEBUG_KPRINTF
("[ã°ˇ£_3] PROC 2Örio: %d\n", 
¥o˘ab
[2].
¥¥io
);

39 
	`ªsume
(
	`¸óã
(
ld_°©s
.
_°¨t_addr
, 
INITSTK
, 
INITPRIO
, "ã°ˇ£_3", 0, 
NULL
));

45 
	}
}

48 
¥o˚ss
 
	$ã°ˇ£_3
() {

49 
	`ªsume
(
	`¸óã
(
t3_¥oc1
, 1024, 50, "t3_¥oc1", 0, 
NULL
));

51  
OK
;

52 
	}
}

	@system/testcase_4.c

1 
	~<xöu.h
>

2 
	~<sysˇŒ_öãrÁ˚.h
>

4 
	$t4_¥oc1
() {

5 
°©us
;

8 * 
hñlo_ñf
 = 
≠phñlo_c⁄ã¡s
;

9 
	`fûîegi°î
("/ñf/hñlo.so", 
hñlo_ñf
, 
≠phñlo_c⁄ã¡s_size
);

12 * 
libmy_ñf
 = 
libmy_c⁄ã¡s
;

13 
	`fûîegi°î
("/so/libmy.so", 
libmy_ñf
, 
libmy_c⁄ã¡s_size
);

18 * 
h™dÀ
;

19 
h™dÀ
 = 
	`dl›í
("/so/libmy.so");

22 * 
symbﬁ_addr
;

23 
symbﬁ_addr
 = 
	`dlsym
(
h™dÀ
, "mylib");

24 
	`XDEBUG_KPRINTF
("[dlsym] mylibáddr: %x\n", 
symbﬁ_addr
);

29 
	`¶ìp
(10);

30 
	`XDEBUG_KPRINTF
("[testcase_4] secondÑun\n");

33 * 
hñlo_dyn
 = 
≠phñlo_dyn_lﬂdög_c⁄ã¡s
;

34 
	`fûîegi°î
("/so/hñlo_dyn.so", 
hñlo_dyn
, 
≠phñlo_dyn_lﬂdög_c⁄ã¡s_size
);

36 
lﬂd_t
 
ld_°©s
;

37 
°©us
 = 
	`lﬂd
("/so/hñlo_dyn.so", &
ld_°©s
);

38 
	`ªsume
(
	`¸óã
(
ld_°©s
.
_°¨t_addr
, 
INITSTK
, 
INITPRIO
, "ã°ˇ£_4_dyn", 0, 
NULL
));

40 
	`¶ìp
(10);

42 
	`XDEBUG_KPRINTF
("[testcase_4] ungister one\n");

43 
	`fûeuƒegi°î
("/elf/hello.so");

44 
	`ªsume
(
	`¸óã
(
ld_°©s
.
_°¨t_addr
, 
INITSTK
, 
INITPRIO
, "ã°ˇ£_4_dyn", 0, 
NULL
));

46 
	`¶ìp
(10);

48 
	`XDEBUG_KPRINTF
("[testcase_4] ungisterÅwo\n");

49 
	`fûeuƒegi°î
("/so/libmy.so");

50 
	`ªsume
(
	`¸óã
(
ld_°©s
.
_°¨t_addr
, 
INITSTK
, 
INITPRIO
, "ã°ˇ£_4_dyn", 0, 
NULL
));

52 
	`¶ìp
(10);

55 
	`dl˛o£
(
h™dÀ
);

58 
	}
}

61 
¥o˚ss
 
	$ã°ˇ£_4
() {

62 
	`ªsume
(
	`¸óã
(
t4_¥oc1
, 1024, 50, "t4_¥oc1", 0, 
NULL
));

64  
OK
;

65 
	}
}

	@system/unload.c

3 
	~<xöu.h
>

11 
	$u∆ﬂd
(* 
ld_ãxt_addr
) {

13 
ötmask
 
mask
;

14 
mask
 = 
	`dißbÀ
();

15 
i
;

16 
j
;

18 
i
 = 0; i < 
NLOAD
; i ++) {

19 i‡(
lﬂdèb
[
i
].
°©us
 =
LOAD_OCCUPIED
) {

20 i‡(
lﬂdèb
[
i
].
ld_ãxt_addr
 ==Üd_text_addr) {

21 i‡(
lﬂdèb
[
i
].
autom©ic_lﬂd_°©e
 =
AUTOMATIC_ON
) {

22 
lﬂdèb
[
i
].
°©us
 = 
LOAD_FREE
;

23 
	`ª°‹e
(
mask
);

24  
OK
;

26 
lﬂdèb
[
i
].
°©us
 = 
LOAD_FREE
;

27 
	`‰ìmem
(
lﬂdèb
[
i
].
exec
);

28 
	`XDEBUG_KPRINTF
("[unloader] Gochaánd Free!\n");

31 
j
 = 0; j < 
NLOAD
; j ++) {

32 i‡(
lﬂdèb
[
j
].
autom©ic_lﬂd_°©e
 =
AUTOMATIC_ON


33 && 
lﬂdèb
[
j
].
lﬂd_by
 =
i


34 && 
lﬂdèb
[
j
].
°©us
 =
LOAD_FREE
) {

36 
	`‰ìmem
(
lﬂdèb
[
j
].
exec
);

37 
lﬂdèb
[
j
].
autom©ic_lﬂd_°©e
 = 
AUTOMATIC_OFF
;

41 
	`ª°‹e
(
mask
);

42  
OK
;

47 
	`XDEBUG_KPRINTF
("[unload]Çot find\n");

48 
	`ª°‹e
(
mask
);

49  
SYSERR
;

50 
	}
}

	@system/unsleep.c

3 
	~<xöu.h
>

11 
°©us
 
	$un¶ìp
(

12 
pid32
 
pid


15 
ötmask
 
mask
;

16 
¥o˚¡
 *
¥±r
;

18 
pid32
 
pid√xt
;

22 
mask
 = 
	`dißbÀ
();

24 i‡(
	`isbadpid
(
pid
)) {

25 
	`ª°‹e
(
mask
);

26  
SYSERR
;

31 
¥±r
 = &
¥o˘ab
[
pid
];

32 i‡((
¥±r
->
¥°©e
!=
PR_SLEEP
Ë&& (¥±r->¥°©e!=
PR_RECTIM
)) {

33 
	`ª°‹e
(
mask
);

34  
SYSERR
;

39 
pid√xt
 = 
queuëab
[
pid
].
q√xt
;

40 i‡(
pid√xt
 < 
NPROC
) {

41 
queuëab
[
pid√xt
].
qkey
 +queuëab[
pid
].qkey;

44 
	`gëôem
(
pid
);

45 
	`ª°‹e
(
mask
);

46  
OK
;

47 
	}
}

	@system/userret.c

3 
	~<xöu.h
>

9 
	$u£ºë
()

11 
	`kûl
(
	`gëpid
());

12 
	}
}

	@system/wait.c

3 
	~<xöu.h
>

9 
sysˇŒ
 
	$waô
(

10 
sid32
 
£m


13 
ötmask
 
mask
;

14 
¥o˚¡
 *
¥±r
;

15 
£¡ry
 *
£m±r
;

17 
mask
 = 
	`dißbÀ
();

18 i‡(
	`isbad£m
(
£m
)) {

19 
	`ª°‹e
(
mask
);

20  
SYSERR
;

23 
£m±r
 = &
£mèb
[
£m
];

24 i‡(
£m±r
->
s°©e
 =
S_FREE
) {

25 
	`ª°‹e
(
mask
);

26  
SYSERR
;

29 i‡(--(
£m±r
->
scou¡
) < 0) {

30 
¥±r
 = &
¥o˘ab
[
cuºpid
];

31 
¥±r
->
¥°©e
 = 
PR_WAIT
;

32 
¥±r
->
¥£m
 = 
£m
;

33 
	`íqueue
(
cuºpid
,
£m±r
->
squeue
);

34 
	`ªsched
();

37 
	`ª°‹e
(
mask
);

38  
OK
;

39 
	}
}

	@system/wakeup.c

3 
	~<xöu.h
>

9 
	$wakeup
()

13 
	`ªsched_˙é
(
DEFER_START
);

14 
	`n⁄em±y
(
¶ìpq
Ë&& (
	`fú°key
(sleepq) <= 0)) {

15 
	`ªady
(
	`dequeue
(
¶ìpq
));

18 
	`ªsched_˙é
(
DEFER_STOP
);

20 
	}
}

	@system/write.c

3 
	~<xöu.h
>

9 
sysˇŒ
 
	$wrôe
(

10 
did32
 
des¸p
,

11 *
buf„r
,

12 
uöt32
 
cou¡


15 
ötmask
 
mask
;

16 
díåy
 *
dev±r
;

17 
öt32
 
ªtvÆ
;

19 
mask
 = 
	`dißbÀ
();

20 i‡(
	`isbaddev
(
des¸p
)) {

21 
	`ª°‹e
(
mask
);

22  
SYSERR
;

24 
dev±r
 = (
díåy
 *Ë&
devèb
[
des¸p
];

25 
ªtvÆ
 = (*
dev±r
->
dvwrôe
Ë(dev±r, 
buf„r
, 
cou¡
);

26 
	`ª°‹e
(
mask
);

27  
ªtvÆ
;

28 
	}
}

	@system/xdone.c

3 
	~<xöu.h
>

9 
	$xd⁄e
()

11 
	`k¥ötf
("\n\nAll userÖrocesses have completed.\n\n");

12 
	`hÆt
();

13 
	}
}

	@system/yield.c

3 
	~<xöu.h
>

9 
sysˇŒ
 
	$yõld
()

11 
ötmask
 
mask
;

13 
mask
 = 
	`dißbÀ
();

14 
	`ªsched
();

15 
	`ª°‹e
(
mask
);

16  
OK
;

17 
	}
}

	@/usr/include/alloca.h

18 #i‚def 
_ALLOCA_H


19 
	#_ALLOCA_H
 1

	)

21 
	~<„©uªs.h
>

23 
	#__√ed_size_t


	)

24 
	~<°ddef.h
>

26 
	g__BEGIN_DECLS


29 #unde‡
Æloˇ


32 *
	$Æloˇ
 (
size_t
 
__size
Ë
__THROW
;

34 #ifdef 
__GNUC__


35 
	#Æloˇ
(
size
Ë
	`__buûtö_Æloˇ
 (size)

	)

38 
__END_DECLS


	@/usr/include/bits/auxv.h

20 
	#AT_NULL
 0

	)

21 
	#AT_IGNORE
 1

	)

22 
	#AT_EXECFD
 2

	)

23 
	#AT_PHDR
 3

	)

24 
	#AT_PHENT
 4

	)

25 
	#AT_PHNUM
 5

	)

26 
	#AT_PAGESZ
 6

	)

27 
	#AT_BASE
 7

	)

28 
	#AT_FLAGS
 8

	)

29 
	#AT_ENTRY
 9

	)

30 
	#AT_NOTELF
 10

	)

31 
	#AT_UID
 11

	)

32 
	#AT_EUID
 12

	)

33 
	#AT_GID
 13

	)

34 
	#AT_EGID
 14

	)

35 
	#AT_CLKTCK
 17

	)

38 
	#AT_PLATFORM
 15

	)

39 
	#AT_HWCAP
 16

	)

44 
	#AT_FPUCW
 18

	)

47 
	#AT_DCACHEBSIZE
 19

	)

48 
	#AT_ICACHEBSIZE
 20

	)

49 
	#AT_UCACHEBSIZE
 21

	)

53 
	#AT_IGNOREPPC
 22

	)

55 
	#AT_SECURE
 23

	)

57 
	#AT_BASE_PLATFORM
 24

	)

59 
	#AT_RANDOM
 25

	)

61 
	#AT_HWCAP2
 26

	)

64 
	#AT_EXECFN
 31

	)

68 
	#AT_SYSINFO
 32

	)

69 
	#AT_SYSINFO_EHDR
 33

	)

73 
	#AT_L1I_CACHESHAPE
 34

	)

74 
	#AT_L1D_CACHESHAPE
 35

	)

75 
	#AT_L2_CACHESHAPE
 36

	)

76 
	#AT_L3_CACHESHAPE
 37

	)

81 
	#AT_L1I_CACHESIZE
 40

	)

82 
	#AT_L1I_CACHEGEOMETRY
 41

	)

83 
	#AT_L1D_CACHESIZE
 42

	)

84 
	#AT_L1D_CACHEGEOMETRY
 43

	)

85 
	#AT_L2_CACHESIZE
 44

	)

86 
	#AT_L2_CACHEGEOMETRY
 45

	)

87 
	#AT_L3_CACHESIZE
 46

	)

88 
	#AT_L3_CACHEGEOMETRY
 47

	)

	@/usr/include/ctype.h

22 #i‚def 
_CTYPE_H


23 
	#_CTYPE_H
 1

	)

25 
	~<„©uªs.h
>

26 
	~<bôs/ty≥s.h
>

28 
	g__BEGIN_DECLS


30 #i‚de‡
_ISbô


39 
	~<ídün.h
>

40 #i‡
__BYTE_ORDER
 =
__BIG_ENDIAN


41 
	#_ISbô
(
bô
Ë(1 << (bô))

	)

43 
	#_ISbô
(
bô
Ë((bôË< 8 ? ((1 << (bô)Ë<< 8Ë: ((1 << (bô)Ë>> 8))

	)

48 
	m_ISuµî
 = 
_ISbô
 (0),

49 
	m_ISlowî
 = 
_ISbô
 (1),

50 
	m_ISÆpha
 = 
_ISbô
 (2),

51 
	m_ISdigô
 = 
_ISbô
 (3),

52 
	m_ISxdigô
 = 
_ISbô
 (4),

53 
	m_IS•a˚
 = 
_ISbô
 (5),

54 
	m_IS¥öt
 = 
_ISbô
 (6),

55 
	m_ISgøph
 = 
_ISbô
 (7),

56 
	m_ISbœnk
 = 
_ISbô
 (8),

57 
	m_IS˙ål
 = 
_ISbô
 (9),

58 
	m_ISpun˘
 = 
_ISbô
 (10),

59 
	m_ISÆnum
 = 
_ISbô
 (11)

79 c⁄° **
	$__˘y≥_b_loc
 ()

80 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

81 c⁄° 
__öt32_t
 **
	$__˘y≥_tﬁowî_loc
 ()

82 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

83 c⁄° 
__öt32_t
 **
	$__˘y≥_touµî_loc
 ()

84 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

87 #i‚de‡
__˝lu•lus


88 
	#__is˘y≥
(
c
, 
ty≥
) \

89 ((*
	`__˘y≥_b_loc
 ())[(Ë(
c
)] & (Ë
ty≥
)

	)

90 #ñi‡
deföed
 
__USE_EXTERN_INLINES


91 
	#__is˘y≥_f
(
ty≥
) \

92 
__exã∫_ölöe
 \

93 
is
##
	`ty≥
 (
__c
Ë
__THROW
 \

95  (*
	`__˘y≥_b_loc
 ())[(Ë(
__c
)] & (Ë
_IS
##
ty≥
; \

96 
	}

	)
}

99 
	#__ißscii
(
c
Ë(((cË& ~0x7fË=0Ë

	)

100 
	#__tﬂscii
(
c
Ë((cË& 0x7fË

	)

102 
	#__ex˘y≥
(
«me
Ë
	`«me
 (Ë
__THROW


	)

108 
__ex˘y≥
 (
iß um
);

109 
__ex˘y≥
 (
ißÕha
);

110 
__ex˘y≥
 (
is˙ål
);

111 
__ex˘y≥
 (
isdigô
);

112 
__ex˘y≥
 (
i¶owî
);

113 
__ex˘y≥
 (
isgøph
);

114 
__ex˘y≥
 (
i•röt
);

115 
__ex˘y≥
 (
i•un˘
);

116 
__ex˘y≥
 (
is•a˚
);

117 
__ex˘y≥
 (
isuµî
);

118 
__ex˘y≥
 (
isxdigô
);

122 
	$tﬁowî
 (
__c
Ë
__THROW
;

125 
	$touµî
 (
__c
Ë
__THROW
;

129 #ifdef 
__USE_ISOC99


130 
	`__ex˘y≥
 (
isbœnk
);

133 #ifde‡
__USE_GNU


135 
	$is˘y≥
 (
__c
, 
__mask
Ë
__THROW
;

138 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


142 
	$ißscii
 (
__c
Ë
__THROW
;

146 
	$tﬂscii
 (
__c
Ë
__THROW
;

150 
	`__ex˘y≥
 (
_touµî
);

151 
	`__ex˘y≥
 (
_tﬁowî
);

155 
	#__tobody
(
c
, 
f
, 
a
, 
¨gs
) \

156 (
__exãnsi⁄__
 \

157 ({ 
__ªs
; \

158 i‡( (
c
) > 1) \

160 i‡(
	`__buûtö_c⁄°™t_p
 (
c
)) \

162 
__c
 = (
c
); \

163 
__ªs
 = 
__c
 < -128 || __¯> 255 ? __¯: (
a
)[__c]; \

166 
__ªs
 = 
f
 
¨gs
; \

169 
__ªs
 = (
a
)[(Ë(
c
)]; \

170 
__ªs
; 
	}
}))

	)

172 #i‡!
deföed
 
__NO_CTYPE


173 #ifde‡
__is˘y≥_f


174 
	$__is˘y≥_f
 (
Ænum
)

175 
	$__is˘y≥_f
 (
Æpha
)

176 
	$__is˘y≥_f
 (
˙ål
)

177 
	$__is˘y≥_f
 (
digô
)

178 
	$__is˘y≥_f
 (
lowî
)

179 
	$__is˘y≥_f
 (
gøph
)

180 
	$__is˘y≥_f
 (
¥öt
)

181 
	$__is˘y≥_f
 (
pun˘
)

182 
	$__is˘y≥_f
 (
•a˚
)

183 
	$__is˘y≥_f
 (
uµî
)

184 
	$__is˘y≥_f
 (
xdigô
)

185 #ifde‡
__USE_ISOC99


186 
	$__is˘y≥_f
 (
bœnk
)

188 #ñi‡
deföed
 
__is˘y≥


189 
	#iß um
(
c
Ë
	`__is˘y≥
((c), 
_ISÆnum
)

	)

190 
	#ißÕha
(
c
Ë
	`__is˘y≥
((c), 
_ISÆpha
)

	)

191 
	#is˙ål
(
c
Ë
	`__is˘y≥
((c), 
_IS˙ål
)

	)

192 
	#isdigô
(
c
Ë
	`__is˘y≥
((c), 
_ISdigô
)

	)

193 
	#i¶owî
(
c
Ë
	`__is˘y≥
((c), 
_ISlowî
)

	)

194 
	#isgøph
(
c
Ë
	`__is˘y≥
((c), 
_ISgøph
)

	)

195 
	#i•röt
(
c
Ë
	`__is˘y≥
((c), 
_IS¥öt
)

	)

196 
	#i•un˘
(
c
Ë
	`__is˘y≥
((c), 
_ISpun˘
)

	)

197 
	#is•a˚
(
c
Ë
	`__is˘y≥
((c), 
_IS•a˚
)

	)

198 
	#isuµî
(
c
Ë
	`__is˘y≥
((c), 
_ISuµî
)

	)

199 
	#isxdigô
(
c
Ë
	`__is˘y≥
((c), 
_ISxdigô
)

	)

200 #ifde‡
__USE_ISOC99


201 
	#isbœnk
(
c
Ë
	`__is˘y≥
((c), 
_ISbœnk
)

	)

205 #ifde‡
__USE_EXTERN_INLINES


206 
__exã∫_ölöe
 

207 
	`__NTH
 (
	$tﬁowî
 (
__c
))

209  
__c
 >-128 && __¯< 256 ? (*
	`__˘y≥_tﬁowî_loc
 ())[__c] : __c;

210 
	}
}

212 
__exã∫_ölöe
 

213 
__NTH
 (
	$touµî
 (
__c
))

215  
__c
 >-128 && __¯< 256 ? (*
	`__˘y≥_touµî_loc
 ())[__c] : __c;

216 
	}
}

219 #i‡
__GNUC__
 >2 && 
deföed
 
__OPTIMIZE__
 && !deföed 
__˝lu•lus


220 
	#tﬁowî
(
c
Ë
	`__tobody
 (c, 
tﬁowî
, *
	`__˘y≥_tﬁowî_loc
 (), (c))

	)

221 
	#touµî
(
c
Ë
	`__tobody
 (c, 
touµî
, *
	`__˘y≥_touµî_loc
 (), (c))

	)

224 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


225 
	#ißscii
(
c
Ë
	`__ißscii
 (c)

	)

226 
	#tﬂscii
(
c
Ë
	`__tﬂscii
 (c)

	)

228 
	#_tﬁowî
(
c
Ë((Ë(*
	`__˘y≥_tﬁowî_loc
 ())[(Ë(c)])

	)

229 
	#_touµî
(
c
Ë((Ë(*
	`__˘y≥_touµî_loc
 ())[(Ë(c)])

	)

235 #ifde‡
__USE_XOPEN2K8


237 
	~<bôs/ty≥s/loˇÀ_t.h
>

241 
	#__is˘y≥_l
(
c
, 
ty≥
, 
loˇÀ
) \

242 ((
loˇÀ
)->
__˘y≥_b
[(Ë(
c
)] & (Ë
ty≥
)

	)

244 
	#__ex˘y≥_l
(
«me
) \

245 
	`«me
 (, 
loˇÀ_t
Ë
__THROW


	)

251 
__ex˘y≥_l
 (
iß um_l
);

252 
__ex˘y≥_l
 (
ißÕha_l
);

253 
__ex˘y≥_l
 (
is˙ål_l
);

254 
__ex˘y≥_l
 (
isdigô_l
);

255 
__ex˘y≥_l
 (
i¶owî_l
);

256 
__ex˘y≥_l
 (
isgøph_l
);

257 
__ex˘y≥_l
 (
i•röt_l
);

258 
__ex˘y≥_l
 (
i•un˘_l
);

259 
__ex˘y≥_l
 (
is•a˚_l
);

260 
__ex˘y≥_l
 (
isuµî_l
);

261 
__ex˘y≥_l
 (
isxdigô_l
);

263 
__ex˘y≥_l
 (
isbœnk_l
);

267 
	$__tﬁowî_l
 (
__c
, 
loˇÀ_t
 
__l
Ë
__THROW
;

268 
	$tﬁowî_l
 (
__c
, 
loˇÀ_t
 
__l
Ë
__THROW
;

271 
	$__touµî_l
 (
__c
, 
loˇÀ_t
 
__l
Ë
__THROW
;

272 
	$touµî_l
 (
__c
, 
loˇÀ_t
 
__l
Ë
__THROW
;

274 #i‡
__GNUC__
 >2 && 
deföed
 
__OPTIMIZE__
 && !deföed 
__˝lu•lus


275 
	#__tﬁowî_l
(
c
, 
loˇÀ
) \

276 
	`__tobody
 (
c
, 
__tﬁowî_l
, (
loˇÀ
)->
__˘y≥_tﬁowî
, (c,ÜoˇÀ))

	)

277 
	#__touµî_l
(
c
, 
loˇÀ
) \

278 
	`__tobody
 (
c
, 
__touµî_l
, (
loˇÀ
)->
__˘y≥_touµî
, (c,ÜoˇÀ))

	)

279 
	#tﬁowî_l
(
c
, 
loˇÀ
Ë
	`__tﬁowî_l
 ((c), (loˇÀ))

	)

280 
	#touµî_l
(
c
, 
loˇÀ
Ë
	`__touµî_l
 ((c), (loˇÀ))

	)

284 #i‚de‡
__NO_CTYPE


285 
	#__iß um_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISÆnum
, (l))

	)

286 
	#__ißÕha_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISÆpha
, (l))

	)

287 
	#__is˙ål_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_IS˙ål
, (l))

	)

288 
	#__isdigô_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISdigô
, (l))

	)

289 
	#__i¶owî_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISlowî
, (l))

	)

290 
	#__isgøph_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISgøph
, (l))

	)

291 
	#__i•röt_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_IS¥öt
, (l))

	)

292 
	#__i•un˘_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISpun˘
, (l))

	)

293 
	#__is•a˚_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_IS•a˚
, (l))

	)

294 
	#__isuµî_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISuµî
, (l))

	)

295 
	#__isxdigô_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISxdigô
, (l))

	)

297 
	#__isbœnk_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISbœnk
, (l))

	)

299 #ifde‡
__USE_MISC


300 
	#__ißscii_l
(
c
,
l
Ë(÷), 
	`__ißscii
 (c))

	)

301 
	#__tﬂscii_l
(
c
,
l
Ë(÷), 
	`__tﬂscii
 (c))

	)

304 
	#iß um_l
(
c
,
l
Ë
	`__iß um_l
 ((c), (l))

	)

305 
	#ißÕha_l
(
c
,
l
Ë
	`__ißÕha_l
 ((c), (l))

	)

306 
	#is˙ål_l
(
c
,
l
Ë
	`__is˙ål_l
 ((c), (l))

	)

307 
	#isdigô_l
(
c
,
l
Ë
	`__isdigô_l
 ((c), (l))

	)

308 
	#i¶owî_l
(
c
,
l
Ë
	`__i¶owî_l
 ((c), (l))

	)

309 
	#isgøph_l
(
c
,
l
Ë
	`__isgøph_l
 ((c), (l))

	)

310 
	#i•röt_l
(
c
,
l
Ë
	`__i•röt_l
 ((c), (l))

	)

311 
	#i•un˘_l
(
c
,
l
Ë
	`__i•un˘_l
 ((c), (l))

	)

312 
	#is•a˚_l
(
c
,
l
Ë
	`__is•a˚_l
 ((c), (l))

	)

313 
	#isuµî_l
(
c
,
l
Ë
	`__isuµî_l
 ((c), (l))

	)

314 
	#isxdigô_l
(
c
,
l
Ë
	`__isxdigô_l
 ((c), (l))

	)

316 
	#isbœnk_l
(
c
,
l
Ë
	`__isbœnk_l
 ((c), (l))

	)

318 #ifde‡
__USE_MISC


319 
	#ißscii_l
(
c
,
l
Ë
	`__ißscii_l
 ((c), (l))

	)

320 
	#tﬂscii_l
(
c
,
l
Ë
	`__tﬂscii_l
 ((c), (l))

	)

327 
__END_DECLS


	@/usr/include/elf.h

19 #i‚de‡
_ELF_H


20 
	#_ELF_H
 1

	)

22 
	~<„©uªs.h
>

24 
	g__BEGIN_DECLS


28 
	~<°döt.h
>

31 
uöt16_t
 
	tElf32_HÆf
;

32 
uöt16_t
 
	tElf64_HÆf
;

35 
uöt32_t
 
	tElf32_W‹d
;

36 
öt32_t
 
	tElf32_Sw‹d
;

37 
uöt32_t
 
	tElf64_W‹d
;

38 
öt32_t
 
	tElf64_Sw‹d
;

41 
uöt64_t
 
	tElf32_Xw‹d
;

42 
öt64_t
 
	tElf32_Sxw‹d
;

43 
uöt64_t
 
	tElf64_Xw‹d
;

44 
öt64_t
 
	tElf64_Sxw‹d
;

47 
uöt32_t
 
	tElf32_Addr
;

48 
uöt64_t
 
	tElf64_Addr
;

51 
uöt32_t
 
	tElf32_Off
;

52 
uöt64_t
 
	tElf64_Off
;

55 
uöt16_t
 
	tElf32_Se˘i⁄
;

56 
uöt16_t
 
	tElf64_Se˘i⁄
;

59 
Elf32_HÆf
 
	tElf32_Vîsym
;

60 
Elf64_HÆf
 
	tElf64_Vîsym
;

65 
	#EI_NIDENT
 (16)

	)

69 
	me_idít
[
EI_NIDENT
];

70 
Elf32_HÆf
 
	me_ty≥
;

71 
Elf32_HÆf
 
	me_machöe
;

72 
Elf32_W‹d
 
	me_vîsi⁄
;

73 
Elf32_Addr
 
	me_íåy
;

74 
Elf32_Off
 
	me_phoff
;

75 
Elf32_Off
 
	me_shoff
;

76 
Elf32_W‹d
 
	me_Êags
;

77 
Elf32_HÆf
 
	me_ehsize
;

78 
Elf32_HÆf
 
	me_phítsize
;

79 
Elf32_HÆf
 
	me_phnum
;

80 
Elf32_HÆf
 
	me_shítsize
;

81 
Elf32_HÆf
 
	me_shnum
;

82 
Elf32_HÆf
 
	me_sh°∫dx
;

83 } 
	tElf32_Ehdr
;

87 
	me_idít
[
EI_NIDENT
];

88 
Elf64_HÆf
 
	me_ty≥
;

89 
Elf64_HÆf
 
	me_machöe
;

90 
Elf64_W‹d
 
	me_vîsi⁄
;

91 
Elf64_Addr
 
	me_íåy
;

92 
Elf64_Off
 
	me_phoff
;

93 
Elf64_Off
 
	me_shoff
;

94 
Elf64_W‹d
 
	me_Êags
;

95 
Elf64_HÆf
 
	me_ehsize
;

96 
Elf64_HÆf
 
	me_phítsize
;

97 
Elf64_HÆf
 
	me_phnum
;

98 
Elf64_HÆf
 
	me_shítsize
;

99 
Elf64_HÆf
 
	me_shnum
;

100 
Elf64_HÆf
 
	me_sh°∫dx
;

101 } 
	tElf64_Ehdr
;

107 
	#EI_MAG0
 0

	)

108 
	#ELFMAG0
 0x7‡

	)

110 
	#EI_MAG1
 1

	)

111 
	#ELFMAG1
 'E'

	)

113 
	#EI_MAG2
 2

	)

114 
	#ELFMAG2
 'L'

	)

116 
	#EI_MAG3
 3

	)

117 
	#ELFMAG3
 'F'

	)

120 
	#ELFMAG
 "\177ELF"

	)

121 
	#SELFMAG
 4

	)

123 
	#EI_CLASS
 4

	)

124 
	#ELFCLASSNONE
 0

	)

125 
	#ELFCLASS32
 1

	)

126 
	#ELFCLASS64
 2

	)

127 
	#ELFCLASSNUM
 3

	)

129 
	#EI_DATA
 5

	)

130 
	#ELFDATANONE
 0

	)

131 
	#ELFDATA2LSB
 1

	)

132 
	#ELFDATA2MSB
 2

	)

133 
	#ELFDATANUM
 3

	)

135 
	#EI_VERSION
 6

	)

138 
	#EI_OSABI
 7

	)

139 
	#ELFOSABI_NONE
 0

	)

140 
	#ELFOSABI_SYSV
 0

	)

141 
	#ELFOSABI_HPUX
 1

	)

142 
	#ELFOSABI_NETBSD
 2

	)

143 
	#ELFOSABI_GNU
 3

	)

144 
	#ELFOSABI_LINUX
 
ELFOSABI_GNU


	)

145 
	#ELFOSABI_SOLARIS
 6

	)

146 
	#ELFOSABI_AIX
 7

	)

147 
	#ELFOSABI_IRIX
 8

	)

148 
	#ELFOSABI_FREEBSD
 9

	)

149 
	#ELFOSABI_TRU64
 10

	)

150 
	#ELFOSABI_MODESTO
 11

	)

151 
	#ELFOSABI_OPENBSD
 12

	)

152 
	#ELFOSABI_ARM_AEABI
 64

	)

153 
	#ELFOSABI_ARM
 97

	)

154 
	#ELFOSABI_STANDALONE
 255

	)

156 
	#EI_ABIVERSION
 8

	)

158 
	#EI_PAD
 9

	)

162 
	#ET_NONE
 0

	)

163 
	#ET_REL
 1

	)

164 
	#ET_EXEC
 2

	)

165 
	#ET_DYN
 3

	)

166 
	#ET_CORE
 4

	)

167 
	#ET_NUM
 5

	)

168 
	#ET_LOOS
 0x„00

	)

169 
	#ET_HIOS
 0x„f‡

	)

170 
	#ET_LOPROC
 0xff00

	)

171 
	#ET_HIPROC
 0xfff‡

	)

175 
	#EM_NONE
 0

	)

176 
	#EM_M32
 1

	)

177 
	#EM_SPARC
 2

	)

178 
	#EM_386
 3

	)

179 
	#EM_68K
 4

	)

180 
	#EM_88K
 5

	)

181 
	#EM_IAMCU
 6

	)

182 
	#EM_860
 7

	)

183 
	#EM_MIPS
 8

	)

184 
	#EM_S370
 9

	)

185 
	#EM_MIPS_RS3_LE
 10

	)

187 
	#EM_PARISC
 15

	)

189 
	#EM_VPP500
 17

	)

190 
	#EM_SPARC32PLUS
 18

	)

191 
	#EM_960
 19

	)

192 
	#EM_PPC
 20

	)

193 
	#EM_PPC64
 21

	)

194 
	#EM_S390
 22

	)

195 
	#EM_SPU
 23

	)

197 
	#EM_V800
 36

	)

198 
	#EM_FR20
 37

	)

199 
	#EM_RH32
 38

	)

200 
	#EM_RCE
 39

	)

201 
	#EM_ARM
 40

	)

202 
	#EM_FAKE_ALPHA
 41

	)

203 
	#EM_SH
 42

	)

204 
	#EM_SPARCV9
 43

	)

205 
	#EM_TRICORE
 44

	)

206 
	#EM_ARC
 45

	)

207 
	#EM_H8_300
 46

	)

208 
	#EM_H8_300H
 47

	)

209 
	#EM_H8S
 48

	)

210 
	#EM_H8_500
 49

	)

211 
	#EM_IA_64
 50

	)

212 
	#EM_MIPS_X
 51

	)

213 
	#EM_COLDFIRE
 52

	)

214 
	#EM_68HC12
 53

	)

215 
	#EM_MMA
 54

	)

216 
	#EM_PCP
 55

	)

217 
	#EM_NCPU
 56

	)

218 
	#EM_NDR1
 57

	)

219 
	#EM_STARCORE
 58

	)

220 
	#EM_ME16
 59

	)

221 
	#EM_ST100
 60

	)

222 
	#EM_TINYJ
 61

	)

223 
	#EM_X86_64
 62

	)

224 
	#EM_PDSP
 63

	)

225 
	#EM_PDP10
 64

	)

226 
	#EM_PDP11
 65

	)

227 
	#EM_FX66
 66

	)

228 
	#EM_ST9PLUS
 67

	)

229 
	#EM_ST7
 68

	)

230 
	#EM_68HC16
 69

	)

231 
	#EM_68HC11
 70

	)

232 
	#EM_68HC08
 71

	)

233 
	#EM_68HC05
 72

	)

234 
	#EM_SVX
 73

	)

235 
	#EM_ST19
 74

	)

236 
	#EM_VAX
 75

	)

237 
	#EM_CRIS
 76

	)

238 
	#EM_JAVELIN
 77

	)

239 
	#EM_FIREPATH
 78

	)

240 
	#EM_ZSP
 79

	)

241 
	#EM_MMIX
 80

	)

242 
	#EM_HUANY
 81

	)

243 
	#EM_PRISM
 82

	)

244 
	#EM_AVR
 83

	)

245 
	#EM_FR30
 84

	)

246 
	#EM_D10V
 85

	)

247 
	#EM_D30V
 86

	)

248 
	#EM_V850
 87

	)

249 
	#EM_M32R
 88

	)

250 
	#EM_MN10300
 89

	)

251 
	#EM_MN10200
 90

	)

252 
	#EM_PJ
 91

	)

253 
	#EM_OPENRISC
 92

	)

254 
	#EM_ARC_COMPACT
 93

	)

255 
	#EM_XTENSA
 94

	)

256 
	#EM_VIDEOCORE
 95

	)

257 
	#EM_TMM_GPP
 96

	)

258 
	#EM_NS32K
 97

	)

259 
	#EM_TPC
 98

	)

260 
	#EM_SNP1K
 99

	)

261 
	#EM_ST200
 100

	)

262 
	#EM_IP2K
 101

	)

263 
	#EM_MAX
 102

	)

264 
	#EM_CR
 103

	)

265 
	#EM_F2MC16
 104

	)

266 
	#EM_MSP430
 105

	)

267 
	#EM_BLACKFIN
 106

	)

268 
	#EM_SE_C33
 107

	)

269 
	#EM_SEP
 108

	)

270 
	#EM_ARCA
 109

	)

271 
	#EM_UNICORE
 110

	)

272 
	#EM_EXCESS
 111

	)

273 
	#EM_DXP
 112

	)

274 
	#EM_ALTERA_NIOS2
 113

	)

275 
	#EM_CRX
 114

	)

276 
	#EM_XGATE
 115

	)

277 
	#EM_C166
 116

	)

278 
	#EM_M16C
 117

	)

279 
	#EM_DSPIC30F
 118

	)

280 
	#EM_CE
 119

	)

281 
	#EM_M32C
 120

	)

283 
	#EM_TSK3000
 131

	)

284 
	#EM_RS08
 132

	)

285 
	#EM_SHARC
 133

	)

286 
	#EM_ECOG2
 134

	)

287 
	#EM_SCORE7
 135

	)

288 
	#EM_DSP24
 136

	)

289 
	#EM_VIDEOCORE3
 137

	)

290 
	#EM_LATTICEMICO32
 138

	)

291 
	#EM_SE_C17
 139

	)

292 
	#EM_TI_C6000
 140

	)

293 
	#EM_TI_C2000
 141

	)

294 
	#EM_TI_C5500
 142

	)

295 
	#EM_TI_ARP32
 143

	)

296 
	#EM_TI_PRU
 144

	)

298 
	#EM_MMDSP_PLUS
 160

	)

299 
	#EM_CYPRESS_M8C
 161

	)

300 
	#EM_R32C
 162

	)

301 
	#EM_TRIMEDIA
 163

	)

302 
	#EM_QDSP6
 164

	)

303 
	#EM_8051
 165

	)

304 
	#EM_STXP7X
 166

	)

305 
	#EM_NDS32
 167

	)

306 
	#EM_ECOG1X
 168

	)

307 
	#EM_MAXQ30
 169

	)

308 
	#EM_XIMO16
 170

	)

309 
	#EM_MANIK
 171

	)

310 
	#EM_CRAYNV2
 172

	)

311 
	#EM_RX
 173

	)

312 
	#EM_METAG
 174

	)

313 
	#EM_MCST_ELBRUS
 175

	)

314 
	#EM_ECOG16
 176

	)

315 
	#EM_CR16
 177

	)

316 
	#EM_ETPU
 178

	)

317 
	#EM_SLE9X
 179

	)

318 
	#EM_L10M
 180

	)

319 
	#EM_K10M
 181

	)

321 
	#EM_AARCH64
 183

	)

323 
	#EM_AVR32
 185

	)

324 
	#EM_STM8
 186

	)

325 
	#EM_TILE64
 187

	)

326 
	#EM_TILEPRO
 188

	)

327 
	#EM_MICROBLAZE
 189

	)

328 
	#EM_CUDA
 190

	)

329 
	#EM_TILEGX
 191

	)

330 
	#EM_CLOUDSHIELD
 192

	)

331 
	#EM_COREA_1ST
 193

	)

332 
	#EM_COREA_2ND
 194

	)

333 
	#EM_ARC_COMPACT2
 195

	)

334 
	#EM_OPEN8
 196

	)

335 
	#EM_RL78
 197

	)

336 
	#EM_VIDEOCORE5
 198

	)

337 
	#EM_78KOR
 199

	)

338 
	#EM_56800EX
 200

	)

339 
	#EM_BA1
 201

	)

340 
	#EM_BA2
 202

	)

341 
	#EM_XCORE
 203

	)

342 
	#EM_MCHP_PIC
 204

	)

344 
	#EM_KM32
 210

	)

345 
	#EM_KMX32
 211

	)

346 
	#EM_EMX16
 212

	)

347 
	#EM_EMX8
 213

	)

348 
	#EM_KVARC
 214

	)

349 
	#EM_CDP
 215

	)

350 
	#EM_COGE
 216

	)

351 
	#EM_COOL
 217

	)

352 
	#EM_NORC
 218

	)

353 
	#EM_CSR_KALIMBA
 219

	)

354 
	#EM_Z80
 220

	)

355 
	#EM_VISIUM
 221

	)

356 
	#EM_FT32
 222

	)

357 
	#EM_MOXIE
 223

	)

358 
	#EM_AMDGPU
 224

	)

360 
	#EM_RISCV
 243

	)

362 
	#EM_BPF
 247

	)

364 
	#EM_NUM
 248

	)

368 
	#EM_ARC_A5
 
EM_ARC_COMPACT


	)

374 
	#EM_ALPHA
 0x9026

	)

378 
	#EV_NONE
 0

	)

379 
	#EV_CURRENT
 1

	)

380 
	#EV_NUM
 2

	)

386 
Elf32_W‹d
 
	msh_«me
;

387 
Elf32_W‹d
 
	msh_ty≥
;

388 
Elf32_W‹d
 
	msh_Êags
;

389 
Elf32_Addr
 
	msh_addr
;

390 
Elf32_Off
 
	msh_off£t
;

391 
Elf32_W‹d
 
	msh_size
;

392 
Elf32_W‹d
 
	msh_lök
;

393 
Elf32_W‹d
 
	msh_öfo
;

394 
Elf32_W‹d
 
	msh_addølign
;

395 
Elf32_W‹d
 
	msh_ítsize
;

396 } 
	tElf32_Shdr
;

400 
Elf64_W‹d
 
	msh_«me
;

401 
Elf64_W‹d
 
	msh_ty≥
;

402 
Elf64_Xw‹d
 
	msh_Êags
;

403 
Elf64_Addr
 
	msh_addr
;

404 
Elf64_Off
 
	msh_off£t
;

405 
Elf64_Xw‹d
 
	msh_size
;

406 
Elf64_W‹d
 
	msh_lök
;

407 
Elf64_W‹d
 
	msh_öfo
;

408 
Elf64_Xw‹d
 
	msh_addølign
;

409 
Elf64_Xw‹d
 
	msh_ítsize
;

410 } 
	tElf64_Shdr
;

414 
	#SHN_UNDEF
 0

	)

415 
	#SHN_LORESERVE
 0xff00

	)

416 
	#SHN_LOPROC
 0xff00

	)

417 
	#SHN_BEFORE
 0xff00

	)

419 
	#SHN_AFTER
 0xff01

	)

421 
	#SHN_HIPROC
 0xff1‡

	)

422 
	#SHN_LOOS
 0xff20

	)

423 
	#SHN_HIOS
 0xff3‡

	)

424 
	#SHN_ABS
 0xfff1

	)

425 
	#SHN_COMMON
 0xfff2

	)

426 
	#SHN_XINDEX
 0xfff‡

	)

427 
	#SHN_HIRESERVE
 0xfff‡

	)

431 
	#SHT_NULL
 0

	)

432 
	#SHT_PROGBITS
 1

	)

433 
	#SHT_SYMTAB
 2

	)

434 
	#SHT_STRTAB
 3

	)

435 
	#SHT_RELA
 4

	)

436 
	#SHT_HASH
 5

	)

437 
	#SHT_DYNAMIC
 6

	)

438 
	#SHT_NOTE
 7

	)

439 
	#SHT_NOBITS
 8

	)

440 
	#SHT_REL
 9

	)

441 
	#SHT_SHLIB
 10

	)

442 
	#SHT_DYNSYM
 11

	)

443 
	#SHT_INIT_ARRAY
 14

	)

444 
	#SHT_FINI_ARRAY
 15

	)

445 
	#SHT_PREINIT_ARRAY
 16

	)

446 
	#SHT_GROUP
 17

	)

447 
	#SHT_SYMTAB_SHNDX
 18

	)

448 
	#SHT_NUM
 19

	)

449 
	#SHT_LOOS
 0x60000000

	)

450 
	#SHT_GNU_ATTRIBUTES
 0x6ffffff5

	)

451 
	#SHT_GNU_HASH
 0x6ffffff6

	)

452 
	#SHT_GNU_LIBLIST
 0x6ffffff7

	)

453 
	#SHT_CHECKSUM
 0x6ffffff8

	)

454 
	#SHT_LOSUNW
 0x6fffffÁ

	)

455 
	#SHT_SUNW_move
 0x6fffffÁ

	)

456 
	#SHT_SUNW_COMDAT
 0x6ffffffb

	)

457 
	#SHT_SUNW_symöfo
 0x6ffffffc

	)

458 
	#SHT_GNU_vîdef
 0x6ffffffd

	)

459 
	#SHT_GNU_vî√ed
 0x6fffff„

	)

460 
	#SHT_GNU_vîsym
 0x6ffffff‡

	)

461 
	#SHT_HISUNW
 0x6ffffff‡

	)

462 
	#SHT_HIOS
 0x6ffffff‡

	)

463 
	#SHT_LOPROC
 0x70000000

	)

464 
	#SHT_HIPROC
 0x7ffffff‡

	)

465 
	#SHT_LOUSER
 0x80000000

	)

466 
	#SHT_HIUSER
 0x8ffffff‡

	)

470 
	#SHF_WRITE
 (1 << 0Ë

	)

471 
	#SHF_ALLOC
 (1 << 1Ë

	)

472 
	#SHF_EXECINSTR
 (1 << 2Ë

	)

473 
	#SHF_MERGE
 (1 << 4Ë

	)

474 
	#SHF_STRINGS
 (1 << 5Ë

	)

475 
	#SHF_INFO_LINK
 (1 << 6Ë

	)

476 
	#SHF_LINK_ORDER
 (1 << 7Ë

	)

477 
	#SHF_OS_NONCONFORMING
 (1 << 8Ë

	)

479 
	#SHF_GROUP
 (1 << 9Ë

	)

480 
	#SHF_TLS
 (1 << 10Ë

	)

481 
	#SHF_COMPRESSED
 (1 << 11Ë

	)

482 
	#SHF_MASKOS
 0x0ff00000

	)

483 
	#SHF_MASKPROC
 0xf0000000

	)

484 
	#SHF_ORDERED
 (1 << 30Ë

	)

486 
	#SHF_EXCLUDE
 (1U << 31Ë

	)

493 
Elf32_W‹d
 
	mch_ty≥
;

494 
Elf32_W‹d
 
	mch_size
;

495 
Elf32_W‹d
 
	mch_addølign
;

496 } 
	tElf32_Chdr
;

500 
Elf64_W‹d
 
	mch_ty≥
;

501 
Elf64_W‹d
 
	mch_ª£rved
;

502 
Elf64_Xw‹d
 
	mch_size
;

503 
Elf64_Xw‹d
 
	mch_addølign
;

504 } 
	tElf64_Chdr
;

507 
	#ELFCOMPRESS_ZLIB
 1

	)

508 
	#ELFCOMPRESS_LOOS
 0x60000000

	)

509 
	#ELFCOMPRESS_HIOS
 0x6ffffff‡

	)

510 
	#ELFCOMPRESS_LOPROC
 0x70000000

	)

511 
	#ELFCOMPRESS_HIPROC
 0x7ffffff‡

	)

514 
	#GRP_COMDAT
 0x1

	)

520 
Elf32_W‹d
 
	m°_«me
;

521 
Elf32_Addr
 
	m°_vÆue
;

522 
Elf32_W‹d
 
	m°_size
;

523 
	m°_öfo
;

524 
	m°_Ÿhî
;

525 
Elf32_Se˘i⁄
 
	m°_shndx
;

526 } 
	tElf32_Sym
;

530 
Elf64_W‹d
 
	m°_«me
;

531 
	m°_öfo
;

532 
	m°_Ÿhî
;

533 
Elf64_Se˘i⁄
 
	m°_shndx
;

534 
Elf64_Addr
 
	m°_vÆue
;

535 
Elf64_Xw‹d
 
	m°_size
;

536 } 
	tElf64_Sym
;

543 
Elf32_HÆf
 
	msi_boundto
;

544 
Elf32_HÆf
 
	msi_Êags
;

545 } 
	tElf32_Symöfo
;

549 
Elf64_HÆf
 
	msi_boundto
;

550 
Elf64_HÆf
 
	msi_Êags
;

551 } 
	tElf64_Symöfo
;

554 
	#SYMINFO_BT_SELF
 0xfff‡

	)

555 
	#SYMINFO_BT_PARENT
 0xff„

	)

556 
	#SYMINFO_BT_LOWRESERVE
 0xff00

	)

559 
	#SYMINFO_FLG_DIRECT
 0x0001

	)

560 
	#SYMINFO_FLG_PASSTHRU
 0x0002

	)

561 
	#SYMINFO_FLG_COPY
 0x0004

	)

562 
	#SYMINFO_FLG_LAZYLOAD
 0x0008

	)

565 
	#SYMINFO_NONE
 0

	)

566 
	#SYMINFO_CURRENT
 1

	)

567 
	#SYMINFO_NUM
 2

	)

572 
	#ELF32_ST_BIND
(
vÆ
Ë(((Ë(vÆ)Ë>> 4)

	)

573 
	#ELF32_ST_TYPE
(
vÆ
Ë((vÆË& 0xf)

	)

574 
	#ELF32_ST_INFO
(
böd
, 
ty≥
Ë(((bödË<< 4Ë+ (—y≥Ë& 0xf))

	)

577 
	#ELF64_ST_BIND
(
vÆ
Ë
	`ELF32_ST_BIND
 (vÆ)

	)

578 
	#ELF64_ST_TYPE
(
vÆ
Ë
	`ELF32_ST_TYPE
 (vÆ)

	)

579 
	#ELF64_ST_INFO
(
böd
, 
ty≥
Ë
	`ELF32_ST_INFO
 ((böd), (ty≥))

	)

583 
	#STB_LOCAL
 0

	)

584 
	#STB_GLOBAL
 1

	)

585 
	#STB_WEAK
 2

	)

586 
	#STB_NUM
 3

	)

587 
	#STB_LOOS
 10

	)

588 
	#STB_GNU_UNIQUE
 10

	)

589 
	#STB_HIOS
 12

	)

590 
	#STB_LOPROC
 13

	)

591 
	#STB_HIPROC
 15

	)

595 
	#STT_NOTYPE
 0

	)

596 
	#STT_OBJECT
 1

	)

597 
	#STT_FUNC
 2

	)

598 
	#STT_SECTION
 3

	)

599 
	#STT_FILE
 4

	)

600 
	#STT_COMMON
 5

	)

601 
	#STT_TLS
 6

	)

602 
	#STT_NUM
 7

	)

603 
	#STT_LOOS
 10

	)

604 
	#STT_GNU_IFUNC
 10

	)

605 
	#STT_HIOS
 12

	)

606 
	#STT_LOPROC
 13

	)

607 
	#STT_HIPROC
 15

	)

614 
	#STN_UNDEF
 0

	)

619 
	#ELF32_ST_VISIBILITY
(
o
Ë((oË& 0x03)

	)

622 
	#ELF64_ST_VISIBILITY
(
o
Ë
	`ELF32_ST_VISIBILITY
 (o)

	)

625 
	#STV_DEFAULT
 0

	)

626 
	#STV_INTERNAL
 1

	)

627 
	#STV_HIDDEN
 2

	)

628 
	#STV_PROTECTED
 3

	)

635 
Elf32_Addr
 
	mr_off£t
;

636 
Elf32_W‹d
 
	mr_öfo
;

637 } 
	tElf32_Rñ
;

646 
Elf64_Addr
 
	mr_off£t
;

647 
Elf64_Xw‹d
 
	mr_öfo
;

648 } 
	tElf64_Rñ
;

654 
Elf32_Addr
 
	mr_off£t
;

655 
Elf32_W‹d
 
	mr_öfo
;

656 
Elf32_Sw‹d
 
	mr_addíd
;

657 } 
	tElf32_Rña
;

661 
Elf64_Addr
 
	mr_off£t
;

662 
Elf64_Xw‹d
 
	mr_öfo
;

663 
Elf64_Sxw‹d
 
	mr_addíd
;

664 } 
	tElf64_Rña
;

668 
	#ELF32_R_SYM
(
vÆ
Ë((vÆË>> 8)

	)

669 
	#ELF32_R_TYPE
(
vÆ
Ë((vÆË& 0xff)

	)

670 
	#ELF32_R_INFO
(
sym
, 
ty≥
Ë(((symË<< 8Ë+ (—y≥Ë& 0xff))

	)

672 
	#ELF64_R_SYM
(
i
Ë((iË>> 32)

	)

673 
	#ELF64_R_TYPE
(
i
Ë((iË& 0xffffffff)

	)

674 
	#ELF64_R_INFO
(
sym
,
ty≥
Ë((((
Elf64_Xw‹d
Ë(sym)Ë<< 32Ë+ (ty≥))

	)

680 
Elf32_W‹d
 
	mp_ty≥
;

681 
Elf32_Off
 
	mp_off£t
;

682 
Elf32_Addr
 
	mp_vaddr
;

683 
Elf32_Addr
 
	mp_∑ddr
;

684 
Elf32_W‹d
 
	mp_fûesz
;

685 
Elf32_W‹d
 
	mp_memsz
;

686 
Elf32_W‹d
 
	mp_Êags
;

687 
Elf32_W‹d
 
	mp_Æign
;

688 } 
	tElf32_Phdr
;

692 
Elf64_W‹d
 
	mp_ty≥
;

693 
Elf64_W‹d
 
	mp_Êags
;

694 
Elf64_Off
 
	mp_off£t
;

695 
Elf64_Addr
 
	mp_vaddr
;

696 
Elf64_Addr
 
	mp_∑ddr
;

697 
Elf64_Xw‹d
 
	mp_fûesz
;

698 
Elf64_Xw‹d
 
	mp_memsz
;

699 
Elf64_Xw‹d
 
	mp_Æign
;

700 } 
	tElf64_Phdr
;

706 
	#PN_XNUM
 0xffff

	)

710 
	#PT_NULL
 0

	)

711 
	#PT_LOAD
 1

	)

712 
	#PT_DYNAMIC
 2

	)

713 
	#PT_INTERP
 3

	)

714 
	#PT_NOTE
 4

	)

715 
	#PT_SHLIB
 5

	)

716 
	#PT_PHDR
 6

	)

717 
	#PT_TLS
 7

	)

718 
	#PT_NUM
 8

	)

719 
	#PT_LOOS
 0x60000000

	)

720 
	#PT_GNU_EH_FRAME
 0x6474e550

	)

721 
	#PT_GNU_STACK
 0x6474e551

	)

722 
	#PT_GNU_RELRO
 0x6474e552

	)

723 
	#PT_LOSUNW
 0x6fffffÁ

	)

724 
	#PT_SUNWBSS
 0x6fffffÁ

	)

725 
	#PT_SUNWSTACK
 0x6ffffffb

	)

726 
	#PT_HISUNW
 0x6fffffff

	)

727 
	#PT_HIOS
 0x6ffffff‡

	)

728 
	#PT_LOPROC
 0x70000000

	)

729 
	#PT_HIPROC
 0x7ffffff‡

	)

733 
	#PF_X
 (1 << 0Ë

	)

734 
	#PF_W
 (1 << 1Ë

	)

735 
	#PF_R
 (1 << 2Ë

	)

736 
	#PF_MASKOS
 0x0ff00000

	)

737 
	#PF_MASKPROC
 0xf0000000

	)

741 
	#NT_PRSTATUS
 1

	)

742 
	#NT_FPREGSET
 2

	)

743 
	#NT_PRPSINFO
 3

	)

744 
	#NT_PRXREG
 4

	)

745 
	#NT_TASKSTRUCT
 4

	)

746 
	#NT_PLATFORM
 5

	)

747 
	#NT_AUXV
 6

	)

748 
	#NT_GWINDOWS
 7

	)

749 
	#NT_ASRS
 8

	)

750 
	#NT_PSTATUS
 10

	)

751 
	#NT_PSINFO
 13

	)

752 
	#NT_PRCRED
 14

	)

753 
	#NT_UTSNAME
 15

	)

754 
	#NT_LWPSTATUS
 16

	)

755 
	#NT_LWPSINFO
 17

	)

756 
	#NT_PRFPXREG
 20

	)

757 
	#NT_SIGINFO
 0x53494749

	)

759 
	#NT_FILE
 0x46494c45

	)

761 
	#NT_PRXFPREG
 0x46e62b7‡

	)

762 
	#NT_PPC_VMX
 0x100

	)

763 
	#NT_PPC_SPE
 0x101

	)

764 
	#NT_PPC_VSX
 0x102

	)

765 
	#NT_PPC_TAR
 0x103

	)

766 
	#NT_PPC_PPR
 0x104

	)

767 
	#NT_PPC_DSCR
 0x105

	)

768 
	#NT_PPC_EBB
 0x106

	)

769 
	#NT_PPC_PMU
 0x107

	)

770 
	#NT_PPC_TM_CGPR
 0x108

	)

771 
	#NT_PPC_TM_CFPR
 0x109

	)

772 
	#NT_PPC_TM_CVMX
 0x10®

	)

773 
	#NT_PPC_TM_CVSX
 0x10b

	)

774 
	#NT_PPC_TM_SPR
 0x10¯

	)

775 
	#NT_PPC_TM_CTAR
 0x10d

	)

777 
	#NT_PPC_TM_CPPR
 0x10ê

	)

779 
	#NT_PPC_TM_CDSCR
 0x10‡

	)

781 
	#NT_386_TLS
 0x200

	)

782 
	#NT_386_IOPERM
 0x201

	)

783 
	#NT_X86_XSTATE
 0x202

	)

784 
	#NT_S390_HIGH_GPRS
 0x300

	)

785 
	#NT_S390_TIMER
 0x301

	)

786 
	#NT_S390_TODCMP
 0x302

	)

787 
	#NT_S390_TODPREG
 0x303

	)

788 
	#NT_S390_CTRS
 0x304

	)

789 
	#NT_S390_PREFIX
 0x305

	)

790 
	#NT_S390_LAST_BREAK
 0x306

	)

791 
	#NT_S390_SYSTEM_CALL
 0x307

	)

792 
	#NT_S390_TDB
 0x308

	)

793 
	#NT_ARM_VFP
 0x400

	)

794 
	#NT_ARM_TLS
 0x401

	)

795 
	#NT_ARM_HW_BREAK
 0x402

	)

796 
	#NT_ARM_HW_WATCH
 0x403

	)

797 
	#NT_ARM_SYSTEM_CALL
 0x404

	)

798 
	#NT_ARM_SVE
 0x405

	)

803 
	#NT_VERSION
 1

	)

810 
Elf32_Sw‹d
 
	md_èg
;

813 
Elf32_W‹d
 
	md_vÆ
;

814 
Elf32_Addr
 
	md_±r
;

815 } 
	md_un
;

816 } 
	tElf32_Dyn
;

820 
Elf64_Sxw‹d
 
	md_èg
;

823 
Elf64_Xw‹d
 
	md_vÆ
;

824 
Elf64_Addr
 
	md_±r
;

825 } 
	md_un
;

826 } 
	tElf64_Dyn
;

830 
	#DT_NULL
 0

	)

831 
	#DT_NEEDED
 1

	)

832 
	#DT_PLTRELSZ
 2

	)

833 
	#DT_PLTGOT
 3

	)

834 
	#DT_HASH
 4

	)

835 
	#DT_STRTAB
 5

	)

836 
	#DT_SYMTAB
 6

	)

837 
	#DT_RELA
 7

	)

838 
	#DT_RELASZ
 8

	)

839 
	#DT_RELAENT
 9

	)

840 
	#DT_STRSZ
 10

	)

841 
	#DT_SYMENT
 11

	)

842 
	#DT_INIT
 12

	)

843 
	#DT_FINI
 13

	)

844 
	#DT_SONAME
 14

	)

845 
	#DT_RPATH
 15

	)

846 
	#DT_SYMBOLIC
 16

	)

847 
	#DT_REL
 17

	)

848 
	#DT_RELSZ
 18

	)

849 
	#DT_RELENT
 19

	)

850 
	#DT_PLTREL
 20

	)

851 
	#DT_DEBUG
 21

	)

852 
	#DT_TEXTREL
 22

	)

853 
	#DT_JMPREL
 23

	)

854 
	#DT_BIND_NOW
 24

	)

855 
	#DT_INIT_ARRAY
 25

	)

856 
	#DT_FINI_ARRAY
 26

	)

857 
	#DT_INIT_ARRAYSZ
 27

	)

858 
	#DT_FINI_ARRAYSZ
 28

	)

859 
	#DT_RUNPATH
 29

	)

860 
	#DT_FLAGS
 30

	)

861 
	#DT_ENCODING
 32

	)

862 
	#DT_PREINIT_ARRAY
 32

	)

863 
	#DT_PREINIT_ARRAYSZ
 33

	)

864 
	#DT_NUM
 34

	)

865 
	#DT_LOOS
 0x6000000d

	)

866 
	#DT_HIOS
 0x6ffff000

	)

867 
	#DT_LOPROC
 0x70000000

	)

868 
	#DT_HIPROC
 0x7ffffff‡

	)

869 
	#DT_PROCNUM
 
DT_MIPS_NUM


	)

874 
	#DT_VALRNGLO
 0x6ffffd00

	)

875 
	#DT_GNU_PRELINKED
 0x6ffffdf5

	)

876 
	#DT_GNU_CONFLICTSZ
 0x6ffffdf6

	)

877 
	#DT_GNU_LIBLISTSZ
 0x6ffffdf7

	)

878 
	#DT_CHECKSUM
 0x6ffffdf8

	)

879 
	#DT_PLTPADSZ
 0x6ffffdf9

	)

880 
	#DT_MOVEENT
 0x6ffffdÁ

	)

881 
	#DT_MOVESZ
 0x6ffffdfb

	)

882 
	#DT_FEATURE_1
 0x6ffffdf¯

	)

883 
	#DT_POSFLAG_1
 0x6ffffdfd

	)

885 
	#DT_SYMINSZ
 0x6ffffd„

	)

886 
	#DT_SYMINENT
 0x6ffffdf‡

	)

887 
	#DT_VALRNGHI
 0x6ffffdff

	)

888 
	#DT_VALTAGIDX
(
èg
Ë(
DT_VALRNGHI
 - (èg)Ë

	)

889 
	#DT_VALNUM
 12

	)

896 
	#DT_ADDRRNGLO
 0x6fff„00

	)

897 
	#DT_GNU_HASH
 0x6fff„f5

	)

898 
	#DT_TLSDESC_PLT
 0x6fff„f6

	)

899 
	#DT_TLSDESC_GOT
 0x6fff„f7

	)

900 
	#DT_GNU_CONFLICT
 0x6fff„f8

	)

901 
	#DT_GNU_LIBLIST
 0x6fff„f9

	)

902 
	#DT_CONFIG
 0x6fff„Á

	)

903 
	#DT_DEPAUDIT
 0x6fff„fb

	)

904 
	#DT_AUDIT
 0x6fff„f¯

	)

905 
	#DT_PLTPAD
 0x6fff„fd

	)

906 
	#DT_MOVETAB
 0x6fff„„

	)

907 
	#DT_SYMINFO
 0x6fff„f‡

	)

908 
	#DT_ADDRRNGHI
 0x6fff„ff

	)

909 
	#DT_ADDRTAGIDX
(
èg
Ë(
DT_ADDRRNGHI
 - (èg)Ë

	)

910 
	#DT_ADDRNUM
 11

	)

914 
	#DT_VERSYM
 0x6ffffff0

	)

916 
	#DT_RELACOUNT
 0x6ffffff9

	)

917 
	#DT_RELCOUNT
 0x6fffffÁ

	)

920 
	#DT_FLAGS_1
 0x6ffffffb

	)

921 
	#DT_VERDEF
 0x6ffffff¯

	)

923 
	#DT_VERDEFNUM
 0x6ffffffd

	)

924 
	#DT_VERNEED
 0x6fffff„

	)

926 
	#DT_VERNEEDNUM
 0x6ffffff‡

	)

927 
	#DT_VERSIONTAGIDX
(
èg
Ë(
DT_VERNEEDNUM
 - (èg)Ë

	)

928 
	#DT_VERSIONTAGNUM
 16

	)

932 
	#DT_AUXILIARY
 0x7ffffffd

	)

933 
	#DT_FILTER
 0x7ffffff‡

	)

934 
	#DT_EXTRATAGIDX
(
èg
Ë((
Elf32_W‹d
)-((
Elf32_Sw‹d
Ë—agË<<1>>1)-1)

	)

935 
	#DT_EXTRANUM
 3

	)

938 
	#DF_ORIGIN
 0x00000001

	)

939 
	#DF_SYMBOLIC
 0x00000002

	)

940 
	#DF_TEXTREL
 0x00000004

	)

941 
	#DF_BIND_NOW
 0x00000008

	)

942 
	#DF_STATIC_TLS
 0x00000010

	)

946 
	#DF_1_NOW
 0x00000001

	)

947 
	#DF_1_GLOBAL
 0x00000002

	)

948 
	#DF_1_GROUP
 0x00000004

	)

949 
	#DF_1_NODELETE
 0x00000008

	)

950 
	#DF_1_LOADFLTR
 0x00000010

	)

951 
	#DF_1_INITFIRST
 0x00000020

	)

952 
	#DF_1_NOOPEN
 0x00000040

	)

953 
	#DF_1_ORIGIN
 0x00000080

	)

954 
	#DF_1_DIRECT
 0x00000100

	)

955 
	#DF_1_TRANS
 0x00000200

	)

956 
	#DF_1_INTERPOSE
 0x00000400

	)

957 
	#DF_1_NODEFLIB
 0x00000800

	)

958 
	#DF_1_NODUMP
 0x00001000

	)

959 
	#DF_1_CONFALT
 0x00002000

	)

960 
	#DF_1_ENDFILTEE
 0x00004000

	)

961 
	#DF_1_DISPRELDNE
 0x00008000

	)

962 
	#DF_1_DISPRELPND
 0x00010000

	)

963 
	#DF_1_NODIRECT
 0x00020000

	)

964 
	#DF_1_IGNMULDEF
 0x00040000

	)

965 
	#DF_1_NOKSYMS
 0x00080000

	)

966 
	#DF_1_NOHDR
 0x00100000

	)

967 
	#DF_1_EDITED
 0x00200000

	)

968 
	#DF_1_NORELOC
 0x00400000

	)

969 
	#DF_1_SYMINTPOSE
 0x00800000

	)

970 
	#DF_1_GLOBAUDIT
 0x01000000

	)

971 
	#DF_1_SINGLETON
 0x02000000

	)

972 
	#DF_1_STUB
 0x04000000

	)

973 
	#DF_1_PIE
 0x08000000

	)

976 
	#DTF_1_PARINIT
 0x00000001

	)

977 
	#DTF_1_CONFEXP
 0x00000002

	)

980 
	#DF_P1_LAZYLOAD
 0x00000001

	)

981 
	#DF_P1_GROUPPERM
 0x00000002

	)

988 
Elf32_HÆf
 
	mvd_vîsi⁄
;

989 
Elf32_HÆf
 
	mvd_Êags
;

990 
Elf32_HÆf
 
	mvd_ndx
;

991 
Elf32_HÆf
 
	mvd_˙t
;

992 
Elf32_W‹d
 
	mvd_hash
;

993 
Elf32_W‹d
 
	mvd_aux
;

994 
Elf32_W‹d
 
	mvd_√xt
;

996 } 
	tElf32_Vîdef
;

1000 
Elf64_HÆf
 
	mvd_vîsi⁄
;

1001 
Elf64_HÆf
 
	mvd_Êags
;

1002 
Elf64_HÆf
 
	mvd_ndx
;

1003 
Elf64_HÆf
 
	mvd_˙t
;

1004 
Elf64_W‹d
 
	mvd_hash
;

1005 
Elf64_W‹d
 
	mvd_aux
;

1006 
Elf64_W‹d
 
	mvd_√xt
;

1008 } 
	tElf64_Vîdef
;

1012 
	#VER_DEF_NONE
 0

	)

1013 
	#VER_DEF_CURRENT
 1

	)

1014 
	#VER_DEF_NUM
 2

	)

1017 
	#VER_FLG_BASE
 0x1

	)

1018 
	#VER_FLG_WEAK
 0x2

	)

1021 
	#VER_NDX_LOCAL
 0

	)

1022 
	#VER_NDX_GLOBAL
 1

	)

1023 
	#VER_NDX_LORESERVE
 0xff00

	)

1024 
	#VER_NDX_ELIMINATE
 0xff01

	)

1030 
Elf32_W‹d
 
	mvda_«me
;

1031 
Elf32_W‹d
 
	mvda_√xt
;

1033 } 
	tElf32_Vîdaux
;

1037 
Elf64_W‹d
 
	mvda_«me
;

1038 
Elf64_W‹d
 
	mvda_√xt
;

1040 } 
	tElf64_Vîdaux
;

1047 
Elf32_HÆf
 
	mvn_vîsi⁄
;

1048 
Elf32_HÆf
 
	mvn_˙t
;

1049 
Elf32_W‹d
 
	mvn_fûe
;

1051 
Elf32_W‹d
 
	mvn_aux
;

1052 
Elf32_W‹d
 
	mvn_√xt
;

1054 } 
	tElf32_Vî√ed
;

1058 
Elf64_HÆf
 
	mvn_vîsi⁄
;

1059 
Elf64_HÆf
 
	mvn_˙t
;

1060 
Elf64_W‹d
 
	mvn_fûe
;

1062 
Elf64_W‹d
 
	mvn_aux
;

1063 
Elf64_W‹d
 
	mvn_√xt
;

1065 } 
	tElf64_Vî√ed
;

1069 
	#VER_NEED_NONE
 0

	)

1070 
	#VER_NEED_CURRENT
 1

	)

1071 
	#VER_NEED_NUM
 2

	)

1077 
Elf32_W‹d
 
	mv«_hash
;

1078 
Elf32_HÆf
 
	mv«_Êags
;

1079 
Elf32_HÆf
 
	mv«_Ÿhî
;

1080 
Elf32_W‹d
 
	mv«_«me
;

1081 
Elf32_W‹d
 
	mv«_√xt
;

1083 } 
	tElf32_Vî«ux
;

1087 
Elf64_W‹d
 
	mv«_hash
;

1088 
Elf64_HÆf
 
	mv«_Êags
;

1089 
Elf64_HÆf
 
	mv«_Ÿhî
;

1090 
Elf64_W‹d
 
	mv«_«me
;

1091 
Elf64_W‹d
 
	mv«_√xt
;

1093 } 
	tElf64_Vî«ux
;

1097 
	#VER_FLG_WEAK
 0x2

	)

1111 
uöt32_t
 
	ma_ty≥
;

1114 
uöt32_t
 
	ma_vÆ
;

1118 } 
	ma_un
;

1119 } 
	tElf32_auxv_t
;

1123 
uöt64_t
 
	ma_ty≥
;

1126 
uöt64_t
 
	ma_vÆ
;

1130 } 
	ma_un
;

1131 } 
	tElf64_auxv_t
;

1133 
	~<bôs/auxv.h
>

1139 
Elf32_W‹d
 
	mn_«mesz
;

1140 
Elf32_W‹d
 
	mn_descsz
;

1141 
Elf32_W‹d
 
	mn_ty≥
;

1142 } 
	tElf32_Nhdr
;

1146 
Elf64_W‹d
 
	mn_«mesz
;

1147 
Elf64_W‹d
 
	mn_descsz
;

1148 
Elf64_W‹d
 
	mn_ty≥
;

1149 } 
	tElf64_Nhdr
;

1154 
	#ELF_NOTE_SOLARIS
 "SUNW Sﬁ¨is"

	)

1157 
	#ELF_NOTE_GNU
 "GNU"

	)

1163 
	#ELF_NOTE_PAGESIZE_HINT
 1

	)

1174 
	#NT_GNU_ABI_TAG
 1

	)

1175 
	#ELF_NOTE_ABI
 
NT_GNU_ABI_TAG


	)

1179 
	#ELF_NOTE_OS_LINUX
 0

	)

1180 
	#ELF_NOTE_OS_GNU
 1

	)

1181 
	#ELF_NOTE_OS_SOLARIS2
 2

	)

1182 
	#ELF_NOTE_OS_FREEBSD
 3

	)

1190 
	#NT_GNU_HWCAP
 2

	)

1194 
	#NT_GNU_BUILD_ID
 3

	)

1197 
	#NT_GNU_GOLD_VERSION
 4

	)

1200 
	#NT_GNU_PROPERTY_TYPE_0
 5

	)

1203 
	#NOTE_GNU_PROPERTY_SECTION_NAME
 ".nŸe.gnu.¥›îty"

	)

1208 
	#GNU_PROPERTY_STACK_SIZE
 1

	)

1210 
	#GNU_PROPERTY_NO_COPY_ON_PROTECTED
 2

	)

1213 
	#GNU_PROPERTY_LOPROC
 0xc0000000

	)

1215 
	#GNU_PROPERTY_HIPROC
 0xdfffffff

	)

1217 
	#GNU_PROPERTY_LOUSER
 0xe0000000

	)

1219 
	#GNU_PROPERTY_HIUSER
 0xffffffff

	)

1223 
	#GNU_PROPERTY_X86_ISA_1_USED
 0xc0000000

	)

1226 
	#GNU_PROPERTY_X86_ISA_1_NEEDED
 0xc0000001

	)

1228 
	#GNU_PROPERTY_X86_FEATURE_1_AND
 0xc0000002

	)

1230 
	#GNU_PROPERTY_X86_ISA_1_486
 (1U << 0)

	)

1231 
	#GNU_PROPERTY_X86_ISA_1_586
 (1U << 1)

	)

1232 
	#GNU_PROPERTY_X86_ISA_1_686
 (1U << 2)

	)

1233 
	#GNU_PROPERTY_X86_ISA_1_SSE
 (1U << 3)

	)

1234 
	#GNU_PROPERTY_X86_ISA_1_SSE2
 (1U << 4)

	)

1235 
	#GNU_PROPERTY_X86_ISA_1_SSE3
 (1U << 5)

	)

1236 
	#GNU_PROPERTY_X86_ISA_1_SSSE3
 (1U << 6)

	)

1237 
	#GNU_PROPERTY_X86_ISA_1_SSE4_1
 (1U << 7)

	)

1238 
	#GNU_PROPERTY_X86_ISA_1_SSE4_2
 (1U << 8)

	)

1239 
	#GNU_PROPERTY_X86_ISA_1_AVX
 (1U << 9)

	)

1240 
	#GNU_PROPERTY_X86_ISA_1_AVX2
 (1U << 10)

	)

1241 
	#GNU_PROPERTY_X86_ISA_1_AVX512F
 (1U << 11)

	)

1242 
	#GNU_PROPERTY_X86_ISA_1_AVX512CD
 (1U << 12)

	)

1243 
	#GNU_PROPERTY_X86_ISA_1_AVX512ER
 (1U << 13)

	)

1244 
	#GNU_PROPERTY_X86_ISA_1_AVX512PF
 (1U << 14)

	)

1245 
	#GNU_PROPERTY_X86_ISA_1_AVX512VL
 (1U << 15)

	)

1246 
	#GNU_PROPERTY_X86_ISA_1_AVX512DQ
 (1U << 16)

	)

1247 
	#GNU_PROPERTY_X86_ISA_1_AVX512BW
 (1U << 17)

	)

1251 
	#GNU_PROPERTY_X86_FEATURE_1_IBT
 (1U << 0)

	)

1254 
	#GNU_PROPERTY_X86_FEATURE_1_SHSTK
 (1U << 1)

	)

1259 
Elf32_Xw‹d
 
	mm_vÆue
;

1260 
Elf32_W‹d
 
	mm_öfo
;

1261 
Elf32_W‹d
 
	mm_poff£t
;

1262 
Elf32_HÆf
 
	mm_ª≥©
;

1263 
Elf32_HÆf
 
	mm_°ride
;

1264 } 
	tElf32_Move
;

1268 
Elf64_Xw‹d
 
	mm_vÆue
;

1269 
Elf64_Xw‹d
 
	mm_öfo
;

1270 
Elf64_Xw‹d
 
	mm_poff£t
;

1271 
Elf64_HÆf
 
	mm_ª≥©
;

1272 
Elf64_HÆf
 
	mm_°ride
;

1273 } 
	tElf64_Move
;

1276 
	#ELF32_M_SYM
(
öfo
Ë((öfoË>> 8)

	)

1277 
	#ELF32_M_SIZE
(
öfo
Ë((Ë(öfo))

	)

1278 
	#ELF32_M_INFO
(
sym
, 
size
Ë(((symË<< 8Ë+ (Ë(size))

	)

1280 
	#ELF64_M_SYM
(
öfo
Ë
	`ELF32_M_SYM
 (öfo)

	)

1281 
	#ELF64_M_SIZE
(
öfo
Ë
	`ELF32_M_SIZE
 (öfo)

	)

1282 
	#ELF64_M_INFO
(
sym
, 
size
Ë
	`ELF32_M_INFO
 (sym, size)

	)

1288 
	#EF_CPU32
 0x00810000

	)

1292 
	#R_68K_NONE
 0

	)

1293 
	#R_68K_32
 1

	)

1294 
	#R_68K_16
 2

	)

1295 
	#R_68K_8
 3

	)

1296 
	#R_68K_PC32
 4

	)

1297 
	#R_68K_PC16
 5

	)

1298 
	#R_68K_PC8
 6

	)

1299 
	#R_68K_GOT32
 7

	)

1300 
	#R_68K_GOT16
 8

	)

1301 
	#R_68K_GOT8
 9

	)

1302 
	#R_68K_GOT32O
 10

	)

1303 
	#R_68K_GOT16O
 11

	)

1304 
	#R_68K_GOT8O
 12

	)

1305 
	#R_68K_PLT32
 13

	)

1306 
	#R_68K_PLT16
 14

	)

1307 
	#R_68K_PLT8
 15

	)

1308 
	#R_68K_PLT32O
 16

	)

1309 
	#R_68K_PLT16O
 17

	)

1310 
	#R_68K_PLT8O
 18

	)

1311 
	#R_68K_COPY
 19

	)

1312 
	#R_68K_GLOB_DAT
 20

	)

1313 
	#R_68K_JMP_SLOT
 21

	)

1314 
	#R_68K_RELATIVE
 22

	)

1315 
	#R_68K_TLS_GD32
 25

	)

1316 
	#R_68K_TLS_GD16
 26

	)

1317 
	#R_68K_TLS_GD8
 27

	)

1318 
	#R_68K_TLS_LDM32
 28

	)

1319 
	#R_68K_TLS_LDM16
 29

	)

1320 
	#R_68K_TLS_LDM8
 30

	)

1321 
	#R_68K_TLS_LDO32
 31

	)

1322 
	#R_68K_TLS_LDO16
 32

	)

1323 
	#R_68K_TLS_LDO8
 33

	)

1324 
	#R_68K_TLS_IE32
 34

	)

1325 
	#R_68K_TLS_IE16
 35

	)

1326 
	#R_68K_TLS_IE8
 36

	)

1327 
	#R_68K_TLS_LE32
 37

	)

1329 
	#R_68K_TLS_LE16
 38

	)

1331 
	#R_68K_TLS_LE8
 39

	)

1333 
	#R_68K_TLS_DTPMOD32
 40

	)

1334 
	#R_68K_TLS_DTPREL32
 41

	)

1335 
	#R_68K_TLS_TPREL32
 42

	)

1337 
	#R_68K_NUM
 43

	)

1343 
	#R_386_NONE
 0

	)

1344 
	#R_386_32
 1

	)

1345 
	#R_386_PC32
 2

	)

1346 
	#R_386_GOT32
 3

	)

1347 
	#R_386_PLT32
 4

	)

1348 
	#R_386_COPY
 5

	)

1349 
	#R_386_GLOB_DAT
 6

	)

1350 
	#R_386_JMP_SLOT
 7

	)

1351 
	#R_386_RELATIVE
 8

	)

1352 
	#R_386_GOTOFF
 9

	)

1353 
	#R_386_GOTPC
 10

	)

1354 
	#R_386_32PLT
 11

	)

1355 
	#R_386_TLS_TPOFF
 14

	)

1356 
	#R_386_TLS_IE
 15

	)

1358 
	#R_386_TLS_GOTIE
 16

	)

1360 
	#R_386_TLS_LE
 17

	)

1362 
	#R_386_TLS_GD
 18

	)

1364 
	#R_386_TLS_LDM
 19

	)

1367 
	#R_386_16
 20

	)

1368 
	#R_386_PC16
 21

	)

1369 
	#R_386_8
 22

	)

1370 
	#R_386_PC8
 23

	)

1371 
	#R_386_TLS_GD_32
 24

	)

1373 
	#R_386_TLS_GD_PUSH
 25

	)

1374 
	#R_386_TLS_GD_CALL
 26

	)

1376 
	#R_386_TLS_GD_POP
 27

	)

1377 
	#R_386_TLS_LDM_32
 28

	)

1379 
	#R_386_TLS_LDM_PUSH
 29

	)

1380 
	#R_386_TLS_LDM_CALL
 30

	)

1382 
	#R_386_TLS_LDM_POP
 31

	)

1383 
	#R_386_TLS_LDO_32
 32

	)

1384 
	#R_386_TLS_IE_32
 33

	)

1386 
	#R_386_TLS_LE_32
 34

	)

1388 
	#R_386_TLS_DTPMOD32
 35

	)

1389 
	#R_386_TLS_DTPOFF32
 36

	)

1390 
	#R_386_TLS_TPOFF32
 37

	)

1391 
	#R_386_SIZE32
 38

	)

1392 
	#R_386_TLS_GOTDESC
 39

	)

1393 
	#R_386_TLS_DESC_CALL
 40

	)

1396 
	#R_386_TLS_DESC
 41

	)

1400 
	#R_386_IRELATIVE
 42

	)

1401 
	#R_386_GOT32X
 43

	)

1404 
	#R_386_NUM
 44

	)

1410 
	#STT_SPARC_REGISTER
 13

	)

1414 
	#EF_SPARCV9_MM
 3

	)

1415 
	#EF_SPARCV9_TSO
 0

	)

1416 
	#EF_SPARCV9_PSO
 1

	)

1417 
	#EF_SPARCV9_RMO
 2

	)

1418 
	#EF_SPARC_LEDATA
 0x800000

	)

1419 
	#EF_SPARC_EXT_MASK
 0xFFFF00

	)

1420 
	#EF_SPARC_32PLUS
 0x000100

	)

1421 
	#EF_SPARC_SUN_US1
 0x000200

	)

1422 
	#EF_SPARC_HAL_R1
 0x000400

	)

1423 
	#EF_SPARC_SUN_US3
 0x000800

	)

1427 
	#R_SPARC_NONE
 0

	)

1428 
	#R_SPARC_8
 1

	)

1429 
	#R_SPARC_16
 2

	)

1430 
	#R_SPARC_32
 3

	)

1431 
	#R_SPARC_DISP8
 4

	)

1432 
	#R_SPARC_DISP16
 5

	)

1433 
	#R_SPARC_DISP32
 6

	)

1434 
	#R_SPARC_WDISP30
 7

	)

1435 
	#R_SPARC_WDISP22
 8

	)

1436 
	#R_SPARC_HI22
 9

	)

1437 
	#R_SPARC_22
 10

	)

1438 
	#R_SPARC_13
 11

	)

1439 
	#R_SPARC_LO10
 12

	)

1440 
	#R_SPARC_GOT10
 13

	)

1441 
	#R_SPARC_GOT13
 14

	)

1442 
	#R_SPARC_GOT22
 15

	)

1443 
	#R_SPARC_PC10
 16

	)

1444 
	#R_SPARC_PC22
 17

	)

1445 
	#R_SPARC_WPLT30
 18

	)

1446 
	#R_SPARC_COPY
 19

	)

1447 
	#R_SPARC_GLOB_DAT
 20

	)

1448 
	#R_SPARC_JMP_SLOT
 21

	)

1449 
	#R_SPARC_RELATIVE
 22

	)

1450 
	#R_SPARC_UA32
 23

	)

1454 
	#R_SPARC_PLT32
 24

	)

1455 
	#R_SPARC_HIPLT22
 25

	)

1456 
	#R_SPARC_LOPLT10
 26

	)

1457 
	#R_SPARC_PCPLT32
 27

	)

1458 
	#R_SPARC_PCPLT22
 28

	)

1459 
	#R_SPARC_PCPLT10
 29

	)

1460 
	#R_SPARC_10
 30

	)

1461 
	#R_SPARC_11
 31

	)

1462 
	#R_SPARC_64
 32

	)

1463 
	#R_SPARC_OLO10
 33

	)

1464 
	#R_SPARC_HH22
 34

	)

1465 
	#R_SPARC_HM10
 35

	)

1466 
	#R_SPARC_LM22
 36

	)

1467 
	#R_SPARC_PC_HH22
 37

	)

1468 
	#R_SPARC_PC_HM10
 38

	)

1469 
	#R_SPARC_PC_LM22
 39

	)

1470 
	#R_SPARC_WDISP16
 40

	)

1471 
	#R_SPARC_WDISP19
 41

	)

1472 
	#R_SPARC_GLOB_JMP
 42

	)

1473 
	#R_SPARC_7
 43

	)

1474 
	#R_SPARC_5
 44

	)

1475 
	#R_SPARC_6
 45

	)

1476 
	#R_SPARC_DISP64
 46

	)

1477 
	#R_SPARC_PLT64
 47

	)

1478 
	#R_SPARC_HIX22
 48

	)

1479 
	#R_SPARC_LOX10
 49

	)

1480 
	#R_SPARC_H44
 50

	)

1481 
	#R_SPARC_M44
 51

	)

1482 
	#R_SPARC_L44
 52

	)

1483 
	#R_SPARC_REGISTER
 53

	)

1484 
	#R_SPARC_UA64
 54

	)

1485 
	#R_SPARC_UA16
 55

	)

1486 
	#R_SPARC_TLS_GD_HI22
 56

	)

1487 
	#R_SPARC_TLS_GD_LO10
 57

	)

1488 
	#R_SPARC_TLS_GD_ADD
 58

	)

1489 
	#R_SPARC_TLS_GD_CALL
 59

	)

1490 
	#R_SPARC_TLS_LDM_HI22
 60

	)

1491 
	#R_SPARC_TLS_LDM_LO10
 61

	)

1492 
	#R_SPARC_TLS_LDM_ADD
 62

	)

1493 
	#R_SPARC_TLS_LDM_CALL
 63

	)

1494 
	#R_SPARC_TLS_LDO_HIX22
 64

	)

1495 
	#R_SPARC_TLS_LDO_LOX10
 65

	)

1496 
	#R_SPARC_TLS_LDO_ADD
 66

	)

1497 
	#R_SPARC_TLS_IE_HI22
 67

	)

1498 
	#R_SPARC_TLS_IE_LO10
 68

	)

1499 
	#R_SPARC_TLS_IE_LD
 69

	)

1500 
	#R_SPARC_TLS_IE_LDX
 70

	)

1501 
	#R_SPARC_TLS_IE_ADD
 71

	)

1502 
	#R_SPARC_TLS_LE_HIX22
 72

	)

1503 
	#R_SPARC_TLS_LE_LOX10
 73

	)

1504 
	#R_SPARC_TLS_DTPMOD32
 74

	)

1505 
	#R_SPARC_TLS_DTPMOD64
 75

	)

1506 
	#R_SPARC_TLS_DTPOFF32
 76

	)

1507 
	#R_SPARC_TLS_DTPOFF64
 77

	)

1508 
	#R_SPARC_TLS_TPOFF32
 78

	)

1509 
	#R_SPARC_TLS_TPOFF64
 79

	)

1510 
	#R_SPARC_GOTDATA_HIX22
 80

	)

1511 
	#R_SPARC_GOTDATA_LOX10
 81

	)

1512 
	#R_SPARC_GOTDATA_OP_HIX22
 82

	)

1513 
	#R_SPARC_GOTDATA_OP_LOX10
 83

	)

1514 
	#R_SPARC_GOTDATA_OP
 84

	)

1515 
	#R_SPARC_H34
 85

	)

1516 
	#R_SPARC_SIZE32
 86

	)

1517 
	#R_SPARC_SIZE64
 87

	)

1518 
	#R_SPARC_WDISP10
 88

	)

1519 
	#R_SPARC_JMP_IREL
 248

	)

1520 
	#R_SPARC_IRELATIVE
 249

	)

1521 
	#R_SPARC_GNU_VTINHERIT
 250

	)

1522 
	#R_SPARC_GNU_VTENTRY
 251

	)

1523 
	#R_SPARC_REV32
 252

	)

1525 
	#R_SPARC_NUM
 253

	)

1529 
	#DT_SPARC_REGISTER
 0x70000001

	)

1530 
	#DT_SPARC_NUM
 2

	)

1536 
	#EF_MIPS_NOREORDER
 1

	)

1537 
	#EF_MIPS_PIC
 2

	)

1538 
	#EF_MIPS_CPIC
 4

	)

1539 
	#EF_MIPS_XGOT
 8

	)

1540 
	#EF_MIPS_64BIT_WHIRL
 16

	)

1541 
	#EF_MIPS_ABI2
 32

	)

1542 
	#EF_MIPS_ABI_ON32
 64

	)

1543 
	#EF_MIPS_FP64
 512

	)

1544 
	#EF_MIPS_NAN2008
 1024

	)

1545 
	#EF_MIPS_ARCH
 0xf0000000

	)

1549 
	#EF_MIPS_ARCH_1
 0x00000000

	)

1550 
	#EF_MIPS_ARCH_2
 0x10000000

	)

1551 
	#EF_MIPS_ARCH_3
 0x20000000

	)

1552 
	#EF_MIPS_ARCH_4
 0x30000000

	)

1553 
	#EF_MIPS_ARCH_5
 0x40000000

	)

1554 
	#EF_MIPS_ARCH_32
 0x50000000

	)

1555 
	#EF_MIPS_ARCH_64
 0x60000000

	)

1556 
	#EF_MIPS_ARCH_32R2
 0x70000000

	)

1557 
	#EF_MIPS_ARCH_64R2
 0x80000000

	)

1561 
	#E_MIPS_ARCH_1
 
EF_MIPS_ARCH_1


	)

1562 
	#E_MIPS_ARCH_2
 
EF_MIPS_ARCH_2


	)

1563 
	#E_MIPS_ARCH_3
 
EF_MIPS_ARCH_3


	)

1564 
	#E_MIPS_ARCH_4
 
EF_MIPS_ARCH_4


	)

1565 
	#E_MIPS_ARCH_5
 
EF_MIPS_ARCH_5


	)

1566 
	#E_MIPS_ARCH_32
 
EF_MIPS_ARCH_32


	)

1567 
	#E_MIPS_ARCH_64
 
EF_MIPS_ARCH_64


	)

1571 
	#SHN_MIPS_ACOMMON
 0xff00

	)

1572 
	#SHN_MIPS_TEXT
 0xff01

	)

1573 
	#SHN_MIPS_DATA
 0xff02

	)

1574 
	#SHN_MIPS_SCOMMON
 0xff03

	)

1575 
	#SHN_MIPS_SUNDEFINED
 0xff04

	)

1579 
	#SHT_MIPS_LIBLIST
 0x70000000

	)

1580 
	#SHT_MIPS_MSYM
 0x70000001

	)

1581 
	#SHT_MIPS_CONFLICT
 0x70000002

	)

1582 
	#SHT_MIPS_GPTAB
 0x70000003

	)

1583 
	#SHT_MIPS_UCODE
 0x70000004

	)

1584 
	#SHT_MIPS_DEBUG
 0x70000005

	)

1585 
	#SHT_MIPS_REGINFO
 0x70000006

	)

1586 
	#SHT_MIPS_PACKAGE
 0x70000007

	)

1587 
	#SHT_MIPS_PACKSYM
 0x70000008

	)

1588 
	#SHT_MIPS_RELD
 0x70000009

	)

1589 
	#SHT_MIPS_IFACE
 0x7000000b

	)

1590 
	#SHT_MIPS_CONTENT
 0x7000000c

	)

1591 
	#SHT_MIPS_OPTIONS
 0x7000000d

	)

1592 
	#SHT_MIPS_SHDR
 0x70000010

	)

1593 
	#SHT_MIPS_FDESC
 0x70000011

	)

1594 
	#SHT_MIPS_EXTSYM
 0x70000012

	)

1595 
	#SHT_MIPS_DENSE
 0x70000013

	)

1596 
	#SHT_MIPS_PDESC
 0x70000014

	)

1597 
	#SHT_MIPS_LOCSYM
 0x70000015

	)

1598 
	#SHT_MIPS_AUXSYM
 0x70000016

	)

1599 
	#SHT_MIPS_OPTSYM
 0x70000017

	)

1600 
	#SHT_MIPS_LOCSTR
 0x70000018

	)

1601 
	#SHT_MIPS_LINE
 0x70000019

	)

1602 
	#SHT_MIPS_RFDESC
 0x7000001a

	)

1603 
	#SHT_MIPS_DELTASYM
 0x7000001b

	)

1604 
	#SHT_MIPS_DELTAINST
 0x7000001c

	)

1605 
	#SHT_MIPS_DELTACLASS
 0x7000001d

	)

1606 
	#SHT_MIPS_DWARF
 0x7000001ê

	)

1607 
	#SHT_MIPS_DELTADECL
 0x7000001f

	)

1608 
	#SHT_MIPS_SYMBOL_LIB
 0x70000020

	)

1609 
	#SHT_MIPS_EVENTS
 0x70000021

	)

1610 
	#SHT_MIPS_TRANSLATE
 0x70000022

	)

1611 
	#SHT_MIPS_PIXIE
 0x70000023

	)

1612 
	#SHT_MIPS_XLATE
 0x70000024

	)

1613 
	#SHT_MIPS_XLATE_DEBUG
 0x70000025

	)

1614 
	#SHT_MIPS_WHIRL
 0x70000026

	)

1615 
	#SHT_MIPS_EH_REGION
 0x70000027

	)

1616 
	#SHT_MIPS_XLATE_OLD
 0x70000028

	)

1617 
	#SHT_MIPS_PDR_EXCEPTION
 0x70000029

	)

1621 
	#SHF_MIPS_GPREL
 0x10000000

	)

1622 
	#SHF_MIPS_MERGE
 0x20000000

	)

1623 
	#SHF_MIPS_ADDR
 0x40000000

	)

1624 
	#SHF_MIPS_STRINGS
 0x80000000

	)

1625 
	#SHF_MIPS_NOSTRIP
 0x08000000

	)

1626 
	#SHF_MIPS_LOCAL
 0x04000000

	)

1627 
	#SHF_MIPS_NAMES
 0x02000000

	)

1628 
	#SHF_MIPS_NODUPE
 0x01000000

	)

1634 
	#STO_MIPS_DEFAULT
 0x0

	)

1635 
	#STO_MIPS_INTERNAL
 0x1

	)

1636 
	#STO_MIPS_HIDDEN
 0x2

	)

1637 
	#STO_MIPS_PROTECTED
 0x3

	)

1638 
	#STO_MIPS_PLT
 0x8

	)

1639 
	#STO_MIPS_SC_ALIGN_UNUSED
 0xff

	)

1642 
	#STB_MIPS_SPLIT_COMMON
 13

	)

1650 
Elf32_W‹d
 
	mgt_cuºít_g_vÆue
;

1651 
Elf32_W‹d
 
	mgt_unu£d
;

1652 } 
	mgt_hódî
;

1655 
Elf32_W‹d
 
	mgt_g_vÆue
;

1656 
Elf32_W‹d
 
	mgt_byãs
;

1657 } 
	mgt_íåy
;

1658 } 
	tElf32_g±ab
;

1664 
Elf32_W‹d
 
	mri_g¥mask
;

1665 
Elf32_W‹d
 
	mri_˝rmask
[4];

1666 
Elf32_Sw‹d
 
	mri_gp_vÆue
;

1667 } 
	tElf32_RegInfo
;

1673 
	mköd
;

1675 
	msize
;

1676 
Elf32_Se˘i⁄
 
	m£˘i⁄
;

1678 
Elf32_W‹d
 
	möfo
;

1679 } 
	tElf_O±i⁄s
;

1683 
	#ODK_NULL
 0

	)

1684 
	#ODK_REGINFO
 1

	)

1685 
	#ODK_EXCEPTIONS
 2

	)

1686 
	#ODK_PAD
 3

	)

1687 
	#ODK_HWPATCH
 4

	)

1688 
	#ODK_FILL
 5

	)

1689 
	#ODK_TAGS
 6

	)

1690 
	#ODK_HWAND
 7

	)

1691 
	#ODK_HWOR
 8

	)

1695 
	#OEX_FPU_MIN
 0x1‡

	)

1696 
	#OEX_FPU_MAX
 0x1f00

	)

1697 
	#OEX_PAGE0
 0x10000

	)

1698 
	#OEX_SMM
 0x20000

	)

1699 
	#OEX_FPDBUG
 0x40000

	)

1700 
	#OEX_PRECISEFP
 
OEX_FPDBUG


	)

1701 
	#OEX_DISMISS
 0x80000

	)

1703 
	#OEX_FPU_INVAL
 0x10

	)

1704 
	#OEX_FPU_DIV0
 0x08

	)

1705 
	#OEX_FPU_OFLO
 0x04

	)

1706 
	#OEX_FPU_UFLO
 0x02

	)

1707 
	#OEX_FPU_INEX
 0x01

	)

1711 
	#OHW_R4KEOP
 0x1

	)

1712 
	#OHW_R8KPFETCH
 0x2

	)

1713 
	#OHW_R5KEOP
 0x4

	)

1714 
	#OHW_R5KCVTL
 0x8

	)

1716 
	#OPAD_PREFIX
 0x1

	)

1717 
	#OPAD_POSTFIX
 0x2

	)

1718 
	#OPAD_SYMBOL
 0x4

	)

1724 
Elf32_W‹d
 
	mhwp_Êags1
;

1725 
Elf32_W‹d
 
	mhwp_Êags2
;

1726 } 
	tElf_O±i⁄s_Hw
;

1730 
	#OHWA0_R4KEOP_CHECKED
 0x00000001

	)

1731 
	#OHWA1_R4KEOP_CLEAN
 0x00000002

	)

1735 
	#R_MIPS_NONE
 0

	)

1736 
	#R_MIPS_16
 1

	)

1737 
	#R_MIPS_32
 2

	)

1738 
	#R_MIPS_REL32
 3

	)

1739 
	#R_MIPS_26
 4

	)

1740 
	#R_MIPS_HI16
 5

	)

1741 
	#R_MIPS_LO16
 6

	)

1742 
	#R_MIPS_GPREL16
 7

	)

1743 
	#R_MIPS_LITERAL
 8

	)

1744 
	#R_MIPS_GOT16
 9

	)

1745 
	#R_MIPS_PC16
 10

	)

1746 
	#R_MIPS_CALL16
 11

	)

1747 
	#R_MIPS_GPREL32
 12

	)

1749 
	#R_MIPS_SHIFT5
 16

	)

1750 
	#R_MIPS_SHIFT6
 17

	)

1751 
	#R_MIPS_64
 18

	)

1752 
	#R_MIPS_GOT_DISP
 19

	)

1753 
	#R_MIPS_GOT_PAGE
 20

	)

1754 
	#R_MIPS_GOT_OFST
 21

	)

1755 
	#R_MIPS_GOT_HI16
 22

	)

1756 
	#R_MIPS_GOT_LO16
 23

	)

1757 
	#R_MIPS_SUB
 24

	)

1758 
	#R_MIPS_INSERT_A
 25

	)

1759 
	#R_MIPS_INSERT_B
 26

	)

1760 
	#R_MIPS_DELETE
 27

	)

1761 
	#R_MIPS_HIGHER
 28

	)

1762 
	#R_MIPS_HIGHEST
 29

	)

1763 
	#R_MIPS_CALL_HI16
 30

	)

1764 
	#R_MIPS_CALL_LO16
 31

	)

1765 
	#R_MIPS_SCN_DISP
 32

	)

1766 
	#R_MIPS_REL16
 33

	)

1767 
	#R_MIPS_ADD_IMMEDIATE
 34

	)

1768 
	#R_MIPS_PJUMP
 35

	)

1769 
	#R_MIPS_RELGOT
 36

	)

1770 
	#R_MIPS_JALR
 37

	)

1771 
	#R_MIPS_TLS_DTPMOD32
 38

	)

1772 
	#R_MIPS_TLS_DTPREL32
 39

	)

1773 
	#R_MIPS_TLS_DTPMOD64
 40

	)

1774 
	#R_MIPS_TLS_DTPREL64
 41

	)

1775 
	#R_MIPS_TLS_GD
 42

	)

1776 
	#R_MIPS_TLS_LDM
 43

	)

1777 
	#R_MIPS_TLS_DTPREL_HI16
 44

	)

1778 
	#R_MIPS_TLS_DTPREL_LO16
 45

	)

1779 
	#R_MIPS_TLS_GOTTPREL
 46

	)

1780 
	#R_MIPS_TLS_TPREL32
 47

	)

1781 
	#R_MIPS_TLS_TPREL64
 48

	)

1782 
	#R_MIPS_TLS_TPREL_HI16
 49

	)

1783 
	#R_MIPS_TLS_TPREL_LO16
 50

	)

1784 
	#R_MIPS_GLOB_DAT
 51

	)

1785 
	#R_MIPS_COPY
 126

	)

1786 
	#R_MIPS_JUMP_SLOT
 127

	)

1788 
	#R_MIPS_NUM
 128

	)

1792 
	#PT_MIPS_REGINFO
 0x70000000

	)

1793 
	#PT_MIPS_RTPROC
 0x70000001

	)

1794 
	#PT_MIPS_OPTIONS
 0x70000002

	)

1795 
	#PT_MIPS_ABIFLAGS
 0x70000003

	)

1799 
	#PF_MIPS_LOCAL
 0x10000000

	)

1803 
	#DT_MIPS_RLD_VERSION
 0x70000001

	)

1804 
	#DT_MIPS_TIME_STAMP
 0x70000002

	)

1805 
	#DT_MIPS_ICHECKSUM
 0x70000003

	)

1806 
	#DT_MIPS_IVERSION
 0x70000004

	)

1807 
	#DT_MIPS_FLAGS
 0x70000005

	)

1808 
	#DT_MIPS_BASE_ADDRESS
 0x70000006

	)

1809 
	#DT_MIPS_MSYM
 0x70000007

	)

1810 
	#DT_MIPS_CONFLICT
 0x70000008

	)

1811 
	#DT_MIPS_LIBLIST
 0x70000009

	)

1812 
	#DT_MIPS_LOCAL_GOTNO
 0x7000000®

	)

1813 
	#DT_MIPS_CONFLICTNO
 0x7000000b

	)

1814 
	#DT_MIPS_LIBLISTNO
 0x70000010

	)

1815 
	#DT_MIPS_SYMTABNO
 0x70000011

	)

1816 
	#DT_MIPS_UNREFEXTNO
 0x70000012

	)

1817 
	#DT_MIPS_GOTSYM
 0x70000013

	)

1818 
	#DT_MIPS_HIPAGENO
 0x70000014

	)

1819 
	#DT_MIPS_RLD_MAP
 0x70000016

	)

1820 
	#DT_MIPS_DELTA_CLASS
 0x70000017

	)

1821 
	#DT_MIPS_DELTA_CLASS_NO
 0x70000018

	)

1823 
	#DT_MIPS_DELTA_INSTANCE
 0x70000019

	)

1824 
	#DT_MIPS_DELTA_INSTANCE_NO
 0x7000001®

	)

1826 
	#DT_MIPS_DELTA_RELOC
 0x7000001b

	)

1827 
	#DT_MIPS_DELTA_RELOC_NO
 0x7000001¯

	)

1829 
	#DT_MIPS_DELTA_SYM
 0x7000001d

	)

1831 
	#DT_MIPS_DELTA_SYM_NO
 0x7000001ê

	)

1833 
	#DT_MIPS_DELTA_CLASSSYM
 0x70000020

	)

1835 
	#DT_MIPS_DELTA_CLASSSYM_NO
 0x70000021

	)

1837 
	#DT_MIPS_CXX_FLAGS
 0x70000022

	)

1838 
	#DT_MIPS_PIXIE_INIT
 0x70000023

	)

1839 
	#DT_MIPS_SYMBOL_LIB
 0x70000024

	)

1840 
	#DT_MIPS_LOCALPAGE_GOTIDX
 0x70000025

	)

1841 
	#DT_MIPS_LOCAL_GOTIDX
 0x70000026

	)

1842 
	#DT_MIPS_HIDDEN_GOTIDX
 0x70000027

	)

1843 
	#DT_MIPS_PROTECTED_GOTIDX
 0x70000028

	)

1844 
	#DT_MIPS_OPTIONS
 0x70000029

	)

1845 
	#DT_MIPS_INTERFACE
 0x7000002®

	)

1846 
	#DT_MIPS_DYNSTR_ALIGN
 0x7000002b

	)

1847 
	#DT_MIPS_INTERFACE_SIZE
 0x7000002¯

	)

1848 
	#DT_MIPS_RLD_TEXT_RESOLVE_ADDR
 0x7000002d

	)

1850 
	#DT_MIPS_PERF_SUFFIX
 0x7000002ê

	)

1852 
	#DT_MIPS_COMPACT_SIZE
 0x7000002‡

	)

1853 
	#DT_MIPS_GP_VALUE
 0x70000030

	)

1854 
	#DT_MIPS_AUX_DYNAMIC
 0x70000031

	)

1856 
	#DT_MIPS_PLTGOT
 0x70000032

	)

1860 
	#DT_MIPS_RWPLT
 0x70000034

	)

1864 
	#DT_MIPS_RLD_MAP_REL
 0x70000035

	)

1865 
	#DT_MIPS_NUM
 0x36

	)

1869 
	#RHF_NONE
 0

	)

1870 
	#RHF_QUICKSTART
 (1 << 0Ë

	)

1871 
	#RHF_NOTPOT
 (1 << 1Ë

	)

1872 
	#RHF_NO_LIBRARY_REPLACEMENT
 (1 << 2Ë

	)

1873 
	#RHF_NO_MOVE
 (1 << 3)

	)

1874 
	#RHF_SGI_ONLY
 (1 << 4)

	)

1875 
	#RHF_GUARANTEE_INIT
 (1 << 5)

	)

1876 
	#RHF_DELTA_C_PLUS_PLUS
 (1 << 6)

	)

1877 
	#RHF_GUARANTEE_START_INIT
 (1 << 7)

	)

1878 
	#RHF_PIXIE
 (1 << 8)

	)

1879 
	#RHF_DEFAULT_DELAY_LOAD
 (1 << 9)

	)

1880 
	#RHF_REQUICKSTART
 (1 << 10)

	)

1881 
	#RHF_REQUICKSTARTED
 (1 << 11)

	)

1882 
	#RHF_CORD
 (1 << 12)

	)

1883 
	#RHF_NO_UNRES_UNDEF
 (1 << 13)

	)

1884 
	#RHF_RLD_ORDER_SAFE
 (1 << 14)

	)

1890 
Elf32_W‹d
 
	ml_«me
;

1891 
Elf32_W‹d
 
	ml_time_°amp
;

1892 
Elf32_W‹d
 
	ml_checksum
;

1893 
Elf32_W‹d
 
	ml_vîsi⁄
;

1894 
Elf32_W‹d
 
	ml_Êags
;

1895 } 
	tElf32_Lib
;

1899 
Elf64_W‹d
 
	ml_«me
;

1900 
Elf64_W‹d
 
	ml_time_°amp
;

1901 
Elf64_W‹d
 
	ml_checksum
;

1902 
Elf64_W‹d
 
	ml_vîsi⁄
;

1903 
Elf64_W‹d
 
	ml_Êags
;

1904 } 
	tElf64_Lib
;

1909 
	#LL_NONE
 0

	)

1910 
	#LL_EXACT_MATCH
 (1 << 0Ë

	)

1911 
	#LL_IGNORE_INT_VER
 (1 << 1Ë

	)

1912 
	#LL_REQUIRE_MINOR
 (1 << 2)

	)

1913 
	#LL_EXPORTS
 (1 << 3)

	)

1914 
	#LL_DELAY_LOAD
 (1 << 4)

	)

1915 
	#LL_DELTA
 (1 << 5)

	)

1919 
Elf32_Addr
 
	tElf32_C⁄Êi˘
;

1924 
Elf32_HÆf
 
	mvîsi⁄
;

1926 
	miß_Àvñ
;

1928 
	miß_ªv
;

1930 
	mg¥_size
;

1932 
	m˝r1_size
;

1934 
	m˝r2_size
;

1936 
	mÂ_abi
;

1938 
Elf32_W‹d
 
	miß_ext
;

1940 
Elf32_W‹d
 
	ma£s
;

1942 
Elf32_W‹d
 
	mÊags1
;

1943 
Elf32_W‹d
 
	mÊags2
;

1944 } 
	tElf_MIPS_ABIFœgs_v0
;

1948 
	#MIPS_AFL_REG_NONE
 0x00

	)

1949 
	#MIPS_AFL_REG_32
 0x01

	)

1950 
	#MIPS_AFL_REG_64
 0x02

	)

1951 
	#MIPS_AFL_REG_128
 0x03

	)

1955 
	#MIPS_AFL_ASE_DSP
 0x00000001

	)

1956 
	#MIPS_AFL_ASE_DSPR2
 0x00000002

	)

1957 
	#MIPS_AFL_ASE_EVA
 0x00000004

	)

1958 
	#MIPS_AFL_ASE_MCU
 0x00000008

	)

1959 
	#MIPS_AFL_ASE_MDMX
 0x00000010

	)

1960 
	#MIPS_AFL_ASE_MIPS3D
 0x00000020

	)

1961 
	#MIPS_AFL_ASE_MT
 0x00000040

	)

1962 
	#MIPS_AFL_ASE_SMARTMIPS
 0x00000080

	)

1963 
	#MIPS_AFL_ASE_VIRT
 0x00000100

	)

1964 
	#MIPS_AFL_ASE_MSA
 0x00000200

	)

1965 
	#MIPS_AFL_ASE_MIPS16
 0x00000400

	)

1966 
	#MIPS_AFL_ASE_MICROMIPS
 0x00000800

	)

1967 
	#MIPS_AFL_ASE_XPA
 0x00001000

	)

1968 
	#MIPS_AFL_ASE_MASK
 0x00001ff‡

	)

1972 
	#MIPS_AFL_EXT_XLR
 1

	)

1973 
	#MIPS_AFL_EXT_OCTEON2
 2

	)

1974 
	#MIPS_AFL_EXT_OCTEONP
 3

	)

1975 
	#MIPS_AFL_EXT_LOONGSON_3A
 4

	)

1976 
	#MIPS_AFL_EXT_OCTEON
 5

	)

1977 
	#MIPS_AFL_EXT_5900
 6

	)

1978 
	#MIPS_AFL_EXT_4650
 7

	)

1979 
	#MIPS_AFL_EXT_4010
 8

	)

1980 
	#MIPS_AFL_EXT_4100
 9

	)

1981 
	#MIPS_AFL_EXT_3900
 10

	)

1982 
	#MIPS_AFL_EXT_10000
 11

	)

1983 
	#MIPS_AFL_EXT_SB1
 12

	)

1984 
	#MIPS_AFL_EXT_4111
 13

	)

1985 
	#MIPS_AFL_EXT_4120
 14

	)

1986 
	#MIPS_AFL_EXT_5400
 15

	)

1987 
	#MIPS_AFL_EXT_5500
 16

	)

1988 
	#MIPS_AFL_EXT_LOONGSON_2E
 17

	)

1989 
	#MIPS_AFL_EXT_LOONGSON_2F
 18

	)

1992 
	#MIPS_AFL_FLAGS1_ODDSPREG
 1

	)

1998 
	mVÆ_GNU_MIPS_ABI_FP_ANY
 = 0,

2000 
	mVÆ_GNU_MIPS_ABI_FP_DOUBLE
 = 1,

2002 
	mVÆ_GNU_MIPS_ABI_FP_SINGLE
 = 2,

2004 
	mVÆ_GNU_MIPS_ABI_FP_SOFT
 = 3,

2006 
	mVÆ_GNU_MIPS_ABI_FP_OLD_64
 = 4,

2008 
	mVÆ_GNU_MIPS_ABI_FP_XX
 = 5,

2010 
	mVÆ_GNU_MIPS_ABI_FP_64
 = 6,

2012 
	mVÆ_GNU_MIPS_ABI_FP_64A
 = 7,

2014 
	mVÆ_GNU_MIPS_ABI_FP_MAX
 = 7

2021 
	#EF_PARISC_TRAPNIL
 0x00010000

	)

2022 
	#EF_PARISC_EXT
 0x00020000

	)

2023 
	#EF_PARISC_LSB
 0x00040000

	)

2024 
	#EF_PARISC_WIDE
 0x00080000

	)

2025 
	#EF_PARISC_NO_KABP
 0x00100000

	)

2027 
	#EF_PARISC_LAZYSWAP
 0x00400000

	)

2028 
	#EF_PARISC_ARCH
 0x0000fff‡

	)

2032 
	#EFA_PARISC_1_0
 0x020b

	)

2033 
	#EFA_PARISC_1_1
 0x0210

	)

2034 
	#EFA_PARISC_2_0
 0x0214

	)

2038 
	#SHN_PARISC_ANSI_COMMON
 0xff00

	)

2040 
	#SHN_PARISC_HUGE_COMMON
 0xff01

	)

2044 
	#SHT_PARISC_EXT
 0x70000000

	)

2045 
	#SHT_PARISC_UNWIND
 0x70000001

	)

2046 
	#SHT_PARISC_DOC
 0x70000002

	)

2050 
	#SHF_PARISC_SHORT
 0x20000000

	)

2051 
	#SHF_PARISC_HUGE
 0x40000000

	)

2052 
	#SHF_PARISC_SBP
 0x80000000

	)

2056 
	#STT_PARISC_MILLICODE
 13

	)

2058 
	#STT_HP_OPAQUE
 (
STT_LOOS
 + 0x1)

	)

2059 
	#STT_HP_STUB
 (
STT_LOOS
 + 0x2)

	)

2063 
	#R_PARISC_NONE
 0

	)

2064 
	#R_PARISC_DIR32
 1

	)

2065 
	#R_PARISC_DIR21L
 2

	)

2066 
	#R_PARISC_DIR17R
 3

	)

2067 
	#R_PARISC_DIR17F
 4

	)

2068 
	#R_PARISC_DIR14R
 6

	)

2069 
	#R_PARISC_PCREL32
 9

	)

2070 
	#R_PARISC_PCREL21L
 10

	)

2071 
	#R_PARISC_PCREL17R
 11

	)

2072 
	#R_PARISC_PCREL17F
 12

	)

2073 
	#R_PARISC_PCREL14R
 14

	)

2074 
	#R_PARISC_DPREL21L
 18

	)

2075 
	#R_PARISC_DPREL14R
 22

	)

2076 
	#R_PARISC_GPREL21L
 26

	)

2077 
	#R_PARISC_GPREL14R
 30

	)

2078 
	#R_PARISC_LTOFF21L
 34

	)

2079 
	#R_PARISC_LTOFF14R
 38

	)

2080 
	#R_PARISC_SECREL32
 41

	)

2081 
	#R_PARISC_SEGBASE
 48

	)

2082 
	#R_PARISC_SEGREL32
 49

	)

2083 
	#R_PARISC_PLTOFF21L
 50

	)

2084 
	#R_PARISC_PLTOFF14R
 54

	)

2085 
	#R_PARISC_LTOFF_FPTR32
 57

	)

2086 
	#R_PARISC_LTOFF_FPTR21L
 58

	)

2087 
	#R_PARISC_LTOFF_FPTR14R
 62

	)

2088 
	#R_PARISC_FPTR64
 64

	)

2089 
	#R_PARISC_PLABEL32
 65

	)

2090 
	#R_PARISC_PLABEL21L
 66

	)

2091 
	#R_PARISC_PLABEL14R
 70

	)

2092 
	#R_PARISC_PCREL64
 72

	)

2093 
	#R_PARISC_PCREL22F
 74

	)

2094 
	#R_PARISC_PCREL14WR
 75

	)

2095 
	#R_PARISC_PCREL14DR
 76

	)

2096 
	#R_PARISC_PCREL16F
 77

	)

2097 
	#R_PARISC_PCREL16WF
 78

	)

2098 
	#R_PARISC_PCREL16DF
 79

	)

2099 
	#R_PARISC_DIR64
 80

	)

2100 
	#R_PARISC_DIR14WR
 83

	)

2101 
	#R_PARISC_DIR14DR
 84

	)

2102 
	#R_PARISC_DIR16F
 85

	)

2103 
	#R_PARISC_DIR16WF
 86

	)

2104 
	#R_PARISC_DIR16DF
 87

	)

2105 
	#R_PARISC_GPREL64
 88

	)

2106 
	#R_PARISC_GPREL14WR
 91

	)

2107 
	#R_PARISC_GPREL14DR
 92

	)

2108 
	#R_PARISC_GPREL16F
 93

	)

2109 
	#R_PARISC_GPREL16WF
 94

	)

2110 
	#R_PARISC_GPREL16DF
 95

	)

2111 
	#R_PARISC_LTOFF64
 96

	)

2112 
	#R_PARISC_LTOFF14WR
 99

	)

2113 
	#R_PARISC_LTOFF14DR
 100

	)

2114 
	#R_PARISC_LTOFF16F
 101

	)

2115 
	#R_PARISC_LTOFF16WF
 102

	)

2116 
	#R_PARISC_LTOFF16DF
 103

	)

2117 
	#R_PARISC_SECREL64
 104

	)

2118 
	#R_PARISC_SEGREL64
 112

	)

2119 
	#R_PARISC_PLTOFF14WR
 115

	)

2120 
	#R_PARISC_PLTOFF14DR
 116

	)

2121 
	#R_PARISC_PLTOFF16F
 117

	)

2122 
	#R_PARISC_PLTOFF16WF
 118

	)

2123 
	#R_PARISC_PLTOFF16DF
 119

	)

2124 
	#R_PARISC_LTOFF_FPTR64
 120

	)

2125 
	#R_PARISC_LTOFF_FPTR14WR
 123

	)

2126 
	#R_PARISC_LTOFF_FPTR14DR
 124

	)

2127 
	#R_PARISC_LTOFF_FPTR16F
 125

	)

2128 
	#R_PARISC_LTOFF_FPTR16WF
 126

	)

2129 
	#R_PARISC_LTOFF_FPTR16DF
 127

	)

2130 
	#R_PARISC_LORESERVE
 128

	)

2131 
	#R_PARISC_COPY
 128

	)

2132 
	#R_PARISC_IPLT
 129

	)

2133 
	#R_PARISC_EPLT
 130

	)

2134 
	#R_PARISC_TPREL32
 153

	)

2135 
	#R_PARISC_TPREL21L
 154

	)

2136 
	#R_PARISC_TPREL14R
 158

	)

2137 
	#R_PARISC_LTOFF_TP21L
 162

	)

2138 
	#R_PARISC_LTOFF_TP14R
 166

	)

2139 
	#R_PARISC_LTOFF_TP14F
 167

	)

2140 
	#R_PARISC_TPREL64
 216

	)

2141 
	#R_PARISC_TPREL14WR
 219

	)

2142 
	#R_PARISC_TPREL14DR
 220

	)

2143 
	#R_PARISC_TPREL16F
 221

	)

2144 
	#R_PARISC_TPREL16WF
 222

	)

2145 
	#R_PARISC_TPREL16DF
 223

	)

2146 
	#R_PARISC_LTOFF_TP64
 224

	)

2147 
	#R_PARISC_LTOFF_TP14WR
 227

	)

2148 
	#R_PARISC_LTOFF_TP14DR
 228

	)

2149 
	#R_PARISC_LTOFF_TP16F
 229

	)

2150 
	#R_PARISC_LTOFF_TP16WF
 230

	)

2151 
	#R_PARISC_LTOFF_TP16DF
 231

	)

2152 
	#R_PARISC_GNU_VTENTRY
 232

	)

2153 
	#R_PARISC_GNU_VTINHERIT
 233

	)

2154 
	#R_PARISC_TLS_GD21L
 234

	)

2155 
	#R_PARISC_TLS_GD14R
 235

	)

2156 
	#R_PARISC_TLS_GDCALL
 236

	)

2157 
	#R_PARISC_TLS_LDM21L
 237

	)

2158 
	#R_PARISC_TLS_LDM14R
 238

	)

2159 
	#R_PARISC_TLS_LDMCALL
 239

	)

2160 
	#R_PARISC_TLS_LDO21L
 240

	)

2161 
	#R_PARISC_TLS_LDO14R
 241

	)

2162 
	#R_PARISC_TLS_DTPMOD32
 242

	)

2163 
	#R_PARISC_TLS_DTPMOD64
 243

	)

2164 
	#R_PARISC_TLS_DTPOFF32
 244

	)

2165 
	#R_PARISC_TLS_DTPOFF64
 245

	)

2166 
	#R_PARISC_TLS_LE21L
 
R_PARISC_TPREL21L


	)

2167 
	#R_PARISC_TLS_LE14R
 
R_PARISC_TPREL14R


	)

2168 
	#R_PARISC_TLS_IE21L
 
R_PARISC_LTOFF_TP21L


	)

2169 
	#R_PARISC_TLS_IE14R
 
R_PARISC_LTOFF_TP14R


	)

2170 
	#R_PARISC_TLS_TPREL32
 
R_PARISC_TPREL32


	)

2171 
	#R_PARISC_TLS_TPREL64
 
R_PARISC_TPREL64


	)

2172 
	#R_PARISC_HIRESERVE
 255

	)

2176 
	#PT_HP_TLS
 (
PT_LOOS
 + 0x0)

	)

2177 
	#PT_HP_CORE_NONE
 (
PT_LOOS
 + 0x1)

	)

2178 
	#PT_HP_CORE_VERSION
 (
PT_LOOS
 + 0x2)

	)

2179 
	#PT_HP_CORE_KERNEL
 (
PT_LOOS
 + 0x3)

	)

2180 
	#PT_HP_CORE_COMM
 (
PT_LOOS
 + 0x4)

	)

2181 
	#PT_HP_CORE_PROC
 (
PT_LOOS
 + 0x5)

	)

2182 
	#PT_HP_CORE_LOADABLE
 (
PT_LOOS
 + 0x6)

	)

2183 
	#PT_HP_CORE_STACK
 (
PT_LOOS
 + 0x7)

	)

2184 
	#PT_HP_CORE_SHM
 (
PT_LOOS
 + 0x8)

	)

2185 
	#PT_HP_CORE_MMF
 (
PT_LOOS
 + 0x9)

	)

2186 
	#PT_HP_PARALLEL
 (
PT_LOOS
 + 0x10)

	)

2187 
	#PT_HP_FASTBIND
 (
PT_LOOS
 + 0x11)

	)

2188 
	#PT_HP_OPT_ANNOT
 (
PT_LOOS
 + 0x12)

	)

2189 
	#PT_HP_HSL_ANNOT
 (
PT_LOOS
 + 0x13)

	)

2190 
	#PT_HP_STACK
 (
PT_LOOS
 + 0x14)

	)

2192 
	#PT_PARISC_ARCHEXT
 0x70000000

	)

2193 
	#PT_PARISC_UNWIND
 0x70000001

	)

2197 
	#PF_PARISC_SBP
 0x08000000

	)

2199 
	#PF_HP_PAGE_SIZE
 0x00100000

	)

2200 
	#PF_HP_FAR_SHARED
 0x00200000

	)

2201 
	#PF_HP_NEAR_SHARED
 0x00400000

	)

2202 
	#PF_HP_CODE
 0x01000000

	)

2203 
	#PF_HP_MODIFY
 0x02000000

	)

2204 
	#PF_HP_LAZYSWAP
 0x04000000

	)

2205 
	#PF_HP_SBP
 0x08000000

	)

2212 
	#EF_ALPHA_32BIT
 1

	)

2213 
	#EF_ALPHA_CANRELAX
 2

	)

2218 
	#SHT_ALPHA_DEBUG
 0x70000001

	)

2219 
	#SHT_ALPHA_REGINFO
 0x70000002

	)

2223 
	#SHF_ALPHA_GPREL
 0x10000000

	)

2226 
	#STO_ALPHA_NOPV
 0x80

	)

2227 
	#STO_ALPHA_STD_GPLOAD
 0x88

	)

2231 
	#R_ALPHA_NONE
 0

	)

2232 
	#R_ALPHA_REFLONG
 1

	)

2233 
	#R_ALPHA_REFQUAD
 2

	)

2234 
	#R_ALPHA_GPREL32
 3

	)

2235 
	#R_ALPHA_LITERAL
 4

	)

2236 
	#R_ALPHA_LITUSE
 5

	)

2237 
	#R_ALPHA_GPDISP
 6

	)

2238 
	#R_ALPHA_BRADDR
 7

	)

2239 
	#R_ALPHA_HINT
 8

	)

2240 
	#R_ALPHA_SREL16
 9

	)

2241 
	#R_ALPHA_SREL32
 10

	)

2242 
	#R_ALPHA_SREL64
 11

	)

2243 
	#R_ALPHA_GPRELHIGH
 17

	)

2244 
	#R_ALPHA_GPRELLOW
 18

	)

2245 
	#R_ALPHA_GPREL16
 19

	)

2246 
	#R_ALPHA_COPY
 24

	)

2247 
	#R_ALPHA_GLOB_DAT
 25

	)

2248 
	#R_ALPHA_JMP_SLOT
 26

	)

2249 
	#R_ALPHA_RELATIVE
 27

	)

2250 
	#R_ALPHA_TLS_GD_HI
 28

	)

2251 
	#R_ALPHA_TLSGD
 29

	)

2252 
	#R_ALPHA_TLS_LDM
 30

	)

2253 
	#R_ALPHA_DTPMOD64
 31

	)

2254 
	#R_ALPHA_GOTDTPREL
 32

	)

2255 
	#R_ALPHA_DTPREL64
 33

	)

2256 
	#R_ALPHA_DTPRELHI
 34

	)

2257 
	#R_ALPHA_DTPRELLO
 35

	)

2258 
	#R_ALPHA_DTPREL16
 36

	)

2259 
	#R_ALPHA_GOTTPREL
 37

	)

2260 
	#R_ALPHA_TPREL64
 38

	)

2261 
	#R_ALPHA_TPRELHI
 39

	)

2262 
	#R_ALPHA_TPRELLO
 40

	)

2263 
	#R_ALPHA_TPREL16
 41

	)

2265 
	#R_ALPHA_NUM
 46

	)

2268 
	#LITUSE_ALPHA_ADDR
 0

	)

2269 
	#LITUSE_ALPHA_BASE
 1

	)

2270 
	#LITUSE_ALPHA_BYTOFF
 2

	)

2271 
	#LITUSE_ALPHA_JSR
 3

	)

2272 
	#LITUSE_ALPHA_TLS_GD
 4

	)

2273 
	#LITUSE_ALPHA_TLS_LDM
 5

	)

2276 
	#DT_ALPHA_PLTRO
 (
DT_LOPROC
 + 0)

	)

2277 
	#DT_ALPHA_NUM
 1

	)

2282 
	#EF_PPC_EMB
 0x80000000

	)

2285 
	#EF_PPC_RELOCATABLE
 0x00010000

	)

2286 
	#EF_PPC_RELOCATABLE_LIB
 0x00008000

	)

2290 
	#R_PPC_NONE
 0

	)

2291 
	#R_PPC_ADDR32
 1

	)

2292 
	#R_PPC_ADDR24
 2

	)

2293 
	#R_PPC_ADDR16
 3

	)

2294 
	#R_PPC_ADDR16_LO
 4

	)

2295 
	#R_PPC_ADDR16_HI
 5

	)

2296 
	#R_PPC_ADDR16_HA
 6

	)

2297 
	#R_PPC_ADDR14
 7

	)

2298 
	#R_PPC_ADDR14_BRTAKEN
 8

	)

2299 
	#R_PPC_ADDR14_BRNTAKEN
 9

	)

2300 
	#R_PPC_REL24
 10

	)

2301 
	#R_PPC_REL14
 11

	)

2302 
	#R_PPC_REL14_BRTAKEN
 12

	)

2303 
	#R_PPC_REL14_BRNTAKEN
 13

	)

2304 
	#R_PPC_GOT16
 14

	)

2305 
	#R_PPC_GOT16_LO
 15

	)

2306 
	#R_PPC_GOT16_HI
 16

	)

2307 
	#R_PPC_GOT16_HA
 17

	)

2308 
	#R_PPC_PLTREL24
 18

	)

2309 
	#R_PPC_COPY
 19

	)

2310 
	#R_PPC_GLOB_DAT
 20

	)

2311 
	#R_PPC_JMP_SLOT
 21

	)

2312 
	#R_PPC_RELATIVE
 22

	)

2313 
	#R_PPC_LOCAL24PC
 23

	)

2314 
	#R_PPC_UADDR32
 24

	)

2315 
	#R_PPC_UADDR16
 25

	)

2316 
	#R_PPC_REL32
 26

	)

2317 
	#R_PPC_PLT32
 27

	)

2318 
	#R_PPC_PLTREL32
 28

	)

2319 
	#R_PPC_PLT16_LO
 29

	)

2320 
	#R_PPC_PLT16_HI
 30

	)

2321 
	#R_PPC_PLT16_HA
 31

	)

2322 
	#R_PPC_SDAREL16
 32

	)

2323 
	#R_PPC_SECTOFF
 33

	)

2324 
	#R_PPC_SECTOFF_LO
 34

	)

2325 
	#R_PPC_SECTOFF_HI
 35

	)

2326 
	#R_PPC_SECTOFF_HA
 36

	)

2329 
	#R_PPC_TLS
 67

	)

2330 
	#R_PPC_DTPMOD32
 68

	)

2331 
	#R_PPC_TPREL16
 69

	)

2332 
	#R_PPC_TPREL16_LO
 70

	)

2333 
	#R_PPC_TPREL16_HI
 71

	)

2334 
	#R_PPC_TPREL16_HA
 72

	)

2335 
	#R_PPC_TPREL32
 73

	)

2336 
	#R_PPC_DTPREL16
 74

	)

2337 
	#R_PPC_DTPREL16_LO
 75

	)

2338 
	#R_PPC_DTPREL16_HI
 76

	)

2339 
	#R_PPC_DTPREL16_HA
 77

	)

2340 
	#R_PPC_DTPREL32
 78

	)

2341 
	#R_PPC_GOT_TLSGD16
 79

	)

2342 
	#R_PPC_GOT_TLSGD16_LO
 80

	)

2343 
	#R_PPC_GOT_TLSGD16_HI
 81

	)

2344 
	#R_PPC_GOT_TLSGD16_HA
 82

	)

2345 
	#R_PPC_GOT_TLSLD16
 83

	)

2346 
	#R_PPC_GOT_TLSLD16_LO
 84

	)

2347 
	#R_PPC_GOT_TLSLD16_HI
 85

	)

2348 
	#R_PPC_GOT_TLSLD16_HA
 86

	)

2349 
	#R_PPC_GOT_TPREL16
 87

	)

2350 
	#R_PPC_GOT_TPREL16_LO
 88

	)

2351 
	#R_PPC_GOT_TPREL16_HI
 89

	)

2352 
	#R_PPC_GOT_TPREL16_HA
 90

	)

2353 
	#R_PPC_GOT_DTPREL16
 91

	)

2354 
	#R_PPC_GOT_DTPREL16_LO
 92

	)

2355 
	#R_PPC_GOT_DTPREL16_HI
 93

	)

2356 
	#R_PPC_GOT_DTPREL16_HA
 94

	)

2357 
	#R_PPC_TLSGD
 95

	)

2358 
	#R_PPC_TLSLD
 96

	)

2362 
	#R_PPC_EMB_NADDR32
 101

	)

2363 
	#R_PPC_EMB_NADDR16
 102

	)

2364 
	#R_PPC_EMB_NADDR16_LO
 103

	)

2365 
	#R_PPC_EMB_NADDR16_HI
 104

	)

2366 
	#R_PPC_EMB_NADDR16_HA
 105

	)

2367 
	#R_PPC_EMB_SDAI16
 106

	)

2368 
	#R_PPC_EMB_SDA2I16
 107

	)

2369 
	#R_PPC_EMB_SDA2REL
 108

	)

2370 
	#R_PPC_EMB_SDA21
 109

	)

2371 
	#R_PPC_EMB_MRKREF
 110

	)

2372 
	#R_PPC_EMB_RELSEC16
 111

	)

2373 
	#R_PPC_EMB_RELST_LO
 112

	)

2374 
	#R_PPC_EMB_RELST_HI
 113

	)

2375 
	#R_PPC_EMB_RELST_HA
 114

	)

2376 
	#R_PPC_EMB_BIT_FLD
 115

	)

2377 
	#R_PPC_EMB_RELSDA
 116

	)

2380 
	#R_PPC_DIAB_SDA21_LO
 180

	)

2381 
	#R_PPC_DIAB_SDA21_HI
 181

	)

2382 
	#R_PPC_DIAB_SDA21_HA
 182

	)

2383 
	#R_PPC_DIAB_RELSDA_LO
 183

	)

2384 
	#R_PPC_DIAB_RELSDA_HI
 184

	)

2385 
	#R_PPC_DIAB_RELSDA_HA
 185

	)

2388 
	#R_PPC_IRELATIVE
 248

	)

2391 
	#R_PPC_REL16
 249

	)

2392 
	#R_PPC_REL16_LO
 250

	)

2393 
	#R_PPC_REL16_HI
 251

	)

2394 
	#R_PPC_REL16_HA
 252

	)

2398 
	#R_PPC_TOC16
 255

	)

2401 
	#DT_PPC_GOT
 (
DT_LOPROC
 + 0)

	)

2402 
	#DT_PPC_OPT
 (
DT_LOPROC
 + 1)

	)

2403 
	#DT_PPC_NUM
 2

	)

2406 
	#PPC_OPT_TLS
 1

	)

2409 
	#R_PPC64_NONE
 
R_PPC_NONE


	)

2410 
	#R_PPC64_ADDR32
 
R_PPC_ADDR32


	)

2411 
	#R_PPC64_ADDR24
 
R_PPC_ADDR24


	)

2412 
	#R_PPC64_ADDR16
 
R_PPC_ADDR16


	)

2413 
	#R_PPC64_ADDR16_LO
 
R_PPC_ADDR16_LO


	)

2414 
	#R_PPC64_ADDR16_HI
 
R_PPC_ADDR16_HI


	)

2415 
	#R_PPC64_ADDR16_HA
 
R_PPC_ADDR16_HA


	)

2416 
	#R_PPC64_ADDR14
 
R_PPC_ADDR14


	)

2417 
	#R_PPC64_ADDR14_BRTAKEN
 
R_PPC_ADDR14_BRTAKEN


	)

2418 
	#R_PPC64_ADDR14_BRNTAKEN
 
R_PPC_ADDR14_BRNTAKEN


	)

2419 
	#R_PPC64_REL24
 
R_PPC_REL24


	)

2420 
	#R_PPC64_REL14
 
R_PPC_REL14


	)

2421 
	#R_PPC64_REL14_BRTAKEN
 
R_PPC_REL14_BRTAKEN


	)

2422 
	#R_PPC64_REL14_BRNTAKEN
 
R_PPC_REL14_BRNTAKEN


	)

2423 
	#R_PPC64_GOT16
 
R_PPC_GOT16


	)

2424 
	#R_PPC64_GOT16_LO
 
R_PPC_GOT16_LO


	)

2425 
	#R_PPC64_GOT16_HI
 
R_PPC_GOT16_HI


	)

2426 
	#R_PPC64_GOT16_HA
 
R_PPC_GOT16_HA


	)

2428 
	#R_PPC64_COPY
 
R_PPC_COPY


	)

2429 
	#R_PPC64_GLOB_DAT
 
R_PPC_GLOB_DAT


	)

2430 
	#R_PPC64_JMP_SLOT
 
R_PPC_JMP_SLOT


	)

2431 
	#R_PPC64_RELATIVE
 
R_PPC_RELATIVE


	)

2433 
	#R_PPC64_UADDR32
 
R_PPC_UADDR32


	)

2434 
	#R_PPC64_UADDR16
 
R_PPC_UADDR16


	)

2435 
	#R_PPC64_REL32
 
R_PPC_REL32


	)

2436 
	#R_PPC64_PLT32
 
R_PPC_PLT32


	)

2437 
	#R_PPC64_PLTREL32
 
R_PPC_PLTREL32


	)

2438 
	#R_PPC64_PLT16_LO
 
R_PPC_PLT16_LO


	)

2439 
	#R_PPC64_PLT16_HI
 
R_PPC_PLT16_HI


	)

2440 
	#R_PPC64_PLT16_HA
 
R_PPC_PLT16_HA


	)

2442 
	#R_PPC64_SECTOFF
 
R_PPC_SECTOFF


	)

2443 
	#R_PPC64_SECTOFF_LO
 
R_PPC_SECTOFF_LO


	)

2444 
	#R_PPC64_SECTOFF_HI
 
R_PPC_SECTOFF_HI


	)

2445 
	#R_PPC64_SECTOFF_HA
 
R_PPC_SECTOFF_HA


	)

2446 
	#R_PPC64_ADDR30
 37

	)

2447 
	#R_PPC64_ADDR64
 38

	)

2448 
	#R_PPC64_ADDR16_HIGHER
 39

	)

2449 
	#R_PPC64_ADDR16_HIGHERA
 40

	)

2450 
	#R_PPC64_ADDR16_HIGHEST
 41

	)

2451 
	#R_PPC64_ADDR16_HIGHESTA
 42

	)

2452 
	#R_PPC64_UADDR64
 43

	)

2453 
	#R_PPC64_REL64
 44

	)

2454 
	#R_PPC64_PLT64
 45

	)

2455 
	#R_PPC64_PLTREL64
 46

	)

2456 
	#R_PPC64_TOC16
 47

	)

2457 
	#R_PPC64_TOC16_LO
 48

	)

2458 
	#R_PPC64_TOC16_HI
 49

	)

2459 
	#R_PPC64_TOC16_HA
 50

	)

2460 
	#R_PPC64_TOC
 51

	)

2461 
	#R_PPC64_PLTGOT16
 52

	)

2462 
	#R_PPC64_PLTGOT16_LO
 53

	)

2463 
	#R_PPC64_PLTGOT16_HI
 54

	)

2464 
	#R_PPC64_PLTGOT16_HA
 55

	)

2466 
	#R_PPC64_ADDR16_DS
 56

	)

2467 
	#R_PPC64_ADDR16_LO_DS
 57

	)

2468 
	#R_PPC64_GOT16_DS
 58

	)

2469 
	#R_PPC64_GOT16_LO_DS
 59

	)

2470 
	#R_PPC64_PLT16_LO_DS
 60

	)

2471 
	#R_PPC64_SECTOFF_DS
 61

	)

2472 
	#R_PPC64_SECTOFF_LO_DS
 62

	)

2473 
	#R_PPC64_TOC16_DS
 63

	)

2474 
	#R_PPC64_TOC16_LO_DS
 64

	)

2475 
	#R_PPC64_PLTGOT16_DS
 65

	)

2476 
	#R_PPC64_PLTGOT16_LO_DS
 66

	)

2479 
	#R_PPC64_TLS
 67

	)

2480 
	#R_PPC64_DTPMOD64
 68

	)

2481 
	#R_PPC64_TPREL16
 69

	)

2482 
	#R_PPC64_TPREL16_LO
 70

	)

2483 
	#R_PPC64_TPREL16_HI
 71

	)

2484 
	#R_PPC64_TPREL16_HA
 72

	)

2485 
	#R_PPC64_TPREL64
 73

	)

2486 
	#R_PPC64_DTPREL16
 74

	)

2487 
	#R_PPC64_DTPREL16_LO
 75

	)

2488 
	#R_PPC64_DTPREL16_HI
 76

	)

2489 
	#R_PPC64_DTPREL16_HA
 77

	)

2490 
	#R_PPC64_DTPREL64
 78

	)

2491 
	#R_PPC64_GOT_TLSGD16
 79

	)

2492 
	#R_PPC64_GOT_TLSGD16_LO
 80

	)

2493 
	#R_PPC64_GOT_TLSGD16_HI
 81

	)

2494 
	#R_PPC64_GOT_TLSGD16_HA
 82

	)

2495 
	#R_PPC64_GOT_TLSLD16
 83

	)

2496 
	#R_PPC64_GOT_TLSLD16_LO
 84

	)

2497 
	#R_PPC64_GOT_TLSLD16_HI
 85

	)

2498 
	#R_PPC64_GOT_TLSLD16_HA
 86

	)

2499 
	#R_PPC64_GOT_TPREL16_DS
 87

	)

2500 
	#R_PPC64_GOT_TPREL16_LO_DS
 88

	)

2501 
	#R_PPC64_GOT_TPREL16_HI
 89

	)

2502 
	#R_PPC64_GOT_TPREL16_HA
 90

	)

2503 
	#R_PPC64_GOT_DTPREL16_DS
 91

	)

2504 
	#R_PPC64_GOT_DTPREL16_LO_DS
 92

	)

2505 
	#R_PPC64_GOT_DTPREL16_HI
 93

	)

2506 
	#R_PPC64_GOT_DTPREL16_HA
 94

	)

2507 
	#R_PPC64_TPREL16_DS
 95

	)

2508 
	#R_PPC64_TPREL16_LO_DS
 96

	)

2509 
	#R_PPC64_TPREL16_HIGHER
 97

	)

2510 
	#R_PPC64_TPREL16_HIGHERA
 98

	)

2511 
	#R_PPC64_TPREL16_HIGHEST
 99

	)

2512 
	#R_PPC64_TPREL16_HIGHESTA
 100

	)

2513 
	#R_PPC64_DTPREL16_DS
 101

	)

2514 
	#R_PPC64_DTPREL16_LO_DS
 102

	)

2515 
	#R_PPC64_DTPREL16_HIGHER
 103

	)

2516 
	#R_PPC64_DTPREL16_HIGHERA
 104

	)

2517 
	#R_PPC64_DTPREL16_HIGHEST
 105

	)

2518 
	#R_PPC64_DTPREL16_HIGHESTA
 106

	)

2519 
	#R_PPC64_TLSGD
 107

	)

2520 
	#R_PPC64_TLSLD
 108

	)

2521 
	#R_PPC64_TOCSAVE
 109

	)

2524 
	#R_PPC64_ADDR16_HIGH
 110

	)

2525 
	#R_PPC64_ADDR16_HIGHA
 111

	)

2526 
	#R_PPC64_TPREL16_HIGH
 112

	)

2527 
	#R_PPC64_TPREL16_HIGHA
 113

	)

2528 
	#R_PPC64_DTPREL16_HIGH
 114

	)

2529 
	#R_PPC64_DTPREL16_HIGHA
 115

	)

2532 
	#R_PPC64_JMP_IREL
 247

	)

2533 
	#R_PPC64_IRELATIVE
 248

	)

2534 
	#R_PPC64_REL16
 249

	)

2535 
	#R_PPC64_REL16_LO
 250

	)

2536 
	#R_PPC64_REL16_HI
 251

	)

2537 
	#R_PPC64_REL16_HA
 252

	)

2543 
	#EF_PPC64_ABI
 3

	)

2546 
	#DT_PPC64_GLINK
 (
DT_LOPROC
 + 0)

	)

2547 
	#DT_PPC64_OPD
 (
DT_LOPROC
 + 1)

	)

2548 
	#DT_PPC64_OPDSZ
 (
DT_LOPROC
 + 2)

	)

2549 
	#DT_PPC64_OPT
 (
DT_LOPROC
 + 3)

	)

2550 
	#DT_PPC64_NUM
 4

	)

2553 
	#PPC64_OPT_TLS
 1

	)

2554 
	#PPC64_OPT_MULTI_TOC
 2

	)

2555 
	#PPC64_OPT_LOCALENTRY
 4

	)

2558 
	#STO_PPC64_LOCAL_BIT
 5

	)

2559 
	#STO_PPC64_LOCAL_MASK
 (7 << 
STO_PPC64_LOCAL_BIT
)

	)

2560 
	#PPC64_LOCAL_ENTRY_OFFSET
(
Ÿhî
) \

2561 (((1 << (((
Ÿhî
Ë& 
STO_PPC64_LOCAL_MASK
Ë>> 
STO_PPC64_LOCAL_BIT
)Ë>> 2Ë<< 2)

	)

2567 
	#EF_ARM_RELEXEC
 0x01

	)

2568 
	#EF_ARM_HASENTRY
 0x02

	)

2569 
	#EF_ARM_INTERWORK
 0x04

	)

2570 
	#EF_ARM_APCS_26
 0x08

	)

2571 
	#EF_ARM_APCS_FLOAT
 0x10

	)

2572 
	#EF_ARM_PIC
 0x20

	)

2573 
	#EF_ARM_ALIGN8
 0x40

	)

2574 
	#EF_ARM_NEW_ABI
 0x80

	)

2575 
	#EF_ARM_OLD_ABI
 0x100

	)

2576 
	#EF_ARM_SOFT_FLOAT
 0x200

	)

2577 
	#EF_ARM_VFP_FLOAT
 0x400

	)

2578 
	#EF_ARM_MAVERICK_FLOAT
 0x800

	)

2580 
	#EF_ARM_ABI_FLOAT_SOFT
 0x200

	)

2581 
	#EF_ARM_ABI_FLOAT_HARD
 0x400

	)

2586 
	#EF_ARM_SYMSARESORTED
 0x04

	)

2587 
	#EF_ARM_DYNSYMSUSESEGIDX
 0x08

	)

2588 
	#EF_ARM_MAPSYMSFIRST
 0x10

	)

2589 
	#EF_ARM_EABIMASK
 0XFF000000

	)

2592 
	#EF_ARM_BE8
 0x00800000

	)

2593 
	#EF_ARM_LE8
 0x00400000

	)

2595 
	#EF_ARM_EABI_VERSION
(
Êags
Ë((ÊagsË& 
EF_ARM_EABIMASK
)

	)

2596 
	#EF_ARM_EABI_UNKNOWN
 0x00000000

	)

2597 
	#EF_ARM_EABI_VER1
 0x01000000

	)

2598 
	#EF_ARM_EABI_VER2
 0x02000000

	)

2599 
	#EF_ARM_EABI_VER3
 0x03000000

	)

2600 
	#EF_ARM_EABI_VER4
 0x04000000

	)

2601 
	#EF_ARM_EABI_VER5
 0x05000000

	)

2604 
	#STT_ARM_TFUNC
 
STT_LOPROC


	)

2605 
	#STT_ARM_16BIT
 
STT_HIPROC


	)

2608 
	#SHF_ARM_ENTRYSECT
 0x10000000

	)

2609 
	#SHF_ARM_COMDEF
 0x80000000

	)

2613 
	#PF_ARM_SB
 0x10000000

	)

2615 
	#PF_ARM_PI
 0x20000000

	)

2616 
	#PF_ARM_ABS
 0x40000000

	)

2619 
	#PT_ARM_EXIDX
 (
PT_LOPROC
 + 1Ë

	)

2622 
	#SHT_ARM_EXIDX
 (
SHT_LOPROC
 + 1Ë

	)

2623 
	#SHT_ARM_PREEMPTMAP
 (
SHT_LOPROC
 + 2Ë

	)

2624 
	#SHT_ARM_ATTRIBUTES
 (
SHT_LOPROC
 + 3Ë

	)

2629 
	#R_AARCH64_NONE
 0

	)

2632 
	#R_AARCH64_P32_ABS32
 1

	)

2633 
	#R_AARCH64_P32_COPY
 180

	)

2634 
	#R_AARCH64_P32_GLOB_DAT
 181

	)

2635 
	#R_AARCH64_P32_JUMP_SLOT
 182

	)

2636 
	#R_AARCH64_P32_RELATIVE
 183

	)

2637 
	#R_AARCH64_P32_TLS_DTPMOD
 184

	)

2638 
	#R_AARCH64_P32_TLS_DTPREL
 185

	)

2639 
	#R_AARCH64_P32_TLS_TPREL
 186

	)

2640 
	#R_AARCH64_P32_TLSDESC
 187

	)

2641 
	#R_AARCH64_P32_IRELATIVE
 188

	)

2644 
	#R_AARCH64_ABS64
 257

	)

2645 
	#R_AARCH64_ABS32
 258

	)

2646 
	#R_AARCH64_ABS16
 259

	)

2647 
	#R_AARCH64_PREL64
 260

	)

2648 
	#R_AARCH64_PREL32
 261

	)

2649 
	#R_AARCH64_PREL16
 262

	)

2650 
	#R_AARCH64_MOVW_UABS_G0
 263

	)

2651 
	#R_AARCH64_MOVW_UABS_G0_NC
 264

	)

2652 
	#R_AARCH64_MOVW_UABS_G1
 265

	)

2653 
	#R_AARCH64_MOVW_UABS_G1_NC
 266

	)

2654 
	#R_AARCH64_MOVW_UABS_G2
 267

	)

2655 
	#R_AARCH64_MOVW_UABS_G2_NC
 268

	)

2656 
	#R_AARCH64_MOVW_UABS_G3
 269

	)

2657 
	#R_AARCH64_MOVW_SABS_G0
 270

	)

2658 
	#R_AARCH64_MOVW_SABS_G1
 271

	)

2659 
	#R_AARCH64_MOVW_SABS_G2
 272

	)

2660 
	#R_AARCH64_LD_PREL_LO19
 273

	)

2661 
	#R_AARCH64_ADR_PREL_LO21
 274

	)

2662 
	#R_AARCH64_ADR_PREL_PG_HI21
 275

	)

2663 
	#R_AARCH64_ADR_PREL_PG_HI21_NC
 276

	)

2664 
	#R_AARCH64_ADD_ABS_LO12_NC
 277

	)

2665 
	#R_AARCH64_LDST8_ABS_LO12_NC
 278

	)

2666 
	#R_AARCH64_TSTBR14
 279

	)

2667 
	#R_AARCH64_CONDBR19
 280

	)

2668 
	#R_AARCH64_JUMP26
 282

	)

2669 
	#R_AARCH64_CALL26
 283

	)

2670 
	#R_AARCH64_LDST16_ABS_LO12_NC
 284

	)

2671 
	#R_AARCH64_LDST32_ABS_LO12_NC
 285

	)

2672 
	#R_AARCH64_LDST64_ABS_LO12_NC
 286

	)

2673 
	#R_AARCH64_MOVW_PREL_G0
 287

	)

2674 
	#R_AARCH64_MOVW_PREL_G0_NC
 288

	)

2675 
	#R_AARCH64_MOVW_PREL_G1
 289

	)

2676 
	#R_AARCH64_MOVW_PREL_G1_NC
 290

	)

2677 
	#R_AARCH64_MOVW_PREL_G2
 291

	)

2678 
	#R_AARCH64_MOVW_PREL_G2_NC
 292

	)

2679 
	#R_AARCH64_MOVW_PREL_G3
 293

	)

2680 
	#R_AARCH64_LDST128_ABS_LO12_NC
 299

	)

2681 
	#R_AARCH64_MOVW_GOTOFF_G0
 300

	)

2682 
	#R_AARCH64_MOVW_GOTOFF_G0_NC
 301

	)

2683 
	#R_AARCH64_MOVW_GOTOFF_G1
 302

	)

2684 
	#R_AARCH64_MOVW_GOTOFF_G1_NC
 303

	)

2685 
	#R_AARCH64_MOVW_GOTOFF_G2
 304

	)

2686 
	#R_AARCH64_MOVW_GOTOFF_G2_NC
 305

	)

2687 
	#R_AARCH64_MOVW_GOTOFF_G3
 306

	)

2688 
	#R_AARCH64_GOTREL64
 307

	)

2689 
	#R_AARCH64_GOTREL32
 308

	)

2690 
	#R_AARCH64_GOT_LD_PREL19
 309

	)

2691 
	#R_AARCH64_LD64_GOTOFF_LO15
 310

	)

2692 
	#R_AARCH64_ADR_GOT_PAGE
 311

	)

2693 
	#R_AARCH64_LD64_GOT_LO12_NC
 312

	)

2694 
	#R_AARCH64_LD64_GOTPAGE_LO15
 313

	)

2695 
	#R_AARCH64_TLSGD_ADR_PREL21
 512

	)

2696 
	#R_AARCH64_TLSGD_ADR_PAGE21
 513

	)

2697 
	#R_AARCH64_TLSGD_ADD_LO12_NC
 514

	)

2698 
	#R_AARCH64_TLSGD_MOVW_G1
 515

	)

2699 
	#R_AARCH64_TLSGD_MOVW_G0_NC
 516

	)

2700 
	#R_AARCH64_TLSLD_ADR_PREL21
 517

	)

2701 
	#R_AARCH64_TLSLD_ADR_PAGE21
 518

	)

2702 
	#R_AARCH64_TLSLD_ADD_LO12_NC
 519

	)

2703 
	#R_AARCH64_TLSLD_MOVW_G1
 520

	)

2704 
	#R_AARCH64_TLSLD_MOVW_G0_NC
 521

	)

2705 
	#R_AARCH64_TLSLD_LD_PREL19
 522

	)

2706 
	#R_AARCH64_TLSLD_MOVW_DTPREL_G2
 523

	)

2707 
	#R_AARCH64_TLSLD_MOVW_DTPREL_G1
 524

	)

2708 
	#R_AARCH64_TLSLD_MOVW_DTPREL_G1_NC
 525

	)

2709 
	#R_AARCH64_TLSLD_MOVW_DTPREL_G0
 526

	)

2710 
	#R_AARCH64_TLSLD_MOVW_DTPREL_G0_NC
 527

	)

2711 
	#R_AARCH64_TLSLD_ADD_DTPREL_HI12
 528

	)

2712 
	#R_AARCH64_TLSLD_ADD_DTPREL_LO12
 529

	)

2713 
	#R_AARCH64_TLSLD_ADD_DTPREL_LO12_NC
 530

	)

2714 
	#R_AARCH64_TLSLD_LDST8_DTPREL_LO12
 531

	)

2715 
	#R_AARCH64_TLSLD_LDST8_DTPREL_LO12_NC
 532

	)

2716 
	#R_AARCH64_TLSLD_LDST16_DTPREL_LO12
 533

	)

2717 
	#R_AARCH64_TLSLD_LDST16_DTPREL_LO12_NC
 534

	)

2718 
	#R_AARCH64_TLSLD_LDST32_DTPREL_LO12
 535

	)

2719 
	#R_AARCH64_TLSLD_LDST32_DTPREL_LO12_NC
 536

	)

2720 
	#R_AARCH64_TLSLD_LDST64_DTPREL_LO12
 537

	)

2721 
	#R_AARCH64_TLSLD_LDST64_DTPREL_LO12_NC
 538

	)

2722 
	#R_AARCH64_TLSIE_MOVW_GOTTPREL_G1
 539

	)

2723 
	#R_AARCH64_TLSIE_MOVW_GOTTPREL_G0_NC
 540

	)

2724 
	#R_AARCH64_TLSIE_ADR_GOTTPREL_PAGE21
 541

	)

2725 
	#R_AARCH64_TLSIE_LD64_GOTTPREL_LO12_NC
 542

	)

2726 
	#R_AARCH64_TLSIE_LD_GOTTPREL_PREL19
 543

	)

2727 
	#R_AARCH64_TLSLE_MOVW_TPREL_G2
 544

	)

2728 
	#R_AARCH64_TLSLE_MOVW_TPREL_G1
 545

	)

2729 
	#R_AARCH64_TLSLE_MOVW_TPREL_G1_NC
 546

	)

2730 
	#R_AARCH64_TLSLE_MOVW_TPREL_G0
 547

	)

2731 
	#R_AARCH64_TLSLE_MOVW_TPREL_G0_NC
 548

	)

2732 
	#R_AARCH64_TLSLE_ADD_TPREL_HI12
 549

	)

2733 
	#R_AARCH64_TLSLE_ADD_TPREL_LO12
 550

	)

2734 
	#R_AARCH64_TLSLE_ADD_TPREL_LO12_NC
 551

	)

2735 
	#R_AARCH64_TLSLE_LDST8_TPREL_LO12
 552

	)

2736 
	#R_AARCH64_TLSLE_LDST8_TPREL_LO12_NC
 553

	)

2737 
	#R_AARCH64_TLSLE_LDST16_TPREL_LO12
 554

	)

2738 
	#R_AARCH64_TLSLE_LDST16_TPREL_LO12_NC
 555

	)

2739 
	#R_AARCH64_TLSLE_LDST32_TPREL_LO12
 556

	)

2740 
	#R_AARCH64_TLSLE_LDST32_TPREL_LO12_NC
 557

	)

2741 
	#R_AARCH64_TLSLE_LDST64_TPREL_LO12
 558

	)

2742 
	#R_AARCH64_TLSLE_LDST64_TPREL_LO12_NC
 559

	)

2743 
	#R_AARCH64_TLSDESC_LD_PREL19
 560

	)

2744 
	#R_AARCH64_TLSDESC_ADR_PREL21
 561

	)

2745 
	#R_AARCH64_TLSDESC_ADR_PAGE21
 562

	)

2746 
	#R_AARCH64_TLSDESC_LD64_LO12
 563

	)

2747 
	#R_AARCH64_TLSDESC_ADD_LO12
 564

	)

2748 
	#R_AARCH64_TLSDESC_OFF_G1
 565

	)

2749 
	#R_AARCH64_TLSDESC_OFF_G0_NC
 566

	)

2750 
	#R_AARCH64_TLSDESC_LDR
 567

	)

2751 
	#R_AARCH64_TLSDESC_ADD
 568

	)

2752 
	#R_AARCH64_TLSDESC_CALL
 569

	)

2753 
	#R_AARCH64_TLSLE_LDST128_TPREL_LO12
 570

	)

2754 
	#R_AARCH64_TLSLE_LDST128_TPREL_LO12_NC
 571

	)

2755 
	#R_AARCH64_TLSLD_LDST128_DTPREL_LO12
 572

	)

2756 
	#R_AARCH64_TLSLD_LDST128_DTPREL_LO12_NC
 573

	)

2757 
	#R_AARCH64_COPY
 1024

	)

2758 
	#R_AARCH64_GLOB_DAT
 1025

	)

2759 
	#R_AARCH64_JUMP_SLOT
 1026

	)

2760 
	#R_AARCH64_RELATIVE
 1027

	)

2761 
	#R_AARCH64_TLS_DTPMOD
 1028

	)

2762 
	#R_AARCH64_TLS_DTPREL
 1029

	)

2763 
	#R_AARCH64_TLS_TPREL
 1030

	)

2764 
	#R_AARCH64_TLSDESC
 1031

	)

2765 
	#R_AARCH64_IRELATIVE
 1032

	)

2769 
	#R_ARM_NONE
 0

	)

2770 
	#R_ARM_PC24
 1

	)

2772 
	#R_ARM_ABS32
 2

	)

2773 
	#R_ARM_REL32
 3

	)

2774 
	#R_ARM_PC13
 4

	)

2775 
	#R_ARM_ABS16
 5

	)

2776 
	#R_ARM_ABS12
 6

	)

2777 
	#R_ARM_THM_ABS5
 7

	)

2778 
	#R_ARM_ABS8
 8

	)

2779 
	#R_ARM_SBREL32
 9

	)

2780 
	#R_ARM_THM_PC22
 10

	)

2781 
	#R_ARM_THM_PC8
 11

	)

2783 
	#R_ARM_AMP_VCALL9
 12

	)

2784 
	#R_ARM_SWI24
 13

	)

2785 
	#R_ARM_TLS_DESC
 13

	)

2786 
	#R_ARM_THM_SWI8
 14

	)

2787 
	#R_ARM_XPC25
 15

	)

2788 
	#R_ARM_THM_XPC22
 16

	)

2789 
	#R_ARM_TLS_DTPMOD32
 17

	)

2790 
	#R_ARM_TLS_DTPOFF32
 18

	)

2791 
	#R_ARM_TLS_TPOFF32
 19

	)

2792 
	#R_ARM_COPY
 20

	)

2793 
	#R_ARM_GLOB_DAT
 21

	)

2794 
	#R_ARM_JUMP_SLOT
 22

	)

2795 
	#R_ARM_RELATIVE
 23

	)

2796 
	#R_ARM_GOTOFF
 24

	)

2797 
	#R_ARM_GOTPC
 25

	)

2798 
	#R_ARM_GOT32
 26

	)

2799 
	#R_ARM_PLT32
 27

	)

2800 
	#R_ARM_CALL
 28

	)

2801 
	#R_ARM_JUMP24
 29

	)

2803 
	#R_ARM_THM_JUMP24
 30

	)

2804 
	#R_ARM_BASE_ABS
 31

	)

2805 
	#R_ARM_ALU_PCREL_7_0
 32

	)

2806 
	#R_ARM_ALU_PCREL_15_8
 33

	)

2807 
	#R_ARM_ALU_PCREL_23_15
 34

	)

2808 
	#R_ARM_LDR_SBREL_11_0
 35

	)

2809 
	#R_ARM_ALU_SBREL_19_12
 36

	)

2810 
	#R_ARM_ALU_SBREL_27_20
 37

	)

2811 
	#R_ARM_TARGET1
 38

	)

2812 
	#R_ARM_SBREL31
 39

	)

2813 
	#R_ARM_V4BX
 40

	)

2814 
	#R_ARM_TARGET2
 41

	)

2815 
	#R_ARM_PREL31
 42

	)

2816 
	#R_ARM_MOVW_ABS_NC
 43

	)

2817 
	#R_ARM_MOVT_ABS
 44

	)

2818 
	#R_ARM_MOVW_PREL_NC
 45

	)

2819 
	#R_ARM_MOVT_PREL
 46

	)

2820 
	#R_ARM_THM_MOVW_ABS_NC
 47

	)

2821 
	#R_ARM_THM_MOVT_ABS
 48

	)

2823 
	#R_ARM_THM_MOVW_PREL_NC
 49

	)

2825 
	#R_ARM_THM_MOVT_PREL
 50

	)

2827 
	#R_ARM_THM_JUMP19
 51

	)

2829 
	#R_ARM_THM_JUMP6
 52

	)

2831 
	#R_ARM_THM_ALU_PREL_11_0
 53

	)

2833 
	#R_ARM_THM_PC12
 54

	)

2835 
	#R_ARM_ABS32_NOI
 55

	)

2836 
	#R_ARM_REL32_NOI
 56

	)

2837 
	#R_ARM_ALU_PC_G0_NC
 57

	)

2838 
	#R_ARM_ALU_PC_G0
 58

	)

2839 
	#R_ARM_ALU_PC_G1_NC
 59

	)

2840 
	#R_ARM_ALU_PC_G1
 60

	)

2841 
	#R_ARM_ALU_PC_G2
 61

	)

2842 
	#R_ARM_LDR_PC_G1
 62

	)

2843 
	#R_ARM_LDR_PC_G2
 63

	)

2844 
	#R_ARM_LDRS_PC_G0
 64

	)

2846 
	#R_ARM_LDRS_PC_G1
 65

	)

2848 
	#R_ARM_LDRS_PC_G2
 66

	)

2850 
	#R_ARM_LDC_PC_G0
 67

	)

2851 
	#R_ARM_LDC_PC_G1
 68

	)

2852 
	#R_ARM_LDC_PC_G2
 69

	)

2853 
	#R_ARM_ALU_SB_G0_NC
 70

	)

2854 
	#R_ARM_ALU_SB_G0
 71

	)

2855 
	#R_ARM_ALU_SB_G1_NC
 72

	)

2856 
	#R_ARM_ALU_SB_G1
 73

	)

2857 
	#R_ARM_ALU_SB_G2
 74

	)

2858 
	#R_ARM_LDR_SB_G0
 75

	)

2860 
	#R_ARM_LDR_SB_G1
 76

	)

2862 
	#R_ARM_LDR_SB_G2
 77

	)

2864 
	#R_ARM_LDRS_SB_G0
 78

	)

2866 
	#R_ARM_LDRS_SB_G1
 79

	)

2868 
	#R_ARM_LDRS_SB_G2
 80

	)

2870 
	#R_ARM_LDC_SB_G0
 81

	)

2871 
	#R_ARM_LDC_SB_G1
 82

	)

2872 
	#R_ARM_LDC_SB_G2
 83

	)

2873 
	#R_ARM_MOVW_BREL_NC
 84

	)

2875 
	#R_ARM_MOVT_BREL
 85

	)

2877 
	#R_ARM_MOVW_BREL
 86

	)

2879 
	#R_ARM_THM_MOVW_BREL_NC
 87

	)

2881 
	#R_ARM_THM_MOVT_BREL
 88

	)

2883 
	#R_ARM_THM_MOVW_BREL
 89

	)

2885 
	#R_ARM_TLS_GOTDESC
 90

	)

2886 
	#R_ARM_TLS_CALL
 91

	)

2887 
	#R_ARM_TLS_DESCSEQ
 92

	)

2888 
	#R_ARM_THM_TLS_CALL
 93

	)

2889 
	#R_ARM_PLT32_ABS
 94

	)

2890 
	#R_ARM_GOT_ABS
 95

	)

2891 
	#R_ARM_GOT_PREL
 96

	)

2892 
	#R_ARM_GOT_BREL12
 97

	)

2894 
	#R_ARM_GOTOFF12
 98

	)

2896 
	#R_ARM_GOTRELAX
 99

	)

2897 
	#R_ARM_GNU_VTENTRY
 100

	)

2898 
	#R_ARM_GNU_VTINHERIT
 101

	)

2899 
	#R_ARM_THM_PC11
 102

	)

2900 
	#R_ARM_THM_PC9
 103

	)

2902 
	#R_ARM_TLS_GD32
 104

	)

2904 
	#R_ARM_TLS_LDM32
 105

	)

2906 
	#R_ARM_TLS_LDO32
 106

	)

2908 
	#R_ARM_TLS_IE32
 107

	)

2910 
	#R_ARM_TLS_LE32
 108

	)

2912 
	#R_ARM_TLS_LDO12
 109

	)

2914 
	#R_ARM_TLS_LE12
 110

	)

2916 
	#R_ARM_TLS_IE12GP
 111

	)

2918 
	#R_ARM_ME_TOO
 128

	)

2919 
	#R_ARM_THM_TLS_DESCSEQ
 129

	)

2920 
	#R_ARM_THM_TLS_DESCSEQ16
 129

	)

2921 
	#R_ARM_THM_TLS_DESCSEQ32
 130

	)

2922 
	#R_ARM_THM_GOT_BREL12
 131

	)

2924 
	#R_ARM_IRELATIVE
 160

	)

2925 
	#R_ARM_RXPC25
 249

	)

2926 
	#R_ARM_RSBREL32
 250

	)

2927 
	#R_ARM_THM_RPC22
 251

	)

2928 
	#R_ARM_RREL32
 252

	)

2929 
	#R_ARM_RABS22
 253

	)

2930 
	#R_ARM_RPC24
 254

	)

2931 
	#R_ARM_RBASE
 255

	)

2933 
	#R_ARM_NUM
 256

	)

2938 
	#EF_IA_64_MASKOS
 0x0000000‡

	)

2939 
	#EF_IA_64_ABI64
 0x00000010

	)

2940 
	#EF_IA_64_ARCH
 0xff000000

	)

2943 
	#PT_IA_64_ARCHEXT
 (
PT_LOPROC
 + 0Ë

	)

2944 
	#PT_IA_64_UNWIND
 (
PT_LOPROC
 + 1Ë

	)

2945 
	#PT_IA_64_HP_OPT_ANOT
 (
PT_LOOS
 + 0x12)

	)

2946 
	#PT_IA_64_HP_HSL_ANOT
 (
PT_LOOS
 + 0x13)

	)

2947 
	#PT_IA_64_HP_STACK
 (
PT_LOOS
 + 0x14)

	)

2950 
	#PF_IA_64_NORECOV
 0x80000000

	)

2953 
	#SHT_IA_64_EXT
 (
SHT_LOPROC
 + 0Ë

	)

2954 
	#SHT_IA_64_UNWIND
 (
SHT_LOPROC
 + 1Ë

	)

2957 
	#SHF_IA_64_SHORT
 0x10000000

	)

2958 
	#SHF_IA_64_NORECOV
 0x20000000

	)

2961 
	#DT_IA_64_PLT_RESERVE
 (
DT_LOPROC
 + 0)

	)

2962 
	#DT_IA_64_NUM
 1

	)

2965 
	#R_IA64_NONE
 0x00

	)

2966 
	#R_IA64_IMM14
 0x21

	)

2967 
	#R_IA64_IMM22
 0x22

	)

2968 
	#R_IA64_IMM64
 0x23

	)

2969 
	#R_IA64_DIR32MSB
 0x24

	)

2970 
	#R_IA64_DIR32LSB
 0x25

	)

2971 
	#R_IA64_DIR64MSB
 0x26

	)

2972 
	#R_IA64_DIR64LSB
 0x27

	)

2973 
	#R_IA64_GPREL22
 0x2®

	)

2974 
	#R_IA64_GPREL64I
 0x2b

	)

2975 
	#R_IA64_GPREL32MSB
 0x2¯

	)

2976 
	#R_IA64_GPREL32LSB
 0x2d

	)

2977 
	#R_IA64_GPREL64MSB
 0x2ê

	)

2978 
	#R_IA64_GPREL64LSB
 0x2‡

	)

2979 
	#R_IA64_LTOFF22
 0x32

	)

2980 
	#R_IA64_LTOFF64I
 0x33

	)

2981 
	#R_IA64_PLTOFF22
 0x3®

	)

2982 
	#R_IA64_PLTOFF64I
 0x3b

	)

2983 
	#R_IA64_PLTOFF64MSB
 0x3ê

	)

2984 
	#R_IA64_PLTOFF64LSB
 0x3‡

	)

2985 
	#R_IA64_FPTR64I
 0x43

	)

2986 
	#R_IA64_FPTR32MSB
 0x44

	)

2987 
	#R_IA64_FPTR32LSB
 0x45

	)

2988 
	#R_IA64_FPTR64MSB
 0x46

	)

2989 
	#R_IA64_FPTR64LSB
 0x47

	)

2990 
	#R_IA64_PCREL60B
 0x48

	)

2991 
	#R_IA64_PCREL21B
 0x49

	)

2992 
	#R_IA64_PCREL21M
 0x4®

	)

2993 
	#R_IA64_PCREL21F
 0x4b

	)

2994 
	#R_IA64_PCREL32MSB
 0x4¯

	)

2995 
	#R_IA64_PCREL32LSB
 0x4d

	)

2996 
	#R_IA64_PCREL64MSB
 0x4ê

	)

2997 
	#R_IA64_PCREL64LSB
 0x4‡

	)

2998 
	#R_IA64_LTOFF_FPTR22
 0x52

	)

2999 
	#R_IA64_LTOFF_FPTR64I
 0x53

	)

3000 
	#R_IA64_LTOFF_FPTR32MSB
 0x54

	)

3001 
	#R_IA64_LTOFF_FPTR32LSB
 0x55

	)

3002 
	#R_IA64_LTOFF_FPTR64MSB
 0x56

	)

3003 
	#R_IA64_LTOFF_FPTR64LSB
 0x57

	)

3004 
	#R_IA64_SEGREL32MSB
 0x5¯

	)

3005 
	#R_IA64_SEGREL32LSB
 0x5d

	)

3006 
	#R_IA64_SEGREL64MSB
 0x5ê

	)

3007 
	#R_IA64_SEGREL64LSB
 0x5‡

	)

3008 
	#R_IA64_SECREL32MSB
 0x64

	)

3009 
	#R_IA64_SECREL32LSB
 0x65

	)

3010 
	#R_IA64_SECREL64MSB
 0x66

	)

3011 
	#R_IA64_SECREL64LSB
 0x67

	)

3012 
	#R_IA64_REL32MSB
 0x6¯

	)

3013 
	#R_IA64_REL32LSB
 0x6d

	)

3014 
	#R_IA64_REL64MSB
 0x6ê

	)

3015 
	#R_IA64_REL64LSB
 0x6‡

	)

3016 
	#R_IA64_LTV32MSB
 0x74

	)

3017 
	#R_IA64_LTV32LSB
 0x75

	)

3018 
	#R_IA64_LTV64MSB
 0x76

	)

3019 
	#R_IA64_LTV64LSB
 0x77

	)

3020 
	#R_IA64_PCREL21BI
 0x79

	)

3021 
	#R_IA64_PCREL22
 0x7®

	)

3022 
	#R_IA64_PCREL64I
 0x7b

	)

3023 
	#R_IA64_IPLTMSB
 0x80

	)

3024 
	#R_IA64_IPLTLSB
 0x81

	)

3025 
	#R_IA64_COPY
 0x84

	)

3026 
	#R_IA64_SUB
 0x85

	)

3027 
	#R_IA64_LTOFF22X
 0x86

	)

3028 
	#R_IA64_LDXMOV
 0x87

	)

3029 
	#R_IA64_TPREL14
 0x91

	)

3030 
	#R_IA64_TPREL22
 0x92

	)

3031 
	#R_IA64_TPREL64I
 0x93

	)

3032 
	#R_IA64_TPREL64MSB
 0x96

	)

3033 
	#R_IA64_TPREL64LSB
 0x97

	)

3034 
	#R_IA64_LTOFF_TPREL22
 0x9®

	)

3035 
	#R_IA64_DTPMOD64MSB
 0xa6

	)

3036 
	#R_IA64_DTPMOD64LSB
 0xa7

	)

3037 
	#R_IA64_LTOFF_DTPMOD22
 0xØ

	)

3038 
	#R_IA64_DTPREL14
 0xb1

	)

3039 
	#R_IA64_DTPREL22
 0xb2

	)

3040 
	#R_IA64_DTPREL64I
 0xb3

	)

3041 
	#R_IA64_DTPREL32MSB
 0xb4

	)

3042 
	#R_IA64_DTPREL32LSB
 0xb5

	)

3043 
	#R_IA64_DTPREL64MSB
 0xb6

	)

3044 
	#R_IA64_DTPREL64LSB
 0xb7

	)

3045 
	#R_IA64_LTOFF_DTPREL22
 0xb®

	)

3050 
	#EF_SH_MACH_MASK
 0x1f

	)

3051 
	#EF_SH_UNKNOWN
 0x0

	)

3052 
	#EF_SH1
 0x1

	)

3053 
	#EF_SH2
 0x2

	)

3054 
	#EF_SH3
 0x3

	)

3055 
	#EF_SH_DSP
 0x4

	)

3056 
	#EF_SH3_DSP
 0x5

	)

3057 
	#EF_SH4AL_DSP
 0x6

	)

3058 
	#EF_SH3E
 0x8

	)

3059 
	#EF_SH4
 0x9

	)

3060 
	#EF_SH2E
 0xb

	)

3061 
	#EF_SH4A
 0xc

	)

3062 
	#EF_SH2A
 0xd

	)

3063 
	#EF_SH4_NOFPU
 0x10

	)

3064 
	#EF_SH4A_NOFPU
 0x11

	)

3065 
	#EF_SH4_NOMMU_NOFPU
 0x12

	)

3066 
	#EF_SH2A_NOFPU
 0x13

	)

3067 
	#EF_SH3_NOMMU
 0x14

	)

3068 
	#EF_SH2A_SH4_NOFPU
 0x15

	)

3069 
	#EF_SH2A_SH3_NOFPU
 0x16

	)

3070 
	#EF_SH2A_SH4
 0x17

	)

3071 
	#EF_SH2A_SH3E
 0x18

	)

3074 
	#R_SH_NONE
 0

	)

3075 
	#R_SH_DIR32
 1

	)

3076 
	#R_SH_REL32
 2

	)

3077 
	#R_SH_DIR8WPN
 3

	)

3078 
	#R_SH_IND12W
 4

	)

3079 
	#R_SH_DIR8WPL
 5

	)

3080 
	#R_SH_DIR8WPZ
 6

	)

3081 
	#R_SH_DIR8BP
 7

	)

3082 
	#R_SH_DIR8W
 8

	)

3083 
	#R_SH_DIR8L
 9

	)

3084 
	#R_SH_SWITCH16
 25

	)

3085 
	#R_SH_SWITCH32
 26

	)

3086 
	#R_SH_USES
 27

	)

3087 
	#R_SH_COUNT
 28

	)

3088 
	#R_SH_ALIGN
 29

	)

3089 
	#R_SH_CODE
 30

	)

3090 
	#R_SH_DATA
 31

	)

3091 
	#R_SH_LABEL
 32

	)

3092 
	#R_SH_SWITCH8
 33

	)

3093 
	#R_SH_GNU_VTINHERIT
 34

	)

3094 
	#R_SH_GNU_VTENTRY
 35

	)

3095 
	#R_SH_TLS_GD_32
 144

	)

3096 
	#R_SH_TLS_LD_32
 145

	)

3097 
	#R_SH_TLS_LDO_32
 146

	)

3098 
	#R_SH_TLS_IE_32
 147

	)

3099 
	#R_SH_TLS_LE_32
 148

	)

3100 
	#R_SH_TLS_DTPMOD32
 149

	)

3101 
	#R_SH_TLS_DTPOFF32
 150

	)

3102 
	#R_SH_TLS_TPOFF32
 151

	)

3103 
	#R_SH_GOT32
 160

	)

3104 
	#R_SH_PLT32
 161

	)

3105 
	#R_SH_COPY
 162

	)

3106 
	#R_SH_GLOB_DAT
 163

	)

3107 
	#R_SH_JMP_SLOT
 164

	)

3108 
	#R_SH_RELATIVE
 165

	)

3109 
	#R_SH_GOTOFF
 166

	)

3110 
	#R_SH_GOTPC
 167

	)

3112 
	#R_SH_NUM
 256

	)

3118 
	#EF_S390_HIGH_GPRS
 0x00000001

	)

3122 
	#R_390_NONE
 0

	)

3123 
	#R_390_8
 1

	)

3124 
	#R_390_12
 2

	)

3125 
	#R_390_16
 3

	)

3126 
	#R_390_32
 4

	)

3127 
	#R_390_PC32
 5

	)

3128 
	#R_390_GOT12
 6

	)

3129 
	#R_390_GOT32
 7

	)

3130 
	#R_390_PLT32
 8

	)

3131 
	#R_390_COPY
 9

	)

3132 
	#R_390_GLOB_DAT
 10

	)

3133 
	#R_390_JMP_SLOT
 11

	)

3134 
	#R_390_RELATIVE
 12

	)

3135 
	#R_390_GOTOFF32
 13

	)

3136 
	#R_390_GOTPC
 14

	)

3137 
	#R_390_GOT16
 15

	)

3138 
	#R_390_PC16
 16

	)

3139 
	#R_390_PC16DBL
 17

	)

3140 
	#R_390_PLT16DBL
 18

	)

3141 
	#R_390_PC32DBL
 19

	)

3142 
	#R_390_PLT32DBL
 20

	)

3143 
	#R_390_GOTPCDBL
 21

	)

3144 
	#R_390_64
 22

	)

3145 
	#R_390_PC64
 23

	)

3146 
	#R_390_GOT64
 24

	)

3147 
	#R_390_PLT64
 25

	)

3148 
	#R_390_GOTENT
 26

	)

3149 
	#R_390_GOTOFF16
 27

	)

3150 
	#R_390_GOTOFF64
 28

	)

3151 
	#R_390_GOTPLT12
 29

	)

3152 
	#R_390_GOTPLT16
 30

	)

3153 
	#R_390_GOTPLT32
 31

	)

3154 
	#R_390_GOTPLT64
 32

	)

3155 
	#R_390_GOTPLTENT
 33

	)

3156 
	#R_390_PLTOFF16
 34

	)

3157 
	#R_390_PLTOFF32
 35

	)

3158 
	#R_390_PLTOFF64
 36

	)

3159 
	#R_390_TLS_LOAD
 37

	)

3160 
	#R_390_TLS_GDCALL
 38

	)

3162 
	#R_390_TLS_LDCALL
 39

	)

3164 
	#R_390_TLS_GD32
 40

	)

3166 
	#R_390_TLS_GD64
 41

	)

3168 
	#R_390_TLS_GOTIE12
 42

	)

3170 
	#R_390_TLS_GOTIE32
 43

	)

3172 
	#R_390_TLS_GOTIE64
 44

	)

3174 
	#R_390_TLS_LDM32
 45

	)

3176 
	#R_390_TLS_LDM64
 46

	)

3178 
	#R_390_TLS_IE32
 47

	)

3180 
	#R_390_TLS_IE64
 48

	)

3182 
	#R_390_TLS_IEENT
 49

	)

3184 
	#R_390_TLS_LE32
 50

	)

3186 
	#R_390_TLS_LE64
 51

	)

3188 
	#R_390_TLS_LDO32
 52

	)

3190 
	#R_390_TLS_LDO64
 53

	)

3192 
	#R_390_TLS_DTPMOD
 54

	)

3193 
	#R_390_TLS_DTPOFF
 55

	)

3194 
	#R_390_TLS_TPOFF
 56

	)

3196 
	#R_390_20
 57

	)

3197 
	#R_390_GOT20
 58

	)

3198 
	#R_390_GOTPLT20
 59

	)

3199 
	#R_390_TLS_GOTIE20
 60

	)

3201 
	#R_390_IRELATIVE
 61

	)

3203 
	#R_390_NUM
 62

	)

3207 
	#R_CRIS_NONE
 0

	)

3208 
	#R_CRIS_8
 1

	)

3209 
	#R_CRIS_16
 2

	)

3210 
	#R_CRIS_32
 3

	)

3211 
	#R_CRIS_8_PCREL
 4

	)

3212 
	#R_CRIS_16_PCREL
 5

	)

3213 
	#R_CRIS_32_PCREL
 6

	)

3214 
	#R_CRIS_GNU_VTINHERIT
 7

	)

3215 
	#R_CRIS_GNU_VTENTRY
 8

	)

3216 
	#R_CRIS_COPY
 9

	)

3217 
	#R_CRIS_GLOB_DAT
 10

	)

3218 
	#R_CRIS_JUMP_SLOT
 11

	)

3219 
	#R_CRIS_RELATIVE
 12

	)

3220 
	#R_CRIS_16_GOT
 13

	)

3221 
	#R_CRIS_32_GOT
 14

	)

3222 
	#R_CRIS_16_GOTPLT
 15

	)

3223 
	#R_CRIS_32_GOTPLT
 16

	)

3224 
	#R_CRIS_32_GOTREL
 17

	)

3225 
	#R_CRIS_32_PLT_GOTREL
 18

	)

3226 
	#R_CRIS_32_PLT_PCREL
 19

	)

3228 
	#R_CRIS_NUM
 20

	)

3232 
	#R_X86_64_NONE
 0

	)

3233 
	#R_X86_64_64
 1

	)

3234 
	#R_X86_64_PC32
 2

	)

3235 
	#R_X86_64_GOT32
 3

	)

3236 
	#R_X86_64_PLT32
 4

	)

3237 
	#R_X86_64_COPY
 5

	)

3238 
	#R_X86_64_GLOB_DAT
 6

	)

3239 
	#R_X86_64_JUMP_SLOT
 7

	)

3240 
	#R_X86_64_RELATIVE
 8

	)

3241 
	#R_X86_64_GOTPCREL
 9

	)

3243 
	#R_X86_64_32
 10

	)

3244 
	#R_X86_64_32S
 11

	)

3245 
	#R_X86_64_16
 12

	)

3246 
	#R_X86_64_PC16
 13

	)

3247 
	#R_X86_64_8
 14

	)

3248 
	#R_X86_64_PC8
 15

	)

3249 
	#R_X86_64_DTPMOD64
 16

	)

3250 
	#R_X86_64_DTPOFF64
 17

	)

3251 
	#R_X86_64_TPOFF64
 18

	)

3252 
	#R_X86_64_TLSGD
 19

	)

3254 
	#R_X86_64_TLSLD
 20

	)

3256 
	#R_X86_64_DTPOFF32
 21

	)

3257 
	#R_X86_64_GOTTPOFF
 22

	)

3259 
	#R_X86_64_TPOFF32
 23

	)

3260 
	#R_X86_64_PC64
 24

	)

3261 
	#R_X86_64_GOTOFF64
 25

	)

3262 
	#R_X86_64_GOTPC32
 26

	)

3264 
	#R_X86_64_GOT64
 27

	)

3265 
	#R_X86_64_GOTPCREL64
 28

	)

3267 
	#R_X86_64_GOTPC64
 29

	)

3268 
	#R_X86_64_GOTPLT64
 30

	)

3269 
	#R_X86_64_PLTOFF64
 31

	)

3271 
	#R_X86_64_SIZE32
 32

	)

3272 
	#R_X86_64_SIZE64
 33

	)

3273 
	#R_X86_64_GOTPC32_TLSDESC
 34

	)

3274 
	#R_X86_64_TLSDESC_CALL
 35

	)

3276 
	#R_X86_64_TLSDESC
 36

	)

3277 
	#R_X86_64_IRELATIVE
 37

	)

3278 
	#R_X86_64_RELATIVE64
 38

	)

3281 
	#R_X86_64_GOTPCRELX
 41

	)

3284 
	#R_X86_64_REX_GOTPCRELX
 42

	)

3287 
	#R_X86_64_NUM
 43

	)

3291 
	#R_MN10300_NONE
 0

	)

3292 
	#R_MN10300_32
 1

	)

3293 
	#R_MN10300_16
 2

	)

3294 
	#R_MN10300_8
 3

	)

3295 
	#R_MN10300_PCREL32
 4

	)

3296 
	#R_MN10300_PCREL16
 5

	)

3297 
	#R_MN10300_PCREL8
 6

	)

3298 
	#R_MN10300_GNU_VTINHERIT
 7

	)

3299 
	#R_MN10300_GNU_VTENTRY
 8

	)

3300 
	#R_MN10300_24
 9

	)

3301 
	#R_MN10300_GOTPC32
 10

	)

3302 
	#R_MN10300_GOTPC16
 11

	)

3303 
	#R_MN10300_GOTOFF32
 12

	)

3304 
	#R_MN10300_GOTOFF24
 13

	)

3305 
	#R_MN10300_GOTOFF16
 14

	)

3306 
	#R_MN10300_PLT32
 15

	)

3307 
	#R_MN10300_PLT16
 16

	)

3308 
	#R_MN10300_GOT32
 17

	)

3309 
	#R_MN10300_GOT24
 18

	)

3310 
	#R_MN10300_GOT16
 19

	)

3311 
	#R_MN10300_COPY
 20

	)

3312 
	#R_MN10300_GLOB_DAT
 21

	)

3313 
	#R_MN10300_JMP_SLOT
 22

	)

3314 
	#R_MN10300_RELATIVE
 23

	)

3315 
	#R_MN10300_TLS_GD
 24

	)

3316 
	#R_MN10300_TLS_LD
 25

	)

3317 
	#R_MN10300_TLS_LDO
 26

	)

3318 
	#R_MN10300_TLS_GOTIE
 27

	)

3320 
	#R_MN10300_TLS_IE
 28

	)

3322 
	#R_MN10300_TLS_LE
 29

	)

3324 
	#R_MN10300_TLS_DTPMOD
 30

	)

3325 
	#R_MN10300_TLS_DTPOFF
 31

	)

3326 
	#R_MN10300_TLS_TPOFF
 32

	)

3327 
	#R_MN10300_SYM_DIFF
 33

	)

3329 
	#R_MN10300_ALIGN
 34

	)

3331 
	#R_MN10300_NUM
 35

	)

3335 
	#R_M32R_NONE
 0

	)

3336 
	#R_M32R_16
 1

	)

3337 
	#R_M32R_32
 2

	)

3338 
	#R_M32R_24
 3

	)

3339 
	#R_M32R_10_PCREL
 4

	)

3340 
	#R_M32R_18_PCREL
 5

	)

3341 
	#R_M32R_26_PCREL
 6

	)

3342 
	#R_M32R_HI16_ULO
 7

	)

3343 
	#R_M32R_HI16_SLO
 8

	)

3344 
	#R_M32R_LO16
 9

	)

3345 
	#R_M32R_SDA16
 10

	)

3346 
	#R_M32R_GNU_VTINHERIT
 11

	)

3347 
	#R_M32R_GNU_VTENTRY
 12

	)

3349 
	#R_M32R_16_RELA
 33

	)

3350 
	#R_M32R_32_RELA
 34

	)

3351 
	#R_M32R_24_RELA
 35

	)

3352 
	#R_M32R_10_PCREL_RELA
 36

	)

3353 
	#R_M32R_18_PCREL_RELA
 37

	)

3354 
	#R_M32R_26_PCREL_RELA
 38

	)

3355 
	#R_M32R_HI16_ULO_RELA
 39

	)

3356 
	#R_M32R_HI16_SLO_RELA
 40

	)

3357 
	#R_M32R_LO16_RELA
 41

	)

3358 
	#R_M32R_SDA16_RELA
 42

	)

3359 
	#R_M32R_RELA_GNU_VTINHERIT
 43

	)

3360 
	#R_M32R_RELA_GNU_VTENTRY
 44

	)

3361 
	#R_M32R_REL32
 45

	)

3363 
	#R_M32R_GOT24
 48

	)

3364 
	#R_M32R_26_PLTREL
 49

	)

3365 
	#R_M32R_COPY
 50

	)

3366 
	#R_M32R_GLOB_DAT
 51

	)

3367 
	#R_M32R_JMP_SLOT
 52

	)

3368 
	#R_M32R_RELATIVE
 53

	)

3369 
	#R_M32R_GOTOFF
 54

	)

3370 
	#R_M32R_GOTPC24
 55

	)

3371 
	#R_M32R_GOT16_HI_ULO
 56

	)

3373 
	#R_M32R_GOT16_HI_SLO
 57

	)

3375 
	#R_M32R_GOT16_LO
 58

	)

3376 
	#R_M32R_GOTPC_HI_ULO
 59

	)

3378 
	#R_M32R_GOTPC_HI_SLO
 60

	)

3380 
	#R_M32R_GOTPC_LO
 61

	)

3382 
	#R_M32R_GOTOFF_HI_ULO
 62

	)

3384 
	#R_M32R_GOTOFF_HI_SLO
 63

	)

3386 
	#R_M32R_GOTOFF_LO
 64

	)

3387 
	#R_M32R_NUM
 256

	)

3390 
	#R_MICROBLAZE_NONE
 0

	)

3391 
	#R_MICROBLAZE_32
 1

	)

3392 
	#R_MICROBLAZE_32_PCREL
 2

	)

3393 
	#R_MICROBLAZE_64_PCREL
 3

	)

3394 
	#R_MICROBLAZE_32_PCREL_LO
 4

	)

3395 
	#R_MICROBLAZE_64
 5

	)

3396 
	#R_MICROBLAZE_32_LO
 6

	)

3397 
	#R_MICROBLAZE_SRO32
 7

	)

3398 
	#R_MICROBLAZE_SRW32
 8

	)

3399 
	#R_MICROBLAZE_64_NONE
 9

	)

3400 
	#R_MICROBLAZE_32_SYM_OP_SYM
 10

	)

3401 
	#R_MICROBLAZE_GNU_VTINHERIT
 11

	)

3402 
	#R_MICROBLAZE_GNU_VTENTRY
 12

	)

3403 
	#R_MICROBLAZE_GOTPC_64
 13

	)

3404 
	#R_MICROBLAZE_GOT_64
 14

	)

3405 
	#R_MICROBLAZE_PLT_64
 15

	)

3406 
	#R_MICROBLAZE_REL
 16

	)

3407 
	#R_MICROBLAZE_JUMP_SLOT
 17

	)

3408 
	#R_MICROBLAZE_GLOB_DAT
 18

	)

3409 
	#R_MICROBLAZE_GOTOFF_64
 19

	)

3410 
	#R_MICROBLAZE_GOTOFF_32
 20

	)

3411 
	#R_MICROBLAZE_COPY
 21

	)

3412 
	#R_MICROBLAZE_TLS
 22

	)

3413 
	#R_MICROBLAZE_TLSGD
 23

	)

3414 
	#R_MICROBLAZE_TLSLD
 24

	)

3415 
	#R_MICROBLAZE_TLSDTPMOD32
 25

	)

3416 
	#R_MICROBLAZE_TLSDTPREL32
 26

	)

3417 
	#R_MICROBLAZE_TLSDTPREL64
 27

	)

3418 
	#R_MICROBLAZE_TLSGOTTPREL32
 28

	)

3419 
	#R_MICROBLAZE_TLSTPREL32
 29

	)

3422 
	#DT_NIOS2_GP
 0x70000002

	)

3425 
	#R_NIOS2_NONE
 0

	)

3426 
	#R_NIOS2_S16
 1

	)

3427 
	#R_NIOS2_U16
 2

	)

3428 
	#R_NIOS2_PCREL16
 3

	)

3429 
	#R_NIOS2_CALL26
 4

	)

3430 
	#R_NIOS2_IMM5
 5

	)

3431 
	#R_NIOS2_CACHE_OPX
 6

	)

3432 
	#R_NIOS2_IMM6
 7

	)

3433 
	#R_NIOS2_IMM8
 8

	)

3434 
	#R_NIOS2_HI16
 9

	)

3435 
	#R_NIOS2_LO16
 10

	)

3436 
	#R_NIOS2_HIADJ16
 11

	)

3437 
	#R_NIOS2_BFD_RELOC_32
 12

	)

3438 
	#R_NIOS2_BFD_RELOC_16
 13

	)

3439 
	#R_NIOS2_BFD_RELOC_8
 14

	)

3440 
	#R_NIOS2_GPREL
 15

	)

3441 
	#R_NIOS2_GNU_VTINHERIT
 16

	)

3442 
	#R_NIOS2_GNU_VTENTRY
 17

	)

3443 
	#R_NIOS2_UJMP
 18

	)

3444 
	#R_NIOS2_CJMP
 19

	)

3445 
	#R_NIOS2_CALLR
 20

	)

3446 
	#R_NIOS2_ALIGN
 21

	)

3448 
	#R_NIOS2_GOT16
 22

	)

3449 
	#R_NIOS2_CALL16
 23

	)

3450 
	#R_NIOS2_GOTOFF_LO
 24

	)

3451 
	#R_NIOS2_GOTOFF_HA
 25

	)

3452 
	#R_NIOS2_PCREL_LO
 26

	)

3453 
	#R_NIOS2_PCREL_HA
 27

	)

3454 
	#R_NIOS2_TLS_GD16
 28

	)

3455 
	#R_NIOS2_TLS_LDM16
 29

	)

3456 
	#R_NIOS2_TLS_LDO16
 30

	)

3457 
	#R_NIOS2_TLS_IE16
 31

	)

3458 
	#R_NIOS2_TLS_LE16
 32

	)

3459 
	#R_NIOS2_TLS_DTPMOD
 33

	)

3460 
	#R_NIOS2_TLS_DTPREL
 34

	)

3461 
	#R_NIOS2_TLS_TPREL
 35

	)

3462 
	#R_NIOS2_COPY
 36

	)

3463 
	#R_NIOS2_GLOB_DAT
 37

	)

3464 
	#R_NIOS2_JUMP_SLOT
 38

	)

3465 
	#R_NIOS2_RELATIVE
 39

	)

3466 
	#R_NIOS2_GOTOFF
 40

	)

3467 
	#R_NIOS2_CALL26_NOAT
 41

	)

3468 
	#R_NIOS2_GOT_LO
 42

	)

3469 
	#R_NIOS2_GOT_HA
 43

	)

3470 
	#R_NIOS2_CALL_LO
 44

	)

3471 
	#R_NIOS2_CALL_HA
 45

	)

3474 
	#R_TILEPRO_NONE
 0

	)

3475 
	#R_TILEPRO_32
 1

	)

3476 
	#R_TILEPRO_16
 2

	)

3477 
	#R_TILEPRO_8
 3

	)

3478 
	#R_TILEPRO_32_PCREL
 4

	)

3479 
	#R_TILEPRO_16_PCREL
 5

	)

3480 
	#R_TILEPRO_8_PCREL
 6

	)

3481 
	#R_TILEPRO_LO16
 7

	)

3482 
	#R_TILEPRO_HI16
 8

	)

3483 
	#R_TILEPRO_HA16
 9

	)

3484 
	#R_TILEPRO_COPY
 10

	)

3485 
	#R_TILEPRO_GLOB_DAT
 11

	)

3486 
	#R_TILEPRO_JMP_SLOT
 12

	)

3487 
	#R_TILEPRO_RELATIVE
 13

	)

3488 
	#R_TILEPRO_BROFF_X1
 14

	)

3489 
	#R_TILEPRO_JOFFLONG_X1
 15

	)

3490 
	#R_TILEPRO_JOFFLONG_X1_PLT
 16

	)

3491 
	#R_TILEPRO_IMM8_X0
 17

	)

3492 
	#R_TILEPRO_IMM8_Y0
 18

	)

3493 
	#R_TILEPRO_IMM8_X1
 19

	)

3494 
	#R_TILEPRO_IMM8_Y1
 20

	)

3495 
	#R_TILEPRO_MT_IMM15_X1
 21

	)

3496 
	#R_TILEPRO_MF_IMM15_X1
 22

	)

3497 
	#R_TILEPRO_IMM16_X0
 23

	)

3498 
	#R_TILEPRO_IMM16_X1
 24

	)

3499 
	#R_TILEPRO_IMM16_X0_LO
 25

	)

3500 
	#R_TILEPRO_IMM16_X1_LO
 26

	)

3501 
	#R_TILEPRO_IMM16_X0_HI
 27

	)

3502 
	#R_TILEPRO_IMM16_X1_HI
 28

	)

3503 
	#R_TILEPRO_IMM16_X0_HA
 29

	)

3504 
	#R_TILEPRO_IMM16_X1_HA
 30

	)

3505 
	#R_TILEPRO_IMM16_X0_PCREL
 31

	)

3506 
	#R_TILEPRO_IMM16_X1_PCREL
 32

	)

3507 
	#R_TILEPRO_IMM16_X0_LO_PCREL
 33

	)

3508 
	#R_TILEPRO_IMM16_X1_LO_PCREL
 34

	)

3509 
	#R_TILEPRO_IMM16_X0_HI_PCREL
 35

	)

3510 
	#R_TILEPRO_IMM16_X1_HI_PCREL
 36

	)

3511 
	#R_TILEPRO_IMM16_X0_HA_PCREL
 37

	)

3512 
	#R_TILEPRO_IMM16_X1_HA_PCREL
 38

	)

3513 
	#R_TILEPRO_IMM16_X0_GOT
 39

	)

3514 
	#R_TILEPRO_IMM16_X1_GOT
 40

	)

3515 
	#R_TILEPRO_IMM16_X0_GOT_LO
 41

	)

3516 
	#R_TILEPRO_IMM16_X1_GOT_LO
 42

	)

3517 
	#R_TILEPRO_IMM16_X0_GOT_HI
 43

	)

3518 
	#R_TILEPRO_IMM16_X1_GOT_HI
 44

	)

3519 
	#R_TILEPRO_IMM16_X0_GOT_HA
 45

	)

3520 
	#R_TILEPRO_IMM16_X1_GOT_HA
 46

	)

3521 
	#R_TILEPRO_MMSTART_X0
 47

	)

3522 
	#R_TILEPRO_MMEND_X0
 48

	)

3523 
	#R_TILEPRO_MMSTART_X1
 49

	)

3524 
	#R_TILEPRO_MMEND_X1
 50

	)

3525 
	#R_TILEPRO_SHAMT_X0
 51

	)

3526 
	#R_TILEPRO_SHAMT_X1
 52

	)

3527 
	#R_TILEPRO_SHAMT_Y0
 53

	)

3528 
	#R_TILEPRO_SHAMT_Y1
 54

	)

3529 
	#R_TILEPRO_DEST_IMM8_X1
 55

	)

3531 
	#R_TILEPRO_TLS_GD_CALL
 60

	)

3532 
	#R_TILEPRO_IMM8_X0_TLS_GD_ADD
 61

	)

3533 
	#R_TILEPRO_IMM8_X1_TLS_GD_ADD
 62

	)

3534 
	#R_TILEPRO_IMM8_Y0_TLS_GD_ADD
 63

	)

3535 
	#R_TILEPRO_IMM8_Y1_TLS_GD_ADD
 64

	)

3536 
	#R_TILEPRO_TLS_IE_LOAD
 65

	)

3537 
	#R_TILEPRO_IMM16_X0_TLS_GD
 66

	)

3538 
	#R_TILEPRO_IMM16_X1_TLS_GD
 67

	)

3539 
	#R_TILEPRO_IMM16_X0_TLS_GD_LO
 68

	)

3540 
	#R_TILEPRO_IMM16_X1_TLS_GD_LO
 69

	)

3541 
	#R_TILEPRO_IMM16_X0_TLS_GD_HI
 70

	)

3542 
	#R_TILEPRO_IMM16_X1_TLS_GD_HI
 71

	)

3543 
	#R_TILEPRO_IMM16_X0_TLS_GD_HA
 72

	)

3544 
	#R_TILEPRO_IMM16_X1_TLS_GD_HA
 73

	)

3545 
	#R_TILEPRO_IMM16_X0_TLS_IE
 74

	)

3546 
	#R_TILEPRO_IMM16_X1_TLS_IE
 75

	)

3547 
	#R_TILEPRO_IMM16_X0_TLS_IE_LO
 76

	)

3548 
	#R_TILEPRO_IMM16_X1_TLS_IE_LO
 77

	)

3549 
	#R_TILEPRO_IMM16_X0_TLS_IE_HI
 78

	)

3550 
	#R_TILEPRO_IMM16_X1_TLS_IE_HI
 79

	)

3551 
	#R_TILEPRO_IMM16_X0_TLS_IE_HA
 80

	)

3552 
	#R_TILEPRO_IMM16_X1_TLS_IE_HA
 81

	)

3553 
	#R_TILEPRO_TLS_DTPMOD32
 82

	)

3554 
	#R_TILEPRO_TLS_DTPOFF32
 83

	)

3555 
	#R_TILEPRO_TLS_TPOFF32
 84

	)

3556 
	#R_TILEPRO_IMM16_X0_TLS_LE
 85

	)

3557 
	#R_TILEPRO_IMM16_X1_TLS_LE
 86

	)

3558 
	#R_TILEPRO_IMM16_X0_TLS_LE_LO
 87

	)

3559 
	#R_TILEPRO_IMM16_X1_TLS_LE_LO
 88

	)

3560 
	#R_TILEPRO_IMM16_X0_TLS_LE_HI
 89

	)

3561 
	#R_TILEPRO_IMM16_X1_TLS_LE_HI
 90

	)

3562 
	#R_TILEPRO_IMM16_X0_TLS_LE_HA
 91

	)

3563 
	#R_TILEPRO_IMM16_X1_TLS_LE_HA
 92

	)

3565 
	#R_TILEPRO_GNU_VTINHERIT
 128

	)

3566 
	#R_TILEPRO_GNU_VTENTRY
 129

	)

3568 
	#R_TILEPRO_NUM
 130

	)

3572 
	#R_TILEGX_NONE
 0

	)

3573 
	#R_TILEGX_64
 1

	)

3574 
	#R_TILEGX_32
 2

	)

3575 
	#R_TILEGX_16
 3

	)

3576 
	#R_TILEGX_8
 4

	)

3577 
	#R_TILEGX_64_PCREL
 5

	)

3578 
	#R_TILEGX_32_PCREL
 6

	)

3579 
	#R_TILEGX_16_PCREL
 7

	)

3580 
	#R_TILEGX_8_PCREL
 8

	)

3581 
	#R_TILEGX_HW0
 9

	)

3582 
	#R_TILEGX_HW1
 10

	)

3583 
	#R_TILEGX_HW2
 11

	)

3584 
	#R_TILEGX_HW3
 12

	)

3585 
	#R_TILEGX_HW0_LAST
 13

	)

3586 
	#R_TILEGX_HW1_LAST
 14

	)

3587 
	#R_TILEGX_HW2_LAST
 15

	)

3588 
	#R_TILEGX_COPY
 16

	)

3589 
	#R_TILEGX_GLOB_DAT
 17

	)

3590 
	#R_TILEGX_JMP_SLOT
 18

	)

3591 
	#R_TILEGX_RELATIVE
 19

	)

3592 
	#R_TILEGX_BROFF_X1
 20

	)

3593 
	#R_TILEGX_JUMPOFF_X1
 21

	)

3594 
	#R_TILEGX_JUMPOFF_X1_PLT
 22

	)

3595 
	#R_TILEGX_IMM8_X0
 23

	)

3596 
	#R_TILEGX_IMM8_Y0
 24

	)

3597 
	#R_TILEGX_IMM8_X1
 25

	)

3598 
	#R_TILEGX_IMM8_Y1
 26

	)

3599 
	#R_TILEGX_DEST_IMM8_X1
 27

	)

3600 
	#R_TILEGX_MT_IMM14_X1
 28

	)

3601 
	#R_TILEGX_MF_IMM14_X1
 29

	)

3602 
	#R_TILEGX_MMSTART_X0
 30

	)

3603 
	#R_TILEGX_MMEND_X0
 31

	)

3604 
	#R_TILEGX_SHAMT_X0
 32

	)

3605 
	#R_TILEGX_SHAMT_X1
 33

	)

3606 
	#R_TILEGX_SHAMT_Y0
 34

	)

3607 
	#R_TILEGX_SHAMT_Y1
 35

	)

3608 
	#R_TILEGX_IMM16_X0_HW0
 36

	)

3609 
	#R_TILEGX_IMM16_X1_HW0
 37

	)

3610 
	#R_TILEGX_IMM16_X0_HW1
 38

	)

3611 
	#R_TILEGX_IMM16_X1_HW1
 39

	)

3612 
	#R_TILEGX_IMM16_X0_HW2
 40

	)

3613 
	#R_TILEGX_IMM16_X1_HW2
 41

	)

3614 
	#R_TILEGX_IMM16_X0_HW3
 42

	)

3615 
	#R_TILEGX_IMM16_X1_HW3
 43

	)

3616 
	#R_TILEGX_IMM16_X0_HW0_LAST
 44

	)

3617 
	#R_TILEGX_IMM16_X1_HW0_LAST
 45

	)

3618 
	#R_TILEGX_IMM16_X0_HW1_LAST
 46

	)

3619 
	#R_TILEGX_IMM16_X1_HW1_LAST
 47

	)

3620 
	#R_TILEGX_IMM16_X0_HW2_LAST
 48

	)

3621 
	#R_TILEGX_IMM16_X1_HW2_LAST
 49

	)

3622 
	#R_TILEGX_IMM16_X0_HW0_PCREL
 50

	)

3623 
	#R_TILEGX_IMM16_X1_HW0_PCREL
 51

	)

3624 
	#R_TILEGX_IMM16_X0_HW1_PCREL
 52

	)

3625 
	#R_TILEGX_IMM16_X1_HW1_PCREL
 53

	)

3626 
	#R_TILEGX_IMM16_X0_HW2_PCREL
 54

	)

3627 
	#R_TILEGX_IMM16_X1_HW2_PCREL
 55

	)

3628 
	#R_TILEGX_IMM16_X0_HW3_PCREL
 56

	)

3629 
	#R_TILEGX_IMM16_X1_HW3_PCREL
 57

	)

3630 
	#R_TILEGX_IMM16_X0_HW0_LAST_PCREL
 58

	)

3631 
	#R_TILEGX_IMM16_X1_HW0_LAST_PCREL
 59

	)

3632 
	#R_TILEGX_IMM16_X0_HW1_LAST_PCREL
 60

	)

3633 
	#R_TILEGX_IMM16_X1_HW1_LAST_PCREL
 61

	)

3634 
	#R_TILEGX_IMM16_X0_HW2_LAST_PCREL
 62

	)

3635 
	#R_TILEGX_IMM16_X1_HW2_LAST_PCREL
 63

	)

3636 
	#R_TILEGX_IMM16_X0_HW0_GOT
 64

	)

3637 
	#R_TILEGX_IMM16_X1_HW0_GOT
 65

	)

3638 
	#R_TILEGX_IMM16_X0_HW0_PLT_PCREL
 66

	)

3639 
	#R_TILEGX_IMM16_X1_HW0_PLT_PCREL
 67

	)

3640 
	#R_TILEGX_IMM16_X0_HW1_PLT_PCREL
 68

	)

3641 
	#R_TILEGX_IMM16_X1_HW1_PLT_PCREL
 69

	)

3642 
	#R_TILEGX_IMM16_X0_HW2_PLT_PCREL
 70

	)

3643 
	#R_TILEGX_IMM16_X1_HW2_PLT_PCREL
 71

	)

3644 
	#R_TILEGX_IMM16_X0_HW0_LAST_GOT
 72

	)

3645 
	#R_TILEGX_IMM16_X1_HW0_LAST_GOT
 73

	)

3646 
	#R_TILEGX_IMM16_X0_HW1_LAST_GOT
 74

	)

3647 
	#R_TILEGX_IMM16_X1_HW1_LAST_GOT
 75

	)

3648 
	#R_TILEGX_IMM16_X0_HW3_PLT_PCREL
 76

	)

3649 
	#R_TILEGX_IMM16_X1_HW3_PLT_PCREL
 77

	)

3650 
	#R_TILEGX_IMM16_X0_HW0_TLS_GD
 78

	)

3651 
	#R_TILEGX_IMM16_X1_HW0_TLS_GD
 79

	)

3652 
	#R_TILEGX_IMM16_X0_HW0_TLS_LE
 80

	)

3653 
	#R_TILEGX_IMM16_X1_HW0_TLS_LE
 81

	)

3654 
	#R_TILEGX_IMM16_X0_HW0_LAST_TLS_LE
 82

	)

3655 
	#R_TILEGX_IMM16_X1_HW0_LAST_TLS_LE
 83

	)

3656 
	#R_TILEGX_IMM16_X0_HW1_LAST_TLS_LE
 84

	)

3657 
	#R_TILEGX_IMM16_X1_HW1_LAST_TLS_LE
 85

	)

3658 
	#R_TILEGX_IMM16_X0_HW0_LAST_TLS_GD
 86

	)

3659 
	#R_TILEGX_IMM16_X1_HW0_LAST_TLS_GD
 87

	)

3660 
	#R_TILEGX_IMM16_X0_HW1_LAST_TLS_GD
 88

	)

3661 
	#R_TILEGX_IMM16_X1_HW1_LAST_TLS_GD
 89

	)

3663 
	#R_TILEGX_IMM16_X0_HW0_TLS_IE
 92

	)

3664 
	#R_TILEGX_IMM16_X1_HW0_TLS_IE
 93

	)

3665 
	#R_TILEGX_IMM16_X0_HW0_LAST_PLT_PCREL
 94

	)

3666 
	#R_TILEGX_IMM16_X1_HW0_LAST_PLT_PCREL
 95

	)

3667 
	#R_TILEGX_IMM16_X0_HW1_LAST_PLT_PCREL
 96

	)

3668 
	#R_TILEGX_IMM16_X1_HW1_LAST_PLT_PCREL
 97

	)

3669 
	#R_TILEGX_IMM16_X0_HW2_LAST_PLT_PCREL
 98

	)

3670 
	#R_TILEGX_IMM16_X1_HW2_LAST_PLT_PCREL
 99

	)

3671 
	#R_TILEGX_IMM16_X0_HW0_LAST_TLS_IE
 100

	)

3672 
	#R_TILEGX_IMM16_X1_HW0_LAST_TLS_IE
 101

	)

3673 
	#R_TILEGX_IMM16_X0_HW1_LAST_TLS_IE
 102

	)

3674 
	#R_TILEGX_IMM16_X1_HW1_LAST_TLS_IE
 103

	)

3676 
	#R_TILEGX_TLS_DTPMOD64
 106

	)

3677 
	#R_TILEGX_TLS_DTPOFF64
 107

	)

3678 
	#R_TILEGX_TLS_TPOFF64
 108

	)

3679 
	#R_TILEGX_TLS_DTPMOD32
 109

	)

3680 
	#R_TILEGX_TLS_DTPOFF32
 110

	)

3681 
	#R_TILEGX_TLS_TPOFF32
 111

	)

3682 
	#R_TILEGX_TLS_GD_CALL
 112

	)

3683 
	#R_TILEGX_IMM8_X0_TLS_GD_ADD
 113

	)

3684 
	#R_TILEGX_IMM8_X1_TLS_GD_ADD
 114

	)

3685 
	#R_TILEGX_IMM8_Y0_TLS_GD_ADD
 115

	)

3686 
	#R_TILEGX_IMM8_Y1_TLS_GD_ADD
 116

	)

3687 
	#R_TILEGX_TLS_IE_LOAD
 117

	)

3688 
	#R_TILEGX_IMM8_X0_TLS_ADD
 118

	)

3689 
	#R_TILEGX_IMM8_X1_TLS_ADD
 119

	)

3690 
	#R_TILEGX_IMM8_Y0_TLS_ADD
 120

	)

3691 
	#R_TILEGX_IMM8_Y1_TLS_ADD
 121

	)

3693 
	#R_TILEGX_GNU_VTINHERIT
 128

	)

3694 
	#R_TILEGX_GNU_VTENTRY
 129

	)

3696 
	#R_TILEGX_NUM
 130

	)

3699 
	#EF_RISCV_RVC
 0x0001

	)

3700 
	#EF_RISCV_FLOAT_ABI
 0x0006

	)

3701 
	#EF_RISCV_FLOAT_ABI_SOFT
 0x0000

	)

3702 
	#EF_RISCV_FLOAT_ABI_SINGLE
 0x0002

	)

3703 
	#EF_RISCV_FLOAT_ABI_DOUBLE
 0x0004

	)

3704 
	#EF_RISCV_FLOAT_ABI_QUAD
 0x0006

	)

3707 
	#R_RISCV_NONE
 0

	)

3708 
	#R_RISCV_32
 1

	)

3709 
	#R_RISCV_64
 2

	)

3710 
	#R_RISCV_RELATIVE
 3

	)

3711 
	#R_RISCV_COPY
 4

	)

3712 
	#R_RISCV_JUMP_SLOT
 5

	)

3713 
	#R_RISCV_TLS_DTPMOD32
 6

	)

3714 
	#R_RISCV_TLS_DTPMOD64
 7

	)

3715 
	#R_RISCV_TLS_DTPREL32
 8

	)

3716 
	#R_RISCV_TLS_DTPREL64
 9

	)

3717 
	#R_RISCV_TLS_TPREL32
 10

	)

3718 
	#R_RISCV_TLS_TPREL64
 11

	)

3722 
	#R_BPF_NONE
 0

	)

3723 
	#R_BPF_MAP_FD
 1

	)

3727 
	#R_METAG_HIADDR16
 0

	)

3728 
	#R_METAG_LOADDR16
 1

	)

3729 
	#R_METAG_ADDR32
 2

	)

3730 
	#R_METAG_NONE
 3

	)

3731 
	#R_METAG_RELBRANCH
 4

	)

3732 
	#R_METAG_GETSETOFF
 5

	)

3735 
	#R_METAG_REG32OP1
 6

	)

3736 
	#R_METAG_REG32OP2
 7

	)

3737 
	#R_METAG_REG32OP3
 8

	)

3738 
	#R_METAG_REG16OP1
 9

	)

3739 
	#R_METAG_REG16OP2
 10

	)

3740 
	#R_METAG_REG16OP3
 11

	)

3741 
	#R_METAG_REG32OP4
 12

	)

3743 
	#R_METAG_HIOG
 13

	)

3744 
	#R_METAG_LOOG
 14

	)

3746 
	#R_METAG_REL8
 15

	)

3747 
	#R_METAG_REL16
 16

	)

3750 
	#R_METAG_GNU_VTINHERIT
 30

	)

3751 
	#R_METAG_GNU_VTENTRY
 31

	)

3754 
	#R_METAG_HI16_GOTOFF
 32

	)

3755 
	#R_METAG_LO16_GOTOFF
 33

	)

3756 
	#R_METAG_GETSET_GOTOFF
 34

	)

3757 
	#R_METAG_GETSET_GOT
 35

	)

3758 
	#R_METAG_HI16_GOTPC
 36

	)

3759 
	#R_METAG_LO16_GOTPC
 37

	)

3760 
	#R_METAG_HI16_PLT
 38

	)

3761 
	#R_METAG_LO16_PLT
 39

	)

3762 
	#R_METAG_RELBRANCH_PLT
 40

	)

3763 
	#R_METAG_GOTOFF
 41

	)

3764 
	#R_METAG_PLT
 42

	)

3765 
	#R_METAG_COPY
 43

	)

3766 
	#R_METAG_JMP_SLOT
 44

	)

3767 
	#R_METAG_RELATIVE
 45

	)

3768 
	#R_METAG_GLOB_DAT
 46

	)

3771 
	#R_METAG_TLS_GD
 47

	)

3772 
	#R_METAG_TLS_LDM
 48

	)

3773 
	#R_METAG_TLS_LDO_HI16
 49

	)

3774 
	#R_METAG_TLS_LDO_LO16
 50

	)

3775 
	#R_METAG_TLS_LDO
 51

	)

3776 
	#R_METAG_TLS_IE
 52

	)

3777 
	#R_METAG_TLS_IENONPIC
 53

	)

3778 
	#R_METAG_TLS_IENONPIC_HI16
 54

	)

3779 
	#R_METAG_TLS_IENONPIC_LO16
 55

	)

3780 
	#R_METAG_TLS_TPOFF
 56

	)

3781 
	#R_METAG_TLS_DTPMOD
 57

	)

3782 
	#R_METAG_TLS_DTPOFF
 58

	)

3783 
	#R_METAG_TLS_LE
 59

	)

3784 
	#R_METAG_TLS_LE_HI16
 60

	)

3785 
	#R_METAG_TLS_LE_LO16
 61

	)

3787 
	g__END_DECLS


	@/usr/include/errno.h

22 #i‚def 
_ERRNO_H


23 
	#_ERRNO_H
 1

	)

25 
	~<„©uªs.h
>

28 
	~<bôs/î∫o.h
>

32 #i‚de‡
__ASSEMBLER__


34 
__BEGIN_DECLS


37 *
	$__î∫o_loˇti⁄
 (Ë
__THROW
 
__©åibuã_c⁄°__
;

38 
	#î∫o
 (*
	`__î∫o_loˇti⁄
 ())

	)

40 #ifde‡
__USE_GNU


45 *
¥ogøm_övoˇti⁄_«me
;

46 *
¥ogøm_övoˇti⁄_sh‹t_«me
;

50 #i‚de‡
__îr‹_t_deföed


51 
	#__îr‹_t_deföed
 1

	)

52 
	tîr‹_t
;

57 
__END_DECLS


	@/usr/include/features.h

18 #i‚def 
_FEATURES_H


19 
	#_FEATURES_H
 1

	)

119 #unde‡
__USE_ISOC11


120 #unde‡
__USE_ISOC99


121 #unde‡
__USE_ISOC95


122 #unde‡
__USE_ISOCXX11


123 #unde‡
__USE_POSIX


124 #unde‡
__USE_POSIX2


125 #unde‡
__USE_POSIX199309


126 #unde‡
__USE_POSIX199506


127 #unde‡
__USE_XOPEN


128 #unde‡
__USE_XOPEN_EXTENDED


129 #unde‡
__USE_UNIX98


130 #unde‡
__USE_XOPEN2K


131 #unde‡
__USE_XOPEN2KXSI


132 #unde‡
__USE_XOPEN2K8


133 #unde‡
__USE_XOPEN2K8XSI


134 #unde‡
__USE_LARGEFILE


135 #unde‡
__USE_LARGEFILE64


136 #unde‡
__USE_FILE_OFFSET64


137 #unde‡
__USE_MISC


138 #unde‡
__USE_ATFILE


139 #unde‡
__USE_GNU


140 #unde‡
__USE_FORTIFY_LEVEL


141 #unde‡
__KERNEL_STRICT_NAMES


142 #unde‡
__GLIBC_USE_DEPRECATED_GETS


146 #i‚de‡
_LOOSE_KERNEL_NAMES


147 
	#__KERNEL_STRICT_NAMES


	)

157 #i‡
deföed
 
__GNUC__
 && deföed 
__GNUC_MINOR__


158 
	#__GNUC_PREREQ
(
maj
, 
mö
) \

159 ((
__GNUC__
 << 16Ë+ 
__GNUC_MINOR__
 >((
maj
Ë<< 16Ë+ (
mö
))

	)

161 
	#__GNUC_PREREQ
(
maj
, 
mö
Ë0

	)

168 #i‡
deföed
 
__˛™g_maj‹__
 && deföed 
__˛™g_mö‹__


169 
	#__glibc_˛™g_¥îeq
(
maj
, 
mö
) \

170 ((
__˛™g_maj‹__
 << 16Ë+ 
__˛™g_mö‹__
 >((
maj
Ë<< 16Ë+ (
mö
))

	)

172 
	#__glibc_˛™g_¥îeq
(
maj
, 
mö
Ë0

	)

176 
	#__GLIBC_USE
(
F
Ë
__GLIBC_USE_
 ## 
	)
F

182 #i‡(
deföed
 
_BSD_SOURCE
 || deföed 
_SVID_SOURCE
) \

183 && !
deföed
 
	g_DEFAULT_SOURCE


185 #unde‡
_DEFAULT_SOURCE


186 
	#_DEFAULT_SOURCE
 1

	)

190 #ifde‡
_GNU_SOURCE


191 #unde‡
_ISOC95_SOURCE


192 
	#_ISOC95_SOURCE
 1

	)

193 #unde‡
_ISOC99_SOURCE


194 
	#_ISOC99_SOURCE
 1

	)

195 #unde‡
_ISOC11_SOURCE


196 
	#_ISOC11_SOURCE
 1

	)

197 #unde‡
_POSIX_SOURCE


198 
	#_POSIX_SOURCE
 1

	)

199 #unde‡
_POSIX_C_SOURCE


200 
	#_POSIX_C_SOURCE
 200809L

	)

201 #unde‡
_XOPEN_SOURCE


202 
	#_XOPEN_SOURCE
 700

	)

203 #unde‡
_XOPEN_SOURCE_EXTENDED


204 
	#_XOPEN_SOURCE_EXTENDED
 1

	)

205 #unde‡
_LARGEFILE64_SOURCE


206 
	#_LARGEFILE64_SOURCE
 1

	)

207 #unde‡
_DEFAULT_SOURCE


208 
	#_DEFAULT_SOURCE
 1

	)

209 #unde‡
_ATFILE_SOURCE


210 
	#_ATFILE_SOURCE
 1

	)

215 #i‡(
deföed
 
_DEFAULT_SOURCE
 \

216 || (!
deföed
 
	g__STRICT_ANSI__
 \

217 && !
deföed
 
	g_ISOC99_SOURCE
 \

218 && !
deföed
 
	g_POSIX_SOURCE
 && !deföed 
	g_POSIX_C_SOURCE
 \

219 && !
deföed
 
	g_XOPEN_SOURCE
))

220 #unde‡
_DEFAULT_SOURCE


221 
	#_DEFAULT_SOURCE
 1

	)

225 #i‡(
deföed
 
_ISOC11_SOURCE
 \

226 || (
deföed
 
	g__STDC_VERSION__
 && __STDC_VERSION__ >= 201112L))

227 
	#__USE_ISOC11
 1

	)

231 #i‡(
deföed
 
_ISOC99_SOURCE
 || deföed 
_ISOC11_SOURCE
 \

232 || (
deföed
 
__STDC_VERSION__
 && __STDC_VERSION__ >= 199901L))

233 
	#__USE_ISOC99
 1

	)

237 #i‡(
deföed
 
_ISOC99_SOURCE
 || deföed 
_ISOC11_SOURCE
 \

238 || (
deföed
 
__STDC_VERSION__
 && __STDC_VERSION__ >= 199409L))

239 
	#__USE_ISOC95
 1

	)

242 #ifde‡
__˝lu•lus


244 #i‡
__˝lu•lus
 >= 201703L

245 
	#__USE_ISOC11
 1

	)

249 #i‡
__˝lu•lus
 >201103L || 
deföed
 
__GXX_EXPERIMENTAL_CXX0X__


250 
	#__USE_ISOCXX11
 1

	)

251 
	#__USE_ISOC99
 1

	)

258 #ifde‡
_DEFAULT_SOURCE


259 #i‡!
deföed
 
_POSIX_SOURCE
 && !deföed 
_POSIX_C_SOURCE


260 
	#__USE_POSIX_IMPLICITLY
 1

	)

262 #unde‡
_POSIX_SOURCE


263 
	#_POSIX_SOURCE
 1

	)

264 #unde‡
_POSIX_C_SOURCE


265 
	#_POSIX_C_SOURCE
 200809L

	)

268 #i‡((!
deföed
 
__STRICT_ANSI__
 \

269 || (
deföed
 
_XOPEN_SOURCE
 && (_XOPEN_SOURCE - 0) >= 500)) \

270 && !
deföed
 
_POSIX_SOURCE
 && !deföed 
_POSIX_C_SOURCE
)

271 
	#_POSIX_SOURCE
 1

	)

272 #i‡
deföed
 
_XOPEN_SOURCE
 && (_XOPEN_SOURCE - 0) < 500

273 
	#_POSIX_C_SOURCE
 2

	)

274 #ñi‡
deföed
 
_XOPEN_SOURCE
 && (_XOPEN_SOURCE - 0) < 600

275 
	#_POSIX_C_SOURCE
 199506L

	)

276 #ñi‡
deföed
 
_XOPEN_SOURCE
 && (_XOPEN_SOURCE - 0) < 700

277 
	#_POSIX_C_SOURCE
 200112L

	)

279 
	#_POSIX_C_SOURCE
 200809L

	)

281 
	#__USE_POSIX_IMPLICITLY
 1

	)

290 #i‡((!
deföed
 
_POSIX_C_SOURCE
 || (_POSIX_C_SOURCE - 0) < 199506L) \

291 && (
deföed
 
_REENTRANT
 || deföed 
_THREAD_SAFE
))

292 
	#_POSIX_SOURCE
 1

	)

293 #unde‡
_POSIX_C_SOURCE


294 
	#_POSIX_C_SOURCE
 199506L

	)

297 #i‡(
deföed
 
_POSIX_SOURCE
 \

298 || (
deföed
 
_POSIX_C_SOURCE
 && _POSIX_C_SOURCE >= 1) \

299 || 
deföed
 
_XOPEN_SOURCE
)

300 
	#__USE_POSIX
 1

	)

303 #i‡
deföed
 
_POSIX_C_SOURCE
 && _POSIX_C_SOURCE >2 || deföed 
_XOPEN_SOURCE


304 
	#__USE_POSIX2
 1

	)

307 #i‡
deföed
 
_POSIX_C_SOURCE
 && (_POSIX_C_SOURCE - 0) >= 199309L

308 
	#__USE_POSIX199309
 1

	)

311 #i‡
deföed
 
_POSIX_C_SOURCE
 && (_POSIX_C_SOURCE - 0) >= 199506L

312 
	#__USE_POSIX199506
 1

	)

315 #i‡
deföed
 
_POSIX_C_SOURCE
 && (_POSIX_C_SOURCE - 0) >= 200112L

316 
	#__USE_XOPEN2K
 1

	)

317 #unde‡
__USE_ISOC95


318 
	#__USE_ISOC95
 1

	)

319 #unde‡
__USE_ISOC99


320 
	#__USE_ISOC99
 1

	)

323 #i‡
deföed
 
_POSIX_C_SOURCE
 && (_POSIX_C_SOURCE - 0) >= 200809L

324 
	#__USE_XOPEN2K8
 1

	)

325 #unde‡
_ATFILE_SOURCE


326 
	#_ATFILE_SOURCE
 1

	)

329 #ifdef 
_XOPEN_SOURCE


330 
	#__USE_XOPEN
 1

	)

331 #i‡(
_XOPEN_SOURCE
 - 0) >= 500

332 
	#__USE_XOPEN_EXTENDED
 1

	)

333 
	#__USE_UNIX98
 1

	)

334 #unde‡
_LARGEFILE_SOURCE


335 
	#_LARGEFILE_SOURCE
 1

	)

336 #i‡(
_XOPEN_SOURCE
 - 0) >= 600

337 #i‡(
_XOPEN_SOURCE
 - 0) >= 700

338 
	#__USE_XOPEN2K8
 1

	)

339 
	#__USE_XOPEN2K8XSI
 1

	)

341 
	#__USE_XOPEN2K
 1

	)

342 
	#__USE_XOPEN2KXSI
 1

	)

343 #unde‡
__USE_ISOC95


344 
	#__USE_ISOC95
 1

	)

345 #unde‡
__USE_ISOC99


346 
	#__USE_ISOC99
 1

	)

349 #ifde‡
_XOPEN_SOURCE_EXTENDED


350 
	#__USE_XOPEN_EXTENDED
 1

	)

355 #ifde‡
_LARGEFILE_SOURCE


356 
	#__USE_LARGEFILE
 1

	)

359 #ifde‡
_LARGEFILE64_SOURCE


360 
	#__USE_LARGEFILE64
 1

	)

363 #i‡
deföed
 
_FILE_OFFSET_BITS
 && _FILE_OFFSET_BITS == 64

364 
	#__USE_FILE_OFFSET64
 1

	)

367 #i‡
deföed
 
_DEFAULT_SOURCE


368 
	#__USE_MISC
 1

	)

371 #ifdef 
_ATFILE_SOURCE


372 
	#__USE_ATFILE
 1

	)

375 #ifdef 
_GNU_SOURCE


376 
	#__USE_GNU
 1

	)

379 #i‡
deföed
 
_FORTIFY_SOURCE
 && _FORTIFY_SOURCE > 0 \

380 && 
__GNUC_PREREQ
 (4, 1Ë&& 
deföed
 
	g__OPTIMIZE__
 && __OPTIMIZE__ > 0

381 #i‡
_FORTIFY_SOURCE
 > 1

382 
	#__USE_FORTIFY_LEVEL
 2

	)

384 
	#__USE_FORTIFY_LEVEL
 1

	)

387 
	#__USE_FORTIFY_LEVEL
 0

	)

394 #i‡
deföed
 
__˝lu•lus
 ? __˝lu•lu†>201402L : deföed 
__USE_ISOC11


395 
	#__GLIBC_USE_DEPRECATED_GETS
 0

	)

397 
	#__GLIBC_USE_DEPRECATED_GETS
 1

	)

402 
	~<°dc-¥edef.h
>

410 #unde‡
__GNU_LIBRARY__


411 
	#__GNU_LIBRARY__
 6

	)

415 
	#__GLIBC__
 2

	)

416 
	#__GLIBC_MINOR__
 27

	)

418 
	#__GLIBC_PREREQ
(
maj
, 
mö
) \

419 ((
__GLIBC__
 << 16Ë+ 
__GLIBC_MINOR__
 >((
maj
Ë<< 16Ë+ (
mö
))

	)

422 #i‚de‡
__ASSEMBLER__


423 #i‚de‡
_SYS_CDEFS_H


424 
	~<sys/cdefs.h
>

429 #i‡
deföed
 
__USE_FILE_OFFSET64
 && !deföed 
__REDIRECT


430 
	#__USE_LARGEFILE
 1

	)

431 
	#__USE_LARGEFILE64
 1

	)

437 #i‡
__GNUC_PREREQ
 (2, 7Ë&& 
deföed
 
__OPTIMIZE__
 \

438 && !
deföed
 
	g__OPTIMIZE_SIZE__
 && !deföed 
	g__NO_INLINE__
 \

439 && 
deföed
 
	g__exã∫_ölöe


440 
	#__USE_EXTERN_INLINES
 1

	)

448 
	~<gnu/°ubs.h
>

	@/usr/include/inttypes.h

22 #i‚de‡
_INTTYPES_H


23 
	#_INTTYPES_H
 1

	)

25 
	~<„©uªs.h
>

27 
	~<°döt.h
>

30 #i‚de‡
____gwch¨_t_deföed


31 #ifde‡
__˝lu•lus


32 
	#__gwch¨_t
 
wch¨_t


	)

33 #ñi‡
deföed
 
__WCHAR_TYPE__


34 
__WCHAR_TYPE__
 
	t__gwch¨_t
;

36 
	#__√ed_wch¨_t


	)

37 
	~<°ddef.h
>

38 
wch¨_t
 
	t__gwch¨_t
;

40 
	#____gwch¨_t_deföed
 1

	)

43 #i‡
__WORDSIZE
 == 64

44 
	#__PRI64_PREFIX
 "l"

	)

45 
	#__PRIPTR_PREFIX
 "l"

	)

47 
	#__PRI64_PREFIX
 "Œ"

	)

48 
	#__PRIPTR_PREFIX


	)

54 
	#PRId8
 "d"

	)

55 
	#PRId16
 "d"

	)

56 
	#PRId32
 "d"

	)

57 
	#PRId64
 
__PRI64_PREFIX
 "d"

	)

59 
	#PRIdLEAST8
 "d"

	)

60 
	#PRIdLEAST16
 "d"

	)

61 
	#PRIdLEAST32
 "d"

	)

62 
	#PRIdLEAST64
 
__PRI64_PREFIX
 "d"

	)

64 
	#PRIdFAST8
 "d"

	)

65 
	#PRIdFAST16
 
__PRIPTR_PREFIX
 "d"

	)

66 
	#PRIdFAST32
 
__PRIPTR_PREFIX
 "d"

	)

67 
	#PRIdFAST64
 
__PRI64_PREFIX
 "d"

	)

70 
	#PRIi8
 "i"

	)

71 
	#PRIi16
 "i"

	)

72 
	#PRIi32
 "i"

	)

73 
	#PRIi64
 
__PRI64_PREFIX
 "i"

	)

75 
	#PRIiLEAST8
 "i"

	)

76 
	#PRIiLEAST16
 "i"

	)

77 
	#PRIiLEAST32
 "i"

	)

78 
	#PRIiLEAST64
 
__PRI64_PREFIX
 "i"

	)

80 
	#PRIiFAST8
 "i"

	)

81 
	#PRIiFAST16
 
__PRIPTR_PREFIX
 "i"

	)

82 
	#PRIiFAST32
 
__PRIPTR_PREFIX
 "i"

	)

83 
	#PRIiFAST64
 
__PRI64_PREFIX
 "i"

	)

86 
	#PRIo8
 "o"

	)

87 
	#PRIo16
 "o"

	)

88 
	#PRIo32
 "o"

	)

89 
	#PRIo64
 
__PRI64_PREFIX
 "o"

	)

91 
	#PRIoLEAST8
 "o"

	)

92 
	#PRIoLEAST16
 "o"

	)

93 
	#PRIoLEAST32
 "o"

	)

94 
	#PRIoLEAST64
 
__PRI64_PREFIX
 "o"

	)

96 
	#PRIoFAST8
 "o"

	)

97 
	#PRIoFAST16
 
__PRIPTR_PREFIX
 "o"

	)

98 
	#PRIoFAST32
 
__PRIPTR_PREFIX
 "o"

	)

99 
	#PRIoFAST64
 
__PRI64_PREFIX
 "o"

	)

102 
	#PRIu8
 "u"

	)

103 
	#PRIu16
 "u"

	)

104 
	#PRIu32
 "u"

	)

105 
	#PRIu64
 
__PRI64_PREFIX
 "u"

	)

107 
	#PRIuLEAST8
 "u"

	)

108 
	#PRIuLEAST16
 "u"

	)

109 
	#PRIuLEAST32
 "u"

	)

110 
	#PRIuLEAST64
 
__PRI64_PREFIX
 "u"

	)

112 
	#PRIuFAST8
 "u"

	)

113 
	#PRIuFAST16
 
__PRIPTR_PREFIX
 "u"

	)

114 
	#PRIuFAST32
 
__PRIPTR_PREFIX
 "u"

	)

115 
	#PRIuFAST64
 
__PRI64_PREFIX
 "u"

	)

118 
	#PRIx8
 "x"

	)

119 
	#PRIx16
 "x"

	)

120 
	#PRIx32
 "x"

	)

121 
	#PRIx64
 
__PRI64_PREFIX
 "x"

	)

123 
	#PRIxLEAST8
 "x"

	)

124 
	#PRIxLEAST16
 "x"

	)

125 
	#PRIxLEAST32
 "x"

	)

126 
	#PRIxLEAST64
 
__PRI64_PREFIX
 "x"

	)

128 
	#PRIxFAST8
 "x"

	)

129 
	#PRIxFAST16
 
__PRIPTR_PREFIX
 "x"

	)

130 
	#PRIxFAST32
 
__PRIPTR_PREFIX
 "x"

	)

131 
	#PRIxFAST64
 
__PRI64_PREFIX
 "x"

	)

134 
	#PRIX8
 "X"

	)

135 
	#PRIX16
 "X"

	)

136 
	#PRIX32
 "X"

	)

137 
	#PRIX64
 
__PRI64_PREFIX
 "X"

	)

139 
	#PRIXLEAST8
 "X"

	)

140 
	#PRIXLEAST16
 "X"

	)

141 
	#PRIXLEAST32
 "X"

	)

142 
	#PRIXLEAST64
 
__PRI64_PREFIX
 "X"

	)

144 
	#PRIXFAST8
 "X"

	)

145 
	#PRIXFAST16
 
__PRIPTR_PREFIX
 "X"

	)

146 
	#PRIXFAST32
 
__PRIPTR_PREFIX
 "X"

	)

147 
	#PRIXFAST64
 
__PRI64_PREFIX
 "X"

	)

151 
	#PRIdMAX
 
__PRI64_PREFIX
 "d"

	)

152 
	#PRIiMAX
 
__PRI64_PREFIX
 "i"

	)

153 
	#PRIoMAX
 
__PRI64_PREFIX
 "o"

	)

154 
	#PRIuMAX
 
__PRI64_PREFIX
 "u"

	)

155 
	#PRIxMAX
 
__PRI64_PREFIX
 "x"

	)

156 
	#PRIXMAX
 
__PRI64_PREFIX
 "X"

	)

160 
	#PRIdPTR
 
__PRIPTR_PREFIX
 "d"

	)

161 
	#PRIiPTR
 
__PRIPTR_PREFIX
 "i"

	)

162 
	#PRIoPTR
 
__PRIPTR_PREFIX
 "o"

	)

163 
	#PRIuPTR
 
__PRIPTR_PREFIX
 "u"

	)

164 
	#PRIxPTR
 
__PRIPTR_PREFIX
 "x"

	)

165 
	#PRIXPTR
 
__PRIPTR_PREFIX
 "X"

	)

171 
	#SCNd8
 "hhd"

	)

172 
	#SCNd16
 "hd"

	)

173 
	#SCNd32
 "d"

	)

174 
	#SCNd64
 
__PRI64_PREFIX
 "d"

	)

176 
	#SCNdLEAST8
 "hhd"

	)

177 
	#SCNdLEAST16
 "hd"

	)

178 
	#SCNdLEAST32
 "d"

	)

179 
	#SCNdLEAST64
 
__PRI64_PREFIX
 "d"

	)

181 
	#SCNdFAST8
 "hhd"

	)

182 
	#SCNdFAST16
 
__PRIPTR_PREFIX
 "d"

	)

183 
	#SCNdFAST32
 
__PRIPTR_PREFIX
 "d"

	)

184 
	#SCNdFAST64
 
__PRI64_PREFIX
 "d"

	)

187 
	#SCNi8
 "hhi"

	)

188 
	#SCNi16
 "hi"

	)

189 
	#SCNi32
 "i"

	)

190 
	#SCNi64
 
__PRI64_PREFIX
 "i"

	)

192 
	#SCNiLEAST8
 "hhi"

	)

193 
	#SCNiLEAST16
 "hi"

	)

194 
	#SCNiLEAST32
 "i"

	)

195 
	#SCNiLEAST64
 
__PRI64_PREFIX
 "i"

	)

197 
	#SCNiFAST8
 "hhi"

	)

198 
	#SCNiFAST16
 
__PRIPTR_PREFIX
 "i"

	)

199 
	#SCNiFAST32
 
__PRIPTR_PREFIX
 "i"

	)

200 
	#SCNiFAST64
 
__PRI64_PREFIX
 "i"

	)

203 
	#SCNu8
 "hhu"

	)

204 
	#SCNu16
 "hu"

	)

205 
	#SCNu32
 "u"

	)

206 
	#SCNu64
 
__PRI64_PREFIX
 "u"

	)

208 
	#SCNuLEAST8
 "hhu"

	)

209 
	#SCNuLEAST16
 "hu"

	)

210 
	#SCNuLEAST32
 "u"

	)

211 
	#SCNuLEAST64
 
__PRI64_PREFIX
 "u"

	)

213 
	#SCNuFAST8
 "hhu"

	)

214 
	#SCNuFAST16
 
__PRIPTR_PREFIX
 "u"

	)

215 
	#SCNuFAST32
 
__PRIPTR_PREFIX
 "u"

	)

216 
	#SCNuFAST64
 
__PRI64_PREFIX
 "u"

	)

219 
	#SCNo8
 "hho"

	)

220 
	#SCNo16
 "ho"

	)

221 
	#SCNo32
 "o"

	)

222 
	#SCNo64
 
__PRI64_PREFIX
 "o"

	)

224 
	#SCNoLEAST8
 "hho"

	)

225 
	#SCNoLEAST16
 "ho"

	)

226 
	#SCNoLEAST32
 "o"

	)

227 
	#SCNoLEAST64
 
__PRI64_PREFIX
 "o"

	)

229 
	#SCNoFAST8
 "hho"

	)

230 
	#SCNoFAST16
 
__PRIPTR_PREFIX
 "o"

	)

231 
	#SCNoFAST32
 
__PRIPTR_PREFIX
 "o"

	)

232 
	#SCNoFAST64
 
__PRI64_PREFIX
 "o"

	)

235 
	#SCNx8
 "hhx"

	)

236 
	#SCNx16
 "hx"

	)

237 
	#SCNx32
 "x"

	)

238 
	#SCNx64
 
__PRI64_PREFIX
 "x"

	)

240 
	#SCNxLEAST8
 "hhx"

	)

241 
	#SCNxLEAST16
 "hx"

	)

242 
	#SCNxLEAST32
 "x"

	)

243 
	#SCNxLEAST64
 
__PRI64_PREFIX
 "x"

	)

245 
	#SCNxFAST8
 "hhx"

	)

246 
	#SCNxFAST16
 
__PRIPTR_PREFIX
 "x"

	)

247 
	#SCNxFAST32
 
__PRIPTR_PREFIX
 "x"

	)

248 
	#SCNxFAST64
 
__PRI64_PREFIX
 "x"

	)

252 
	#SCNdMAX
 
__PRI64_PREFIX
 "d"

	)

253 
	#SCNiMAX
 
__PRI64_PREFIX
 "i"

	)

254 
	#SCNoMAX
 
__PRI64_PREFIX
 "o"

	)

255 
	#SCNuMAX
 
__PRI64_PREFIX
 "u"

	)

256 
	#SCNxMAX
 
__PRI64_PREFIX
 "x"

	)

259 
	#SCNdPTR
 
__PRIPTR_PREFIX
 "d"

	)

260 
	#SCNiPTR
 
__PRIPTR_PREFIX
 "i"

	)

261 
	#SCNoPTR
 
__PRIPTR_PREFIX
 "o"

	)

262 
	#SCNuPTR
 
__PRIPTR_PREFIX
 "u"

	)

263 
	#SCNxPTR
 
__PRIPTR_PREFIX
 "x"

	)

266 
	g__BEGIN_DECLS


268 #i‡
__WORDSIZE
 == 64

273 
	mquŸ
;

274 
	mªm
;

275 } 
	timaxdiv_t
;

282 
__exãnsi⁄__
 
	mquŸ
;

283 
__exãnsi⁄__
 
	mªm
;

284 } 
	timaxdiv_t
;

290 
ötmax_t
 
	$imaxabs
 (
ötmax_t
 
__n
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

293 
imaxdiv_t
 
	$imaxdiv
 (
ötmax_t
 
__numî
, i¡max_à
__díom
)

294 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

297 
ötmax_t
 
	$°πoimax
 (c⁄° *
__ª°ri˘
 
__≈å
,

298 **
__ª°ri˘
 
__íd±r
, 
__ba£
Ë
__THROW
;

301 
uötmax_t
 
	$°πoumax
 (c⁄° *
__ª°ri˘
 
__≈å
,

302 ** 
__ª°ri˘
 
__íd±r
, 
__ba£
Ë
__THROW
;

305 
ötmax_t
 
	$wc°oimax
 (c⁄° 
__gwch¨_t
 *
__ª°ri˘
 
__≈å
,

306 
__gwch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

307 
__THROW
;

310 
uötmax_t
 
	$wc°oumax
 (c⁄° 
__gwch¨_t
 *
__ª°ri˘
 
__≈å
,

311 
__gwch¨_t
 ** 
__ª°ri˘
 
__íd±r
, 
__ba£
)

312 
__THROW
;

314 #ifde‡
__USE_EXTERN_INLINES


316 #i‡
__WORDSIZE
 == 64

318 
	$__°πﬁ_öã∫Æ
 (c⁄° *
__ª°ri˘
 
__≈å
,

319 **
__ª°ri˘
 
__íd±r
,

320 
__ba£
, 
__group
)

321 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

323 
__exã∫_ölöe
 
ötmax_t


324 
	`__NTH
 (
	$°πoimax
 (c⁄° *
__ª°ri˘
 
≈å
, **__ª°ri˘ 
íd±r
,

325 
ba£
))

327  
	`__°πﬁ_öã∫Æ
 (
≈å
, 
íd±r
, 
ba£
, 0);

328 
	}
}

330 
	$__°πoul_öã∫Æ
 (c⁄° *
__ª°ri˘
 
__≈å
,

331 ** 
__ª°ri˘
 
__íd±r
,

332 
__ba£
, 
__group
)

333 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

335 
__exã∫_ölöe
 
uötmax_t


336 
	`__NTH
 (
	$°πoumax
 (c⁄° *
__ª°ri˘
 
≈å
, **__ª°ri˘ 
íd±r
,

337 
ba£
))

339  
	`__°πoul_öã∫Æ
 (
≈å
, 
íd±r
, 
ba£
, 0);

340 
	}
}

342 
	$__wc°ﬁ_öã∫Æ
 (c⁄° 
__gwch¨_t
 * 
__ª°ri˘
 
__≈å
,

343 
__gwch¨_t
 **
__ª°ri˘
 
__íd±r
,

344 
__ba£
, 
__group
)

345 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

347 
__exã∫_ölöe
 
ötmax_t


348 
	`__NTH
 (
	$wc°oimax
 (c⁄° 
__gwch¨_t
 *
__ª°ri˘
 
≈å
,

349 
__gwch¨_t
 **
__ª°ri˘
 
íd±r
, 
ba£
))

351  
	`__wc°ﬁ_öã∫Æ
 (
≈å
, 
íd±r
, 
ba£
, 0);

352 
	}
}

354 
	$__wc°oul_öã∫Æ
 (c⁄° 
__gwch¨_t
 *

355 
__ª°ri˘
 
__≈å
,

356 
__gwch¨_t
 **

357 
__ª°ri˘
 
__íd±r
,

358 
__ba£
, 
__group
)

359 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

361 
__exã∫_ölöe
 
uötmax_t


362 
	`__NTH
 (
	$wc°oumax
 (c⁄° 
__gwch¨_t
 *
__ª°ri˘
 
≈å
,

363 
__gwch¨_t
 **
__ª°ri˘
 
íd±r
, 
ba£
))

365  
	`__wc°oul_öã∫Æ
 (
≈å
, 
íd±r
, 
ba£
, 0);

366 
	}
}

370 
__exãnsi⁄__


371 
	$__°πﬁl_öã∫Æ
 (c⁄° *
__ª°ri˘
 
__≈å
,

372 **
__ª°ri˘
 
__íd±r
,

373 
__ba£
, 
__group
)

374 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

376 
__exã∫_ölöe
 
ötmax_t


377 
	`__NTH
 (
	$°πoimax
 (c⁄° *
__ª°ri˘
 
≈å
, **__ª°ri˘ 
íd±r
,

378 
ba£
))

380  
	`__°πﬁl_öã∫Æ
 (
≈å
, 
íd±r
, 
ba£
, 0);

381 
	}
}

383 
__exãnsi⁄__


384 
	$__°πouŒ_öã∫Æ
 (const *

385 
__ª°ri˘
 
__≈å
,

387 
__ª°ri˘
 
__íd±r
,

388 
__ba£
,

389 
__group
)

390 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

392 
__exã∫_ölöe
 
uötmax_t


393 
	`__NTH
 (
	$°πoumax
 (c⁄° *
__ª°ri˘
 
≈å
, **__ª°ri˘ 
íd±r
,

394 
ba£
))

396  
	`__°πouŒ_öã∫Æ
 (
≈å
, 
íd±r
, 
ba£
, 0);

397 
	}
}

399 
__exãnsi⁄__


400 
	$__wc°ﬁl_öã∫Æ
 (c⁄° 
__gwch¨_t
 *
__ª°ri˘
 
__≈å
,

401 
__gwch¨_t
 **
__ª°ri˘
 
__íd±r
,

402 
__ba£
, 
__group
)

403 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

405 
__exã∫_ölöe
 
ötmax_t


406 
	`__NTH
 (
	$wc°oimax
 (c⁄° 
__gwch¨_t
 *
__ª°ri˘
 
≈å
,

407 
__gwch¨_t
 **
__ª°ri˘
 
íd±r
, 
ba£
))

409  
	`__wc°ﬁl_öã∫Æ
 (
≈å
, 
íd±r
, 
ba£
, 0);

410 
	}
}

413 
__exãnsi⁄__


414 
	$__wc°ouŒ_öã∫Æ
 (c⁄° 
__gwch¨_t
 *

415 
__ª°ri˘
 
__≈å
,

416 
__gwch¨_t
 **

417 
__ª°ri˘
 
__íd±r
,

418 
__ba£
,

419 
__group
)

420 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

422 
__exã∫_ölöe
 
uötmax_t


423 
	`__NTH
 (
	$wc°oumax
 (c⁄° 
__gwch¨_t
 *
__ª°ri˘
 
≈å
,

424 
__gwch¨_t
 **
__ª°ri˘
 
íd±r
, 
ba£
))

426  
	`__wc°ouŒ_öã∫Æ
 (
≈å
, 
íd±r
, 
ba£
, 0);

427 
	}
}

432 
	g__END_DECLS


	@/usr/include/libintl.h

20 #i‚de‡
_LIBINTL_H


21 
	#_LIBINTL_H
 1

	)

23 
	~<„©uªs.h
>

27 
	#__USE_GNU_GETTEXT
 1

	)

31 
	#__GNU_GETTEXT_SUPPORTED_REVISION
(
maj‹
) \

32 ((
maj‹
Ë=0 ? 1 : -1)

	)

34 
__BEGIN_DECLS


39 *
	$gëãxt
 (c⁄° *
__msgid
)

40 
__THROW
 
	`__©åibuã_f‹m©_¨g__
 (1);

44 *
	$dgëãxt
 (c⁄° *
__domaö«me
, c⁄° *
__msgid
)

45 
__THROW
 
	`__©åibuã_f‹m©_¨g__
 (2);

46 *
	$__dgëãxt
 (c⁄° *
__domaö«me
, c⁄° *
__msgid
)

47 
__THROW
 
	`__©åibuã_f‹m©_¨g__
 (2);

51 *
	$dcgëãxt
 (c⁄° *
__domaö«me
,

52 c⁄° *
__msgid
, 
__ˇãg‹y
)

53 
__THROW
 
	`__©åibuã_f‹m©_¨g__
 (2);

54 *
	$__dcgëãxt
 (c⁄° *
__domaö«me
,

55 c⁄° *
__msgid
, 
__ˇãg‹y
)

56 
__THROW
 
	`__©åibuã_f‹m©_¨g__
 (2);

61 *
	$ngëãxt
 (c⁄° *
__msgid1
, c⁄° *
__msgid2
,

62 
__n
)

63 
__THROW
 
	$__©åibuã_f‹m©_¨g__
 (1Ë
	`__©åibuã_f‹m©_¨g__
 (2);

67 *
	$dngëãxt
 (c⁄° *
__domaö«me
, c⁄° *
__msgid1
,

68 c⁄° *
__msgid2
, 
__n
)

69 
__THROW
 
	$__©åibuã_f‹m©_¨g__
 (2Ë
	`__©åibuã_f‹m©_¨g__
 (3);

73 *
	$d˙gëãxt
 (c⁄° *
__domaö«me
, c⁄° *
__msgid1
,

74 c⁄° *
__msgid2
, 
__n
,

75 
__ˇãg‹y
)

76 
__THROW
 
	$__©åibuã_f‹m©_¨g__
 (2Ë
	`__©åibuã_f‹m©_¨g__
 (3);

82 *
	$ãxtdomaö
 (c⁄° *
__domaö«me
Ë
__THROW
;

86 *
	$bödãxtdomaö
 (c⁄° *
__domaö«me
,

87 c⁄° *
__dú«me
Ë
__THROW
;

91 *
	$böd_ãxtdomaö_code£t
 (c⁄° *
__domaö«me
,

92 c⁄° *
__code£t
Ë
__THROW
;

96 #i‡
deföed
 
__OPTIMIZE__
 && !deföed 
__˝lu•lus


99 
	#__√ed_NULL


	)

100 
	~<°ddef.h
>

103 
	~<loˇÀ.h
>

109 
	#gëãxt
(
msgid
Ë
	`dgëãxt
 (
NULL
, msgid)

	)

111 
	#dgëãxt
(
domaö«me
, 
msgid
) \

112 
	`dcgëãxt
 (
domaö«me
, 
msgid
, 
LC_MESSAGES
)

	)

114 
	#ngëãxt
(
msgid1
, 
msgid2
, 
n
Ë
	`dngëãxt
 (
NULL
, msgid1, msgid2,Ç)

	)

116 
	#dngëãxt
(
domaö«me
, 
msgid1
, 
msgid2
, 
n
) \

117 
	`d˙gëãxt
 (
domaö«me
, 
msgid1
, 
msgid2
, 
n
, 
LC_MESSAGES
)

	)

121 
__END_DECLS


	@/usr/include/malloc.h

19 #i‚de‡
_MALLOC_H


20 
	#_MALLOC_H
 1

	)

22 
	~<„©uªs.h
>

23 
	~<°ddef.h
>

24 
	~<°dio.h
>

26 #ifde‡
_LIBC


27 
	#__MALLOC_HOOK_VOLATILE


	)

28 
	#__MALLOC_DEPRECATED


	)

30 
	#__MALLOC_HOOK_VOLATILE
 vﬁ©ûe

	)

31 
	#__MALLOC_DEPRECATED
 
__©åibuã_dïªˇãd__


	)

35 
__BEGIN_DECLS


38 *
	$mÆloc
 (
size_t
 
__size
Ë
__THROW
 
__©åibuã_mÆloc__
 
__wur
;

41 *
	$ˇŒoc
 (
size_t
 
__nmemb
, size_à
__size
)

42 
__THROW
 
__©åibuã_mÆloc__
 
__wur
;

49 *
	$ªÆloc
 (*
__±r
, 
size_t
 
__size
)

50 
__THROW
 
__©åibuã_w¨n_unu£d_ªsu…__
;

57 *
	$ªÆloˇºay
 (*
__±r
, 
size_t
 
__nmemb
, size_à
__size
)

58 
__THROW
 
__©åibuã_w¨n_unu£d_ªsu…__
;

61 
	$‰ì
 (*
__±r
Ë
__THROW
;

64 *
	$memÆign
 (
size_t
 
__Æignmít
, size_à
__size
)

65 
__THROW
 
__©åibuã_mÆloc__
 
__wur
;

68 *
	$vÆloc
 (
size_t
 
__size
Ë
__THROW
 
__©åibuã_mÆloc__
 
__wur
;

72 *
	$pvÆloc
 (
size_t
 
__size
Ë
__THROW
 
__©åibuã_mÆloc__
 
__wur
;

76 *(*
__m‹ec‹e
Ë(
±rdiff_t
 
__size
);

79 *
	$__deÁu…_m‹ec‹e
 (
±rdiff_t
 
__size
)

80 
__THROW
 
__©åibuã_mÆloc__
;

84 
	smÆlöfo


86 
¨ía
;

87 
‹dblks
;

88 
smblks
;

89 
hblks
;

90 
hblkhd
;

91 
usmblks
;

92 
fsmblks
;

93 
u‹dblks
;

94 
f‹dblks
;

95 
kìpco°
;

99 
mÆlöfo
 
	$mÆlöfo
 (Ë
__THROW
;

102 #i‚de‡
M_MXFAST


103 
	#M_MXFAST
 1

	)

105 #i‚de‡
M_NLBLKS


106 
	#M_NLBLKS
 2

	)

108 #i‚de‡
M_GRAIN


109 
	#M_GRAIN
 3

	)

111 #i‚de‡
M_KEEP


112 
	#M_KEEP
 4

	)

116 
	#M_TRIM_THRESHOLD
 -1

	)

117 
	#M_TOP_PAD
 -2

	)

118 
	#M_MMAP_THRESHOLD
 -3

	)

119 
	#M_MMAP_MAX
 -4

	)

120 
	#M_CHECK_ACTION
 -5

	)

121 
	#M_PERTURB
 -6

	)

122 
	#M_ARENA_TEST
 -7

	)

123 
	#M_ARENA_MAX
 -8

	)

126 
	$mÆl›t
 (
__∑øm
, 
__vÆ
Ë
__THROW
;

130 
	$mÆloc_åim
 (
size_t
 
__∑d
Ë
__THROW
;

134 
size_t
 
	$mÆloc_ußbÀ_size
 (*
__±r
Ë
__THROW
;

137 
	$mÆloc_°©s
 (Ë
__THROW
;

140 
	$mÆloc_öfo
 (
__›ti⁄s
, 
FILE
 *
__Â
Ë
__THROW
;

143 (*
__MALLOC_HOOK_VOLATILE
 
__‰ì_hook
Ë(*
__±r
,

145 
__MALLOC_DEPRECATED
;

146 *(*
__MALLOC_HOOK_VOLATILE
 
__mÆloc_hook
)(
size_t
 
__size
,

148 
__MALLOC_DEPRECATED
;

149 *(*
__MALLOC_HOOK_VOLATILE
 
__ªÆloc_hook
)(*
__±r
,

150 
size_t
 
__size
,

152 
__MALLOC_DEPRECATED
;

153 *(*
__MALLOC_HOOK_VOLATILE
 
__memÆign_hook
)(
size_t
 
__Æignmít
,

154 
size_t
 
__size
,

156 
__MALLOC_DEPRECATED
;

157 (*
__MALLOC_HOOK_VOLATILE
 
__a·î_m‹ec‹e_hook
) ();

160 
	$__mÆloc_check_öô
 (Ë
__THROW
 
__MALLOC_DEPRECATED
;

163 
__END_DECLS


	@/usr/include/memory.h

22 #i‚def 
_MEMORY_H


23 
	#_MEMORY_H
 1

	)

25 
	~<„©uªs.h
>

28 #i‚def 
_STRING_H


29 
	~<°rög.h
>

	@/usr/include/semaphore.h

18 #i‚de‡
_SEMAPHORE_H


19 
	#_SEMAPHORE_H
 1

	)

21 
	~<„©uªs.h
>

22 
	~<sys/ty≥s.h
>

23 #ifde‡
__USE_XOPEN2K


24 
	~<bôs/ty≥s/°ru˘_time•ec.h
>

28 
	~<bôs/£m≠h‹e.h
>

31 
__BEGIN_DECLS


35 
	$£m_öô
 (
£m_t
 *
__£m
, 
__psh¨ed
, 
__vÆue
)

36 
__THROW
;

38 
	$£m_de°roy
 (
£m_t
 *
__£m
Ë
__THROW
;

41 
£m_t
 *
	$£m_›í
 (c⁄° *
__«me
, 
__oÊag
, ...Ë
__THROW
;

44 
	$£m_˛o£
 (
£m_t
 *
__£m
Ë
__THROW
;

47 
	$£m_u∆ök
 (c⁄° *
__«me
Ë
__THROW
;

53 
	`£m_waô
 (
£m_t
 *
__£m
);

55 #ifde‡
__USE_XOPEN2K


60 
	`£m_timedwaô
 (
£m_t
 *
__ª°ri˘
 
__£m
,

61 c⁄° 
time•ec
 *
__ª°ri˘
 
__ab°ime
);

65 
	$£m_åywaô
 (
£m_t
 *
__£m
Ë
__THROWNL
;

68 
	$£m_po°
 (
£m_t
 *
__£m
Ë
__THROWNL
;

71 
	$£m_gëvÆue
 (
£m_t
 *
__ª°ri˘
 
__£m
, *__ª°ri˘ 
__svÆ
)

72 
__THROW
;

75 
__END_DECLS


	@/usr/include/stdint.h

22 #i‚de‡
_STDINT_H


23 
	#_STDINT_H
 1

	)

25 
	#__GLIBC_INTERNAL_STARTING_HEADER_IMPLEMENTATION


	)

26 
	~<bôs/libc-hódî-°¨t.h
>

27 
	~<bôs/ty≥s.h
>

28 
	~<bôs/wch¨.h
>

29 
	~<bôs/w‹dsize.h
>

34 
	~<bôs/°döt-öä.h
>

37 
	~<bôs/°döt-uöä.h
>

43 sig√d 
	töt_Àa°8_t
;

44 
	töt_Àa°16_t
;

45 
	töt_Àa°32_t
;

46 #i‡
__WORDSIZE
 == 64

47 
	töt_Àa°64_t
;

49 
__exãnsi⁄__


50 
	töt_Àa°64_t
;

54 
	tuöt_Àa°8_t
;

55 
	tuöt_Àa°16_t
;

56 
	tuöt_Àa°32_t
;

57 #i‡
__WORDSIZE
 == 64

58 
	tuöt_Àa°64_t
;

60 
__exãnsi⁄__


61 
	tuöt_Àa°64_t
;

68 sig√d 
	töt_Á°8_t
;

69 #i‡
__WORDSIZE
 == 64

70 
	töt_Á°16_t
;

71 
	töt_Á°32_t
;

72 
	töt_Á°64_t
;

74 
	töt_Á°16_t
;

75 
	töt_Á°32_t
;

76 
__exãnsi⁄__


77 
	töt_Á°64_t
;

81 
	tuöt_Á°8_t
;

82 #i‡
__WORDSIZE
 == 64

83 
	tuöt_Á°16_t
;

84 
	tuöt_Á°32_t
;

85 
	tuöt_Á°64_t
;

87 
	tuöt_Á°16_t
;

88 
	tuöt_Á°32_t
;

89 
__exãnsi⁄__


90 
	tuöt_Á°64_t
;

95 #i‡
__WORDSIZE
 == 64

96 #i‚de‡
__öçå_t_deföed


97 
	töçå_t
;

98 
	#__öçå_t_deföed


	)

100 
	tuöçå_t
;

102 #i‚de‡
__öçå_t_deföed


103 
	töçå_t
;

104 
	#__öçå_t_deföed


	)

106 
	tuöçå_t
;

111 
__ötmax_t
 
	tötmax_t
;

112 
__uötmax_t
 
	tuötmax_t
;

115 #i‡
__WORDSIZE
 == 64

116 
	#__INT64_C
(
c
Ë¯## 
L


	)

117 
	#__UINT64_C
(
c
Ë¯## 
UL


	)

119 
	#__INT64_C
(
c
Ë¯## 
LL


	)

120 
	#__UINT64_C
(
c
Ë¯## 
ULL


	)

126 
	#INT8_MIN
 (-128)

	)

127 
	#INT16_MIN
 (-32767-1)

	)

128 
	#INT32_MIN
 (-2147483647-1)

	)

129 
	#INT64_MIN
 (-
	`__INT64_C
(9223372036854775807)-1)

	)

131 
	#INT8_MAX
 (127)

	)

132 
	#INT16_MAX
 (32767)

	)

133 
	#INT32_MAX
 (2147483647)

	)

134 
	#INT64_MAX
 (
	`__INT64_C
(9223372036854775807))

	)

137 
	#UINT8_MAX
 (255)

	)

138 
	#UINT16_MAX
 (65535)

	)

139 
	#UINT32_MAX
 (4294967295U)

	)

140 
	#UINT64_MAX
 (
	`__UINT64_C
(18446744073709551615))

	)

144 
	#INT_LEAST8_MIN
 (-128)

	)

145 
	#INT_LEAST16_MIN
 (-32767-1)

	)

146 
	#INT_LEAST32_MIN
 (-2147483647-1)

	)

147 
	#INT_LEAST64_MIN
 (-
	`__INT64_C
(9223372036854775807)-1)

	)

149 
	#INT_LEAST8_MAX
 (127)

	)

150 
	#INT_LEAST16_MAX
 (32767)

	)

151 
	#INT_LEAST32_MAX
 (2147483647)

	)

152 
	#INT_LEAST64_MAX
 (
	`__INT64_C
(9223372036854775807))

	)

155 
	#UINT_LEAST8_MAX
 (255)

	)

156 
	#UINT_LEAST16_MAX
 (65535)

	)

157 
	#UINT_LEAST32_MAX
 (4294967295U)

	)

158 
	#UINT_LEAST64_MAX
 (
	`__UINT64_C
(18446744073709551615))

	)

162 
	#INT_FAST8_MIN
 (-128)

	)

163 #i‡
__WORDSIZE
 == 64

164 
	#INT_FAST16_MIN
 (-9223372036854775807L-1)

	)

165 
	#INT_FAST32_MIN
 (-9223372036854775807L-1)

	)

167 
	#INT_FAST16_MIN
 (-2147483647-1)

	)

168 
	#INT_FAST32_MIN
 (-2147483647-1)

	)

170 
	#INT_FAST64_MIN
 (-
	`__INT64_C
(9223372036854775807)-1)

	)

172 
	#INT_FAST8_MAX
 (127)

	)

173 #i‡
__WORDSIZE
 == 64

174 
	#INT_FAST16_MAX
 (9223372036854775807L)

	)

175 
	#INT_FAST32_MAX
 (9223372036854775807L)

	)

177 
	#INT_FAST16_MAX
 (2147483647)

	)

178 
	#INT_FAST32_MAX
 (2147483647)

	)

180 
	#INT_FAST64_MAX
 (
	`__INT64_C
(9223372036854775807))

	)

183 
	#UINT_FAST8_MAX
 (255)

	)

184 #i‡
__WORDSIZE
 == 64

185 
	#UINT_FAST16_MAX
 (18446744073709551615UL)

	)

186 
	#UINT_FAST32_MAX
 (18446744073709551615UL)

	)

188 
	#UINT_FAST16_MAX
 (4294967295U)

	)

189 
	#UINT_FAST32_MAX
 (4294967295U)

	)

191 
	#UINT_FAST64_MAX
 (
	`__UINT64_C
(18446744073709551615))

	)

195 #i‡
__WORDSIZE
 == 64

196 
	#INTPTR_MIN
 (-9223372036854775807L-1)

	)

197 
	#INTPTR_MAX
 (9223372036854775807L)

	)

198 
	#UINTPTR_MAX
 (18446744073709551615UL)

	)

200 
	#INTPTR_MIN
 (-2147483647-1)

	)

201 
	#INTPTR_MAX
 (2147483647)

	)

202 
	#UINTPTR_MAX
 (4294967295U)

	)

207 
	#INTMAX_MIN
 (-
	`__INT64_C
(9223372036854775807)-1)

	)

209 
	#INTMAX_MAX
 (
	`__INT64_C
(9223372036854775807))

	)

212 
	#UINTMAX_MAX
 (
	`__UINT64_C
(18446744073709551615))

	)

218 #i‡
__WORDSIZE
 == 64

219 
	#PTRDIFF_MIN
 (-9223372036854775807L-1)

	)

220 
	#PTRDIFF_MAX
 (9223372036854775807L)

	)

222 #i‡
__WORDSIZE32_PTRDIFF_LONG


223 
	#PTRDIFF_MIN
 (-2147483647L-1)

	)

224 
	#PTRDIFF_MAX
 (2147483647L)

	)

226 
	#PTRDIFF_MIN
 (-2147483647-1)

	)

227 
	#PTRDIFF_MAX
 (2147483647)

	)

232 
	#SIG_ATOMIC_MIN
 (-2147483647-1)

	)

233 
	#SIG_ATOMIC_MAX
 (2147483647)

	)

236 #i‡
__WORDSIZE
 == 64

237 
	#SIZE_MAX
 (18446744073709551615UL)

	)

239 #i‡
__WORDSIZE32_SIZE_ULONG


240 
	#SIZE_MAX
 (4294967295UL)

	)

242 
	#SIZE_MAX
 (4294967295U)

	)

247 #i‚de‡
WCHAR_MIN


249 
	#WCHAR_MIN
 
__WCHAR_MIN


	)

250 
	#WCHAR_MAX
 
__WCHAR_MAX


	)

254 
	#WINT_MIN
 (0u)

	)

255 
	#WINT_MAX
 (4294967295u)

	)

258 
	#INT8_C
(
c
Ë
	)
c

259 
	#INT16_C
(
c
Ë
	)
c

260 
	#INT32_C
(
c
Ë
	)
c

261 #i‡
__WORDSIZE
 == 64

262 
	#INT64_C
(
c
Ë¯## 
L


	)

264 
	#INT64_C
(
c
Ë¯## 
LL


	)

268 
	#UINT8_C
(
c
Ë
	)
c

269 
	#UINT16_C
(
c
Ë
	)
c

270 
	#UINT32_C
(
c
Ë¯## 
U


	)

271 #i‡
__WORDSIZE
 == 64

272 
	#UINT64_C
(
c
Ë¯## 
UL


	)

274 
	#UINT64_C
(
c
Ë¯## 
ULL


	)

278 #i‡
__WORDSIZE
 == 64

279 
	#INTMAX_C
(
c
Ë¯## 
L


	)

280 
	#UINTMAX_C
(
c
Ë¯## 
UL


	)

282 
	#INTMAX_C
(
c
Ë¯## 
LL


	)

283 
	#UINTMAX_C
(
c
Ë¯## 
ULL


	)

286 #i‡
__GLIBC_USE
 (
IEC_60559_BFP_EXT
)

288 
	#INT8_WIDTH
 8

	)

289 
	#UINT8_WIDTH
 8

	)

290 
	#INT16_WIDTH
 16

	)

291 
	#UINT16_WIDTH
 16

	)

292 
	#INT32_WIDTH
 32

	)

293 
	#UINT32_WIDTH
 32

	)

294 
	#INT64_WIDTH
 64

	)

295 
	#UINT64_WIDTH
 64

	)

297 
	#INT_LEAST8_WIDTH
 8

	)

298 
	#UINT_LEAST8_WIDTH
 8

	)

299 
	#INT_LEAST16_WIDTH
 16

	)

300 
	#UINT_LEAST16_WIDTH
 16

	)

301 
	#INT_LEAST32_WIDTH
 32

	)

302 
	#UINT_LEAST32_WIDTH
 32

	)

303 
	#INT_LEAST64_WIDTH
 64

	)

304 
	#UINT_LEAST64_WIDTH
 64

	)

306 
	#INT_FAST8_WIDTH
 8

	)

307 
	#UINT_FAST8_WIDTH
 8

	)

308 
	#INT_FAST16_WIDTH
 
__WORDSIZE


	)

309 
	#UINT_FAST16_WIDTH
 
__WORDSIZE


	)

310 
	#INT_FAST32_WIDTH
 
__WORDSIZE


	)

311 
	#UINT_FAST32_WIDTH
 
__WORDSIZE


	)

312 
	#INT_FAST64_WIDTH
 64

	)

313 
	#UINT_FAST64_WIDTH
 64

	)

315 
	#INTPTR_WIDTH
 
__WORDSIZE


	)

316 
	#UINTPTR_WIDTH
 
__WORDSIZE


	)

318 
	#INTMAX_WIDTH
 64

	)

319 
	#UINTMAX_WIDTH
 64

	)

321 
	#PTRDIFF_WIDTH
 
__WORDSIZE


	)

322 
	#SIG_ATOMIC_WIDTH
 32

	)

323 
	#SIZE_WIDTH
 
__WORDSIZE


	)

324 
	#WCHAR_WIDTH
 32

	)

325 
	#WINT_WIDTH
 32

	)

	@/usr/include/stdio.h

23 #i‚de‡
_STDIO_H


24 
	#_STDIO_H
 1

	)

26 
	#__GLIBC_INTERNAL_STARTING_HEADER_IMPLEMENTATION


	)

27 
	~<bôs/libc-hódî-°¨t.h
>

29 
	g__BEGIN_DECLS


31 
	#__√ed_size_t


	)

32 
	#__√ed_NULL


	)

33 
	~<°ddef.h
>

35 
	~<bôs/ty≥s.h
>

36 
	~<bôs/ty≥s/__FILE.h
>

37 
	~<bôs/ty≥s/FILE.h
>

39 
	#_STDIO_USES_IOSTREAM


	)

41 
	~<bôs/libio.h
>

43 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8


44 #ifde‡
__GNUC__


45 #i‚de‡
_VA_LIST_DEFINED


46 
_G_va_li°
 
	tva_li°
;

47 
	#_VA_LIST_DEFINED


	)

50 
	~<°d¨g.h
>

54 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K


55 #i‚de‡
__off_t_deföed


56 #i‚de‡
__USE_FILE_OFFSET64


57 
__off_t
 
	toff_t
;

59 
__off64_t
 
	toff_t
;

61 
	#__off_t_deföed


	)

63 #i‡
deföed
 
__USE_LARGEFILE64
 && !deföed 
__off64_t_deföed


64 
__off64_t
 
	toff64_t
;

65 
	#__off64_t_deföed


	)

69 #ifde‡
__USE_XOPEN2K8


70 #i‚de‡
__ssize_t_deföed


71 
__ssize_t
 
	tssize_t
;

72 
	#__ssize_t_deföed


	)

77 #i‚de‡
__USE_FILE_OFFSET64


78 
_G_Âos_t
 
	tÂos_t
;

80 
_G_Âos64_t
 
	tÂos_t
;

82 #ifde‡
__USE_LARGEFILE64


83 
_G_Âos64_t
 
	tÂos64_t
;

87 
	#_IOFBF
 0

	)

88 
	#_IOLBF
 1

	)

89 
	#_IONBF
 2

	)

93 #i‚de‡
BUFSIZ


94 
	#BUFSIZ
 
_IO_BUFSIZ


	)

100 #i‚de‡
EOF


101 
	#EOF
 (-1)

	)

107 
	#SEEK_SET
 0

	)

108 
	#SEEK_CUR
 1

	)

109 
	#SEEK_END
 2

	)

110 #ifde‡
__USE_GNU


111 
	#SEEK_DATA
 3

	)

112 
	#SEEK_HOLE
 4

	)

116 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


118 
	#P_tmpdú
 "/tmp"

	)

131 
	~<bôs/°dio_lim.h
>

135 
_IO_FILE
 *
°dö
;

136 
_IO_FILE
 *
°dout
;

137 
_IO_FILE
 *
°dîr
;

139 
	#°dö
 
°dö


	)

140 
	#°dout
 
°dout


	)

141 
	#°dîr
 
°dîr


	)

144 
	$ªmove
 (c⁄° *
__fûíame
Ë
__THROW
;

146 
	$ª«me
 (c⁄° *
__ﬁd
, c⁄° *
__√w
Ë
__THROW
;

148 #ifde‡
__USE_ATFILE


150 
	$ª«mót
 (
__ﬁdfd
, c⁄° *
__ﬁd
, 
__√wfd
,

151 c⁄° *
__√w
Ë
__THROW
;

158 #i‚de‡
__USE_FILE_OFFSET64


159 
FILE
 *
	$tmpfûe
 (Ë
__wur
;

161 #ifde‡
__REDIRECT


162 
FILE
 *
	`__REDIRECT
 (
tmpfûe
, (), 
tmpfûe64
Ë
__wur
;

164 
	#tmpfûe
 
tmpfûe64


	)

168 #ifde‡
__USE_LARGEFILE64


169 
FILE
 *
	$tmpfûe64
 (Ë
__wur
;

173 *
	$tm≤am
 (*
__s
Ë
__THROW
 
__wur
;

175 #ifde‡
__USE_MISC


178 *
	$tm≤am_r
 (*
__s
Ë
__THROW
 
__wur
;

182 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


190 *
	$ãm≤am
 (c⁄° *
__dú
, c⁄° *
__pfx
)

191 
__THROW
 
__©åibuã_mÆloc__
 
__wur
;

199 
	`f˛o£
 (
FILE
 *
__°ªam
);

204 
	`fÊush
 (
FILE
 *
__°ªam
);

206 #ifde‡
__USE_MISC


213 
	`fÊush_u∆ocked
 (
FILE
 *
__°ªam
);

216 #ifde‡
__USE_GNU


223 
	`f˛o£Æl
 ();

227 #i‚de‡
__USE_FILE_OFFSET64


232 
FILE
 *
	$f›í
 (c⁄° *
__ª°ri˘
 
__fûíame
,

233 c⁄° *
__ª°ri˘
 
__modes
Ë
__wur
;

238 
FILE
 *
	$‰e›í
 (c⁄° *
__ª°ri˘
 
__fûíame
,

239 c⁄° *
__ª°ri˘
 
__modes
,

240 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

242 #ifde‡
__REDIRECT


243 
FILE
 *
	`__REDIRECT
 (
f›í
, (c⁄° *
__ª°ri˘
 
__fûíame
,

244 c⁄° *
__ª°ri˘
 
__modes
), 
f›í64
)

245 
__wur
;

246 
FILE
 *
	`__REDIRECT
 (
‰e›í
, (c⁄° *
__ª°ri˘
 
__fûíame
,

247 c⁄° *
__ª°ri˘
 
__modes
,

248 
FILE
 *
__ª°ri˘
 
__°ªam
), 
‰e›í64
)

249 
__wur
;

251 
	#f›í
 
f›í64


	)

252 
	#‰e›í
 
‰e›í64


	)

255 #ifde‡
__USE_LARGEFILE64


256 
FILE
 *
	$f›í64
 (c⁄° *
__ª°ri˘
 
__fûíame
,

257 c⁄° *
__ª°ri˘
 
__modes
Ë
__wur
;

258 
FILE
 *
	$‰e›í64
 (c⁄° *
__ª°ri˘
 
__fûíame
,

259 c⁄° *
__ª°ri˘
 
__modes
,

260 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

263 #ifdef 
__USE_POSIX


265 
FILE
 *
	$fd›í
 (
__fd
, c⁄° *
__modes
Ë
__THROW
 
__wur
;

268 #ifdef 
__USE_GNU


271 
FILE
 *
	$f›ícookõ
 (*
__ª°ri˘
 
__magic_cookõ
,

272 c⁄° *
__ª°ri˘
 
__modes
,

273 
_IO_cookõ_io_fun˘i⁄s_t
 
__io_funcs
Ë
__THROW
 
__wur
;

276 #i‡
deföed
 
__USE_XOPEN2K8
 || 
	`__GLIBC_USE
 (
LIB_EXT2
)

278 
FILE
 *
	$fmem›í
 (*
__s
, 
size_t
 
__Àn
, c⁄° *
__modes
)

279 
__THROW
 
__wur
;

284 
FILE
 *
	$›í_mem°ªam
 (**
__buÊoc
, 
size_t
 *
__sizñoc
Ë
__THROW
 
__wur
;

290 
	$£tbuf
 (
FILE
 *
__ª°ri˘
 
__°ªam
, *__ª°ri˘ 
__buf
Ë
__THROW
;

294 
	$£tvbuf
 (
FILE
 *
__ª°ri˘
 
__°ªam
, *__ª°ri˘ 
__buf
,

295 
__modes
, 
size_t
 
__n
Ë
__THROW
;

297 #ifdef 
__USE_MISC


300 
	$£tbuf„r
 (
FILE
 *
__ª°ri˘
 
__°ªam
, *__ª°ri˘ 
__buf
,

301 
size_t
 
__size
Ë
__THROW
;

304 
	$£éöebuf
 (
FILE
 *
__°ªam
Ë
__THROW
;

312 
	`Ârötf
 (
FILE
 *
__ª°ri˘
 
__°ªam
,

313 c⁄° *
__ª°ri˘
 
__f‹m©
, ...);

318 
	`¥ötf
 (c⁄° *
__ª°ri˘
 
__f‹m©
, ...);

320 
	$•rötf
 (*
__ª°ri˘
 
__s
,

321 c⁄° *
__ª°ri˘
 
__f‹m©
, ...Ë
__THROWNL
;

327 
	`vÂrötf
 (
FILE
 *
__ª°ri˘
 
__s
, c⁄° *__ª°ri˘ 
__f‹m©
,

328 
_G_va_li°
 
__¨g
);

333 
	`v¥ötf
 (c⁄° *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__¨g
);

335 
	$v•rötf
 (*
__ª°ri˘
 
__s
, c⁄° *__ª°ri˘ 
__f‹m©
,

336 
_G_va_li°
 
__¨g
Ë
__THROWNL
;

338 #i‡
deföed
 
__USE_ISOC99
 || deföed 
__USE_UNIX98


340 
	$¢¥ötf
 (*
__ª°ri˘
 
__s
, 
size_t
 
__maxÀn
,

341 c⁄° *
__ª°ri˘
 
__f‹m©
, ...)

342 
__THROWNL
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 3, 4)));

344 
	$v¢¥ötf
 (*
__ª°ri˘
 
__s
, 
size_t
 
__maxÀn
,

345 c⁄° *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__¨g
)

346 
__THROWNL
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 3, 0)));

349 #i‡
	`__GLIBC_USE
 (
LIB_EXT2
)

352 
	$va•rötf
 (**
__ª°ri˘
 
__±r
, c⁄° *__ª°ri˘ 
__f
,

353 
_G_va_li°
 
__¨g
)

354 
__THROWNL
 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__¥ötf__
, 2, 0))Ë
__wur
;

355 
	$__a•rötf
 (**
__ª°ri˘
 
__±r
,

356 c⁄° *
__ª°ri˘
 
__fmt
, ...)

357 
__THROWNL
 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__¥ötf__
, 2, 3))Ë
__wur
;

358 
	$a•rötf
 (**
__ª°ri˘
 
__±r
,

359 c⁄° *
__ª°ri˘
 
__fmt
, ...)

360 
__THROWNL
 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__¥ötf__
, 2, 3))Ë
__wur
;

363 #ifde‡
__USE_XOPEN2K8


365 
	$vd¥ötf
 (
__fd
, c⁄° *
__ª°ri˘
 
__fmt
,

366 
_G_va_li°
 
__¨g
)

367 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 2, 0)));

368 
	$d¥ötf
 (
__fd
, c⁄° *
__ª°ri˘
 
__fmt
, ...)

369 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 2, 3)));

377 
	$fsˇnf
 (
FILE
 *
__ª°ri˘
 
__°ªam
,

378 c⁄° *
__ª°ri˘
 
__f‹m©
, ...Ë
__wur
;

383 
	$sˇnf
 (c⁄° *
__ª°ri˘
 
__f‹m©
, ...Ë
__wur
;

385 
	$ssˇnf
 (c⁄° *
__ª°ri˘
 
__s
,

386 c⁄° *
__ª°ri˘
 
__f‹m©
, ...Ë
__THROW
;

388 #i‡
deföed
 
__USE_ISOC99
 && !deföed 
__USE_GNU
 \

389 && (!
deföed
 
__LDBL_COMPAT
 || !deföed 
__REDIRECT
) \

390 && (
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_XOPEN2K
)

391 #ifde‡
__REDIRECT


395 
	`__REDIRECT
 (
fsˇnf
, (
FILE
 *
__ª°ri˘
 
__°ªam
,

396 c⁄° *
__ª°ri˘
 
__f‹m©
, ...),

397 
__isoc99_fsˇnf
Ë
__wur
;

398 
	`__REDIRECT
 (
sˇnf
, (c⁄° *
__ª°ri˘
 
__f‹m©
, ...),

399 
__isoc99_sˇnf
Ë
__wur
;

400 
	`__REDIRECT_NTH
 (
ssˇnf
, (c⁄° *
__ª°ri˘
 
__s
,

401 c⁄° *
__ª°ri˘
 
__f‹m©
, ...),

402 
__isoc99_ssˇnf
);

404 
	$__isoc99_fsˇnf
 (
FILE
 *
__ª°ri˘
 
__°ªam
,

405 c⁄° *
__ª°ri˘
 
__f‹m©
, ...Ë
__wur
;

406 
	$__isoc99_sˇnf
 (c⁄° *
__ª°ri˘
 
__f‹m©
, ...Ë
__wur
;

407 
	$__isoc99_ssˇnf
 (c⁄° *
__ª°ri˘
 
__s
,

408 c⁄° *
__ª°ri˘
 
__f‹m©
, ...Ë
__THROW
;

409 
	#fsˇnf
 
__isoc99_fsˇnf


	)

410 
	#sˇnf
 
__isoc99_sˇnf


	)

411 
	#ssˇnf
 
__isoc99_ssˇnf


	)

415 #ifdef 
__USE_ISOC99


420 
	$vfsˇnf
 (
FILE
 *
__ª°ri˘
 
__s
, c⁄° *__ª°ri˘ 
__f‹m©
,

421 
_G_va_li°
 
__¨g
)

422 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__sˇnf__
, 2, 0))Ë
__wur
;

428 
	$vsˇnf
 (c⁄° *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__¨g
)

429 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__sˇnf__
, 1, 0))Ë
__wur
;

432 
	$vssˇnf
 (c⁄° *
__ª°ri˘
 
__s
,

433 c⁄° *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__¨g
)

434 
__THROW
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__sˇnf__
, 2, 0)));

436 #i‡!
deföed
 
__USE_GNU
 \

437 && (!
deföed
 
__LDBL_COMPAT
 || !deföed 
__REDIRECT
) \

438 && (
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_XOPEN2K
)

439 #ifde‡
__REDIRECT


443 
	`__REDIRECT
 (
vfsˇnf
,

444 (
FILE
 *
__ª°ri˘
 
__s
,

445 c⁄° *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__¨g
),

446 
__isoc99_vfsˇnf
)

447 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__sˇnf__
, 2, 0))Ë
__wur
;

448 
	`__REDIRECT
 (
vsˇnf
, (c⁄° *
__ª°ri˘
 
__f‹m©
,

449 
_G_va_li°
 
__¨g
), 
__isoc99_vsˇnf
)

450 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__sˇnf__
, 1, 0))Ë
__wur
;

451 
	`__REDIRECT_NTH
 (
vssˇnf
,

452 (c⁄° *
__ª°ri˘
 
__s
,

453 c⁄° *
__ª°ri˘
 
__f‹m©
,

454 
_G_va_li°
 
__¨g
), 
__isoc99_vssˇnf
)

455 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__sˇnf__
, 2, 0)));

457 
	$__isoc99_vfsˇnf
 (
FILE
 *
__ª°ri˘
 
__s
,

458 c⁄° *
__ª°ri˘
 
__f‹m©
,

459 
_G_va_li°
 
__¨g
Ë
__wur
;

460 
	$__isoc99_vsˇnf
 (c⁄° *
__ª°ri˘
 
__f‹m©
,

461 
_G_va_li°
 
__¨g
Ë
__wur
;

462 
	$__isoc99_vssˇnf
 (c⁄° *
__ª°ri˘
 
__s
,

463 c⁄° *
__ª°ri˘
 
__f‹m©
,

464 
_G_va_li°
 
__¨g
Ë
__THROW
;

465 
	#vfsˇnf
 
__isoc99_vfsˇnf


	)

466 
	#vsˇnf
 
__isoc99_vsˇnf


	)

467 
	#vssˇnf
 
__isoc99_vssˇnf


	)

477 
	`fgëc
 (
FILE
 *
__°ªam
);

478 
	`gëc
 (
FILE
 *
__°ªam
);

484 
	`gëch¨
 ();

488 
	#gëc
(
_Â
Ë
	`_IO_gëc
 (_Â)

	)

490 #ifde‡
__USE_POSIX199506


495 
	`gëc_u∆ocked
 (
FILE
 *
__°ªam
);

496 
	`gëch¨_u∆ocked
 ();

499 #ifde‡
__USE_MISC


506 
	`fgëc_u∆ocked
 (
FILE
 *
__°ªam
);

517 
	`Âutc
 (
__c
, 
FILE
 *
__°ªam
);

518 
	`putc
 (
__c
, 
FILE
 *
__°ªam
);

524 
	`putch¨
 (
__c
);

528 
	#putc
(
_ch
, 
_Â
Ë
	`_IO_putc
 (_ch, _Â)

	)

530 #ifde‡
__USE_MISC


537 
	`Âutc_u∆ocked
 (
__c
, 
FILE
 *
__°ªam
);

540 #ifde‡
__USE_POSIX199506


545 
	`putc_u∆ocked
 (
__c
, 
FILE
 *
__°ªam
);

546 
	`putch¨_u∆ocked
 (
__c
);

550 #i‡
deföed
 
__USE_MISC
 \

551 || (
deföed
 
__USE_XOPEN
 && !deföed 
__USE_XOPEN2K
)

553 
	`gëw
 (
FILE
 *
__°ªam
);

556 
	`putw
 (
__w
, 
FILE
 *
__°ªam
);

564 *
	$fgës
 (*
__ª°ri˘
 
__s
, 
__n
, 
FILE
 *__ª°ri˘ 
__°ªam
)

565 
__wur
;

567 #i‡
	`__GLIBC_USE
 (
DEPRECATED_GETS
)

577 *
	$gës
 (*
__s
Ë
__wur
 
__©åibuã_dïªˇãd__
;

580 #ifde‡
__USE_GNU


587 *
	$fgës_u∆ocked
 (*
__ª°ri˘
 
__s
, 
__n
,

588 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

592 #i‡
deföed
 
__USE_XOPEN2K8
 || 
	`__GLIBC_USE
 (
LIB_EXT2
)

603 
_IO_ssize_t
 
	$__gëdñim
 (**
__ª°ri˘
 
__löïå
,

604 
size_t
 *
__ª°ri˘
 
__n
, 
__dñimôî
,

605 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

606 
_IO_ssize_t
 
	$gëdñim
 (**
__ª°ri˘
 
__löïå
,

607 
size_t
 *
__ª°ri˘
 
__n
, 
__dñimôî
,

608 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

616 
_IO_ssize_t
 
	$gëlöe
 (**
__ª°ri˘
 
__löïå
,

617 
size_t
 *
__ª°ri˘
 
__n
,

618 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

626 
	`Âuts
 (c⁄° *
__ª°ri˘
 
__s
, 
FILE
 *__ª°ri˘ 
__°ªam
);

632 
	`puts
 (c⁄° *
__s
);

639 
	`ungëc
 (
__c
, 
FILE
 *
__°ªam
);

646 
size_t
 
	$‰ód
 (*
__ª°ri˘
 
__±r
, 
size_t
 
__size
,

647 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

652 
size_t
 
	`fwrôe
 (c⁄° *
__ª°ri˘
 
__±r
, size_à
__size
,

653 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__s
);

655 #ifde‡
__USE_GNU


662 
	`Âuts_u∆ocked
 (c⁄° *
__ª°ri˘
 
__s
,

663 
FILE
 *
__ª°ri˘
 
__°ªam
);

666 #ifde‡
__USE_MISC


673 
size_t
 
	$‰ód_u∆ocked
 (*
__ª°ri˘
 
__±r
, 
size_t
 
__size
,

674 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

675 
size_t
 
	`fwrôe_u∆ocked
 (c⁄° *
__ª°ri˘
 
__±r
, size_à
__size
,

676 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__°ªam
);

684 
	`f£ek
 (
FILE
 *
__°ªam
, 
__off
, 
__whí˚
);

689 
	$·ñl
 (
FILE
 *
__°ªam
Ë
__wur
;

694 
	`ªwöd
 (
FILE
 *
__°ªam
);

701 #i‡
deföed
 
__USE_LARGEFILE
 || deföed 
__USE_XOPEN2K


702 #i‚de‡
__USE_FILE_OFFSET64


707 
	`f£eko
 (
FILE
 *
__°ªam
, 
__off_t
 
__off
, 
__whí˚
);

712 
__off_t
 
	$·ñlo
 (
FILE
 *
__°ªam
Ë
__wur
;

714 #ifde‡
__REDIRECT


715 
	`__REDIRECT
 (
f£eko
,

716 (
FILE
 *
__°ªam
, 
__off64_t
 
__off
, 
__whí˚
),

717 
f£eko64
);

718 
__off64_t
 
	`__REDIRECT
 (
·ñlo
, (
FILE
 *
__°ªam
), 
·ñlo64
);

720 
	#f£eko
 
f£eko64


	)

721 
	#·ñlo
 
·ñlo64


	)

726 #i‚de‡
__USE_FILE_OFFSET64


731 
	`fgëpos
 (
FILE
 *
__ª°ri˘
 
__°ªam
, 
Âos_t
 *__ª°ri˘ 
__pos
);

736 
	`f£ços
 (
FILE
 *
__°ªam
, c⁄° 
Âos_t
 *
__pos
);

738 #ifde‡
__REDIRECT


739 
	`__REDIRECT
 (
fgëpos
, (
FILE
 *
__ª°ri˘
 
__°ªam
,

740 
Âos_t
 *
__ª°ri˘
 
__pos
), 
fgëpos64
);

741 
	`__REDIRECT
 (
f£ços
,

742 (
FILE
 *
__°ªam
, c⁄° 
Âos_t
 *
__pos
), 
f£ços64
);

744 
	#fgëpos
 
fgëpos64


	)

745 
	#f£ços
 
f£ços64


	)

749 #ifde‡
__USE_LARGEFILE64


750 
	`f£eko64
 (
FILE
 *
__°ªam
, 
__off64_t
 
__off
, 
__whí˚
);

751 
__off64_t
 
	$·ñlo64
 (
FILE
 *
__°ªam
Ë
__wur
;

752 
	`fgëpos64
 (
FILE
 *
__ª°ri˘
 
__°ªam
, 
Âos64_t
 *__ª°ri˘ 
__pos
);

753 
	`f£ços64
 (
FILE
 *
__°ªam
, c⁄° 
Âos64_t
 *
__pos
);

757 
	$˛óªº
 (
FILE
 *
__°ªam
Ë
__THROW
;

759 
	$„of
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

761 
	$„º‹
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

763 #ifde‡
__USE_MISC


765 
	$˛óªº_u∆ocked
 (
FILE
 *
__°ªam
Ë
__THROW
;

766 
	$„of_u∆ocked
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

767 
	$„º‹_u∆ocked
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

775 
	`≥º‹
 (c⁄° *
__s
);

781 
	~<bôs/sys_îæi°.h
>

784 #ifdef 
__USE_POSIX


786 
	$fûío
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

789 #ifde‡
__USE_MISC


791 
	$fûío_u∆ocked
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

795 #ifde‡
__USE_POSIX2


800 
FILE
 *
	$p›í
 (c⁄° *
__comm™d
, c⁄° *
__modes
Ë
__wur
;

806 
	`p˛o£
 (
FILE
 *
__°ªam
);

810 #ifdef 
__USE_POSIX


812 *
	$˘îmid
 (*
__s
Ë
__THROW
;

816 #i‡(
deföed
 
__USE_XOPEN
 && !deföed 
__USE_XOPEN2K
Ë|| deföed 
__USE_GNU


818 *
	`cu£rid
 (*
__s
);

822 #ifdef 
__USE_GNU


823 
ob°ack
;

826 
	$ob°ack_¥ötf
 (
ob°ack
 *
__ª°ri˘
 
__ob°ack
,

827 c⁄° *
__ª°ri˘
 
__f‹m©
, ...)

828 
__THROWNL
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 2, 3)));

829 
	$ob°ack_v¥ötf
 (
ob°ack
 *
__ª°ri˘
 
__ob°ack
,

830 c⁄° *
__ª°ri˘
 
__f‹m©
,

831 
_G_va_li°
 
__¨gs
)

832 
__THROWNL
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 2, 0)));

836 #ifde‡
__USE_POSIX199506


840 
	$Êockfûe
 (
FILE
 *
__°ªam
Ë
__THROW
;

844 
	$·rylockfûe
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

847 
	$fu∆ockfûe
 (
FILE
 *
__°ªam
Ë
__THROW
;

850 #i‡
deföed
 
__USE_XOPEN
 && !deföed 
__USE_XOPEN2K
 && !deföed 
__USE_GNU


853 
	~<bôs/gë›t_posix.h
>

858 #ifde‡
__USE_EXTERN_INLINES


859 
	~<bôs/°dio.h
>

861 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__f‹tify_fun˘i⁄


862 
	~<bôs/°dio2.h
>

864 #ifde‡
__LDBL_COMPAT


865 
	~<bôs/°dio-ldbl.h
>

868 
__END_DECLS


	@/usr/include/stdlib.h

22 #i‚def 
_STDLIB_H


24 
	#__GLIBC_INTERNAL_STARTING_HEADER_IMPLEMENTATION


	)

25 
	~<bôs/libc-hódî-°¨t.h
>

28 
	#__√ed_size_t


	)

29 
	#__√ed_wch¨_t


	)

30 
	#__√ed_NULL


	)

31 
	~<°ddef.h
>

33 
	g__BEGIN_DECLS


35 
	#_STDLIB_H
 1

	)

37 #i‡(
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8
Ë&& !deföed 
_SYS_WAIT_H


39 
	~<bôs/waôÊags.h
>

40 
	~<bôs/waô°©us.h
>

43 
	#WEXITSTATUS
(
°©us
Ë
	`__WEXITSTATUS
 (°©us)

	)

44 
	#WTERMSIG
(
°©us
Ë
	`__WTERMSIG
 (°©us)

	)

45 
	#WSTOPSIG
(
°©us
Ë
	`__WSTOPSIG
 (°©us)

	)

46 
	#WIFEXITED
(
°©us
Ë
	`__WIFEXITED
 (°©us)

	)

47 
	#WIFSIGNALED
(
°©us
Ë
	`__WIFSIGNALED
 (°©us)

	)

48 
	#WIFSTOPPED
(
°©us
Ë
	`__WIFSTOPPED
 (°©us)

	)

49 #ifde‡
__WIFCONTINUED


50 
	#WIFCONTINUED
(
°©us
Ë
	`__WIFCONTINUED
 (°©us)

	)

55 
	~<bôs/Êﬂä.h
>

60 
	mquŸ
;

61 
	mªm
;

62 } 
	tdiv_t
;

65 #i‚de‡
__ldiv_t_deföed


68 
	mquŸ
;

69 
	mªm
;

70 } 
	tldiv_t
;

71 
	#__ldiv_t_deföed
 1

	)

74 #i‡
deföed
 
__USE_ISOC99
 && !deföed 
__Œdiv_t_deföed


76 
__exãnsi⁄__
 struct

78 
	mquŸ
;

79 
	mªm
;

80 } 
	tŒdiv_t
;

81 
	#__Œdiv_t_deföed
 1

	)

86 
	#RAND_MAX
 2147483647

	)

91 
	#EXIT_FAILURE
 1

	)

92 
	#EXIT_SUCCESS
 0

	)

96 
	#MB_CUR_MAX
 (
	`__˘y≥_gë_mb_cur_max
 ())

	)

97 
size_t
 
	$__˘y≥_gë_mb_cur_max
 (Ë
__THROW
 
__wur
;

101 
	$©of
 (c⁄° *
__≈å
)

102 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

104 
	$©oi
 (c⁄° *
__≈å
)

105 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

107 
	$©ﬁ
 (c⁄° *
__≈å
)

108 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

110 #ifde‡
__USE_ISOC99


112 
__exãnsi⁄__
 
	$©ﬁl
 (c⁄° *
__≈å
)

113 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

117 
	$°πod
 (c⁄° *
__ª°ri˘
 
__≈å
,

118 **
__ª°ri˘
 
__íd±r
)

119 
__THROW
 
	`__n⁄nuŒ
 ((1));

121 #ifdef 
__USE_ISOC99


123 
	$°πof
 (c⁄° *
__ª°ri˘
 
__≈å
,

124 **
__ª°ri˘
 
__íd±r
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

126 
	$°πﬁd
 (c⁄° *
__ª°ri˘
 
__≈å
,

127 **
__ª°ri˘
 
__íd±r
)

128 
__THROW
 
	`__n⁄nuŒ
 ((1));

133 #i‡
__HAVE_FLOAT16
 && 
	`__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

134 
_Flﬂt16
 
	$°πof16
 (c⁄° *
__ª°ri˘
 
__≈å
,

135 **
__ª°ri˘
 
__íd±r
)

136 
__THROW
 
	`__n⁄nuŒ
 ((1));

139 #i‡
__HAVE_FLOAT32
 && 
	`__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

140 
_Flﬂt32
 
	$°πof32
 (c⁄° *
__ª°ri˘
 
__≈å
,

141 **
__ª°ri˘
 
__íd±r
)

142 
__THROW
 
	`__n⁄nuŒ
 ((1));

145 #i‡
__HAVE_FLOAT64
 && 
	`__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

146 
_Flﬂt64
 
	$°πof64
 (c⁄° *
__ª°ri˘
 
__≈å
,

147 **
__ª°ri˘
 
__íd±r
)

148 
__THROW
 
	`__n⁄nuŒ
 ((1));

151 #i‡
__HAVE_FLOAT128
 && 
	`__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

152 
_Flﬂt128
 
	$°πof128
 (c⁄° *
__ª°ri˘
 
__≈å
,

153 **
__ª°ri˘
 
__íd±r
)

154 
__THROW
 
	`__n⁄nuŒ
 ((1));

157 #i‡
__HAVE_FLOAT32X
 && 
	`__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

158 
_Flﬂt32x
 
	$°πof32x
 (c⁄° *
__ª°ri˘
 
__≈å
,

159 **
__ª°ri˘
 
__íd±r
)

160 
__THROW
 
	`__n⁄nuŒ
 ((1));

163 #i‡
__HAVE_FLOAT64X
 && 
	`__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

164 
_Flﬂt64x
 
	$°πof64x
 (c⁄° *
__ª°ri˘
 
__≈å
,

165 **
__ª°ri˘
 
__íd±r
)

166 
__THROW
 
	`__n⁄nuŒ
 ((1));

169 #i‡
__HAVE_FLOAT128X
 && 
	`__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

170 
_Flﬂt128x
 
	$°πof128x
 (c⁄° *
__ª°ri˘
 
__≈å
,

171 **
__ª°ri˘
 
__íd±r
)

172 
__THROW
 
	`__n⁄nuŒ
 ((1));

176 
	$°πﬁ
 (c⁄° *
__ª°ri˘
 
__≈å
,

177 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

178 
__THROW
 
	`__n⁄nuŒ
 ((1));

180 
	$°πoul
 (c⁄° *
__ª°ri˘
 
__≈å
,

181 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

182 
__THROW
 
	`__n⁄nuŒ
 ((1));

184 #ifde‡
__USE_MISC


186 
__exãnsi⁄__


187 
	$°πoq
 (c⁄° *
__ª°ri˘
 
__≈å
,

188 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

189 
__THROW
 
	`__n⁄nuŒ
 ((1));

191 
__exãnsi⁄__


192 
	$°πouq
 (c⁄° *
__ª°ri˘
 
__≈å
,

193 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

194 
__THROW
 
	`__n⁄nuŒ
 ((1));

197 #ifde‡
__USE_ISOC99


199 
__exãnsi⁄__


200 
	$°πﬁl
 (c⁄° *
__ª°ri˘
 
__≈å
,

201 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

202 
__THROW
 
	`__n⁄nuŒ
 ((1));

204 
__exãnsi⁄__


205 
	$°πouŒ
 (c⁄° *
__ª°ri˘
 
__≈å
,

206 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

207 
__THROW
 
	`__n⁄nuŒ
 ((1));

211 #i‡
	`__GLIBC_USE
 (
IEC_60559_BFP_EXT
)

212 
	$°r‰omd
 (*
__de°
, 
size_t
 
__size
, c⁄° *
__f‹m©
,

213 
__f
)

214 
__THROW
 
	`__n⁄nuŒ
 ((3));

216 
	$°r‰omf
 (*
__de°
, 
size_t
 
__size
, c⁄° *
__f‹m©
,

217 
__f
)

218 
__THROW
 
	`__n⁄nuŒ
 ((3));

220 
	$°r‰oml
 (*
__de°
, 
size_t
 
__size
, c⁄° *
__f‹m©
,

221 
__f
)

222 
__THROW
 
	`__n⁄nuŒ
 ((3));

225 #i‡
__HAVE_FLOAT16
 && 
	`__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

226 
	$°r‰omf16
 (*
__de°
, 
size_t
 
__size
, c⁄° * 
__f‹m©
,

227 
_Flﬂt16
 
__f
)

228 
__THROW
 
	`__n⁄nuŒ
 ((3));

231 #i‡
__HAVE_FLOAT32
 && 
	`__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

232 
	$°r‰omf32
 (*
__de°
, 
size_t
 
__size
, c⁄° * 
__f‹m©
,

233 
_Flﬂt32
 
__f
)

234 
__THROW
 
	`__n⁄nuŒ
 ((3));

237 #i‡
__HAVE_FLOAT64
 && 
	`__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

238 
	$°r‰omf64
 (*
__de°
, 
size_t
 
__size
, c⁄° * 
__f‹m©
,

239 
_Flﬂt64
 
__f
)

240 
__THROW
 
	`__n⁄nuŒ
 ((3));

243 #i‡
__HAVE_FLOAT128
 && 
	`__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

244 
	$°r‰omf128
 (*
__de°
, 
size_t
 
__size
, c⁄° * 
__f‹m©
,

245 
_Flﬂt128
 
__f
)

246 
__THROW
 
	`__n⁄nuŒ
 ((3));

249 #i‡
__HAVE_FLOAT32X
 && 
	`__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

250 
	$°r‰omf32x
 (*
__de°
, 
size_t
 
__size
, c⁄° * 
__f‹m©
,

251 
_Flﬂt32x
 
__f
)

252 
__THROW
 
	`__n⁄nuŒ
 ((3));

255 #i‡
__HAVE_FLOAT64X
 && 
	`__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

256 
	$°r‰omf64x
 (*
__de°
, 
size_t
 
__size
, c⁄° * 
__f‹m©
,

257 
_Flﬂt64x
 
__f
)

258 
__THROW
 
	`__n⁄nuŒ
 ((3));

261 #i‡
__HAVE_FLOAT128X
 && 
	`__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

262 
	$°r‰omf128x
 (*
__de°
, 
size_t
 
__size
, c⁄° * 
__f‹m©
,

263 
_Flﬂt128x
 
__f
)

264 
__THROW
 
	`__n⁄nuŒ
 ((3));

268 #ifde‡
__USE_GNU


272 
	~<bôs/ty≥s/loˇÀ_t.h
>

274 
	$°πﬁ_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

275 **
__ª°ri˘
 
__íd±r
, 
__ba£
,

276 
loˇÀ_t
 
__loc
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 4));

278 
	$°πoul_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

279 **
__ª°ri˘
 
__íd±r
,

280 
__ba£
, 
loˇÀ_t
 
__loc
)

281 
__THROW
 
	`__n⁄nuŒ
 ((1, 4));

283 
__exãnsi⁄__


284 
	$°πﬁl_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

285 **
__ª°ri˘
 
__íd±r
, 
__ba£
,

286 
loˇÀ_t
 
__loc
)

287 
__THROW
 
	`__n⁄nuŒ
 ((1, 4));

289 
__exãnsi⁄__


290 
	$°πouŒ_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

291 **
__ª°ri˘
 
__íd±r
,

292 
__ba£
, 
loˇÀ_t
 
__loc
)

293 
__THROW
 
	`__n⁄nuŒ
 ((1, 4));

295 
	$°πod_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

296 **
__ª°ri˘
 
__íd±r
, 
loˇÀ_t
 
__loc
)

297 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

299 
	$°πof_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

300 **
__ª°ri˘
 
__íd±r
, 
loˇÀ_t
 
__loc
)

301 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

303 
	$°πﬁd_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

304 **
__ª°ri˘
 
__íd±r
,

305 
loˇÀ_t
 
__loc
)

306 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

308 #i‡
__HAVE_FLOAT16


309 
_Flﬂt16
 
	$°πof16_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

310 **
__ª°ri˘
 
__íd±r
,

311 
loˇÀ_t
 
__loc
)

312 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

315 #i‡
__HAVE_FLOAT32


316 
_Flﬂt32
 
	$°πof32_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

317 **
__ª°ri˘
 
__íd±r
,

318 
loˇÀ_t
 
__loc
)

319 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

322 #i‡
__HAVE_FLOAT64


323 
_Flﬂt64
 
	$°πof64_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

324 **
__ª°ri˘
 
__íd±r
,

325 
loˇÀ_t
 
__loc
)

326 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

329 #i‡
__HAVE_FLOAT128


330 
_Flﬂt128
 
	$°πof128_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

331 **
__ª°ri˘
 
__íd±r
,

332 
loˇÀ_t
 
__loc
)

333 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

336 #i‡
__HAVE_FLOAT32X


337 
_Flﬂt32x
 
	$°πof32x_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

338 **
__ª°ri˘
 
__íd±r
,

339 
loˇÀ_t
 
__loc
)

340 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

343 #i‡
__HAVE_FLOAT64X


344 
_Flﬂt64x
 
	$°πof64x_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

345 **
__ª°ri˘
 
__íd±r
,

346 
loˇÀ_t
 
__loc
)

347 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

350 #i‡
__HAVE_FLOAT128X


351 
_Flﬂt128x
 
	$°πof128x_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

352 **
__ª°ri˘
 
__íd±r
,

353 
loˇÀ_t
 
__loc
)

354 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

359 #ifde‡
__USE_EXTERN_INLINES


360 
__exã∫_ölöe
 

361 
	`__NTH
 (
	$©oi
 (c⁄° *
__≈å
))

363  (Ë
	`°πﬁ
 (
__≈å
, (**Ë
NULL
, 10);

364 
	}
}

365 
__exã∫_ölöe
 

366 
__NTH
 (
	$©ﬁ
 (c⁄° *
__≈å
))

368  
	`°πﬁ
 (
__≈å
, (**Ë
NULL
, 10);

369 
	}
}

371 #ifde‡
__USE_ISOC99


372 
__exãnsi⁄__
 
__exã∫_ölöe
 

373 
__NTH
 (
	$©ﬁl
 (c⁄° *
__≈å
))

375  
	`°πﬁl
 (
__≈å
, (**Ë
NULL
, 10);

376 
	}
}

381 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED


385 *
	$l64a
 (
__n
Ë
__THROW
 
__wur
;

388 
	$a64l
 (c⁄° *
__s
)

389 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

393 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED


394 
	~<sys/ty≥s.h
>

401 
	$øndom
 (Ë
__THROW
;

404 
	$§™dom
 (
__£ed
Ë
__THROW
;

410 *
	$öô°©e
 (
__£ed
, *
__°©ebuf
,

411 
size_t
 
__°©ñí
Ë
__THROW
 
	`__n⁄nuŒ
 ((2));

415 *
	$£t°©e
 (*
__°©ebuf
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

418 #ifde‡
__USE_MISC


423 
	søndom_d©a


425 
öt32_t
 *
Âå
;

426 
öt32_t
 *
Ωå
;

427 
öt32_t
 *
°©e
;

428 
ønd_ty≥
;

429 
ønd_deg
;

430 
ønd_£p
;

431 
öt32_t
 *
íd_±r
;

434 
	$øndom_r
 (
øndom_d©a
 *
__ª°ri˘
 
__buf
,

435 
öt32_t
 *
__ª°ri˘
 
__ªsu…
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

437 
	$§™dom_r
 (
__£ed
, 
øndom_d©a
 *
__buf
)

438 
__THROW
 
	`__n⁄nuŒ
 ((2));

440 
	$öô°©e_r
 (
__£ed
, *
__ª°ri˘
 
__°©ebuf
,

441 
size_t
 
__°©ñí
,

442 
øndom_d©a
 *
__ª°ri˘
 
__buf
)

443 
__THROW
 
	`__n⁄nuŒ
 ((2, 4));

445 
	$£t°©e_r
 (*
__ª°ri˘
 
__°©ebuf
,

446 
øndom_d©a
 *
__ª°ri˘
 
__buf
)

447 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

453 
	$ønd
 (Ë
__THROW
;

455 
	$§™d
 (
__£ed
Ë
__THROW
;

457 #ifde‡
__USE_POSIX199506


459 
	$ønd_r
 (*
__£ed
Ë
__THROW
;

463 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


467 
	$dønd48
 (Ë
__THROW
;

468 
	$î™d48
 (
__xsubi
[3]Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

471 
	$Ã™d48
 (Ë
__THROW
;

472 
	$ƒ™d48
 (
__xsubi
[3])

473 
__THROW
 
	`__n⁄nuŒ
 ((1));

476 
	$mønd48
 (Ë
__THROW
;

477 
	$jønd48
 (
__xsubi
[3])

478 
__THROW
 
	`__n⁄nuŒ
 ((1));

481 
	$§™d48
 (
__£edvÆ
Ë
__THROW
;

482 *
	$£ed48
 (
__£ed16v
[3])

483 
__THROW
 
	`__n⁄nuŒ
 ((1));

484 
	$lc⁄g48
 (
__∑øm
[7]Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

486 #ifde‡
__USE_MISC


490 
	sdønd48_d©a


492 
__x
[3];

493 
__ﬁd_x
[3];

494 
__c
;

495 
__öô
;

496 
__exãnsi⁄__
 
__a
;

501 
	$dønd48_r
 (
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

502 *
__ª°ri˘
 
__ªsu…
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

503 
	$î™d48_r
 (
__xsubi
[3],

504 
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

505 *
__ª°ri˘
 
__ªsu…
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

508 
	$Ã™d48_r
 (
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

509 *
__ª°ri˘
 
__ªsu…
)

510 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

511 
	$ƒ™d48_r
 (
__xsubi
[3],

512 
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

513 *
__ª°ri˘
 
__ªsu…
)

514 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

517 
	$mønd48_r
 (
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

518 *
__ª°ri˘
 
__ªsu…
)

519 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

520 
	$jønd48_r
 (
__xsubi
[3],

521 
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

522 *
__ª°ri˘
 
__ªsu…
)

523 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

526 
	$§™d48_r
 (
__£edvÆ
, 
dønd48_d©a
 *
__buf„r
)

527 
__THROW
 
	`__n⁄nuŒ
 ((2));

529 
	$£ed48_r
 (
__£ed16v
[3],

530 
dønd48_d©a
 *
__buf„r
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

532 
	$lc⁄g48_r
 (
__∑øm
[7],

533 
dønd48_d©a
 *
__buf„r
)

534 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

539 *
	$mÆloc
 (
size_t
 
__size
Ë
__THROW
 
__©åibuã_mÆloc__
 
__wur
;

541 *
	$ˇŒoc
 (
size_t
 
__nmemb
, size_à
__size
)

542 
__THROW
 
__©åibuã_mÆloc__
 
__wur
;

549 *
	$ªÆloc
 (*
__±r
, 
size_t
 
__size
)

550 
__THROW
 
__©åibuã_w¨n_unu£d_ªsu…__
;

552 #ifde‡
__USE_GNU


558 *
	$ªÆloˇºay
 (*
__±r
, 
size_t
 
__nmemb
, size_à
__size
)

559 
__THROW
 
__©åibuã_w¨n_unu£d_ªsu…__
;

563 
	$‰ì
 (*
__±r
Ë
__THROW
;

565 #ifde‡
__USE_MISC


566 
	~<Æloˇ.h
>

569 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K
) \

570 || 
deföed
 
__USE_MISC


572 *
	$vÆloc
 (
size_t
 
__size
Ë
__THROW
 
__©åibuã_mÆloc__
 
__wur
;

575 #ifde‡
__USE_XOPEN2K


577 
	$posix_memÆign
 (**
__mem±r
, 
size_t
 
__Æignmít
, size_à
__size
)

578 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

581 #ifde‡
__USE_ISOC11


583 *
	$Æig√d_Æloc
 (
size_t
 
__Æignmít
, size_à
__size
)

584 
__THROW
 
__©åibuã_mÆloc__
 
	`__©åibuã_Æloc_size__
 ((2)Ë
__wur
;

588 
	$ab‹t
 (Ë
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

592 
	$©exô
 ((*
__func
Ë()Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

594 #i‡
deföed
 
__USE_ISOC11
 || deföed 
__USE_ISOCXX11


596 #ifde‡
__˝lu•lus


597 "C++" 
	$©_quick_exô
 ((*
__func
) ())

598 
__THROW
 
	`__asm
 ("©_quick_exô"Ë
	`__n⁄nuŒ
 ((1));

600 
	$©_quick_exô
 ((*
__func
Ë()Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

604 #ifdef 
__USE_MISC


607 
	$⁄_exô
 ((*
__func
Ë(
__°©us
, *
__¨g
), *__arg)

608 
__THROW
 
	`__n⁄nuŒ
 ((1));

614 
	$exô
 (
__°©us
Ë
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

616 #i‡
deföed
 
__USE_ISOC11
 || deföed 
__USE_ISOCXX11


620 
	$quick_exô
 (
__°©us
Ë
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

623 #ifde‡
__USE_ISOC99


626 
	$_Exô
 (
__°©us
Ë
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

631 *
	$gëív
 (c⁄° *
__«me
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

633 #ifde‡
__USE_GNU


636 *
	$£cuª_gëív
 (c⁄° *
__«me
)

637 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

640 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


644 
	$puãnv
 (*
__°rög
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

647 #ifde‡
__USE_XOPEN2K


650 
	$£ãnv
 (c⁄° *
__«me
, c⁄° *
__vÆue
, 
__ª∂a˚
)

651 
__THROW
 
	`__n⁄nuŒ
 ((2));

654 
	$un£ãnv
 (c⁄° *
__«me
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

657 #ifdef 
__USE_MISC


661 
	$˛óªnv
 (Ë
__THROW
;

665 #i‡
deföed
 
__USE_MISC
 \

666 || (
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K8
)

672 *
	$mkãmp
 (*
__ãm∂©e
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

675 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


684 #i‚de‡
__USE_FILE_OFFSET64


685 
	$mk°emp
 (*
__ãm∂©e
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

687 #ifde‡
__REDIRECT


688 
	`__REDIRECT
 (
mk°emp
, (*
__ãm∂©e
), 
mk°emp64
)

689 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

691 
	#mk°emp
 
mk°emp64


	)

694 #ifde‡
__USE_LARGEFILE64


695 
	$mk°emp64
 (*
__ãm∂©e
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

699 #ifde‡
__USE_MISC


706 #i‚de‡
__USE_FILE_OFFSET64


707 
	$mk°emps
 (*
__ãm∂©e
, 
__suffixÀn
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

709 #ifde‡
__REDIRECT


710 
	`__REDIRECT
 (
mk°emps
, (*
__ãm∂©e
, 
__suffixÀn
),

711 
mk°emps64
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

713 
	#mk°emps
 
mk°emps64


	)

716 #ifde‡
__USE_LARGEFILE64


717 
	$mk°emps64
 (*
__ãm∂©e
, 
__suffixÀn
)

718 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

722 #ifde‡
__USE_XOPEN2K8


728 *
	$mkdãmp
 (*
__ãm∂©e
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

731 #ifde‡
__USE_GNU


738 #i‚de‡
__USE_FILE_OFFSET64


739 
	$mko°emp
 (*
__ãm∂©e
, 
__Êags
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

741 #ifde‡
__REDIRECT


742 
	`__REDIRECT
 (
mko°emp
, (*
__ãm∂©e
, 
__Êags
), 
mko°emp64
)

743 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

745 
	#mko°emp
 
mko°emp64


	)

748 #ifde‡
__USE_LARGEFILE64


749 
	$mko°emp64
 (*
__ãm∂©e
, 
__Êags
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

758 #i‚de‡
__USE_FILE_OFFSET64


759 
	$mko°emps
 (*
__ãm∂©e
, 
__suffixÀn
, 
__Êags
)

760 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

762 #ifde‡
__REDIRECT


763 
	`__REDIRECT
 (
mko°emps
, (*
__ãm∂©e
, 
__suffixÀn
,

764 
__Êags
), 
mko°emps64
)

765 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

767 
	#mko°emps
 
mko°emps64


	)

770 #ifde‡
__USE_LARGEFILE64


771 
	$mko°emps64
 (*
__ãm∂©e
, 
__suffixÀn
, 
__Êags
)

772 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

781 
	$sy°em
 (c⁄° *
__comm™d
Ë
__wur
;

784 #ifdef 
__USE_GNU


787 *
	$ˇn⁄iˇlize_fûe_«me
 (c⁄° *
__«me
)

788 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

791 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED


797 *
	$ªÆ∑th
 (c⁄° *
__ª°ri˘
 
__«me
,

798 *
__ª°ri˘
 
__ªsﬁved
Ë
__THROW
 
__wur
;

803 #i‚de‡
__COMPAR_FN_T


804 
	#__COMPAR_FN_T


	)

805 (*
	t__com∑r_‚_t
) (const *, const *);

807 #ifdef 
__USE_GNU


808 
__com∑r_‚_t
 
	tcom∑ris⁄_‚_t
;

811 #ifde‡
__USE_GNU


812 (*
	t__com∑r_d_‚_t
) (const *, const *, *);

817 *
	$b£¨ch
 (c⁄° *
__key
, c⁄° *
__ba£
,

818 
size_t
 
__nmemb
, size_à
__size
, 
__com∑r_‚_t
 
__com∑r
)

819 
	`__n⁄nuŒ
 ((1, 2, 5)Ë
__wur
;

821 #ifde‡
__USE_EXTERN_INLINES


822 
	~<bôs/°dlib-b£¨ch.h
>

827 
	$qs‹t
 (*
__ba£
, 
size_t
 
__nmemb
, size_à
__size
,

828 
__com∑r_‚_t
 
__com∑r
Ë
	`__n⁄nuŒ
 ((1, 4));

829 #ifde‡
__USE_GNU


830 
	$qs‹t_r
 (*
__ba£
, 
size_t
 
__nmemb
, size_à
__size
,

831 
__com∑r_d_‚_t
 
__com∑r
, *
__¨g
)

832 
	`__n⁄nuŒ
 ((1, 4));

837 
	$abs
 (
__x
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

838 
	$œbs
 (
__x
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

840 #ifde‡
__USE_ISOC99


841 
__exãnsi⁄__
 
	$Œabs
 (
__x
)

842 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

849 
div_t
 
	$div
 (
__numî
, 
__díom
)

850 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

851 
ldiv_t
 
	$ldiv
 (
__numî
, 
__díom
)

852 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

854 #ifde‡
__USE_ISOC99


855 
__exãnsi⁄__
 
Œdiv_t
 
	$Œdiv
 (
__numî
,

856 
__díom
)

857 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

861 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K8
) \

862 || 
deföed
 
__USE_MISC


869 *
	$ecvt
 (
__vÆue
, 
__ndigô
, *
__ª°ri˘
 
__de˝t
,

870 *
__ª°ri˘
 
__sign
Ë
__THROW
 
	`__n⁄nuŒ
 ((3, 4)Ë
__wur
;

875 *
	$fcvt
 (
__vÆue
, 
__ndigô
, *
__ª°ri˘
 
__de˝t
,

876 *
__ª°ri˘
 
__sign
Ë
__THROW
 
	`__n⁄nuŒ
 ((3, 4)Ë
__wur
;

881 *
	$gcvt
 (
__vÆue
, 
__ndigô
, *
__buf
)

882 
__THROW
 
	`__n⁄nuŒ
 ((3)Ë
__wur
;

885 #ifde‡
__USE_MISC


887 *
	$qecvt
 (
__vÆue
, 
__ndigô
,

888 *
__ª°ri˘
 
__de˝t
, *__ª°ri˘ 
__sign
)

889 
__THROW
 
	`__n⁄nuŒ
 ((3, 4)Ë
__wur
;

890 *
	$qfcvt
 (
__vÆue
, 
__ndigô
,

891 *
__ª°ri˘
 
__de˝t
, *__ª°ri˘ 
__sign
)

892 
__THROW
 
	`__n⁄nuŒ
 ((3, 4)Ë
__wur
;

893 *
	$qgcvt
 (
__vÆue
, 
__ndigô
, *
__buf
)

894 
__THROW
 
	`__n⁄nuŒ
 ((3)Ë
__wur
;

899 
	$ecvt_r
 (
__vÆue
, 
__ndigô
, *
__ª°ri˘
 
__de˝t
,

900 *
__ª°ri˘
 
__sign
, *__ª°ri˘ 
__buf
,

901 
size_t
 
__Àn
Ë
__THROW
 
	`__n⁄nuŒ
 ((3, 4, 5));

902 
	$fcvt_r
 (
__vÆue
, 
__ndigô
, *
__ª°ri˘
 
__de˝t
,

903 *
__ª°ri˘
 
__sign
, *__ª°ri˘ 
__buf
,

904 
size_t
 
__Àn
Ë
__THROW
 
	`__n⁄nuŒ
 ((3, 4, 5));

906 
	$qecvt_r
 (
__vÆue
, 
__ndigô
,

907 *
__ª°ri˘
 
__de˝t
, *__ª°ri˘ 
__sign
,

908 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
)

909 
__THROW
 
	`__n⁄nuŒ
 ((3, 4, 5));

910 
	$qfcvt_r
 (
__vÆue
, 
__ndigô
,

911 *
__ª°ri˘
 
__de˝t
, *__ª°ri˘ 
__sign
,

912 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
)

913 
__THROW
 
	`__n⁄nuŒ
 ((3, 4, 5));

919 
	$mbÀn
 (c⁄° *
__s
, 
size_t
 
__n
Ë
__THROW
;

922 
	$mbtowc
 (
wch¨_t
 *
__ª°ri˘
 
__pwc
,

923 c⁄° *
__ª°ri˘
 
__s
, 
size_t
 
__n
Ë
__THROW
;

926 
	$w˘omb
 (*
__s
, 
wch¨_t
 
__wch¨
Ë
__THROW
;

930 
size_t
 
	$mb°owcs
 (
wch¨_t
 *
__ª°ri˘
 
__pwcs
,

931 c⁄° *
__ª°ri˘
 
__s
, 
size_t
 
__n
Ë
__THROW
;

933 
size_t
 
	$wc°ombs
 (*
__ª°ri˘
 
__s
,

934 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__pwcs
, 
size_t
 
__n
)

935 
__THROW
;

938 #ifde‡
__USE_MISC


943 
	$Ωm©ch
 (c⁄° *
__ª•⁄£
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

947 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


954 
	$gësub›t
 (**
__ª°ri˘
 
__›ti⁄p
,

955 *c⁄° *
__ª°ri˘
 
__tokís
,

956 **
__ª°ri˘
 
__vÆuï
)

957 
__THROW
 
	`__n⁄nuŒ
 ((1, 2, 3)Ë
__wur
;

961 #ifde‡
__USE_XOPEN


963 
	$£tkey
 (c⁄° *
__key
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

969 #ifde‡
__USE_XOPEN2KXSI


971 
	$posix_›í±
 (
__oÊag
Ë
__wur
;

974 #ifde‡
__USE_XOPEN_EXTENDED


979 
	$gø¡±
 (
__fd
Ë
__THROW
;

983 
	$u∆ock±
 (
__fd
Ë
__THROW
;

988 *
	$±¢ame
 (
__fd
Ë
__THROW
 
__wur
;

991 #ifde‡
__USE_GNU


995 
	$±¢ame_r
 (
__fd
, *
__buf
, 
size_t
 
__buÊí
)

996 
__THROW
 
	`__n⁄nuŒ
 ((2));

999 
	`gë±
 ();

1002 #ifde‡
__USE_MISC


1006 
	$gëlﬂdavg
 (
__lﬂdavg
[], 
__√Àm
)

1007 
__THROW
 
	`__n⁄nuŒ
 ((1));

1010 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K


1013 
	$ây¶Ÿ
 (Ë
__THROW
;

1016 
	~<bôs/°dlib-Êﬂt.h
>

1019 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__f‹tify_fun˘i⁄


1020 
	~<bôs/°dlib.h
>

1022 #ifde‡
__LDBL_COMPAT


1023 
	~<bôs/°dlib-ldbl.h
>

1026 
__END_DECLS


	@/usr/include/string.h

22 #i‚def 
_STRING_H


23 
	#_STRING_H
 1

	)

25 
	#__GLIBC_INTERNAL_STARTING_HEADER_IMPLEMENTATION


	)

26 
	~<bôs/libc-hódî-°¨t.h
>

28 
	g__BEGIN_DECLS


31 
	#__√ed_size_t


	)

32 
	#__√ed_NULL


	)

33 
	~<°ddef.h
>

36 #i‡
deföed
 
__˝lu•lus
 && 
__GNUC_PREREQ
 (4, 4)

37 
	#__CORRECT_ISO_CPP_STRING_H_PROTO


	)

42 *
	$mem˝y
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
,

43 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

46 *
	$memmove
 (*
__de°
, c⁄° *
__§c
, 
size_t
 
__n
)

47 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

52 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


53 *
	$memc˝y
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
,

54 
__c
, 
size_t
 
__n
)

55 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

60 *
	$mem£t
 (*
__s
, 
__c
, 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

63 
	$memcmp
 (c⁄° *
__s1
, c⁄° *
__s2
, 
size_t
 
__n
)

64 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

67 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


70 *
	`memchr
 (*
__s
, 
__c
, 
size_t
 
__n
)

71 
__THROW
 
	`__asm
 ("memchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

72 c⁄° *
	`memchr
 (c⁄° *
__s
, 
__c
, 
size_t
 
__n
)

73 
__THROW
 
	`__asm
 ("memchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

75 #ifde‡
__OPTIMIZE__


76 
__exã∫_Æways_ölöe
 *

77 
	`memchr
 (*
__s
, 
__c
, 
size_t
 
__n
Ë
__THROW


79  
	`__buûtö_memchr
 (
__s
, 
__c
, 
__n
);

82 
__exã∫_Æways_ölöe
 const *

83 
	`memchr
 (c⁄° *
__s
, 
__c
, 
size_t
 
__n
Ë
__THROW


85  
	`__buûtö_memchr
 (
__s
, 
__c
, 
__n
);

88 
	}
}

90 *
	$memchr
 (c⁄° *
__s
, 
__c
, 
size_t
 
__n
)

91 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

94 #ifde‡
__USE_GNU


97 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


98 "C++" *
	$øwmemchr
 (*
__s
, 
__c
)

99 
__THROW
 
	`__asm
 ("øwmemchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

100 "C++" c⁄° *
	$øwmemchr
 (c⁄° *
__s
, 
__c
)

101 
__THROW
 
	`__asm
 ("øwmemchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

103 *
	$øwmemchr
 (c⁄° *
__s
, 
__c
)

104 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

108 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


109 "C++" *
	$memrchr
 (*
__s
, 
__c
, 
size_t
 
__n
)

110 
__THROW
 
	`__asm
 ("memrchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

111 "C++" c⁄° *
	$memrchr
 (c⁄° *
__s
, 
__c
, 
size_t
 
__n
)

112 
__THROW
 
	`__asm
 ("memrchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

114 *
	$memrchr
 (c⁄° *
__s
, 
__c
, 
size_t
 
__n
)

115 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

121 *
	$°r˝y
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
)

122 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

124 *
	$°∫˝y
 (*
__ª°ri˘
 
__de°
,

125 c⁄° *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

126 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

129 *
	$°rˇt
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
)

130 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

132 *
	$°∫ˇt
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
,

133 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

136 
	$°rcmp
 (c⁄° *
__s1
, c⁄° *
__s2
)

137 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

139 
	$°∫cmp
 (c⁄° *
__s1
, c⁄° *
__s2
, 
size_t
 
__n
)

140 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

143 
	$°rcﬁl
 (c⁄° *
__s1
, c⁄° *
__s2
)

144 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

146 
size_t
 
	$°rx‰m
 (*
__ª°ri˘
 
__de°
,

147 c⁄° *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

148 
__THROW
 
	`__n⁄nuŒ
 ((2));

150 #ifde‡
__USE_XOPEN2K8


152 
	~<bôs/ty≥s/loˇÀ_t.h
>

155 
	$°rcﬁl_l
 (c⁄° *
__s1
, c⁄° *
__s2
, 
loˇÀ_t
 
__l
)

156 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2, 3));

159 
size_t
 
	$°rx‰m_l
 (*
__de°
, c⁄° *
__§c
, 
size_t
 
__n
,

160 
loˇÀ_t
 
__l
Ë
__THROW
 
	`__n⁄nuŒ
 ((2, 4));

163 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8
 \

164 || 
	$__GLIBC_USE
 (
LIB_EXT2
))

166 *
	$°rdup
 (c⁄° *
__s
)

167 
__THROW
 
__©åibuã_mÆloc__
 
	`__n⁄nuŒ
 ((1));

173 #i‡
deföed
 
__USE_XOPEN2K8
 || 
	`__GLIBC_USE
 (
LIB_EXT2
)

174 *
	$°∫dup
 (c⁄° *
__°rög
, 
size_t
 
__n
)

175 
__THROW
 
__©åibuã_mÆloc__
 
	`__n⁄nuŒ
 ((1));

178 #i‡
deföed
 
__USE_GNU
 && deföed 
__GNUC__


180 
	#°rdu∑
(
s
) \

181 (
__exãnsi⁄__
 \

183 c⁄° *
__ﬁd
 = (
s
); \

184 
size_t
 
__Àn
 = 
	`°æí
 (
__ﬁd
) + 1; \

185 *
__√w
 = (*Ë
	`__buûtö_Æloˇ
 (
__Àn
); \

186 (*Ë
	`mem˝y
 (
__√w
, 
__ﬁd
, 
__Àn
); \

187 
	}
}))

	)

190 
	#°∫du∑
(
s
, 
n
) \

191 (
__exãnsi⁄__
 \

193 c⁄° *
__ﬁd
 = (
s
); \

194 
size_t
 
__Àn
 = 
	`°∫Àn
 (
__ﬁd
, (
n
)); \

195 *
__√w
 = (*Ë
	`__buûtö_Æloˇ
 (
__Àn
 + 1); \

196 
__√w
[
__Àn
] = '\0'; \

197 (*Ë
	`mem˝y
 (
__√w
, 
__ﬁd
, 
__Àn
); \

198 }))

	)

202 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


205 *
°rchr
 (*
__s
, 
__c
)

206 
__THROW
 
__asm
 ("°rchr"Ë
__©åibuã_puª__
 
__n⁄nuŒ
 ((1));

207 c⁄° *
°rchr
 (c⁄° *
__s
, 
__c
)

208 
__THROW
 
__asm
 ("°rchr"Ë
__©åibuã_puª__
 
__n⁄nuŒ
 ((1));

210 #ifde‡
__OPTIMIZE__


211 
__exã∫_Æways_ölöe
 *

212 
°rchr
 (*
__s
, 
__c
Ë
	g__THROW


214  
__buûtö_°rchr
 (
__s
, 
__c
);

217 
__exã∫_Æways_ölöe
 const *

218 
°rchr
 (c⁄° *
__s
, 
__c
Ë
	g__THROW


220  
__buûtö_°rchr
 (
__s
, 
__c
);

225 *
	$°rchr
 (c⁄° *
__s
, 
__c
)

226 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

229 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


232 *
	`°ºchr
 (*
__s
, 
__c
)

233 
__THROW
 
	`__asm
 ("°ºchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

234 c⁄° *
	`°ºchr
 (c⁄° *
__s
, 
__c
)

235 
__THROW
 
	`__asm
 ("°ºchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

237 #ifde‡
__OPTIMIZE__


238 
__exã∫_Æways_ölöe
 *

239 
	`°ºchr
 (*
__s
, 
__c
Ë
__THROW


241  
	`__buûtö_°ºchr
 (
__s
, 
__c
);

244 
__exã∫_Æways_ölöe
 const *

245 
	`°ºchr
 (c⁄° *
__s
, 
__c
Ë
__THROW


247  
	`__buûtö_°ºchr
 (
__s
, 
__c
);

250 
	}
}

252 *
	$°ºchr
 (c⁄° *
__s
, 
__c
)

253 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

256 #ifde‡
__USE_GNU


259 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


260 "C++" *
	$°rch∫ul
 (*
__s
, 
__c
)

261 
__THROW
 
	`__asm
 ("°rch∫ul"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

262 "C++" c⁄° *
	$°rch∫ul
 (c⁄° *
__s
, 
__c
)

263 
__THROW
 
	`__asm
 ("°rch∫ul"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

265 *
	$°rch∫ul
 (c⁄° *
__s
, 
__c
)

266 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

272 
size_t
 
	$°rc•n
 (c⁄° *
__s
, c⁄° *
__ªje˘
)

273 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

276 
size_t
 
	$°r•n
 (c⁄° *
__s
, c⁄° *
__ac˚±
)

277 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

279 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


282 *
	`°Ωbrk
 (*
__s
, c⁄° *
__ac˚±
)

283 
__THROW
 
	`__asm
 ("°Ωbrk"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

284 c⁄° *
	`°Ωbrk
 (c⁄° *
__s
, c⁄° *
__ac˚±
)

285 
__THROW
 
	`__asm
 ("°Ωbrk"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

287 #ifde‡
__OPTIMIZE__


288 
__exã∫_Æways_ölöe
 *

289 
	`°Ωbrk
 (*
__s
, c⁄° *
__ac˚±
Ë
__THROW


291  
	`__buûtö_°Ωbrk
 (
__s
, 
__ac˚±
);

294 
__exã∫_Æways_ölöe
 const *

295 
	`°Ωbrk
 (c⁄° *
__s
, c⁄° *
__ac˚±
Ë
__THROW


297  
	`__buûtö_°Ωbrk
 (
__s
, 
__ac˚±
);

300 
	}
}

302 *
	$°Ωbrk
 (c⁄° *
__s
, c⁄° *
__ac˚±
)

303 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

306 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


309 *
	`°r°r
 (*
__hay°ack
, c⁄° *
__√edÀ
)

310 
__THROW
 
	`__asm
 ("°r°r"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

311 c⁄° *
	`°r°r
 (c⁄° *
__hay°ack
, c⁄° *
__√edÀ
)

312 
__THROW
 
	`__asm
 ("°r°r"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

314 #ifde‡
__OPTIMIZE__


315 
__exã∫_Æways_ölöe
 *

316 
	`°r°r
 (*
__hay°ack
, c⁄° *
__√edÀ
Ë
__THROW


318  
	`__buûtö_°r°r
 (
__hay°ack
, 
__√edÀ
);

321 
__exã∫_Æways_ölöe
 const *

322 
	`°r°r
 (c⁄° *
__hay°ack
, c⁄° *
__√edÀ
Ë
__THROW


324  
	`__buûtö_°r°r
 (
__hay°ack
, 
__√edÀ
);

327 
	}
}

329 *
	$°r°r
 (c⁄° *
__hay°ack
, c⁄° *
__√edÀ
)

330 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

335 *
	$°πok
 (*
__ª°ri˘
 
__s
, c⁄° *__ª°ri˘ 
__dñim
)

336 
__THROW
 
	`__n⁄nuŒ
 ((2));

340 *
	$__°πok_r
 (*
__ª°ri˘
 
__s
,

341 c⁄° *
__ª°ri˘
 
__dñim
,

342 **
__ª°ri˘
 
__ßve_±r
)

343 
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

344 #ifde‡
__USE_POSIX


345 *
	$°πok_r
 (*
__ª°ri˘
 
__s
, c⁄° *__ª°ri˘ 
__dñim
,

346 **
__ª°ri˘
 
__ßve_±r
)

347 
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

350 #ifde‡
__USE_GNU


352 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


353 "C++" *
	$°rˇ£°r
 (*
__hay°ack
, c⁄° *
__√edÀ
)

354 
__THROW
 
	`__asm
 ("°rˇ£°r"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

355 "C++" c⁄° *
	$°rˇ£°r
 (c⁄° *
__hay°ack
,

356 c⁄° *
__√edÀ
)

357 
__THROW
 
	`__asm
 ("°rˇ£°r"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

359 *
	$°rˇ£°r
 (c⁄° *
__hay°ack
, c⁄° *
__√edÀ
)

360 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

364 #ifde‡
__USE_GNU


368 *
	$memmem
 (c⁄° *
__hay°ack
, 
size_t
 
__hay°ackÀn
,

369 c⁄° *
__√edÀ
, 
size_t
 
__√edÀÀn
)

370 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 3));

374 *
	$__memp˝y
 (*
__ª°ri˘
 
__de°
,

375 c⁄° *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

376 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

377 *
	$memp˝y
 (*
__ª°ri˘
 
__de°
,

378 c⁄° *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

379 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

384 
size_t
 
	$°æí
 (c⁄° *
__s
)

385 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

387 #ifdef 
__USE_XOPEN2K8


390 
size_t
 
	$°∫Àn
 (c⁄° *
__°rög
, 
size_t
 
__maxÀn
)

391 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

396 *
	$°ªº‹
 (
__î∫um
Ë
__THROW
;

397 #ifde‡
__USE_XOPEN2K


405 #i‡
deföed
 
__USE_XOPEN2K
 && !deföed 
__USE_GNU


408 #ifde‡
__REDIRECT_NTH


409 
	`__REDIRECT_NTH
 (
°ªº‹_r
,

410 (
__î∫um
, *
__buf
, 
size_t
 
__buÊí
),

411 
__xpg_°ªº‹_r
Ë
	`__n⁄nuŒ
 ((2));

413 
	$__xpg_°ªº‹_r
 (
__î∫um
, *
__buf
, 
size_t
 
__buÊí
)

414 
__THROW
 
	`__n⁄nuŒ
 ((2));

415 
	#°ªº‹_r
 
__xpg_°ªº‹_r


	)

420 *
	$°ªº‹_r
 (
__î∫um
, *
__buf
, 
size_t
 
__buÊí
)

421 
__THROW
 
	`__n⁄nuŒ
 ((2)Ë
__wur
;

425 #ifde‡
__USE_XOPEN2K8


427 *
	$°ªº‹_l
 (
__î∫um
, 
loˇÀ_t
 
__l
Ë
__THROW
;

430 #ifde‡
__USE_MISC


431 
	~<°rögs.h
>

435 
	$ex∂icô_bzîo
 (*
__s
, 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

439 *
	$°r£p
 (**
__ª°ri˘
 
__°rögp
,

440 c⁄° *
__ª°ri˘
 
__dñim
)

441 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

444 #ifdef 
__USE_XOPEN2K8


446 *
	$°rsig«l
 (
__sig
Ë
__THROW
;

449 *
	$__°p˝y
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
)

450 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

451 *
	$°p˝y
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
)

452 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

456 *
	$__°≤˝y
 (*
__ª°ri˘
 
__de°
,

457 c⁄° *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

458 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

459 *
	$°≤˝y
 (*
__ª°ri˘
 
__de°
,

460 c⁄° *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

461 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

464 #ifdef 
__USE_GNU


466 
	$°rvîscmp
 (c⁄° *
__s1
, c⁄° *
__s2
)

467 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

470 *
	$°r‰y
 (*
__°rög
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

473 *
	$mem‰ob
 (*
__s
, 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

475 #i‚de‡
ba£«me


480 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


481 "C++" *
	$ba£«me
 (*
__fûíame
)

482 
__THROW
 
	`__asm
 ("ba£«me"Ë
	`__n⁄nuŒ
 ((1));

483 "C++" c⁄° *
	$ba£«me
 (c⁄° *
__fûíame
)

484 
__THROW
 
	`__asm
 ("ba£«me"Ë
	`__n⁄nuŒ
 ((1));

486 *
	$ba£«me
 (c⁄° *
__fûíame
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

491 #i‡
	`__GNUC_PREREQ
 (3,4)

492 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__f‹tify_fun˘i⁄


494 
	~<bôs/°rög_f‹tifõd.h
>

498 
__END_DECLS


	@/usr/include/unistd.h

22 #i‚def 
_UNISTD_H


23 
	#_UNISTD_H
 1

	)

25 
	~<„©uªs.h
>

27 
	g__BEGIN_DECLS


32 #ifde‡
__USE_XOPEN2K8


34 
	#_POSIX_VERSION
 200809L

	)

35 #ñi‡
deföed
 
__USE_XOPEN2K


37 
	#_POSIX_VERSION
 200112L

	)

38 #ñi‡
deföed
 
__USE_POSIX199506


40 
	#_POSIX_VERSION
 199506L

	)

41 #ñi‡
deföed
 
__USE_POSIX199309


43 
	#_POSIX_VERSION
 199309L

	)

46 
	#_POSIX_VERSION
 199009L

	)

52 #ifde‡
__USE_XOPEN2K8


53 
	#__POSIX2_THIS_VERSION
 200809L

	)

55 #ñi‡
deföed
 
__USE_XOPEN2K


57 
	#__POSIX2_THIS_VERSION
 200112L

	)

58 #ñi‡
deföed
 
__USE_POSIX199506


60 
	#__POSIX2_THIS_VERSION
 199506L

	)

63 
	#__POSIX2_THIS_VERSION
 199209L

	)

67 
	#_POSIX2_VERSION
 
__POSIX2_THIS_VERSION


	)

70 
	#_POSIX2_C_VERSION
 
__POSIX2_THIS_VERSION


	)

74 
	#_POSIX2_C_BIND
 
__POSIX2_THIS_VERSION


	)

78 
	#_POSIX2_C_DEV
 
__POSIX2_THIS_VERSION


	)

82 
	#_POSIX2_SW_DEV
 
__POSIX2_THIS_VERSION


	)

86 
	#_POSIX2_LOCALEDEF
 
__POSIX2_THIS_VERSION


	)

89 #ifde‡
__USE_XOPEN2K8


90 
	#_XOPEN_VERSION
 700

	)

91 #ñi‡
deföed
 
__USE_XOPEN2K


92 
	#_XOPEN_VERSION
 600

	)

93 #ñi‡
deföed
 
__USE_UNIX98


94 
	#_XOPEN_VERSION
 500

	)

96 
	#_XOPEN_VERSION
 4

	)

100 
	#_XOPEN_XCU_VERSION
 4

	)

103 
	#_XOPEN_XPG2
 1

	)

104 
	#_XOPEN_XPG3
 1

	)

105 
	#_XOPEN_XPG4
 1

	)

108 
	#_XOPEN_UNIX
 1

	)

111 
	#_XOPEN_CRYPT
 1

	)

115 
	#_XOPEN_ENH_I18N
 1

	)

118 
	#_XOPEN_LEGACY
 1

	)

205 
	~<bôs/posix_›t.h
>

208 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K


209 
	~<bôs/ívú⁄míts.h
>

213 
	#STDIN_FILENO
 0

	)

214 
	#STDOUT_FILENO
 1

	)

215 
	#STDERR_FILENO
 2

	)

220 
	~<bôs/ty≥s.h
>

222 #i‚def 
__ssize_t_deföed


223 
__ssize_t
 
	tssize_t
;

224 
	#__ssize_t_deföed


	)

227 
	#__√ed_size_t


	)

228 
	#__√ed_NULL


	)

229 
	~<°ddef.h
>

231 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K


234 #i‚de‡
__gid_t_deföed


235 
__gid_t
 
	tgid_t
;

236 
	#__gid_t_deföed


	)

239 #i‚de‡
__uid_t_deföed


240 
__uid_t
 
	tuid_t
;

241 
	#__uid_t_deföed


	)

244 #i‚de‡
__off_t_deföed


245 #i‚de‡
__USE_FILE_OFFSET64


246 
__off_t
 
	toff_t
;

248 
__off64_t
 
	toff_t
;

250 
	#__off_t_deföed


	)

252 #i‡
deföed
 
__USE_LARGEFILE64
 && !deföed 
__off64_t_deföed


253 
__off64_t
 
	toff64_t
;

254 
	#__off64_t_deföed


	)

257 #i‚de‡
__u£c⁄ds_t_deföed


258 
__u£c⁄ds_t
 
	tu£c⁄ds_t
;

259 
	#__u£c⁄ds_t_deföed


	)

262 #i‚de‡
__pid_t_deföed


263 
__pid_t
 
	tpid_t
;

264 
	#__pid_t_deföed


	)

268 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K


269 #i‚de‡
__öçå_t_deföed


270 
__öçå_t
 
	töçå_t
;

271 
	#__öçå_t_deföed


	)

275 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


276 #i‚de‡
__sockÀn_t_deföed


277 
__sockÀn_t
 
	tsockÀn_t
;

278 
	#__sockÀn_t_deföed


	)

284 
	#R_OK
 4

	)

285 
	#W_OK
 2

	)

286 
	#X_OK
 1

	)

287 
	#F_OK
 0

	)

290 
	$ac˚ss
 (c⁄° *
__«me
, 
__ty≥
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

292 #ifde‡
__USE_GNU


295 
	$euidac˚ss
 (c⁄° *
__«me
, 
__ty≥
)

296 
__THROW
 
	`__n⁄nuŒ
 ((1));

299 
	$óc˚ss
 (c⁄° *
__«me
, 
__ty≥
)

300 
__THROW
 
	`__n⁄nuŒ
 ((1));

303 #ifde‡
__USE_ATFILE


307 
	$Ác˚sßt
 (
__fd
, c⁄° *
__fûe
, 
__ty≥
, 
__Êag
)

308 
__THROW
 
	`__n⁄nuŒ
 ((2)Ë
__wur
;

313 #i‚def 
_STDIO_H


314 
	#SEEK_SET
 0

	)

315 
	#SEEK_CUR
 1

	)

316 
	#SEEK_END
 2

	)

317 #ifde‡
__USE_GNU


318 
	#SEEK_DATA
 3

	)

319 
	#SEEK_HOLE
 4

	)

323 #i‡
deföed
 
__USE_MISC
 && !deföed 
L_SET


325 
	#L_SET
 
SEEK_SET


	)

326 
	#L_INCR
 
SEEK_CUR


	)

327 
	#L_XTND
 
SEEK_END


	)

336 #i‚de‡
__USE_FILE_OFFSET64


337 
__off_t
 
	$l£ek
 (
__fd
, 
__off_t
 
__off£t
, 
__whí˚
Ë
__THROW
;

339 #ifde‡
__REDIRECT_NTH


340 
__off64_t
 
	`__REDIRECT_NTH
 (
l£ek
,

341 (
__fd
, 
__off64_t
 
__off£t
, 
__whí˚
),

342 
l£ek64
);

344 
	#l£ek
 
l£ek64


	)

347 #ifde‡
__USE_LARGEFILE64


348 
__off64_t
 
	$l£ek64
 (
__fd
, 
__off64_t
 
__off£t
, 
__whí˚
)

349 
__THROW
;

356 
	`˛o£
 (
__fd
);

363 
ssize_t
 
	$ªad
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
Ë
__wur
;

369 
ssize_t
 
	$wrôe
 (
__fd
, c⁄° *
__buf
, 
size_t
 
__n
Ë
__wur
;

371 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K8


372 #i‚de‡
__USE_FILE_OFFSET64


379 
ssize_t
 
	$¥ód
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

380 
__off_t
 
__off£t
Ë
__wur
;

387 
ssize_t
 
	$pwrôe
 (
__fd
, c⁄° *
__buf
, 
size_t
 
__n
,

388 
__off_t
 
__off£t
Ë
__wur
;

390 #ifde‡
__REDIRECT


391 
ssize_t
 
	`__REDIRECT
 (
¥ód
, (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

392 
__off64_t
 
__off£t
),

393 
¥ód64
Ë
__wur
;

394 
ssize_t
 
	`__REDIRECT
 (
pwrôe
, (
__fd
, c⁄° *
__buf
,

395 
size_t
 
__nbyãs
, 
__off64_t
 
__off£t
),

396 
pwrôe64
Ë
__wur
;

398 
	#¥ód
 
¥ód64


	)

399 
	#pwrôe
 
pwrôe64


	)

403 #ifde‡
__USE_LARGEFILE64


407 
ssize_t
 
	$¥ód64
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

408 
__off64_t
 
__off£t
Ë
__wur
;

411 
ssize_t
 
	$pwrôe64
 (
__fd
, c⁄° *
__buf
, 
size_t
 
__n
,

412 
__off64_t
 
__off£t
Ë
__wur
;

420 
	$pùe
 (
__pùedes
[2]Ë
__THROW
 
__wur
;

422 #ifde‡
__USE_GNU


425 
	$pùe2
 (
__pùedes
[2], 
__Êags
Ë
__THROW
 
__wur
;

435 
	$Æ¨m
 (
__£c⁄ds
Ë
__THROW
;

447 
	`¶ìp
 (
__£c⁄ds
);

449 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K8
) \

450 || 
deföed
 
__USE_MISC


455 
__u£c⁄ds_t
 
	$uÆ¨m
 (
__u£c⁄ds_t
 
__vÆue
, __u£c⁄ds_à
__öãrvÆ
)

456 
__THROW
;

463 
	`u¶ìp
 (
__u£c⁄ds_t
 
__u£c⁄ds
);

472 
	`∑u£
 ();

476 
	$chown
 (c⁄° *
__fûe
, 
__uid_t
 
__ow√r
, 
__gid_t
 
__group
)

477 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

479 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


481 
	$fchown
 (
__fd
, 
__uid_t
 
__ow√r
, 
__gid_t
 
__group
Ë
__THROW
 
__wur
;

486 
	$lchown
 (c⁄° *
__fûe
, 
__uid_t
 
__ow√r
, 
__gid_t
 
__group
)

487 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

491 #ifde‡
__USE_ATFILE


494 
	$fchow«t
 (
__fd
, c⁄° *
__fûe
, 
__uid_t
 
__ow√r
,

495 
__gid_t
 
__group
, 
__Êag
)

496 
__THROW
 
	`__n⁄nuŒ
 ((2)Ë
__wur
;

500 
	$chdú
 (c⁄° *
__∑th
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

502 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


504 
	$fchdú
 (
__fd
Ë
__THROW
 
__wur
;

514 *
	$gëcwd
 (*
__buf
, 
size_t
 
__size
Ë
__THROW
 
__wur
;

516 #ifdef 
__USE_GNU


520 *
	$gë_cuºít_dú_«me
 (Ë
__THROW
;

523 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K8
) \

524 || 
deföed
 
__USE_MISC


528 *
	$gëwd
 (*
__buf
)

529 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__©åibuã_dïªˇãd__
 
__wur
;

534 
	$dup
 (
__fd
Ë
__THROW
 
__wur
;

537 
	$dup2
 (
__fd
, 
__fd2
Ë
__THROW
;

539 #ifde‡
__USE_GNU


542 
	$dup3
 (
__fd
, 
__fd2
, 
__Êags
Ë
__THROW
;

546 **
__ívú⁄
;

547 #ifde‡
__USE_GNU


548 **
ívú⁄
;

554 
	$execve
 (c⁄° *
__∑th
, *c⁄° 
__¨gv
[],

555 *c⁄° 
__ívp
[]Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

557 #ifde‡
__USE_XOPEN2K8


560 
	$„xecve
 (
__fd
, *c⁄° 
__¨gv
[], *c⁄° 
__ívp
[])

561 
__THROW
 
	`__n⁄nuŒ
 ((2));

566 
	$execv
 (c⁄° *
__∑th
, *c⁄° 
__¨gv
[])

567 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

571 
	$exe˛e
 (c⁄° *
__∑th
, c⁄° *
__¨g
, ...)

572 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

576 
	$exe˛
 (c⁄° *
__∑th
, c⁄° *
__¨g
, ...)

577 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

581 
	$execvp
 (c⁄° *
__fûe
, *c⁄° 
__¨gv
[])

582 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

587 
	$exe˛p
 (c⁄° *
__fûe
, c⁄° *
__¨g
, ...)

588 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

590 #ifde‡
__USE_GNU


593 
	$execv≥
 (c⁄° *
__fûe
, *c⁄° 
__¨gv
[],

594 *c⁄° 
__ívp
[])

595 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

599 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


601 
	$ni˚
 (
__öc
Ë
__THROW
 
__wur
;

606 
	$_exô
 (
__°©us
Ë
	`__©åibuã__
 ((
__n‹ëu∫__
));

612 
	~<bôs/c⁄‚ame.h
>

615 
	$∑thc⁄f
 (c⁄° *
__∑th
, 
__«me
)

616 
__THROW
 
	`__n⁄nuŒ
 ((1));

619 
	$Â©hc⁄f
 (
__fd
, 
__«me
Ë
__THROW
;

622 
	$sysc⁄f
 (
__«me
Ë
__THROW
;

624 #ifdef 
__USE_POSIX2


626 
size_t
 
	$c⁄f°r
 (
__«me
, *
__buf
, 
size_t
 
__Àn
Ë
__THROW
;

631 
__pid_t
 
	$gëpid
 (Ë
__THROW
;

634 
__pid_t
 
	$gëµid
 (Ë
__THROW
;

637 
__pid_t
 
	$gëpgΩ
 (Ë
__THROW
;

640 
__pid_t
 
	$__gëpgid
 (
__pid_t
 
__pid
Ë
__THROW
;

641 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


642 
__pid_t
 
	$gëpgid
 (
__pid_t
 
__pid
Ë
__THROW
;

649 
	$£çgid
 (
__pid_t
 
__pid
, __pid_à
__pgid
Ë
__THROW
;

651 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED


663 
	$£çgΩ
 (Ë
__THROW
;

670 
__pid_t
 
	$£tsid
 (Ë
__THROW
;

672 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


674 
__pid_t
 
	$gësid
 (
__pid_t
 
__pid
Ë
__THROW
;

678 
__uid_t
 
	$gëuid
 (Ë
__THROW
;

681 
__uid_t
 
	$gëeuid
 (Ë
__THROW
;

684 
__gid_t
 
	$gëgid
 (Ë
__THROW
;

687 
__gid_t
 
	$gëegid
 (Ë
__THROW
;

692 
	$gëgroups
 (
__size
, 
__gid_t
 
__li°
[]Ë
__THROW
 
__wur
;

694 #ifdef 
__USE_GNU


696 
	$group_membî
 (
__gid_t
 
__gid
Ë
__THROW
;

703 
	$£tuid
 (
__uid_t
 
__uid
Ë
__THROW
 
__wur
;

705 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED


708 
	$£åeuid
 (
__uid_t
 
__ruid
, __uid_à
__euid
Ë
__THROW
 
__wur
;

711 #ifde‡
__USE_XOPEN2K


713 
	$£ãuid
 (
__uid_t
 
__uid
Ë
__THROW
 
__wur
;

720 
	$£tgid
 (
__gid_t
 
__gid
Ë
__THROW
 
__wur
;

722 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED


725 
	$£åegid
 (
__gid_t
 
__rgid
, __gid_à
__egid
Ë
__THROW
 
__wur
;

728 #ifde‡
__USE_XOPEN2K


730 
	$£ãgid
 (
__gid_t
 
__gid
Ë
__THROW
 
__wur
;

733 #ifde‡
__USE_GNU


736 
	$gëªsuid
 (
__uid_t
 *
__ruid
, __uid_à*
__euid
, __uid_à*
__suid
)

737 
__THROW
;

741 
	$gëªsgid
 (
__gid_t
 *
__rgid
, __gid_à*
__egid
, __gid_à*
__sgid
)

742 
__THROW
;

746 
	$£åesuid
 (
__uid_t
 
__ruid
, __uid_à
__euid
, __uid_à
__suid
)

747 
__THROW
 
__wur
;

751 
	$£åesgid
 (
__gid_t
 
__rgid
, __gid_à
__egid
, __gid_à
__sgid
)

752 
__THROW
 
__wur
;

759 
__pid_t
 
	$f‹k
 (Ë
__THROWNL
;

761 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K8
) \

762 || 
deföed
 
__USE_MISC


767 
__pid_t
 
	$vf‹k
 (Ë
__THROW
;

773 *
	$ây«me
 (
__fd
Ë
__THROW
;

777 
	$ây«me_r
 (
__fd
, *
__buf
, 
size_t
 
__buÊí
)

778 
__THROW
 
	`__n⁄nuŒ
 ((2)Ë
__wur
;

782 
	$ißây
 (
__fd
Ë
__THROW
;

784 #ifde‡
__USE_MISC


787 
	$ây¶Ÿ
 (Ë
__THROW
;

792 
	$lök
 (c⁄° *
__‰om
, c⁄° *
__to
)

793 
__THROW
 
	`__n⁄nuŒ
 ((1, 2)Ë
__wur
;

795 #ifde‡
__USE_ATFILE


798 
	$lök©
 (
__‰omfd
, c⁄° *
__‰om
, 
__tofd
,

799 c⁄° *
__to
, 
__Êags
)

800 
__THROW
 
	`__n⁄nuŒ
 ((2, 4)Ë
__wur
;

803 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K


805 
	$symlök
 (c⁄° *
__‰om
, c⁄° *
__to
)

806 
__THROW
 
	`__n⁄nuŒ
 ((1, 2)Ë
__wur
;

811 
ssize_t
 
	$ªadlök
 (c⁄° *
__ª°ri˘
 
__∑th
,

812 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
)

813 
__THROW
 
	`__n⁄nuŒ
 ((1, 2)Ë
__wur
;

816 #ifde‡
__USE_ATFILE


818 
	$symlök©
 (c⁄° *
__‰om
, 
__tofd
,

819 c⁄° *
__to
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 3)Ë
__wur
;

822 
ssize_t
 
	$ªadlök©
 (
__fd
, c⁄° *
__ª°ri˘
 
__∑th
,

823 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
)

824 
__THROW
 
	`__n⁄nuŒ
 ((2, 3)Ë
__wur
;

828 
	$u∆ök
 (c⁄° *
__«me
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

830 #ifde‡
__USE_ATFILE


832 
	$u∆ök©
 (
__fd
, c⁄° *
__«me
, 
__Êag
)

833 
__THROW
 
	`__n⁄nuŒ
 ((2));

837 
	$rmdú
 (c⁄° *
__∑th
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

841 
__pid_t
 
	$tcgëpgΩ
 (
__fd
Ë
__THROW
;

844 
	$tc£çgΩ
 (
__fd
, 
__pid_t
 
__pgΩ_id
Ë
__THROW
;

851 *
	`gëlogö
 ();

852 #ifde‡
__USE_POSIX199506


859 
	$gëlogö_r
 (*
__«me
, 
size_t
 
__«me_Àn
Ë
	`__n⁄nuŒ
 ((1));

862 #ifdef 
__USE_MISC


864 
	$£éogö
 (c⁄° *
__«me
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

868 #ifdef 
__USE_POSIX2


872 
	~<bôs/gë›t_posix.h
>

876 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K


880 
	$gëho°«me
 (*
__«me
, 
size_t
 
__Àn
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

884 #i‡
deföed
 
__USE_MISC


887 
	$£tho°«me
 (c⁄° *
__«me
, 
size_t
 
__Àn
)

888 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

892 
	$£tho°id
 (
__id
Ë
__THROW
 
__wur
;

898 
	$gëdomaö«me
 (*
__«me
, 
size_t
 
__Àn
)

899 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

900 
	$£tdomaö«me
 (c⁄° *
__«me
, 
size_t
 
__Àn
)

901 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

907 
	$vh™gup
 (Ë
__THROW
;

910 
	$ªvoke
 (c⁄° *
__fûe
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

918 
	$¥ofû
 (*
__ßm∂e_buf„r
, 
size_t
 
__size
,

919 
size_t
 
__off£t
, 
__sˇÀ
)

920 
__THROW
 
	`__n⁄nuŒ
 ((1));

926 
	$ac˘
 (c⁄° *
__«me
Ë
__THROW
;

930 *
	$gëu£rshñl
 (Ë
__THROW
;

931 
	$ídu£rshñl
 (Ë
__THROW
;

932 
	$£tu£rshñl
 (Ë
__THROW
;

938 
	$d´m⁄
 (
__nochdú
, 
__no˛o£
Ë
__THROW
 
__wur
;

942 #i‡
deföed
 
__USE_MISC
 || (deföed 
__USE_XOPEN
 && !deföed 
__USE_XOPEN2K
)

945 
	$chroŸ
 (c⁄° *
__∑th
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

949 *
	$gë∑ss
 (c⁄° *
__¥om±
Ë
	`__n⁄nuŒ
 ((1));

957 
	`fsync
 (
__fd
);

960 #ifde‡
__USE_GNU


963 
	$syncfs
 (
__fd
Ë
__THROW
;

967 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED


970 
	`gëho°id
 ();

973 
	$sync
 (Ë
__THROW
;

976 #i‡
deföed
 
__USE_MISC
 || !deföed 
__USE_XOPEN2K


979 
	$gë∑gesize
 (Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

984 
	$gëdèbÀsize
 (Ë
__THROW
;

990 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


993 #i‚de‡
__USE_FILE_OFFSET64


994 
	$åunˇã
 (c⁄° *
__fûe
, 
__off_t
 
__Àngth
)

995 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

997 #ifde‡
__REDIRECT_NTH


998 
	`__REDIRECT_NTH
 (
åunˇã
,

999 (c⁄° *
__fûe
, 
__off64_t
 
__Àngth
),

1000 
åunˇã64
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

1002 
	#åunˇã
 
åunˇã64


	)

1005 #ifde‡
__USE_LARGEFILE64


1006 
	$åunˇã64
 (c⁄° *
__fûe
, 
__off64_t
 
__Àngth
)

1007 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

1012 #i‡
deföed
 
__USE_POSIX199309
 \

1013 || 
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K


1016 #i‚de‡
__USE_FILE_OFFSET64


1017 
	$·runˇã
 (
__fd
, 
__off_t
 
__Àngth
Ë
__THROW
 
__wur
;

1019 #ifde‡
__REDIRECT_NTH


1020 
	`__REDIRECT_NTH
 (
·runˇã
, (
__fd
, 
__off64_t
 
__Àngth
),

1021 
·runˇã64
Ë
__wur
;

1023 
	#·runˇã
 
·runˇã64


	)

1026 #ifde‡
__USE_LARGEFILE64


1027 
	$·runˇã64
 (
__fd
, 
__off64_t
 
__Àngth
Ë
__THROW
 
__wur
;

1033 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K
) \

1034 || 
deföed
 
__USE_MISC


1038 
	$brk
 (*
__addr
Ë
__THROW
 
__wur
;

1044 *
	$sbrk
 (
öçå_t
 
__dñè
Ë
__THROW
;

1048 #ifde‡
__USE_MISC


1059 
	$sysˇŒ
 (
__sy¢o
, ...Ë
__THROW
;

1064 #i‡(
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED
Ë&& !deföed 
F_LOCK


1076 
	#F_ULOCK
 0

	)

1077 
	#F_LOCK
 1

	)

1078 
	#F_TLOCK
 2

	)

1079 
	#F_TEST
 3

	)

1081 #i‚de‡
__USE_FILE_OFFSET64


1082 
	$lockf
 (
__fd
, 
__cmd
, 
__off_t
 
__Àn
Ë
__wur
;

1084 #ifde‡
__REDIRECT


1085 
	`__REDIRECT
 (
lockf
, (
__fd
, 
__cmd
, 
__off64_t
 
__Àn
),

1086 
lockf64
Ë
__wur
;

1088 
	#lockf
 
lockf64


	)

1091 #ifde‡
__USE_LARGEFILE64


1092 
	$lockf64
 (
__fd
, 
__cmd
, 
__off64_t
 
__Àn
Ë
__wur
;

1097 #ifde‡
__USE_GNU


1102 
	#TEMP_FAILURE_RETRY
(
ex¥essi⁄
) \

1103 (
__exãnsi⁄__
 \

1104 ({ 
__ªsu…
; \

1105 dÿ
__ªsu…
 = (Ë(
ex¥essi⁄
); \

1106 
__ªsu…
 =-1L && 
î∫o
 =
EINTR
); \

1107 
__ªsu…
; 
	}
}))

	)

1110 
ssize_t
 
c›y_fûe_ønge
 (
__öfd
, 
__off64_t
 *
__pöoff
,

1111 
__outfd
, 
__off64_t
 *
__poutoff
,

1112 
size_t
 
__Àngth
, 
__Êags
);

1115 #i‡
deföed
 
__USE_POSIX199309
 || deföed 
__USE_UNIX98


1118 
fd©async
 (
__fûdes
);

1124 #ifdef 
__USE_XOPEN


1126 *
	$¸y±
 (c⁄° *
__key
, c⁄° *
__ß…
)

1127 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

1131 
	$í¸y±
 (*
__glibc_block
, 
__edÊag
)

1132 
__THROW
 
	`__n⁄nuŒ
 ((1));

1139 
	$swab
 (c⁄° *
__ª°ri˘
 
__‰om
, *__ª°ri˘ 
__to
,

1140 
ssize_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

1147 #i‡
deföed
 
__USE_XOPEN
 && !deföed 
__USE_XOPEN2K


1149 *
	$˘îmid
 (*
__s
Ë
__THROW
;

1152 *
	`cu£rid
 (*
__s
);

1158 #i‡
deföed
 
__USE_UNIX98
 && !deföed 
__USE_XOPEN2K


1159 
	$±hªad_©f‹k
 ((*
__¥ï¨e
) (),

1160 (*
__∑ª¡
) (),

1161 (*
__chûd
Ë()Ë
__THROW
;

1164 #ifde‡
__USE_MISC


1167 
	$gëíå›y
 (*
__buf„r
, 
size_t
 
__Àngth
Ë
__wur
;

1171 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__f‹tify_fun˘i⁄


1172 
	~<bôs/uni°d.h
>

1175 
__END_DECLS


	@/usr/include/bits/confname.h

19 #i‚de‡
_UNISTD_H


26 
	m_PC_LINK_MAX
,

27 
	#_PC_LINK_MAX
 
_PC_LINK_MAX


	)

28 
	m_PC_MAX_CANON
,

29 
	#_PC_MAX_CANON
 
_PC_MAX_CANON


	)

30 
	m_PC_MAX_INPUT
,

31 
	#_PC_MAX_INPUT
 
_PC_MAX_INPUT


	)

32 
	m_PC_NAME_MAX
,

33 
	#_PC_NAME_MAX
 
_PC_NAME_MAX


	)

34 
	m_PC_PATH_MAX
,

35 
	#_PC_PATH_MAX
 
_PC_PATH_MAX


	)

36 
	m_PC_PIPE_BUF
,

37 
	#_PC_PIPE_BUF
 
_PC_PIPE_BUF


	)

38 
	m_PC_CHOWN_RESTRICTED
,

39 
	#_PC_CHOWN_RESTRICTED
 
_PC_CHOWN_RESTRICTED


	)

40 
	m_PC_NO_TRUNC
,

41 
	#_PC_NO_TRUNC
 
_PC_NO_TRUNC


	)

42 
	m_PC_VDISABLE
,

43 
	#_PC_VDISABLE
 
_PC_VDISABLE


	)

44 
	m_PC_SYNC_IO
,

45 
	#_PC_SYNC_IO
 
_PC_SYNC_IO


	)

46 
	m_PC_ASYNC_IO
,

47 
	#_PC_ASYNC_IO
 
_PC_ASYNC_IO


	)

48 
	m_PC_PRIO_IO
,

49 
	#_PC_PRIO_IO
 
_PC_PRIO_IO


	)

50 
	m_PC_SOCK_MAXBUF
,

51 
	#_PC_SOCK_MAXBUF
 
_PC_SOCK_MAXBUF


	)

52 
	m_PC_FILESIZEBITS
,

53 
	#_PC_FILESIZEBITS
 
_PC_FILESIZEBITS


	)

54 
	m_PC_REC_INCR_XFER_SIZE
,

55 
	#_PC_REC_INCR_XFER_SIZE
 
_PC_REC_INCR_XFER_SIZE


	)

56 
	m_PC_REC_MAX_XFER_SIZE
,

57 
	#_PC_REC_MAX_XFER_SIZE
 
_PC_REC_MAX_XFER_SIZE


	)

58 
	m_PC_REC_MIN_XFER_SIZE
,

59 
	#_PC_REC_MIN_XFER_SIZE
 
_PC_REC_MIN_XFER_SIZE


	)

60 
	m_PC_REC_XFER_ALIGN
,

61 
	#_PC_REC_XFER_ALIGN
 
_PC_REC_XFER_ALIGN


	)

62 
	m_PC_ALLOC_SIZE_MIN
,

63 
	#_PC_ALLOC_SIZE_MIN
 
_PC_ALLOC_SIZE_MIN


	)

64 
	m_PC_SYMLINK_MAX
,

65 
	#_PC_SYMLINK_MAX
 
_PC_SYMLINK_MAX


	)

66 
	m_PC_2_SYMLINKS


67 
	#_PC_2_SYMLINKS
 
_PC_2_SYMLINKS


	)

73 
	m_SC_ARG_MAX
,

74 
	#_SC_ARG_MAX
 
_SC_ARG_MAX


	)

75 
	m_SC_CHILD_MAX
,

76 
	#_SC_CHILD_MAX
 
_SC_CHILD_MAX


	)

77 
	m_SC_CLK_TCK
,

78 
	#_SC_CLK_TCK
 
_SC_CLK_TCK


	)

79 
	m_SC_NGROUPS_MAX
,

80 
	#_SC_NGROUPS_MAX
 
_SC_NGROUPS_MAX


	)

81 
	m_SC_OPEN_MAX
,

82 
	#_SC_OPEN_MAX
 
_SC_OPEN_MAX


	)

83 
	m_SC_STREAM_MAX
,

84 
	#_SC_STREAM_MAX
 
_SC_STREAM_MAX


	)

85 
	m_SC_TZNAME_MAX
,

86 
	#_SC_TZNAME_MAX
 
_SC_TZNAME_MAX


	)

87 
	m_SC_JOB_CONTROL
,

88 
	#_SC_JOB_CONTROL
 
_SC_JOB_CONTROL


	)

89 
	m_SC_SAVED_IDS
,

90 
	#_SC_SAVED_IDS
 
_SC_SAVED_IDS


	)

91 
	m_SC_REALTIME_SIGNALS
,

92 
	#_SC_REALTIME_SIGNALS
 
_SC_REALTIME_SIGNALS


	)

93 
	m_SC_PRIORITY_SCHEDULING
,

94 
	#_SC_PRIORITY_SCHEDULING
 
_SC_PRIORITY_SCHEDULING


	)

95 
	m_SC_TIMERS
,

96 
	#_SC_TIMERS
 
_SC_TIMERS


	)

97 
	m_SC_ASYNCHRONOUS_IO
,

98 
	#_SC_ASYNCHRONOUS_IO
 
_SC_ASYNCHRONOUS_IO


	)

99 
	m_SC_PRIORITIZED_IO
,

100 
	#_SC_PRIORITIZED_IO
 
_SC_PRIORITIZED_IO


	)

101 
	m_SC_SYNCHRONIZED_IO
,

102 
	#_SC_SYNCHRONIZED_IO
 
_SC_SYNCHRONIZED_IO


	)

103 
	m_SC_FSYNC
,

104 
	#_SC_FSYNC
 
_SC_FSYNC


	)

105 
	m_SC_MAPPED_FILES
,

106 
	#_SC_MAPPED_FILES
 
_SC_MAPPED_FILES


	)

107 
	m_SC_MEMLOCK
,

108 
	#_SC_MEMLOCK
 
_SC_MEMLOCK


	)

109 
	m_SC_MEMLOCK_RANGE
,

110 
	#_SC_MEMLOCK_RANGE
 
_SC_MEMLOCK_RANGE


	)

111 
	m_SC_MEMORY_PROTECTION
,

112 
	#_SC_MEMORY_PROTECTION
 
_SC_MEMORY_PROTECTION


	)

113 
	m_SC_MESSAGE_PASSING
,

114 
	#_SC_MESSAGE_PASSING
 
_SC_MESSAGE_PASSING


	)

115 
	m_SC_SEMAPHORES
,

116 
	#_SC_SEMAPHORES
 
_SC_SEMAPHORES


	)

117 
	m_SC_SHARED_MEMORY_OBJECTS
,

118 
	#_SC_SHARED_MEMORY_OBJECTS
 
_SC_SHARED_MEMORY_OBJECTS


	)

119 
	m_SC_AIO_LISTIO_MAX
,

120 
	#_SC_AIO_LISTIO_MAX
 
_SC_AIO_LISTIO_MAX


	)

121 
	m_SC_AIO_MAX
,

122 
	#_SC_AIO_MAX
 
_SC_AIO_MAX


	)

123 
	m_SC_AIO_PRIO_DELTA_MAX
,

124 
	#_SC_AIO_PRIO_DELTA_MAX
 
_SC_AIO_PRIO_DELTA_MAX


	)

125 
	m_SC_DELAYTIMER_MAX
,

126 
	#_SC_DELAYTIMER_MAX
 
_SC_DELAYTIMER_MAX


	)

127 
	m_SC_MQ_OPEN_MAX
,

128 
	#_SC_MQ_OPEN_MAX
 
_SC_MQ_OPEN_MAX


	)

129 
	m_SC_MQ_PRIO_MAX
,

130 
	#_SC_MQ_PRIO_MAX
 
_SC_MQ_PRIO_MAX


	)

131 
	m_SC_VERSION
,

132 
	#_SC_VERSION
 
_SC_VERSION


	)

133 
	m_SC_PAGESIZE
,

134 
	#_SC_PAGESIZE
 
_SC_PAGESIZE


	)

135 
	#_SC_PAGE_SIZE
 
_SC_PAGESIZE


	)

136 
	m_SC_RTSIG_MAX
,

137 
	#_SC_RTSIG_MAX
 
_SC_RTSIG_MAX


	)

138 
	m_SC_SEM_NSEMS_MAX
,

139 
	#_SC_SEM_NSEMS_MAX
 
_SC_SEM_NSEMS_MAX


	)

140 
	m_SC_SEM_VALUE_MAX
,

141 
	#_SC_SEM_VALUE_MAX
 
_SC_SEM_VALUE_MAX


	)

142 
	m_SC_SIGQUEUE_MAX
,

143 
	#_SC_SIGQUEUE_MAX
 
_SC_SIGQUEUE_MAX


	)

144 
	m_SC_TIMER_MAX
,

145 
	#_SC_TIMER_MAX
 
_SC_TIMER_MAX


	)

149 
	m_SC_BC_BASE_MAX
,

150 
	#_SC_BC_BASE_MAX
 
_SC_BC_BASE_MAX


	)

151 
	m_SC_BC_DIM_MAX
,

152 
	#_SC_BC_DIM_MAX
 
_SC_BC_DIM_MAX


	)

153 
	m_SC_BC_SCALE_MAX
,

154 
	#_SC_BC_SCALE_MAX
 
_SC_BC_SCALE_MAX


	)

155 
	m_SC_BC_STRING_MAX
,

156 
	#_SC_BC_STRING_MAX
 
_SC_BC_STRING_MAX


	)

157 
	m_SC_COLL_WEIGHTS_MAX
,

158 
	#_SC_COLL_WEIGHTS_MAX
 
_SC_COLL_WEIGHTS_MAX


	)

159 
	m_SC_EQUIV_CLASS_MAX
,

160 
	#_SC_EQUIV_CLASS_MAX
 
_SC_EQUIV_CLASS_MAX


	)

161 
	m_SC_EXPR_NEST_MAX
,

162 
	#_SC_EXPR_NEST_MAX
 
_SC_EXPR_NEST_MAX


	)

163 
	m_SC_LINE_MAX
,

164 
	#_SC_LINE_MAX
 
_SC_LINE_MAX


	)

165 
	m_SC_RE_DUP_MAX
,

166 
	#_SC_RE_DUP_MAX
 
_SC_RE_DUP_MAX


	)

167 
	m_SC_CHARCLASS_NAME_MAX
,

168 
	#_SC_CHARCLASS_NAME_MAX
 
_SC_CHARCLASS_NAME_MAX


	)

170 
	m_SC_2_VERSION
,

171 
	#_SC_2_VERSION
 
_SC_2_VERSION


	)

172 
	m_SC_2_C_BIND
,

173 
	#_SC_2_C_BIND
 
_SC_2_C_BIND


	)

174 
	m_SC_2_C_DEV
,

175 
	#_SC_2_C_DEV
 
_SC_2_C_DEV


	)

176 
	m_SC_2_FORT_DEV
,

177 
	#_SC_2_FORT_DEV
 
_SC_2_FORT_DEV


	)

178 
	m_SC_2_FORT_RUN
,

179 
	#_SC_2_FORT_RUN
 
_SC_2_FORT_RUN


	)

180 
	m_SC_2_SW_DEV
,

181 
	#_SC_2_SW_DEV
 
_SC_2_SW_DEV


	)

182 
	m_SC_2_LOCALEDEF
,

183 
	#_SC_2_LOCALEDEF
 
_SC_2_LOCALEDEF


	)

185 
	m_SC_PII
,

186 
	#_SC_PII
 
_SC_PII


	)

187 
	m_SC_PII_XTI
,

188 
	#_SC_PII_XTI
 
_SC_PII_XTI


	)

189 
	m_SC_PII_SOCKET
,

190 
	#_SC_PII_SOCKET
 
_SC_PII_SOCKET


	)

191 
	m_SC_PII_INTERNET
,

192 
	#_SC_PII_INTERNET
 
_SC_PII_INTERNET


	)

193 
	m_SC_PII_OSI
,

194 
	#_SC_PII_OSI
 
_SC_PII_OSI


	)

195 
	m_SC_POLL
,

196 
	#_SC_POLL
 
_SC_POLL


	)

197 
	m_SC_SELECT
,

198 
	#_SC_SELECT
 
_SC_SELECT


	)

199 
	m_SC_UIO_MAXIOV
,

200 
	#_SC_UIO_MAXIOV
 
_SC_UIO_MAXIOV


	)

201 
	m_SC_IOV_MAX
 = 
_SC_UIO_MAXIOV
,

202 
	#_SC_IOV_MAX
 
_SC_IOV_MAX


	)

203 
	m_SC_PII_INTERNET_STREAM
,

204 
	#_SC_PII_INTERNET_STREAM
 
_SC_PII_INTERNET_STREAM


	)

205 
	m_SC_PII_INTERNET_DGRAM
,

206 
	#_SC_PII_INTERNET_DGRAM
 
_SC_PII_INTERNET_DGRAM


	)

207 
	m_SC_PII_OSI_COTS
,

208 
	#_SC_PII_OSI_COTS
 
_SC_PII_OSI_COTS


	)

209 
	m_SC_PII_OSI_CLTS
,

210 
	#_SC_PII_OSI_CLTS
 
_SC_PII_OSI_CLTS


	)

211 
	m_SC_PII_OSI_M
,

212 
	#_SC_PII_OSI_M
 
_SC_PII_OSI_M


	)

213 
	m_SC_T_IOV_MAX
,

214 
	#_SC_T_IOV_MAX
 
_SC_T_IOV_MAX


	)

217 
	m_SC_THREADS
,

218 
	#_SC_THREADS
 
_SC_THREADS


	)

219 
	m_SC_THREAD_SAFE_FUNCTIONS
,

220 
	#_SC_THREAD_SAFE_FUNCTIONS
 
_SC_THREAD_SAFE_FUNCTIONS


	)

221 
	m_SC_GETGR_R_SIZE_MAX
,

222 
	#_SC_GETGR_R_SIZE_MAX
 
_SC_GETGR_R_SIZE_MAX


	)

223 
	m_SC_GETPW_R_SIZE_MAX
,

224 
	#_SC_GETPW_R_SIZE_MAX
 
_SC_GETPW_R_SIZE_MAX


	)

225 
	m_SC_LOGIN_NAME_MAX
,

226 
	#_SC_LOGIN_NAME_MAX
 
_SC_LOGIN_NAME_MAX


	)

227 
	m_SC_TTY_NAME_MAX
,

228 
	#_SC_TTY_NAME_MAX
 
_SC_TTY_NAME_MAX


	)

229 
	m_SC_THREAD_DESTRUCTOR_ITERATIONS
,

230 
	#_SC_THREAD_DESTRUCTOR_ITERATIONS
 
_SC_THREAD_DESTRUCTOR_ITERATIONS


	)

231 
	m_SC_THREAD_KEYS_MAX
,

232 
	#_SC_THREAD_KEYS_MAX
 
_SC_THREAD_KEYS_MAX


	)

233 
	m_SC_THREAD_STACK_MIN
,

234 
	#_SC_THREAD_STACK_MIN
 
_SC_THREAD_STACK_MIN


	)

235 
	m_SC_THREAD_THREADS_MAX
,

236 
	#_SC_THREAD_THREADS_MAX
 
_SC_THREAD_THREADS_MAX


	)

237 
	m_SC_THREAD_ATTR_STACKADDR
,

238 
	#_SC_THREAD_ATTR_STACKADDR
 
_SC_THREAD_ATTR_STACKADDR


	)

239 
	m_SC_THREAD_ATTR_STACKSIZE
,

240 
	#_SC_THREAD_ATTR_STACKSIZE
 
_SC_THREAD_ATTR_STACKSIZE


	)

241 
	m_SC_THREAD_PRIORITY_SCHEDULING
,

242 
	#_SC_THREAD_PRIORITY_SCHEDULING
 
_SC_THREAD_PRIORITY_SCHEDULING


	)

243 
	m_SC_THREAD_PRIO_INHERIT
,

244 
	#_SC_THREAD_PRIO_INHERIT
 
_SC_THREAD_PRIO_INHERIT


	)

245 
	m_SC_THREAD_PRIO_PROTECT
,

246 
	#_SC_THREAD_PRIO_PROTECT
 
_SC_THREAD_PRIO_PROTECT


	)

247 
	m_SC_THREAD_PROCESS_SHARED
,

248 
	#_SC_THREAD_PROCESS_SHARED
 
_SC_THREAD_PROCESS_SHARED


	)

250 
	m_SC_NPROCESSORS_CONF
,

251 
	#_SC_NPROCESSORS_CONF
 
_SC_NPROCESSORS_CONF


	)

252 
	m_SC_NPROCESSORS_ONLN
,

253 
	#_SC_NPROCESSORS_ONLN
 
_SC_NPROCESSORS_ONLN


	)

254 
	m_SC_PHYS_PAGES
,

255 
	#_SC_PHYS_PAGES
 
_SC_PHYS_PAGES


	)

256 
	m_SC_AVPHYS_PAGES
,

257 
	#_SC_AVPHYS_PAGES
 
_SC_AVPHYS_PAGES


	)

258 
	m_SC_ATEXIT_MAX
,

259 
	#_SC_ATEXIT_MAX
 
_SC_ATEXIT_MAX


	)

260 
	m_SC_PASS_MAX
,

261 
	#_SC_PASS_MAX
 
_SC_PASS_MAX


	)

263 
	m_SC_XOPEN_VERSION
,

264 
	#_SC_XOPEN_VERSION
 
_SC_XOPEN_VERSION


	)

265 
	m_SC_XOPEN_XCU_VERSION
,

266 
	#_SC_XOPEN_XCU_VERSION
 
_SC_XOPEN_XCU_VERSION


	)

267 
	m_SC_XOPEN_UNIX
,

268 
	#_SC_XOPEN_UNIX
 
_SC_XOPEN_UNIX


	)

269 
	m_SC_XOPEN_CRYPT
,

270 
	#_SC_XOPEN_CRYPT
 
_SC_XOPEN_CRYPT


	)

271 
	m_SC_XOPEN_ENH_I18N
,

272 
	#_SC_XOPEN_ENH_I18N
 
_SC_XOPEN_ENH_I18N


	)

273 
	m_SC_XOPEN_SHM
,

274 
	#_SC_XOPEN_SHM
 
_SC_XOPEN_SHM


	)

276 
	m_SC_2_CHAR_TERM
,

277 
	#_SC_2_CHAR_TERM
 
_SC_2_CHAR_TERM


	)

278 
	m_SC_2_C_VERSION
,

279 
	#_SC_2_C_VERSION
 
_SC_2_C_VERSION


	)

280 
	m_SC_2_UPE
,

281 
	#_SC_2_UPE
 
_SC_2_UPE


	)

283 
	m_SC_XOPEN_XPG2
,

284 
	#_SC_XOPEN_XPG2
 
_SC_XOPEN_XPG2


	)

285 
	m_SC_XOPEN_XPG3
,

286 
	#_SC_XOPEN_XPG3
 
_SC_XOPEN_XPG3


	)

287 
	m_SC_XOPEN_XPG4
,

288 
	#_SC_XOPEN_XPG4
 
_SC_XOPEN_XPG4


	)

290 
	m_SC_CHAR_BIT
,

291 
	#_SC_CHAR_BIT
 
_SC_CHAR_BIT


	)

292 
	m_SC_CHAR_MAX
,

293 
	#_SC_CHAR_MAX
 
_SC_CHAR_MAX


	)

294 
	m_SC_CHAR_MIN
,

295 
	#_SC_CHAR_MIN
 
_SC_CHAR_MIN


	)

296 
	m_SC_INT_MAX
,

297 
	#_SC_INT_MAX
 
_SC_INT_MAX


	)

298 
	m_SC_INT_MIN
,

299 
	#_SC_INT_MIN
 
_SC_INT_MIN


	)

300 
	m_SC_LONG_BIT
,

301 
	#_SC_LONG_BIT
 
_SC_LONG_BIT


	)

302 
	m_SC_WORD_BIT
,

303 
	#_SC_WORD_BIT
 
_SC_WORD_BIT


	)

304 
	m_SC_MB_LEN_MAX
,

305 
	#_SC_MB_LEN_MAX
 
_SC_MB_LEN_MAX


	)

306 
	m_SC_NZERO
,

307 
	#_SC_NZERO
 
_SC_NZERO


	)

308 
	m_SC_SSIZE_MAX
,

309 
	#_SC_SSIZE_MAX
 
_SC_SSIZE_MAX


	)

310 
	m_SC_SCHAR_MAX
,

311 
	#_SC_SCHAR_MAX
 
_SC_SCHAR_MAX


	)

312 
	m_SC_SCHAR_MIN
,

313 
	#_SC_SCHAR_MIN
 
_SC_SCHAR_MIN


	)

314 
	m_SC_SHRT_MAX
,

315 
	#_SC_SHRT_MAX
 
_SC_SHRT_MAX


	)

316 
	m_SC_SHRT_MIN
,

317 
	#_SC_SHRT_MIN
 
_SC_SHRT_MIN


	)

318 
	m_SC_UCHAR_MAX
,

319 
	#_SC_UCHAR_MAX
 
_SC_UCHAR_MAX


	)

320 
	m_SC_UINT_MAX
,

321 
	#_SC_UINT_MAX
 
_SC_UINT_MAX


	)

322 
	m_SC_ULONG_MAX
,

323 
	#_SC_ULONG_MAX
 
_SC_ULONG_MAX


	)

324 
	m_SC_USHRT_MAX
,

325 
	#_SC_USHRT_MAX
 
_SC_USHRT_MAX


	)

327 
	m_SC_NL_ARGMAX
,

328 
	#_SC_NL_ARGMAX
 
_SC_NL_ARGMAX


	)

329 
	m_SC_NL_LANGMAX
,

330 
	#_SC_NL_LANGMAX
 
_SC_NL_LANGMAX


	)

331 
	m_SC_NL_MSGMAX
,

332 
	#_SC_NL_MSGMAX
 
_SC_NL_MSGMAX


	)

333 
	m_SC_NL_NMAX
,

334 
	#_SC_NL_NMAX
 
_SC_NL_NMAX


	)

335 
	m_SC_NL_SETMAX
,

336 
	#_SC_NL_SETMAX
 
_SC_NL_SETMAX


	)

337 
	m_SC_NL_TEXTMAX
,

338 
	#_SC_NL_TEXTMAX
 
_SC_NL_TEXTMAX


	)

340 
	m_SC_XBS5_ILP32_OFF32
,

341 
	#_SC_XBS5_ILP32_OFF32
 
_SC_XBS5_ILP32_OFF32


	)

342 
	m_SC_XBS5_ILP32_OFFBIG
,

343 
	#_SC_XBS5_ILP32_OFFBIG
 
_SC_XBS5_ILP32_OFFBIG


	)

344 
	m_SC_XBS5_LP64_OFF64
,

345 
	#_SC_XBS5_LP64_OFF64
 
_SC_XBS5_LP64_OFF64


	)

346 
	m_SC_XBS5_LPBIG_OFFBIG
,

347 
	#_SC_XBS5_LPBIG_OFFBIG
 
_SC_XBS5_LPBIG_OFFBIG


	)

349 
	m_SC_XOPEN_LEGACY
,

350 
	#_SC_XOPEN_LEGACY
 
_SC_XOPEN_LEGACY


	)

351 
	m_SC_XOPEN_REALTIME
,

352 
	#_SC_XOPEN_REALTIME
 
_SC_XOPEN_REALTIME


	)

353 
	m_SC_XOPEN_REALTIME_THREADS
,

354 
	#_SC_XOPEN_REALTIME_THREADS
 
_SC_XOPEN_REALTIME_THREADS


	)

356 
	m_SC_ADVISORY_INFO
,

357 
	#_SC_ADVISORY_INFO
 
_SC_ADVISORY_INFO


	)

358 
	m_SC_BARRIERS
,

359 
	#_SC_BARRIERS
 
_SC_BARRIERS


	)

360 
	m_SC_BASE
,

361 
	#_SC_BASE
 
_SC_BASE


	)

362 
	m_SC_C_LANG_SUPPORT
,

363 
	#_SC_C_LANG_SUPPORT
 
_SC_C_LANG_SUPPORT


	)

364 
	m_SC_C_LANG_SUPPORT_R
,

365 
	#_SC_C_LANG_SUPPORT_R
 
_SC_C_LANG_SUPPORT_R


	)

366 
	m_SC_CLOCK_SELECTION
,

367 
	#_SC_CLOCK_SELECTION
 
_SC_CLOCK_SELECTION


	)

368 
	m_SC_CPUTIME
,

369 
	#_SC_CPUTIME
 
_SC_CPUTIME


	)

370 
	m_SC_THREAD_CPUTIME
,

371 
	#_SC_THREAD_CPUTIME
 
_SC_THREAD_CPUTIME


	)

372 
	m_SC_DEVICE_IO
,

373 
	#_SC_DEVICE_IO
 
_SC_DEVICE_IO


	)

374 
	m_SC_DEVICE_SPECIFIC
,

375 
	#_SC_DEVICE_SPECIFIC
 
_SC_DEVICE_SPECIFIC


	)

376 
	m_SC_DEVICE_SPECIFIC_R
,

377 
	#_SC_DEVICE_SPECIFIC_R
 
_SC_DEVICE_SPECIFIC_R


	)

378 
	m_SC_FD_MGMT
,

379 
	#_SC_FD_MGMT
 
_SC_FD_MGMT


	)

380 
	m_SC_FIFO
,

381 
	#_SC_FIFO
 
_SC_FIFO


	)

382 
	m_SC_PIPE
,

383 
	#_SC_PIPE
 
_SC_PIPE


	)

384 
	m_SC_FILE_ATTRIBUTES
,

385 
	#_SC_FILE_ATTRIBUTES
 
_SC_FILE_ATTRIBUTES


	)

386 
	m_SC_FILE_LOCKING
,

387 
	#_SC_FILE_LOCKING
 
_SC_FILE_LOCKING


	)

388 
	m_SC_FILE_SYSTEM
,

389 
	#_SC_FILE_SYSTEM
 
_SC_FILE_SYSTEM


	)

390 
	m_SC_MONOTONIC_CLOCK
,

391 
	#_SC_MONOTONIC_CLOCK
 
_SC_MONOTONIC_CLOCK


	)

392 
	m_SC_MULTI_PROCESS
,

393 
	#_SC_MULTI_PROCESS
 
_SC_MULTI_PROCESS


	)

394 
	m_SC_SINGLE_PROCESS
,

395 
	#_SC_SINGLE_PROCESS
 
_SC_SINGLE_PROCESS


	)

396 
	m_SC_NETWORKING
,

397 
	#_SC_NETWORKING
 
_SC_NETWORKING


	)

398 
	m_SC_READER_WRITER_LOCKS
,

399 
	#_SC_READER_WRITER_LOCKS
 
_SC_READER_WRITER_LOCKS


	)

400 
	m_SC_SPIN_LOCKS
,

401 
	#_SC_SPIN_LOCKS
 
_SC_SPIN_LOCKS


	)

402 
	m_SC_REGEXP
,

403 
	#_SC_REGEXP
 
_SC_REGEXP


	)

404 
	m_SC_REGEX_VERSION
,

405 
	#_SC_REGEX_VERSION
 
_SC_REGEX_VERSION


	)

406 
	m_SC_SHELL
,

407 
	#_SC_SHELL
 
_SC_SHELL


	)

408 
	m_SC_SIGNALS
,

409 
	#_SC_SIGNALS
 
_SC_SIGNALS


	)

410 
	m_SC_SPAWN
,

411 
	#_SC_SPAWN
 
_SC_SPAWN


	)

412 
	m_SC_SPORADIC_SERVER
,

413 
	#_SC_SPORADIC_SERVER
 
_SC_SPORADIC_SERVER


	)

414 
	m_SC_THREAD_SPORADIC_SERVER
,

415 
	#_SC_THREAD_SPORADIC_SERVER
 
_SC_THREAD_SPORADIC_SERVER


	)

416 
	m_SC_SYSTEM_DATABASE
,

417 
	#_SC_SYSTEM_DATABASE
 
_SC_SYSTEM_DATABASE


	)

418 
	m_SC_SYSTEM_DATABASE_R
,

419 
	#_SC_SYSTEM_DATABASE_R
 
_SC_SYSTEM_DATABASE_R


	)

420 
	m_SC_TIMEOUTS
,

421 
	#_SC_TIMEOUTS
 
_SC_TIMEOUTS


	)

422 
	m_SC_TYPED_MEMORY_OBJECTS
,

423 
	#_SC_TYPED_MEMORY_OBJECTS
 
_SC_TYPED_MEMORY_OBJECTS


	)

424 
	m_SC_USER_GROUPS
,

425 
	#_SC_USER_GROUPS
 
_SC_USER_GROUPS


	)

426 
	m_SC_USER_GROUPS_R
,

427 
	#_SC_USER_GROUPS_R
 
_SC_USER_GROUPS_R


	)

428 
	m_SC_2_PBS
,

429 
	#_SC_2_PBS
 
_SC_2_PBS


	)

430 
	m_SC_2_PBS_ACCOUNTING
,

431 
	#_SC_2_PBS_ACCOUNTING
 
_SC_2_PBS_ACCOUNTING


	)

432 
	m_SC_2_PBS_LOCATE
,

433 
	#_SC_2_PBS_LOCATE
 
_SC_2_PBS_LOCATE


	)

434 
	m_SC_2_PBS_MESSAGE
,

435 
	#_SC_2_PBS_MESSAGE
 
_SC_2_PBS_MESSAGE


	)

436 
	m_SC_2_PBS_TRACK
,

437 
	#_SC_2_PBS_TRACK
 
_SC_2_PBS_TRACK


	)

438 
	m_SC_SYMLOOP_MAX
,

439 
	#_SC_SYMLOOP_MAX
 
_SC_SYMLOOP_MAX


	)

440 
	m_SC_STREAMS
,

441 
	#_SC_STREAMS
 
_SC_STREAMS


	)

442 
	m_SC_2_PBS_CHECKPOINT
,

443 
	#_SC_2_PBS_CHECKPOINT
 
_SC_2_PBS_CHECKPOINT


	)

445 
	m_SC_V6_ILP32_OFF32
,

446 
	#_SC_V6_ILP32_OFF32
 
_SC_V6_ILP32_OFF32


	)

447 
	m_SC_V6_ILP32_OFFBIG
,

448 
	#_SC_V6_ILP32_OFFBIG
 
_SC_V6_ILP32_OFFBIG


	)

449 
	m_SC_V6_LP64_OFF64
,

450 
	#_SC_V6_LP64_OFF64
 
_SC_V6_LP64_OFF64


	)

451 
	m_SC_V6_LPBIG_OFFBIG
,

452 
	#_SC_V6_LPBIG_OFFBIG
 
_SC_V6_LPBIG_OFFBIG


	)

454 
	m_SC_HOST_NAME_MAX
,

455 
	#_SC_HOST_NAME_MAX
 
_SC_HOST_NAME_MAX


	)

456 
	m_SC_TRACE
,

457 
	#_SC_TRACE
 
_SC_TRACE


	)

458 
	m_SC_TRACE_EVENT_FILTER
,

459 
	#_SC_TRACE_EVENT_FILTER
 
_SC_TRACE_EVENT_FILTER


	)

460 
	m_SC_TRACE_INHERIT
,

461 
	#_SC_TRACE_INHERIT
 
_SC_TRACE_INHERIT


	)

462 
	m_SC_TRACE_LOG
,

463 
	#_SC_TRACE_LOG
 
_SC_TRACE_LOG


	)

465 
	m_SC_LEVEL1_ICACHE_SIZE
,

466 
	#_SC_LEVEL1_ICACHE_SIZE
 
_SC_LEVEL1_ICACHE_SIZE


	)

467 
	m_SC_LEVEL1_ICACHE_ASSOC
,

468 
	#_SC_LEVEL1_ICACHE_ASSOC
 
_SC_LEVEL1_ICACHE_ASSOC


	)

469 
	m_SC_LEVEL1_ICACHE_LINESIZE
,

470 
	#_SC_LEVEL1_ICACHE_LINESIZE
 
_SC_LEVEL1_ICACHE_LINESIZE


	)

471 
	m_SC_LEVEL1_DCACHE_SIZE
,

472 
	#_SC_LEVEL1_DCACHE_SIZE
 
_SC_LEVEL1_DCACHE_SIZE


	)

473 
	m_SC_LEVEL1_DCACHE_ASSOC
,

474 
	#_SC_LEVEL1_DCACHE_ASSOC
 
_SC_LEVEL1_DCACHE_ASSOC


	)

475 
	m_SC_LEVEL1_DCACHE_LINESIZE
,

476 
	#_SC_LEVEL1_DCACHE_LINESIZE
 
_SC_LEVEL1_DCACHE_LINESIZE


	)

477 
	m_SC_LEVEL2_CACHE_SIZE
,

478 
	#_SC_LEVEL2_CACHE_SIZE
 
_SC_LEVEL2_CACHE_SIZE


	)

479 
	m_SC_LEVEL2_CACHE_ASSOC
,

480 
	#_SC_LEVEL2_CACHE_ASSOC
 
_SC_LEVEL2_CACHE_ASSOC


	)

481 
	m_SC_LEVEL2_CACHE_LINESIZE
,

482 
	#_SC_LEVEL2_CACHE_LINESIZE
 
_SC_LEVEL2_CACHE_LINESIZE


	)

483 
	m_SC_LEVEL3_CACHE_SIZE
,

484 
	#_SC_LEVEL3_CACHE_SIZE
 
_SC_LEVEL3_CACHE_SIZE


	)

485 
	m_SC_LEVEL3_CACHE_ASSOC
,

486 
	#_SC_LEVEL3_CACHE_ASSOC
 
_SC_LEVEL3_CACHE_ASSOC


	)

487 
	m_SC_LEVEL3_CACHE_LINESIZE
,

488 
	#_SC_LEVEL3_CACHE_LINESIZE
 
_SC_LEVEL3_CACHE_LINESIZE


	)

489 
	m_SC_LEVEL4_CACHE_SIZE
,

490 
	#_SC_LEVEL4_CACHE_SIZE
 
_SC_LEVEL4_CACHE_SIZE


	)

491 
	m_SC_LEVEL4_CACHE_ASSOC
,

492 
	#_SC_LEVEL4_CACHE_ASSOC
 
_SC_LEVEL4_CACHE_ASSOC


	)

493 
	m_SC_LEVEL4_CACHE_LINESIZE
,

494 
	#_SC_LEVEL4_CACHE_LINESIZE
 
_SC_LEVEL4_CACHE_LINESIZE


	)

497 
	m_SC_IPV6
 = 
_SC_LEVEL1_ICACHE_SIZE
 + 50,

498 
	#_SC_IPV6
 
_SC_IPV6


	)

499 
	m_SC_RAW_SOCKETS
,

500 
	#_SC_RAW_SOCKETS
 
_SC_RAW_SOCKETS


	)

502 
	m_SC_V7_ILP32_OFF32
,

503 
	#_SC_V7_ILP32_OFF32
 
_SC_V7_ILP32_OFF32


	)

504 
	m_SC_V7_ILP32_OFFBIG
,

505 
	#_SC_V7_ILP32_OFFBIG
 
_SC_V7_ILP32_OFFBIG


	)

506 
	m_SC_V7_LP64_OFF64
,

507 
	#_SC_V7_LP64_OFF64
 
_SC_V7_LP64_OFF64


	)

508 
	m_SC_V7_LPBIG_OFFBIG
,

509 
	#_SC_V7_LPBIG_OFFBIG
 
_SC_V7_LPBIG_OFFBIG


	)

511 
	m_SC_SS_REPL_MAX
,

512 
	#_SC_SS_REPL_MAX
 
_SC_SS_REPL_MAX


	)

514 
	m_SC_TRACE_EVENT_NAME_MAX
,

515 
	#_SC_TRACE_EVENT_NAME_MAX
 
_SC_TRACE_EVENT_NAME_MAX


	)

516 
	m_SC_TRACE_NAME_MAX
,

517 
	#_SC_TRACE_NAME_MAX
 
_SC_TRACE_NAME_MAX


	)

518 
	m_SC_TRACE_SYS_MAX
,

519 
	#_SC_TRACE_SYS_MAX
 
_SC_TRACE_SYS_MAX


	)

520 
	m_SC_TRACE_USER_EVENT_MAX
,

521 
	#_SC_TRACE_USER_EVENT_MAX
 
_SC_TRACE_USER_EVENT_MAX


	)

523 
	m_SC_XOPEN_STREAMS
,

524 
	#_SC_XOPEN_STREAMS
 
_SC_XOPEN_STREAMS


	)

526 
	m_SC_THREAD_ROBUST_PRIO_INHERIT
,

527 
	#_SC_THREAD_ROBUST_PRIO_INHERIT
 
_SC_THREAD_ROBUST_PRIO_INHERIT


	)

528 
	m_SC_THREAD_ROBUST_PRIO_PROTECT


529 
	#_SC_THREAD_ROBUST_PRIO_PROTECT
 
_SC_THREAD_ROBUST_PRIO_PROTECT


	)

535 
	m_CS_PATH
,

536 
	#_CS_PATH
 
_CS_PATH


	)

538 
	m_CS_V6_WIDTH_RESTRICTED_ENVS
,

539 
	#_CS_V6_WIDTH_RESTRICTED_ENVS
 
_CS_V6_WIDTH_RESTRICTED_ENVS


	)

540 
	#_CS_POSIX_V6_WIDTH_RESTRICTED_ENVS
 
_CS_V6_WIDTH_RESTRICTED_ENVS


	)

542 
	m_CS_GNU_LIBC_VERSION
,

543 
	#_CS_GNU_LIBC_VERSION
 
_CS_GNU_LIBC_VERSION


	)

544 
	m_CS_GNU_LIBPTHREAD_VERSION
,

545 
	#_CS_GNU_LIBPTHREAD_VERSION
 
_CS_GNU_LIBPTHREAD_VERSION


	)

547 
	m_CS_V5_WIDTH_RESTRICTED_ENVS
,

548 
	#_CS_V5_WIDTH_RESTRICTED_ENVS
 
_CS_V5_WIDTH_RESTRICTED_ENVS


	)

549 
	#_CS_POSIX_V5_WIDTH_RESTRICTED_ENVS
 
_CS_V5_WIDTH_RESTRICTED_ENVS


	)

551 
	m_CS_V7_WIDTH_RESTRICTED_ENVS
,

552 
	#_CS_V7_WIDTH_RESTRICTED_ENVS
 
_CS_V7_WIDTH_RESTRICTED_ENVS


	)

553 
	#_CS_POSIX_V7_WIDTH_RESTRICTED_ENVS
 
_CS_V7_WIDTH_RESTRICTED_ENVS


	)

555 
	m_CS_LFS_CFLAGS
 = 1000,

556 
	#_CS_LFS_CFLAGS
 
_CS_LFS_CFLAGS


	)

557 
	m_CS_LFS_LDFLAGS
,

558 
	#_CS_LFS_LDFLAGS
 
_CS_LFS_LDFLAGS


	)

559 
	m_CS_LFS_LIBS
,

560 
	#_CS_LFS_LIBS
 
_CS_LFS_LIBS


	)

561 
	m_CS_LFS_LINTFLAGS
,

562 
	#_CS_LFS_LINTFLAGS
 
_CS_LFS_LINTFLAGS


	)

563 
	m_CS_LFS64_CFLAGS
,

564 
	#_CS_LFS64_CFLAGS
 
_CS_LFS64_CFLAGS


	)

565 
	m_CS_LFS64_LDFLAGS
,

566 
	#_CS_LFS64_LDFLAGS
 
_CS_LFS64_LDFLAGS


	)

567 
	m_CS_LFS64_LIBS
,

568 
	#_CS_LFS64_LIBS
 
_CS_LFS64_LIBS


	)

569 
	m_CS_LFS64_LINTFLAGS
,

570 
	#_CS_LFS64_LINTFLAGS
 
_CS_LFS64_LINTFLAGS


	)

572 
	m_CS_XBS5_ILP32_OFF32_CFLAGS
 = 1100,

573 
	#_CS_XBS5_ILP32_OFF32_CFLAGS
 
_CS_XBS5_ILP32_OFF32_CFLAGS


	)

574 
	m_CS_XBS5_ILP32_OFF32_LDFLAGS
,

575 
	#_CS_XBS5_ILP32_OFF32_LDFLAGS
 
_CS_XBS5_ILP32_OFF32_LDFLAGS


	)

576 
	m_CS_XBS5_ILP32_OFF32_LIBS
,

577 
	#_CS_XBS5_ILP32_OFF32_LIBS
 
_CS_XBS5_ILP32_OFF32_LIBS


	)

578 
	m_CS_XBS5_ILP32_OFF32_LINTFLAGS
,

579 
	#_CS_XBS5_ILP32_OFF32_LINTFLAGS
 
_CS_XBS5_ILP32_OFF32_LINTFLAGS


	)

580 
	m_CS_XBS5_ILP32_OFFBIG_CFLAGS
,

581 
	#_CS_XBS5_ILP32_OFFBIG_CFLAGS
 
_CS_XBS5_ILP32_OFFBIG_CFLAGS


	)

582 
	m_CS_XBS5_ILP32_OFFBIG_LDFLAGS
,

583 
	#_CS_XBS5_ILP32_OFFBIG_LDFLAGS
 
_CS_XBS5_ILP32_OFFBIG_LDFLAGS


	)

584 
	m_CS_XBS5_ILP32_OFFBIG_LIBS
,

585 
	#_CS_XBS5_ILP32_OFFBIG_LIBS
 
_CS_XBS5_ILP32_OFFBIG_LIBS


	)

586 
	m_CS_XBS5_ILP32_OFFBIG_LINTFLAGS
,

587 
	#_CS_XBS5_ILP32_OFFBIG_LINTFLAGS
 
_CS_XBS5_ILP32_OFFBIG_LINTFLAGS


	)

588 
	m_CS_XBS5_LP64_OFF64_CFLAGS
,

589 
	#_CS_XBS5_LP64_OFF64_CFLAGS
 
_CS_XBS5_LP64_OFF64_CFLAGS


	)

590 
	m_CS_XBS5_LP64_OFF64_LDFLAGS
,

591 
	#_CS_XBS5_LP64_OFF64_LDFLAGS
 
_CS_XBS5_LP64_OFF64_LDFLAGS


	)

592 
	m_CS_XBS5_LP64_OFF64_LIBS
,

593 
	#_CS_XBS5_LP64_OFF64_LIBS
 
_CS_XBS5_LP64_OFF64_LIBS


	)

594 
	m_CS_XBS5_LP64_OFF64_LINTFLAGS
,

595 
	#_CS_XBS5_LP64_OFF64_LINTFLAGS
 
_CS_XBS5_LP64_OFF64_LINTFLAGS


	)

596 
	m_CS_XBS5_LPBIG_OFFBIG_CFLAGS
,

597 
	#_CS_XBS5_LPBIG_OFFBIG_CFLAGS
 
_CS_XBS5_LPBIG_OFFBIG_CFLAGS


	)

598 
	m_CS_XBS5_LPBIG_OFFBIG_LDFLAGS
,

599 
	#_CS_XBS5_LPBIG_OFFBIG_LDFLAGS
 
_CS_XBS5_LPBIG_OFFBIG_LDFLAGS


	)

600 
	m_CS_XBS5_LPBIG_OFFBIG_LIBS
,

601 
	#_CS_XBS5_LPBIG_OFFBIG_LIBS
 
_CS_XBS5_LPBIG_OFFBIG_LIBS


	)

602 
	m_CS_XBS5_LPBIG_OFFBIG_LINTFLAGS
,

603 
	#_CS_XBS5_LPBIG_OFFBIG_LINTFLAGS
 
_CS_XBS5_LPBIG_OFFBIG_LINTFLAGS


	)

605 
	m_CS_POSIX_V6_ILP32_OFF32_CFLAGS
,

606 
	#_CS_POSIX_V6_ILP32_OFF32_CFLAGS
 
_CS_POSIX_V6_ILP32_OFF32_CFLAGS


	)

607 
	m_CS_POSIX_V6_ILP32_OFF32_LDFLAGS
,

608 
	#_CS_POSIX_V6_ILP32_OFF32_LDFLAGS
 
_CS_POSIX_V6_ILP32_OFF32_LDFLAGS


	)

609 
	m_CS_POSIX_V6_ILP32_OFF32_LIBS
,

610 
	#_CS_POSIX_V6_ILP32_OFF32_LIBS
 
_CS_POSIX_V6_ILP32_OFF32_LIBS


	)

611 
	m_CS_POSIX_V6_ILP32_OFF32_LINTFLAGS
,

612 
	#_CS_POSIX_V6_ILP32_OFF32_LINTFLAGS
 
_CS_POSIX_V6_ILP32_OFF32_LINTFLAGS


	)

613 
	m_CS_POSIX_V6_ILP32_OFFBIG_CFLAGS
,

614 
	#_CS_POSIX_V6_ILP32_OFFBIG_CFLAGS
 
_CS_POSIX_V6_ILP32_OFFBIG_CFLAGS


	)

615 
	m_CS_POSIX_V6_ILP32_OFFBIG_LDFLAGS
,

616 
	#_CS_POSIX_V6_ILP32_OFFBIG_LDFLAGS
 
_CS_POSIX_V6_ILP32_OFFBIG_LDFLAGS


	)

617 
	m_CS_POSIX_V6_ILP32_OFFBIG_LIBS
,

618 
	#_CS_POSIX_V6_ILP32_OFFBIG_LIBS
 
_CS_POSIX_V6_ILP32_OFFBIG_LIBS


	)

619 
	m_CS_POSIX_V6_ILP32_OFFBIG_LINTFLAGS
,

620 
	#_CS_POSIX_V6_ILP32_OFFBIG_LINTFLAGS
 
_CS_POSIX_V6_ILP32_OFFBIG_LINTFLAGS


	)

621 
	m_CS_POSIX_V6_LP64_OFF64_CFLAGS
,

622 
	#_CS_POSIX_V6_LP64_OFF64_CFLAGS
 
_CS_POSIX_V6_LP64_OFF64_CFLAGS


	)

623 
	m_CS_POSIX_V6_LP64_OFF64_LDFLAGS
,

624 
	#_CS_POSIX_V6_LP64_OFF64_LDFLAGS
 
_CS_POSIX_V6_LP64_OFF64_LDFLAGS


	)

625 
	m_CS_POSIX_V6_LP64_OFF64_LIBS
,

626 
	#_CS_POSIX_V6_LP64_OFF64_LIBS
 
_CS_POSIX_V6_LP64_OFF64_LIBS


	)

627 
	m_CS_POSIX_V6_LP64_OFF64_LINTFLAGS
,

628 
	#_CS_POSIX_V6_LP64_OFF64_LINTFLAGS
 
_CS_POSIX_V6_LP64_OFF64_LINTFLAGS


	)

629 
	m_CS_POSIX_V6_LPBIG_OFFBIG_CFLAGS
,

630 
	#_CS_POSIX_V6_LPBIG_OFFBIG_CFLAGS
 
_CS_POSIX_V6_LPBIG_OFFBIG_CFLAGS


	)

631 
	m_CS_POSIX_V6_LPBIG_OFFBIG_LDFLAGS
,

632 
	#_CS_POSIX_V6_LPBIG_OFFBIG_LDFLAGS
 
_CS_POSIX_V6_LPBIG_OFFBIG_LDFLAGS


	)

633 
	m_CS_POSIX_V6_LPBIG_OFFBIG_LIBS
,

634 
	#_CS_POSIX_V6_LPBIG_OFFBIG_LIBS
 
_CS_POSIX_V6_LPBIG_OFFBIG_LIBS


	)

635 
	m_CS_POSIX_V6_LPBIG_OFFBIG_LINTFLAGS
,

636 
	#_CS_POSIX_V6_LPBIG_OFFBIG_LINTFLAGS
 
_CS_POSIX_V6_LPBIG_OFFBIG_LINTFLAGS


	)

638 
	m_CS_POSIX_V7_ILP32_OFF32_CFLAGS
,

639 
	#_CS_POSIX_V7_ILP32_OFF32_CFLAGS
 
_CS_POSIX_V7_ILP32_OFF32_CFLAGS


	)

640 
	m_CS_POSIX_V7_ILP32_OFF32_LDFLAGS
,

641 
	#_CS_POSIX_V7_ILP32_OFF32_LDFLAGS
 
_CS_POSIX_V7_ILP32_OFF32_LDFLAGS


	)

642 
	m_CS_POSIX_V7_ILP32_OFF32_LIBS
,

643 
	#_CS_POSIX_V7_ILP32_OFF32_LIBS
 
_CS_POSIX_V7_ILP32_OFF32_LIBS


	)

644 
	m_CS_POSIX_V7_ILP32_OFF32_LINTFLAGS
,

645 
	#_CS_POSIX_V7_ILP32_OFF32_LINTFLAGS
 
_CS_POSIX_V7_ILP32_OFF32_LINTFLAGS


	)

646 
	m_CS_POSIX_V7_ILP32_OFFBIG_CFLAGS
,

647 
	#_CS_POSIX_V7_ILP32_OFFBIG_CFLAGS
 
_CS_POSIX_V7_ILP32_OFFBIG_CFLAGS


	)

648 
	m_CS_POSIX_V7_ILP32_OFFBIG_LDFLAGS
,

649 
	#_CS_POSIX_V7_ILP32_OFFBIG_LDFLAGS
 
_CS_POSIX_V7_ILP32_OFFBIG_LDFLAGS


	)

650 
	m_CS_POSIX_V7_ILP32_OFFBIG_LIBS
,

651 
	#_CS_POSIX_V7_ILP32_OFFBIG_LIBS
 
_CS_POSIX_V7_ILP32_OFFBIG_LIBS


	)

652 
	m_CS_POSIX_V7_ILP32_OFFBIG_LINTFLAGS
,

653 
	#_CS_POSIX_V7_ILP32_OFFBIG_LINTFLAGS
 
_CS_POSIX_V7_ILP32_OFFBIG_LINTFLAGS


	)

654 
	m_CS_POSIX_V7_LP64_OFF64_CFLAGS
,

655 
	#_CS_POSIX_V7_LP64_OFF64_CFLAGS
 
_CS_POSIX_V7_LP64_OFF64_CFLAGS


	)

656 
	m_CS_POSIX_V7_LP64_OFF64_LDFLAGS
,

657 
	#_CS_POSIX_V7_LP64_OFF64_LDFLAGS
 
_CS_POSIX_V7_LP64_OFF64_LDFLAGS


	)

658 
	m_CS_POSIX_V7_LP64_OFF64_LIBS
,

659 
	#_CS_POSIX_V7_LP64_OFF64_LIBS
 
_CS_POSIX_V7_LP64_OFF64_LIBS


	)

660 
	m_CS_POSIX_V7_LP64_OFF64_LINTFLAGS
,

661 
	#_CS_POSIX_V7_LP64_OFF64_LINTFLAGS
 
_CS_POSIX_V7_LP64_OFF64_LINTFLAGS


	)

662 
	m_CS_POSIX_V7_LPBIG_OFFBIG_CFLAGS
,

663 
	#_CS_POSIX_V7_LPBIG_OFFBIG_CFLAGS
 
_CS_POSIX_V7_LPBIG_OFFBIG_CFLAGS


	)

664 
	m_CS_POSIX_V7_LPBIG_OFFBIG_LDFLAGS
,

665 
	#_CS_POSIX_V7_LPBIG_OFFBIG_LDFLAGS
 
_CS_POSIX_V7_LPBIG_OFFBIG_LDFLAGS


	)

666 
	m_CS_POSIX_V7_LPBIG_OFFBIG_LIBS
,

667 
	#_CS_POSIX_V7_LPBIG_OFFBIG_LIBS
 
_CS_POSIX_V7_LPBIG_OFFBIG_LIBS


	)

668 
	m_CS_POSIX_V7_LPBIG_OFFBIG_LINTFLAGS
,

669 
	#_CS_POSIX_V7_LPBIG_OFFBIG_LINTFLAGS
 
_CS_POSIX_V7_LPBIG_OFFBIG_LINTFLAGS


	)

671 
	m_CS_V6_ENV
,

672 
	#_CS_V6_ENV
 
_CS_V6_ENV


	)

673 
	m_CS_V7_ENV


674 
	#_CS_V7_ENV
 
_CS_V7_ENV


	)

	@/usr/include/bits/environments.h

18 #i‚de‡
_UNISTD_H


22 
	~<bôs/w‹dsize.h
>

42 #i‡
__WORDSIZE
 == 64

56 
	#_POSIX_V7_LPBIG_OFFBIG
 -1

	)

57 
	#_POSIX_V6_LPBIG_OFFBIG
 -1

	)

58 
	#_XBS5_LPBIG_OFFBIG
 -1

	)

61 
	#_POSIX_V7_LP64_OFF64
 1

	)

62 
	#_POSIX_V6_LP64_OFF64
 1

	)

63 
	#_XBS5_LP64_OFF64
 1

	)

69 
	#_POSIX_V7_ILP32_OFFBIG
 1

	)

70 
	#_POSIX_V6_ILP32_OFFBIG
 1

	)

71 
	#_XBS5_ILP32_OFFBIG
 1

	)

73 #i‚de‡
__x86_64__


75 
	#_POSIX_V7_ILP32_OFF32
 1

	)

76 
	#_POSIX_V6_ILP32_OFF32
 1

	)

77 
	#_XBS5_ILP32_OFF32
 1

	)

95 
	#__ILP32_OFF32_CFLAGS
 "-m32"

	)

96 
	#__ILP32_OFF32_LDFLAGS
 "-m32"

	)

97 #i‡
deföed
 
__x86_64__
 && deföed 
__ILP32__


98 
	#__ILP32_OFFBIG_CFLAGS
 "-mx32"

	)

99 
	#__ILP32_OFFBIG_LDFLAGS
 "-mx32"

	)

101 
	#__ILP32_OFFBIG_CFLAGS
 "-m32 -D_LARGEFILE_SOURCE -D_FILE_OFFSET_BITS=64"

	)

102 
	#__ILP32_OFFBIG_LDFLAGS
 "-m32"

	)

104 
	#__LP64_OFF64_CFLAGS
 "-m64"

	)

105 
	#__LP64_OFF64_LDFLAGS
 "-m64"

	)

	@/usr/include/bits/errno.h

19 #i‚de‡
_BITS_ERRNO_H


20 
	#_BITS_ERRNO_H
 1

	)

22 #i‡!
deföed
 
_ERRNO_H


26 
	~<löux/î∫o.h
>

29 #i‚de‡
ENOTSUP


30 
	#ENOTSUP
 
EOPNOTSUPP


	)

33 #i‚de‡
ECANCELED


34 
	#ECANCELED
 125

	)

37 #i‚de‡
EOWNERDEAD


38 
	#EOWNERDEAD
 130

	)

41 #i‚de‡
ENOTRECOVERABLE


42 
	#ENOTRECOVERABLE
 131

	)

45 #i‚de‡
ERFKILL


46 
	#ERFKILL
 132

	)

49 #i‚de‡
EHWPOISON


50 
	#EHWPOISON
 133

	)

	@/usr/include/bits/floatn.h

19 #i‚de‡
_BITS_FLOATN_H


20 
	#_BITS_FLOATN_H


	)

22 
	~<„©uªs.h
>

29 #i‡(
deföed
 
__x86_64__
 \

30 ? 
__GNUC_PREREQ
 (4, 3) \

31 : (
deföed
 
__GNU__
 ? 
	$__GNUC_PREREQ
 (4, 5Ë: 
	`__GNUC_PREREQ
 (4, 4))) \

32 && !
	`deföed
(
__CUDACC__
Ë&& !
	$deföed
(
__ICC
)

33 
	#__HAVE_FLOAT128
 1

	)

35 
	#__HAVE_FLOAT128
 0

	)

40 #i‡
__HAVE_FLOAT128


41 
	#__HAVE_DISTINCT_FLOAT128
 1

	)

43 
	#__HAVE_DISTINCT_FLOAT128
 0

	)

49 
	#__HAVE_FLOAT64X
 1

	)

55 
	#__HAVE_FLOAT64X_LONG_DOUBLE
 1

	)

57 #i‚de‡
__ASSEMBLER__


61 #i‡
__HAVE_FLOAT128


62 #i‡!
	`__GNUC_PREREQ
 (7, 0Ë|| 
deföed
 
__˝lu•lus


64 
	#__f128
(
x
Ëx##
q


	)

66 
	#__f128
(
x
Ëx##
f128


	)

71 #i‡
__HAVE_FLOAT128


72 #i‡!
	`__GNUC_PREREQ
 (7, 0Ë|| 
deföed
 
__˝lu•lus


75 
_Com∂ex
 
	t__cÊﬂt128
 
	t__©åibuã__
 ((
	t__mode__
 (
	t__TC__
)));

76 
	#__CFLOAT128
 
__cÊﬂt128


	)

78 
	#__CFLOAT128
 
_Com∂ex
 
_Flﬂt128


	)

83 #i‡
__HAVE_FLOAT128


86 #i‡!
	`__GNUC_PREREQ
 (7, 0Ë|| 
deföed
 
__˝lu•lus


87 
__Êﬂt128
 
	t_Flﬂt128
;

91 #i‡!
	`__GNUC_PREREQ
 (7, 0)

92 
	#__buûtö_huge_vÆf128
(Ë((
_Flﬂt128
Ë
	`__buûtö_huge_vÆ
 ())

	)

100 #i‡!
	`__GNUC_PREREQ
 (7, 0)

101 
	#__buûtö_c›ysignf128
 
__buûtö_c›ysignq


	)

102 
	#__buûtö_Ábsf128
 
__buûtö_Ábsq


	)

103 
	#__buûtö_öff128
(Ë((
_Flﬂt128
Ë
	`__buûtö_öf
 ())

	)

104 
	#__buûtö_«nf128
(
x
Ë((
_Flﬂt128
Ë
	`__buûtö_«n
 (x))

	)

105 
	#__buûtö_«nsf128
(
x
Ë((
_Flﬂt128
Ë
	`__buûtö_«ns
 (x))

	)

112 #i‡!
	`__GNUC_PREREQ
 (6, 0)

113 
	#__buûtö_signbôf128
 
__signbôf128


	)

120 
	~<bôs/Êﬂä-comm⁄.h
>

	@/usr/include/bits/getopt_posix.h

20 #i‚de‡
_GETOPT_POSIX_H


21 
	#_GETOPT_POSIX_H
 1

	)

23 #i‡!
deföed
 
_UNISTD_H
 && !deföed 
_STDIO_H


27 
	~<bôs/gë›t_c‹e.h
>

29 
	g__BEGIN_DECLS


31 #i‡
deföed
 
__USE_POSIX2
 && !deföed 
__USE_POSIX_IMPLICITLY
 \

32 && !
deföed
 
	g__USE_GNU
 && !deföed 
	g_GETOPT_H


37 #ifde‡
__REDIRECT


38 
__REDIRECT_NTH
 (
gë›t
, (
___¨gc
, *c⁄° *
___¨gv
,

39 c⁄° *
__sh‹t›ts
),

40 
__posix_gë›t
);

42 
	$__posix_gë›t
 (
___¨gc
, *c⁄° *
___¨gv
,

43 c⁄° *
__sh‹t›ts
)

44 
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

45 
	#gë›t
 
__posix_gë›t


	)

49 
__END_DECLS


	@/usr/include/bits/libc-header-start.h

27 #i‚de‡
__GLIBC_INTERNAL_STARTING_HEADER_IMPLEMENTATION


31 #unde‡
__GLIBC_INTERNAL_STARTING_HEADER_IMPLEMENTATION


33 
	~<„©uªs.h
>

37 #unde‡
__GLIBC_USE_LIB_EXT2


38 #i‡(
deföed
 
__USE_GNU
 \

39 || (
deföed
 
	g__STDC_WANT_LIB_EXT2__
 && __STDC_WANT_LIB_EXT2__ > 0))

40 
	#__GLIBC_USE_LIB_EXT2
 1

	)

42 
	#__GLIBC_USE_LIB_EXT2
 0

	)

47 #unde‡
__GLIBC_USE_IEC_60559_BFP_EXT


48 #i‡
deföed
 
__USE_GNU
 || deföed 
__STDC_WANT_IEC_60559_BFP_EXT__


49 
	#__GLIBC_USE_IEC_60559_BFP_EXT
 1

	)

51 
	#__GLIBC_USE_IEC_60559_BFP_EXT
 0

	)

56 #unde‡
__GLIBC_USE_IEC_60559_FUNCS_EXT


57 #i‡
deföed
 
__USE_GNU
 || deföed 
__STDC_WANT_IEC_60559_FUNCS_EXT__


58 
	#__GLIBC_USE_IEC_60559_FUNCS_EXT
 1

	)

60 
	#__GLIBC_USE_IEC_60559_FUNCS_EXT
 0

	)

65 #unde‡
__GLIBC_USE_IEC_60559_TYPES_EXT


66 #i‡
deföed
 
__USE_GNU
 || deföed 
__STDC_WANT_IEC_60559_TYPES_EXT__


67 
	#__GLIBC_USE_IEC_60559_TYPES_EXT
 1

	)

69 
	#__GLIBC_USE_IEC_60559_TYPES_EXT
 0

	)

	@/usr/include/bits/libio.h

28 #i‚de‡
_BITS_LIBIO_H


29 
	#_BITS_LIBIO_H
 1

	)

31 #i‡!
deföed
 
_STDIO_H
 && !deföed 
_LIBIO_H


35 
	~<bôs/_G_c⁄fig.h
>

37 
	#_IO_Âos_t
 
_G_Âos_t


	)

38 
	#_IO_Âos64_t
 
_G_Âos64_t


	)

39 
	#_IO_size_t
 
size_t


	)

40 
	#_IO_ssize_t
 
__ssize_t


	)

41 
	#_IO_off_t
 
__off_t


	)

42 
	#_IO_off64_t
 
__off64_t


	)

43 
	#_IO_pid_t
 
__pid_t


	)

44 
	#_IO_uid_t
 
__uid_t


	)

45 
	#_IO_ic⁄v_t
 
_G_ic⁄v_t


	)

46 
	#_IO_HAVE_ST_BLKSIZE
 
_G_HAVE_ST_BLKSIZE


	)

47 
	#_IO_BUFSIZ
 
_G_BUFSIZ


	)

48 
	#_IO_va_li°
 
_G_va_li°


	)

49 
	#_IO_wöt_t
 
wöt_t


	)

52 
	#__√ed___va_li°


	)

53 
	~<°d¨g.h
>

54 #ifde‡
__GNUC_VA_LIST


55 #unde‡
_IO_va_li°


56 
	#_IO_va_li°
 
__gnuc_va_li°


	)

59 #i‚de‡
__P


60 
	~<sys/cdefs.h
>

63 
	#_IO_UNIFIED_JUMPTABLES
 1

	)

65 #i‚de‡
EOF


66 
	#EOF
 (-1)

	)

68 #i‚de‡
NULL


69 #i‡
deföed
 
__GNUG__
 && \

70 (
	g__GNUC__
 > 2 || (__GNUC__ =2 && 
__GNUC_MINOR__
 >= 8))

71 
	#NULL
 (
__nuŒ
)

	)

73 #i‡!
deföed
(
__˝lu•lus
)

74 
	#NULL
 ((*)0)

	)

76 
	#NULL
 (0)

	)

81 
	#_IOS_INPUT
 1

	)

82 
	#_IOS_OUTPUT
 2

	)

83 
	#_IOS_ATEND
 4

	)

84 
	#_IOS_APPEND
 8

	)

85 
	#_IOS_TRUNC
 16

	)

86 
	#_IOS_NOCREATE
 32

	)

87 
	#_IOS_NOREPLACE
 64

	)

88 
	#_IOS_BIN
 128

	)

96 
	#_IO_MAGIC
 0xFBAD0000

	)

97 
	#_OLD_STDIO_MAGIC
 0xFABC0000

	)

98 
	#_IO_MAGIC_MASK
 0xFFFF0000

	)

99 
	#_IO_USER_BUF
 1

	)

100 
	#_IO_UNBUFFERED
 2

	)

101 
	#_IO_NO_READS
 4

	)

102 
	#_IO_NO_WRITES
 8

	)

103 
	#_IO_EOF_SEEN
 0x10

	)

104 
	#_IO_ERR_SEEN
 0x20

	)

105 
	#_IO_DELETE_DONT_CLOSE
 0x40

	)

106 
	#_IO_LINKED
 0x80

	)

107 
	#_IO_IN_BACKUP
 0x100

	)

108 
	#_IO_LINE_BUF
 0x200

	)

109 
	#_IO_TIED_PUT_GET
 0x400

	)

110 
	#_IO_CURRENTLY_PUTTING
 0x800

	)

111 
	#_IO_IS_APPENDING
 0x1000

	)

112 
	#_IO_IS_FILEBUF
 0x2000

	)

113 
	#_IO_BAD_SEEN
 0x4000

	)

114 
	#_IO_USER_LOCK
 0x8000

	)

116 
	#_IO_FLAGS2_MMAP
 1

	)

117 
	#_IO_FLAGS2_NOTCANCEL
 2

	)

118 #ifde‡
_LIBC


119 
	#_IO_FLAGS2_FORTIFY
 4

	)

121 
	#_IO_FLAGS2_USER_WBUF
 8

	)

122 #ifde‡
_LIBC


123 
	#_IO_FLAGS2_SCANF_STD
 16

	)

124 
	#_IO_FLAGS2_NOCLOSE
 32

	)

125 
	#_IO_FLAGS2_CLOEXEC
 64

	)

126 
	#_IO_FLAGS2_NEED_LOCK
 128

	)

130 
	#_IO_SKIPWS
 01

	)

131 
	#_IO_LEFT
 02

	)

132 
	#_IO_RIGHT
 04

	)

133 
	#_IO_INTERNAL
 010

	)

134 
	#_IO_DEC
 020

	)

135 
	#_IO_OCT
 040

	)

136 
	#_IO_HEX
 0100

	)

137 
	#_IO_SHOWBASE
 0200

	)

138 
	#_IO_SHOWPOINT
 0400

	)

139 
	#_IO_UPPERCASE
 01000

	)

140 
	#_IO_SHOWPOS
 02000

	)

141 
	#_IO_SCIENTIFIC
 04000

	)

142 
	#_IO_FIXED
 010000

	)

143 
	#_IO_UNITBUF
 020000

	)

144 
	#_IO_STDIO
 040000

	)

145 
	#_IO_DONT_CLOSE
 0100000

	)

146 
	#_IO_BOOLALPHA
 0200000

	)

149 
_IO_jump_t
; 
	g_IO_FILE
;

153 #i‚de‡
_IO_lock_t_deföed


154 
	t_IO_lock_t
;

160 
	s_IO_m¨kî
 {

161 
_IO_m¨kî
 *
	m_√xt
;

162 
_IO_FILE
 *
	m_sbuf
;

166 
	m_pos
;

168 
£t_°ªampos
(
°ªampos
 
•
Ë{ 
	m_•os
 = sp; }

169 
£t_off£t
(
off£t
Ë{ 
	m_pos
 = off£t; 
	m_•os
 = (
°ªampos
)(-2); }

170 
	mpublic
:

171 
°ªamm¨kî
(
°ªambuf
 *
sb
);

172 ~
°ªamm¨kî
();

173 
ßvög
(Ë{  
	m_•os
 == -2; }

174 
dñè
(
°ªamm¨kî
&);

175 
dñè
();

180 
	e__codecvt_ªsu…


182 
	m__codecvt_ok
,

183 
	m__codecvt_∑πül
,

184 
	m__codecvt_îr‹
,

185 
	m__codecvt_noc⁄v


188 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


191 
	s_IO_codecvt


193 (*
	m__codecvt_de°r
Ë(
	m_IO_codecvt
 *);

194 
__codecvt_ªsu…
 (*
__codecvt_do_out
Ë(
	m_IO_codecvt
 *,

195 
	m__mb°©e_t
 *,

196 c⁄° 
	mwch¨_t
 *,

197 c⁄° 
	mwch¨_t
 *,

198 c⁄° 
	mwch¨_t
 **, *,

200 
__codecvt_ªsu…
 (*
__codecvt_do_unshi·
Ë(
	m_IO_codecvt
 *,

201 
	m__mb°©e_t
 *, *,

203 
__codecvt_ªsu…
 (*
__codecvt_do_ö
Ë(
	m_IO_codecvt
 *,

204 
	m__mb°©e_t
 *,

206 c⁄° **, 
	mwch¨_t
 *,

207 
	mwch¨_t
 *, wchar_t **);

208 (*
	m__codecvt_do_ícodög
Ë(
	m_IO_codecvt
 *);

209 (*
	m__codecvt_do_Æways_noc⁄v
Ë(
	m_IO_codecvt
 *);

210 (*
	m__codecvt_do_Àngth
Ë(
	m_IO_codecvt
 *, 
	m__mb°©e_t
 *,

211 c⁄° *, c⁄° *, 
	m_IO_size_t
);

212 (*
	m__codecvt_do_max_Àngth
Ë(
	m_IO_codecvt
 *);

214 
_IO_ic⁄v_t
 
	m__cd_ö
;

215 
_IO_ic⁄v_t
 
	m__cd_out
;

219 
	s_IO_wide_d©a


221 
wch¨_t
 *
	m_IO_ªad_±r
;

222 
wch¨_t
 *
	m_IO_ªad_íd
;

223 
wch¨_t
 *
	m_IO_ªad_ba£
;

224 
wch¨_t
 *
	m_IO_wrôe_ba£
;

225 
wch¨_t
 *
	m_IO_wrôe_±r
;

226 
wch¨_t
 *
	m_IO_wrôe_íd
;

227 
wch¨_t
 *
	m_IO_buf_ba£
;

228 
wch¨_t
 *
	m_IO_buf_íd
;

230 
wch¨_t
 *
	m_IO_ßve_ba£
;

231 
wch¨_t
 *
	m_IO_backup_ba£
;

233 
wch¨_t
 *
	m_IO_ßve_íd
;

235 
__mb°©e_t
 
	m_IO_°©e
;

236 
__mb°©e_t
 
	m_IO_œ°_°©e
;

237 
_IO_codecvt
 
	m_codecvt
;

239 
wch¨_t
 
	m_sh‹tbuf
[1];

241 c⁄° 
_IO_jump_t
 *
	m_wide_vèbÀ
;

245 
	s_IO_FILE
 {

246 
	m_Êags
;

247 
	#_IO_fûe_Êags
 
_Êags


	)

251 * 
	m_IO_ªad_±r
;

252 * 
	m_IO_ªad_íd
;

253 * 
	m_IO_ªad_ba£
;

254 * 
	m_IO_wrôe_ba£
;

255 * 
	m_IO_wrôe_±r
;

256 * 
	m_IO_wrôe_íd
;

257 * 
	m_IO_buf_ba£
;

258 * 
	m_IO_buf_íd
;

260 *
	m_IO_ßve_ba£
;

261 *
	m_IO_backup_ba£
;

262 *
	m_IO_ßve_íd
;

264 
_IO_m¨kî
 *
	m_m¨kîs
;

266 
_IO_FILE
 *
	m_chaö
;

268 
	m_fûío
;

270 
	m_blksize
;

272 
	m_Êags2
;

274 
_IO_off_t
 
	m_ﬁd_off£t
;

276 
	#__HAVE_COLUMN


	)

278 
	m_cur_cﬁumn
;

279 sig√d 
	m_vèbÀ_off£t
;

280 
	m_sh‹tbuf
[1];

284 
_IO_lock_t
 *
	m_lock
;

285 #ifde‡
_IO_USE_OLD_IO_FILE


288 
	s_IO_FILE_com∂ëe


290 
_IO_FILE
 
	m_fûe
;

292 #i‡
deföed
 
_G_IO_IO_FILE_VERSION
 && _G_IO_IO_FILE_VERSION == 0x20001

293 
_IO_off64_t
 
	m_off£t
;

294 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


296 
_IO_codecvt
 *
	m_codecvt
;

297 
_IO_wide_d©a
 *
	m_wide_d©a
;

298 
_IO_FILE
 *
	m_‰ìªs_li°
;

299 *
	m_‰ìªs_buf
;

301 *
	m__∑d1
;

302 *
	m__∑d2
;

303 *
	m__∑d3
;

304 *
	m__∑d4
;

306 
size_t
 
	m__∑d5
;

307 
	m_mode
;

309 
	m_unu£d2
[15 *  (Ë- 4 *  (*Ë-  (
size_t
)];

313 #i‚de‡
__˝lu•lus


314 
_IO_FILE
 
	t_IO_FILE
;

317 
	g_IO_FILE_∂us
;

319 
_IO_FILE_∂us
 
_IO_2_1_°dö_
;

320 
_IO_FILE_∂us
 
_IO_2_1_°dout_
;

321 
_IO_FILE_∂us
 
_IO_2_1_°dîr_
;

322 #i‚de‡
_LIBC


323 
	#_IO_°dö
 ((
_IO_FILE
*)(&
_IO_2_1_°dö_
))

	)

324 
	#_IO_°dout
 ((
_IO_FILE
*)(&
_IO_2_1_°dout_
))

	)

325 
	#_IO_°dîr
 ((
_IO_FILE
*)(&
_IO_2_1_°dîr_
))

	)

327 
_IO_FILE
 *
_IO_°dö
 
©åibuã_hiddí
;

328 
_IO_FILE
 *
_IO_°dout
 
©åibuã_hiddí
;

329 
_IO_FILE
 *
_IO_°dîr
 
©åibuã_hiddí
;

337 
__ssize_t
 
	t__io_ªad_‚
 (*
	t__cookõ
, *
	t__buf
, 
	tsize_t
 
	t__nbyãs
);

345 
__ssize_t
 
	t__io_wrôe_‚
 (*
	t__cookõ
, c⁄° *
	t__buf
,

346 
	tsize_t
 
	t__n
);

354 
	t__io_£ek_‚
 (*
	t__cookõ
, 
	t_IO_off64_t
 *
	t__pos
, 
	t__w
);

357 
	t__io_˛o£_‚
 (*
	t__cookõ
);

360 #ifde‡
__USE_GNU


362 
__io_ªad_‚
 
	tcookõ_ªad_fun˘i⁄_t
;

363 
__io_wrôe_‚
 
	tcookõ_wrôe_fun˘i⁄_t
;

364 
__io_£ek_‚
 
	tcookõ_£ek_fun˘i⁄_t
;

365 
__io_˛o£_‚
 
	tcookõ_˛o£_fun˘i⁄_t
;

370 
__io_ªad_‚
 *
	mªad
;

371 
__io_wrôe_‚
 *
	mwrôe
;

372 
__io_£ek_‚
 *
	m£ek
;

373 
__io_˛o£_‚
 *
	m˛o£
;

374 } 
	t_IO_cookõ_io_fun˘i⁄s_t
;

375 
_IO_cookõ_io_fun˘i⁄s_t
 
	tcookõ_io_fun˘i⁄s_t
;

377 
	g_IO_cookõ_fûe
;

380 
_IO_cookõ_öô
 (
_IO_cookõ_fûe
 *
__cfûe
, 
__ªad_wrôe
,

381 *
__cookõ
, 
_IO_cookõ_io_fun˘i⁄s_t
 
__‚s
);

385 #ifde‡
__˝lu•lus


389 
__undîÊow
 (
_IO_FILE
 *);

390 
__uÊow
 (
_IO_FILE
 *);

391 
__ovîÊow
 (
_IO_FILE
 *, );

392 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


393 
_IO_wöt_t
 
__wundîÊow
 (
_IO_FILE
 *);

394 
_IO_wöt_t
 
__wuÊow
 (
_IO_FILE
 *);

395 
_IO_wöt_t
 
__wovîÊow
 (
_IO_FILE
 *, _IO_wint_t);

398 #i‡ 
__GNUC__
 >= 3

399 
	#_IO_BE
(
ex¥
, 
ªs
Ë
	`__buûtö_ex≥˘
 (”x¥),Ñes)

	)

401 
	#_IO_BE
(
ex¥
, 
ªs
Ë”x¥)

	)

404 
	#_IO_gëc_u∆ocked
(
_Â
) \

405 (
	`_IO_BE
 ((
_Â
)->
_IO_ªad_±r
 >(_Â)->
_IO_ªad_íd
, 0) \

406 ? 
	`__uÊow
 (
_Â
Ë: *(*Ë(_Â)->
_IO_ªad_±r
++)

	)

407 
	#_IO_≥ekc_u∆ocked
(
_Â
) \

408 (
	`_IO_BE
 ((
_Â
)->
_IO_ªad_±r
 >(_Â)->
_IO_ªad_íd
, 0) \

409 && 
	`__undîÊow
 (
_Â
Ë=
EOF
 ? EOF \

410 : *(*Ë(
_Â
)->
_IO_ªad_±r
)

	)

411 
	#_IO_putc_u∆ocked
(
_ch
, 
_Â
) \

412 (
	`_IO_BE
 ((
_Â
)->
_IO_wrôe_±r
 >(_Â)->
_IO_wrôe_íd
, 0) \

413 ? 
	`__ovîÊow
 (
_Â
, (Ë(
_ch
)) \

414 : (Ë(*(
_Â
)->
_IO_wrôe_±r
++ = (
_ch
)))

	)

416 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


417 
	#_IO_gëwc_u∆ocked
(
_Â
) \

418 (
	`_IO_BE
 ((
_Â
)->
_wide_d©a
 =
NULL
 \

419 || ((
_Â
)->
_wide_d©a
->
_IO_ªad_±r
 \

420 >(
_Â
)->
_wide_d©a
->
_IO_ªad_íd
), 0) \

421 ? 
	`__wuÊow
 (
_Â
Ë: (
_IO_wöt_t
Ë*(_Â)->
_wide_d©a
->
_IO_ªad_±r
++)

	)

422 
	#_IO_putwc_u∆ocked
(
_wch
, 
_Â
) \

423 (
	`_IO_BE
 ((
_Â
)->
_wide_d©a
 =
NULL
 \

424 || ((
_Â
)->
_wide_d©a
->
_IO_wrôe_±r
 \

425 >(
_Â
)->
_wide_d©a
->
_IO_wrôe_íd
), 0) \

426 ? 
	`__wovîÊow
 (
_Â
, 
_wch
) \

427 : (
_IO_wöt_t
Ë(*(
_Â
)->
_wide_d©a
->
_IO_wrôe_±r
++ = (
_wch
)))

	)

430 
	#_IO_„of_u∆ocked
(
__Â
Ë(((__Â)->
_Êags
 & 
_IO_EOF_SEEN
Ë!0)

	)

431 
	#_IO_„º‹_u∆ocked
(
__Â
Ë(((__Â)->
_Êags
 & 
_IO_ERR_SEEN
Ë!0)

	)

433 
_IO_gëc
 (
_IO_FILE
 *
__Â
);

434 
_IO_putc
 (
__c
, 
_IO_FILE
 *
__Â
);

435 
_IO_„of
 (
_IO_FILE
 *
__Â
Ë
__THROW
;

436 
_IO_„º‹
 (
_IO_FILE
 *
__Â
Ë
__THROW
;

438 
_IO_≥ekc_locked
 (
_IO_FILE
 *
__Â
);

441 
	#_IO_PENDING_OUTPUT_COUNT
(
_Â
) \

442 ((
_Â
)->
_IO_wrôe_±r
 - (_Â)->
_IO_wrôe_ba£
)

	)

444 
_IO_Êockfûe
 (
_IO_FILE
 *Ë
__THROW
;

445 
_IO_fu∆ockfûe
 (
_IO_FILE
 *Ë
__THROW
;

446 
_IO_·rylockfûe
 (
_IO_FILE
 *Ë
__THROW
;

448 
	#_IO_≥ekc
(
_Â
Ë
	`_IO_≥ekc_u∆ocked
 (_Â)

	)

449 
	#_IO_Êockfûe
(
_Â
Ë

	)

450 
	#_IO_fu∆ockfûe
(
_Â
Ë

	)

451 
	#_IO_·rylockfûe
(
_Â
Ë

	)

452 #i‚de‡
_IO_˛ónup_ªgi⁄_°¨t


453 
	#_IO_˛ónup_ªgi⁄_°¨t
(
_f˘
, 
_Â
Ë

	)

455 #i‚de‡
_IO_˛ónup_ªgi⁄_íd


456 
	#_IO_˛ónup_ªgi⁄_íd
(
_Doô
Ë

	)

459 
	#_IO_√ed_lock
(
_Â
) \

460 (((
_Â
)->
_Êags2
 & 
_IO_FLAGS2_NEED_LOCK
Ë!0)

	)

462 
_IO_vfsˇnf
 (
_IO_FILE
 * 
__ª°ri˘
, const * __restrict,

463 
_IO_va_li°
, *
__ª°ri˘
);

464 
_IO_vÂrötf
 (
_IO_FILE
 *
__ª°ri˘
, const *__restrict,

465 
_IO_va_li°
);

466 
_IO_ssize_t
 
_IO_∑dn
 (
_IO_FILE
 *, , _IO_ssize_t);

467 
_IO_size_t
 
_IO_sgën
 (
_IO_FILE
 *, *, _IO_size_t);

469 
_IO_off64_t
 
_IO_£ekoff
 (
_IO_FILE
 *, _IO_off64_t, , );

470 
_IO_off64_t
 
_IO_£ekpos
 (
_IO_FILE
 *, _IO_off64_t, );

472 
_IO_‰ì_backup_¨ó
 (
_IO_FILE
 *Ë
__THROW
;

474 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


475 
_IO_wöt_t
 
_IO_gëwc
 (
_IO_FILE
 *
__Â
);

476 
_IO_wöt_t
 
_IO_putwc
 (
wch¨_t
 
__wc
, 
_IO_FILE
 *
__Â
);

477 
_IO_fwide
 (
_IO_FILE
 *
__Â
, 
__mode
Ë
__THROW
;

478 #i‡
__GNUC__
 >= 2

481 #i‡
deföed
 
_LIBC
 && deföed 
SHARED


482 
	~<shlib-com∑t.h
>

483 #i‡
SHLIB_COMPAT
 (
libc
, 
GLIBC_2_0
, 
GLIBC_2_1
)

484 
	#_IO_fwide_maybe_öcom∑tibÀ
 \

485 (
	`__buûtö_ex≥˘
 (&
_IO_°dö_u£d
 =
NULL
, 0))

	)

486 c⁄° 
_IO_°dö_u£d
;

487 
wók_exã∫
 (
_IO_°dö_u£d
);

490 #i‚de‡
_IO_fwide_maybe_öcom∑tibÀ


491 
	#_IO_fwide_maybe_öcom∑tibÀ
 (0)

	)

495 
	#_IO_fwide
(
__Â
, 
__mode
) \

496 ({ 
__ªsu…
 = (
__mode
); \

497 i‡(
__ªsu…
 < 0 && ! 
_IO_fwide_maybe_öcom∑tibÀ
) \

499 i‡((
__Â
)->
_mode
 == 0) \

501 (
__Â
)->
_mode
 = -1; \

502 
__ªsu…
 = (
__Â
)->
_mode
; \

504 i‡(
	`__buûtö_c⁄°™t_p
 (
__mode
) && (__mode) == 0) \

505 
__ªsu…
 = 
_IO_fwide_maybe_öcom∑tibÀ
 ? -1 : (
__Â
)->
_mode
; \

507 
__ªsu…
 = 
	`_IO_fwide
 (
__Â
, __result); \

508 
__ªsu…
; })

	)

511 
_IO_vfwsˇnf
 (
_IO_FILE
 * 
__ª°ri˘
, c⁄° 
wch¨_t
 * __restrict,

512 
_IO_va_li°
, *
__ª°ri˘
);

513 
_IO_vfw¥ötf
 (
_IO_FILE
 *
__ª°ri˘
, c⁄° 
wch¨_t
 *__restrict,

514 
_IO_va_li°
);

515 
_IO_ssize_t
 
_IO_w∑dn
 (
_IO_FILE
 *, 
wöt_t
, _IO_ssize_t);

516 
_IO_‰ì_wbackup_¨ó
 (
_IO_FILE
 *Ë
__THROW
;

519 #ifde‡
__LDBL_COMPAT


520 
	~<bôs/libio-ldbl.h
>

523 #ifde‡
__˝lu•lus


	@/usr/include/bits/posix_opt.h

19 #i‚def 
_BITS_POSIX_OPT_H


20 
	#_BITS_POSIX_OPT_H
 1

	)

23 
	#_POSIX_JOB_CONTROL
 1

	)

26 
	#_POSIX_SAVED_IDS
 1

	)

29 
	#_POSIX_PRIORITY_SCHEDULING
 200809L

	)

32 
	#_POSIX_SYNCHRONIZED_IO
 200809L

	)

35 
	#_POSIX_FSYNC
 200809L

	)

38 
	#_POSIX_MAPPED_FILES
 200809L

	)

41 
	#_POSIX_MEMLOCK
 200809L

	)

44 
	#_POSIX_MEMLOCK_RANGE
 200809L

	)

47 
	#_POSIX_MEMORY_PROTECTION
 200809L

	)

50 
	#_POSIX_CHOWN_RESTRICTED
 0

	)

54 
	#_POSIX_VDISABLE
 '\0'

	)

57 
	#_POSIX_NO_TRUNC
 1

	)

60 
	#_XOPEN_REALTIME
 1

	)

63 
	#_XOPEN_REALTIME_THREADS
 1

	)

66 
	#_XOPEN_SHM
 1

	)

69 
	#_POSIX_THREADS
 200809L

	)

72 
	#_POSIX_REENTRANT_FUNCTIONS
 1

	)

73 
	#_POSIX_THREAD_SAFE_FUNCTIONS
 200809L

	)

76 
	#_POSIX_THREAD_PRIORITY_SCHEDULING
 200809L

	)

79 
	#_POSIX_THREAD_ATTR_STACKSIZE
 200809L

	)

82 
	#_POSIX_THREAD_ATTR_STACKADDR
 200809L

	)

85 
	#_POSIX_THREAD_PRIO_INHERIT
 200809L

	)

89 
	#_POSIX_THREAD_PRIO_PROTECT
 200809L

	)

91 #ifde‡
__USE_XOPEN2K8


93 
	#_POSIX_THREAD_ROBUST_PRIO_INHERIT
 200809L

	)

96 
	#_POSIX_THREAD_ROBUST_PRIO_PROTECT
 -1

	)

100 
	#_POSIX_SEMAPHORES
 200809L

	)

103 
	#_POSIX_REALTIME_SIGNALS
 200809L

	)

106 
	#_POSIX_ASYNCHRONOUS_IO
 200809L

	)

107 
	#_POSIX_ASYNC_IO
 1

	)

109 
	#_LFS_ASYNCHRONOUS_IO
 1

	)

111 
	#_POSIX_PRIORITIZED_IO
 200809L

	)

114 
	#_LFS64_ASYNCHRONOUS_IO
 1

	)

117 
	#_LFS_LARGEFILE
 1

	)

118 
	#_LFS64_LARGEFILE
 1

	)

119 
	#_LFS64_STDIO
 1

	)

122 
	#_POSIX_SHARED_MEMORY_OBJECTS
 200809L

	)

125 
	#_POSIX_CPUTIME
 0

	)

128 
	#_POSIX_THREAD_CPUTIME
 0

	)

131 
	#_POSIX_REGEXP
 1

	)

134 
	#_POSIX_READER_WRITER_LOCKS
 200809L

	)

137 
	#_POSIX_SHELL
 1

	)

140 
	#_POSIX_TIMEOUTS
 200809L

	)

143 
	#_POSIX_SPIN_LOCKS
 200809L

	)

146 
	#_POSIX_SPAWN
 200809L

	)

149 
	#_POSIX_TIMERS
 200809L

	)

152 
	#_POSIX_BARRIERS
 200809L

	)

155 
	#_POSIX_MESSAGE_PASSING
 200809L

	)

158 
	#_POSIX_THREAD_PROCESS_SHARED
 200809L

	)

161 
	#_POSIX_MONOTONIC_CLOCK
 0

	)

164 
	#_POSIX_CLOCK_SELECTION
 200809L

	)

167 
	#_POSIX_ADVISORY_INFO
 200809L

	)

170 
	#_POSIX_IPV6
 200809L

	)

173 
	#_POSIX_RAW_SOCKETS
 200809L

	)

176 
	#_POSIX2_CHAR_TERM
 200809L

	)

179 
	#_POSIX_SPORADIC_SERVER
 -1

	)

180 
	#_POSIX_THREAD_SPORADIC_SERVER
 -1

	)

183 
	#_POSIX_TRACE
 -1

	)

184 
	#_POSIX_TRACE_EVENT_FILTER
 -1

	)

185 
	#_POSIX_TRACE_INHERIT
 -1

	)

186 
	#_POSIX_TRACE_LOG
 -1

	)

189 
	#_POSIX_TYPED_MEMORY_OBJECTS
 -1

	)

	@/usr/include/bits/semaphore.h

19 #i‚de‡
_SEMAPHORE_H


23 
	~<bôs/w‹dsize.h
>

25 #i‡
__WORDSIZE
 == 64

26 
	#__SIZEOF_SEM_T
 32

	)

28 
	#__SIZEOF_SEM_T
 16

	)

33 
	#SEM_FAILED
 ((
£m_t
 *Ë0)

	)

38 
	m__size
[
__SIZEOF_SEM_T
];

39 
	m__Æign
;

40 } 
	t£m_t
;

	@/usr/include/bits/stdint-intn.h

19 #i‚de‡
_BITS_STDINT_INTN_H


20 
	#_BITS_STDINT_INTN_H
 1

	)

22 
	~<bôs/ty≥s.h
>

24 
__öt8_t
 
	töt8_t
;

25 
__öt16_t
 
	töt16_t
;

26 
__öt32_t
 
	töt32_t
;

27 
__öt64_t
 
	töt64_t
;

	@/usr/include/bits/stdint-uintn.h

19 #i‚de‡
_BITS_STDINT_UINTN_H


20 
	#_BITS_STDINT_UINTN_H
 1

	)

22 
	~<bôs/ty≥s.h
>

24 
__uöt8_t
 
	tuöt8_t
;

25 
__uöt16_t
 
	tuöt16_t
;

26 
__uöt32_t
 
	tuöt32_t
;

27 
__uöt64_t
 
	tuöt64_t
;

	@/usr/include/bits/stdio-ldbl.h

19 #i‚de‡
_STDIO_H


23 
	$__LDBL_REDIR_DECL
 (
Ârötf
)

24 
	$__LDBL_REDIR_DECL
 (
¥ötf
)

25 
	$__LDBL_REDIR_DECL
 (
•rötf
)

26 
	$__LDBL_REDIR_DECL
 (
vÂrötf
)

27 
	$__LDBL_REDIR_DECL
 (
v¥ötf
)

28 
	$__LDBL_REDIR_DECL
 (
v•rötf
)

29 #i‡
deföed
 
__USE_ISOC99
 && !deföed 
__USE_GNU
 \

30 && !
deföed
 
__REDIRECT
 \

31 && (
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_XOPEN2K
)

32 
	$__LDBL_REDIR1_DECL
 (
fsˇnf
, 
__∆dbl___isoc99_fsˇnf
)

33 
	$__LDBL_REDIR1_DECL
 (
sˇnf
, 
__∆dbl___isoc99_sˇnf
)

34 
	$__LDBL_REDIR1_DECL
 (
ssˇnf
, 
__∆dbl___isoc99_ssˇnf
)

36 
	$__LDBL_REDIR_DECL
 (
fsˇnf
)

37 
	$__LDBL_REDIR_DECL
 (
sˇnf
)

38 
	$__LDBL_REDIR_DECL
 (
ssˇnf
)

41 #i‡
deföed
 
__USE_ISOC99
 || deföed 
__USE_UNIX98


42 
	$__LDBL_REDIR_DECL
 (
¢¥ötf
)

43 
	$__LDBL_REDIR_DECL
 (
v¢¥ötf
)

46 #ifdef 
__USE_ISOC99


47 #i‡!
deföed
 
__USE_GNU
 && !deföed 
__REDIRECT
 \

48 && (
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_XOPEN2K
)

49 
	$__LDBL_REDIR1_DECL
 (
vfsˇnf
, 
__∆dbl___isoc99_vfsˇnf
)

50 
	$__LDBL_REDIR1_DECL
 (
vsˇnf
, 
__∆dbl___isoc99_vsˇnf
)

51 
	$__LDBL_REDIR1_DECL
 (
vssˇnf
, 
__∆dbl___isoc99_vssˇnf
)

53 
	$__LDBL_REDIR_DECL
 (
vfsˇnf
)

54 
	$__LDBL_REDIR_DECL
 (
vssˇnf
)

55 
	$__LDBL_REDIR_DECL
 (
vsˇnf
)

59 #ifde‡
__USE_XOPEN2K8


60 
	$__LDBL_REDIR_DECL
 (
vd¥ötf
)

61 
	$__LDBL_REDIR_DECL
 (
d¥ötf
)

64 #ifde‡
__USE_GNU


65 
	$__LDBL_REDIR_DECL
 (
va•rötf
)

66 
	$__LDBL_REDIR_DECL
 (
__a•rötf
)

67 
	$__LDBL_REDIR_DECL
 (
a•rötf
)

68 
	$__LDBL_REDIR_DECL
 (
ob°ack_¥ötf
)

69 
	$__LDBL_REDIR_DECL
 (
ob°ack_v¥ötf
)

72 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__f‹tify_fun˘i⁄


73 
	$__LDBL_REDIR_DECL
 (
__•rötf_chk
)

74 
	$__LDBL_REDIR_DECL
 (
__v•rötf_chk
)

75 #i‡
deföed
 
__USE_ISOC99
 || deföed 
__USE_UNIX98


76 
	$__LDBL_REDIR_DECL
 (
__¢¥ötf_chk
)

77 
	$__LDBL_REDIR_DECL
 (
__v¢¥ötf_chk
)

79 #i‡
__USE_FORTIFY_LEVEL
 > 1

80 
	$__LDBL_REDIR_DECL
 (
__Ârötf_chk
)

81 
	$__LDBL_REDIR_DECL
 (
__¥ötf_chk
)

82 
	$__LDBL_REDIR_DECL
 (
__vÂrötf_chk
)

83 
	$__LDBL_REDIR_DECL
 (
__v¥ötf_chk
)

84 #ifde‡
__USE_XOPEN2K8


85 
	$__LDBL_REDIR_DECL
 (
__d¥ötf_chk
)

86 
	$__LDBL_REDIR_DECL
 (
__vd¥ötf_chk
)

88 #ifde‡
__USE_GNU


89 
	$__LDBL_REDIR_DECL
 (
__a•rötf_chk
)

90 
	$__LDBL_REDIR_DECL
 (
__va•rötf_chk
)

91 
	$__LDBL_REDIR_DECL
 (
__ob°ack_¥ötf_chk
)

92 
	$__LDBL_REDIR_DECL
 (
__ob°ack_v¥ötf_chk
)

	@/usr/include/bits/stdio.h

19 #i‚de‡
_STDIO_H


23 #i‚de‡
__exã∫_ölöe


24 
	#__STDIO_INLINE
 
ölöe


	)

26 
	#__STDIO_INLINE
 
__exã∫_ölöe


	)

30 #ifde‡
__USE_EXTERN_INLINES


33 #i‡!(
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__f‹tify_fun˘i⁄
)

35 
__STDIO_INLINE
 

36 
	$v¥ötf
 (c⁄° *
__ª°ri˘
 
__fmt
, 
_G_va_li°
 
__¨g
)

38  
	`vÂrötf
 (
°dout
, 
__fmt
, 
__¨g
);

39 
	}
}

43 
__STDIO_INLINE
 

44 
	$gëch¨
 ()

46  
	`_IO_gëc
 (
°dö
);

47 
	}
}

50 #ifde‡
__USE_MISC


52 
__STDIO_INLINE
 

53 
	$fgëc_u∆ocked
 (
FILE
 *
__Â
)

55  
	`_IO_gëc_u∆ocked
 (
__Â
);

56 
	}
}

60 #ifde‡
__USE_POSIX


62 
__STDIO_INLINE
 

63 
	$gëc_u∆ocked
 (
FILE
 *
__Â
)

65  
	`_IO_gëc_u∆ocked
 (
__Â
);

66 
	}
}

69 
__STDIO_INLINE
 

70 
	$gëch¨_u∆ocked
 ()

72  
	`_IO_gëc_u∆ocked
 (
°dö
);

73 
	}
}

78 
__STDIO_INLINE
 

79 
	$putch¨
 (
__c
)

81  
	`_IO_putc
 (
__c
, 
°dout
);

82 
	}
}

85 #ifde‡
__USE_MISC


87 
__STDIO_INLINE
 

88 
	$Âutc_u∆ocked
 (
__c
, 
FILE
 *
__°ªam
)

90  
	`_IO_putc_u∆ocked
 (
__c
, 
__°ªam
);

91 
	}
}

95 #ifde‡
__USE_POSIX


97 
__STDIO_INLINE
 

98 
	$putc_u∆ocked
 (
__c
, 
FILE
 *
__°ªam
)

100  
	`_IO_putc_u∆ocked
 (
__c
, 
__°ªam
);

101 
	}
}

104 
__STDIO_INLINE
 

105 
	$putch¨_u∆ocked
 (
__c
)

107  
	`_IO_putc_u∆ocked
 (
__c
, 
°dout
);

108 
	}
}

112 #ifdef 
__USE_GNU


114 
__STDIO_INLINE
 
_IO_ssize_t


115 
	$gëlöe
 (**
__löïå
, 
size_t
 *
__n
, 
FILE
 *
__°ªam
)

117  
	`__gëdñim
 (
__löïå
, 
__n
, '\n', 
__°ªam
);

118 
	}
}

122 #ifde‡
__USE_MISC


124 
__STDIO_INLINE
 

125 
__NTH
 (
	$„of_u∆ocked
 (
FILE
 *
__°ªam
))

127  
	`_IO_„of_u∆ocked
 (
__°ªam
);

128 
	}
}

131 
__STDIO_INLINE
 

132 
__NTH
 (
	$„º‹_u∆ocked
 (
FILE
 *
__°ªam
))

134  
	`_IO_„º‹_u∆ocked
 (
__°ªam
);

135 
	}
}

141 #i‡
deföed
 
__USE_MISC
 && deföed 
__GNUC__
 && deföed 
__OPTIMIZE__
 \

142 && !
deföed
 
	g__˝lu•lus


144 
	#‰ód_u∆ocked
(
±r
, 
size
, 
n
, 
°ªam
) \

145 (
	`__exãnsi⁄__
 ((
	`__buûtö_c⁄°™t_p
 (
size
Ë&& __buûtö_c⁄°™t_∞(
n
) \

146 && (
size_t
Ë(
size
Ë* (size_tË(
n
) <= 8 \

147 && (
size_t
Ë(
size
) != 0) \

148 ? ({ *
__±r
 = (*Ë(
±r
); \

149 
FILE
 *
__°ªam
 = (
°ªam
); \

150 
size_t
 
__˙t
; \

151 
__˙t
 = (
size_t
Ë(
size
Ë* (size_tË(
n
); \

152 
__˙t
 > 0; --__cnt) \

154 
__c
 = 
	`_IO_gëc_u∆ocked
 (
__°ªam
); \

155 i‡(
__c
 =
EOF
) \

157 *
__±r
++ = 
__c
; \

159 ((
size_t
Ë(
size
Ë* (size_tË(
n
Ë- 
__˙t
) \

160 / (
size_t
Ë(
size
); }) \

161 : (((
	`__buûtö_c⁄°™t_p
 (
size
Ë&& (
size_t
) (size) == 0) \

162 || (
	`__buûtö_c⁄°™t_p
 (
n
Ë&& (
size_t
) (n) == 0)) \

164 ? ((Ë(
±r
), (Ë(
°ªam
), (Ë(
size
), \

165 (Ë(
n
), (
size_t
) 0) \

166 : 
	`‰ód_u∆ocked
 (
±r
, 
size
, 
n
, 
°ªam
))))

	)

168 
	#fwrôe_u∆ocked
(
±r
, 
size
, 
n
, 
°ªam
) \

169 (
	`__exãnsi⁄__
 ((
	`__buûtö_c⁄°™t_p
 (
size
Ë&& __buûtö_c⁄°™t_∞(
n
) \

170 && (
size_t
Ë(
size
Ë* (size_tË(
n
) <= 8 \

171 && (
size_t
Ë(
size
) != 0) \

172 ? ({ c⁄° *
__±r
 = (c⁄° *Ë(
±r
); \

173 
FILE
 *
__°ªam
 = (
°ªam
); \

174 
size_t
 
__˙t
; \

175 
__˙t
 = (
size_t
Ë(
size
Ë* (size_tË(
n
); \

176 
__˙t
 > 0; --__cnt) \

177 i‡(
	`_IO_putc_u∆ocked
 (*
__±r
++, 
__°ªam
Ë=
EOF
) \

179 ((
size_t
Ë(
size
Ë* (size_tË(
n
Ë- 
__˙t
) \

180 / (
size_t
Ë(
size
); }) \

181 : (((
	`__buûtö_c⁄°™t_p
 (
size
Ë&& (
size_t
) (size) == 0) \

182 || (
	`__buûtö_c⁄°™t_p
 (
n
Ë&& (
size_t
) (n) == 0)) \

184 ? ((Ë(
±r
), (Ë(
°ªam
), (Ë(
size
), \

185 (Ë(
n
), (
size_t
) 0) \

186 : 
	`fwrôe_u∆ocked
 (
±r
, 
size
, 
n
, 
°ªam
))))

	)

190 #unde‡
__STDIO_INLINE


	@/usr/include/bits/stdio2.h

19 #i‚de‡
_STDIO_H


23 
	$__•rötf_chk
 (*
__ª°ri˘
 
__s
, 
__Êag
, 
size_t
 
__¶í
,

24 c⁄° *
__ª°ri˘
 
__f‹m©
, ...Ë
__THROW
;

25 
	$__v•rötf_chk
 (*
__ª°ri˘
 
__s
, 
__Êag
, 
size_t
 
__¶í
,

26 c⁄° *
__ª°ri˘
 
__f‹m©
,

27 
_G_va_li°
 
__≠
Ë
__THROW
;

29 #ifde‡
__va_¨g_∑ck


30 
__f‹tify_fun˘i⁄
 

31 
	`__NTH
 (
	$•rötf
 (*
__ª°ri˘
 
__s
, c⁄° *__ª°ri˘ 
__fmt
, ...))

33  
	`__buûtö___•rötf_chk
 (
__s
, 
__USE_FORTIFY_LEVEL
 - 1,

34 
	`__bos
 (
__s
), 
__fmt
, 
	`__va_¨g_∑ck
 ());

35 
	}
}

36 #ñi‡!
deföed
 
__˝lu•lus


37 
	#•rötf
(
°r
, ...) \

38 
	`__buûtö___•rötf_chk
 (
°r
, 
__USE_FORTIFY_LEVEL
 - 1, 
	`__bos
 (str), \

39 
__VA_ARGS__
)

	)

42 
__f‹tify_fun˘i⁄
 

43 
__NTH
 (
	$v•rötf
 (*
__ª°ri˘
 
__s
, c⁄° *__ª°ri˘ 
__fmt
,

44 
_G_va_li°
 
__≠
))

46  
	`__buûtö___v•rötf_chk
 (
__s
, 
__USE_FORTIFY_LEVEL
 - 1,

47 
	`__bos
 (
__s
), 
__fmt
, 
__≠
);

48 
	}
}

50 #i‡
deföed
 
__USE_ISOC99
 || deföed 
__USE_UNIX98


52 
	$__¢¥ötf_chk
 (*
__ª°ri˘
 
__s
, 
size_t
 
__n
, 
__Êag
,

53 
size_t
 
__¶í
, c⁄° *
__ª°ri˘
 
__f‹m©
,

54 ...Ë
__THROW
;

55 
	$__v¢¥ötf_chk
 (*
__ª°ri˘
 
__s
, 
size_t
 
__n
, 
__Êag
,

56 
size_t
 
__¶í
, c⁄° *
__ª°ri˘
 
__f‹m©
,

57 
_G_va_li°
 
__≠
Ë
__THROW
;

59 #ifde‡
__va_¨g_∑ck


60 
__f‹tify_fun˘i⁄
 

61 
	`__NTH
 (
	$¢¥ötf
 (*
__ª°ri˘
 
__s
, 
size_t
 
__n
,

62 c⁄° *
__ª°ri˘
 
__fmt
, ...))

64  
	`__buûtö___¢¥ötf_chk
 (
__s
, 
__n
, 
__USE_FORTIFY_LEVEL
 - 1,

65 
	`__bos
 (
__s
), 
__fmt
, 
	`__va_¨g_∑ck
 ());

66 
	}
}

67 #ñi‡!
deföed
 
__˝lu•lus


68 
	#¢¥ötf
(
°r
, 
Àn
, ...) \

69 
	`__buûtö___¢¥ötf_chk
 (
°r
, 
Àn
, 
__USE_FORTIFY_LEVEL
 - 1, 
	`__bos
 (str), \

70 
__VA_ARGS__
)

	)

73 
__f‹tify_fun˘i⁄
 

74 
__NTH
 (
	$v¢¥ötf
 (*
__ª°ri˘
 
__s
, 
size_t
 
__n
,

75 c⁄° *
__ª°ri˘
 
__fmt
, 
_G_va_li°
 
__≠
))

77  
	`__buûtö___v¢¥ötf_chk
 (
__s
, 
__n
, 
__USE_FORTIFY_LEVEL
 - 1,

78 
	`__bos
 (
__s
), 
__fmt
, 
__≠
);

79 
	}
}

83 #i‡
__USE_FORTIFY_LEVEL
 > 1

85 
__Ârötf_chk
 (
FILE
 *
__ª°ri˘
 
__°ªam
, 
__Êag
,

86 c⁄° *
__ª°ri˘
 
__f‹m©
, ...);

87 
__¥ötf_chk
 (
__Êag
, c⁄° *
__ª°ri˘
 
__f‹m©
, ...);

88 
__vÂrötf_chk
 (
FILE
 *
__ª°ri˘
 
__°ªam
, 
__Êag
,

89 c⁄° *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__≠
);

90 
__v¥ötf_chk
 (
__Êag
, c⁄° *
__ª°ri˘
 
__f‹m©
,

91 
_G_va_li°
 
__≠
);

93 #ifde‡
__va_¨g_∑ck


94 
__f‹tify_fun˘i⁄
 

95 
	$Ârötf
 (
FILE
 *
__ª°ri˘
 
__°ªam
, c⁄° *__ª°ri˘ 
__fmt
, ...)

97  
	`__Ârötf_chk
 (
__°ªam
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
,

98 
	`__va_¨g_∑ck
 ());

99 
	}
}

101 
__f‹tify_fun˘i⁄
 

102 
	$¥ötf
 (c⁄° *
__ª°ri˘
 
__fmt
, ...)

104  
	`__¥ötf_chk
 (
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
, 
	`__va_¨g_∑ck
 ());

105 
	}
}

106 #ñi‡!
deföed
 
__˝lu•lus


107 
	#¥ötf
(...) \

108 
	`__¥ötf_chk
 (
__USE_FORTIFY_LEVEL
 - 1, 
__VA_ARGS__
)

	)

109 
	#Ârötf
(
°ªam
, ...) \

110 
	`__Ârötf_chk
 (
°ªam
, 
__USE_FORTIFY_LEVEL
 - 1, 
__VA_ARGS__
)

	)

113 
__f‹tify_fun˘i⁄
 

114 
	$v¥ötf
 (c⁄° *
__ª°ri˘
 
__fmt
, 
_G_va_li°
 
__≠
)

116 #ifde‡
__USE_EXTERN_INLINES


117  
	`__vÂrötf_chk
 (
°dout
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
, 
__≠
);

119  
	`__v¥ötf_chk
 (
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
, 
__≠
);

121 
	}
}

123 
__f‹tify_fun˘i⁄
 

124 
	$vÂrötf
 (
FILE
 *
__ª°ri˘
 
__°ªam
,

125 c⁄° *
__ª°ri˘
 
__fmt
, 
_G_va_li°
 
__≠
)

127  
	`__vÂrötf_chk
 (
__°ªam
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
, 
__≠
);

128 
	}
}

130 #ifde‡
__USE_XOPEN2K8


131 
	$__d¥ötf_chk
 (
__fd
, 
__Êag
, c⁄° *
__ª°ri˘
 
__fmt
,

132 ...Ë
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 3, 4)));

133 
	$__vd¥ötf_chk
 (
__fd
, 
__Êag
,

134 c⁄° *
__ª°ri˘
 
__fmt
, 
_G_va_li°
 
__¨g
)

135 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 3, 0)));

137 #ifde‡
__va_¨g_∑ck


138 
__f‹tify_fun˘i⁄
 

139 
	$d¥ötf
 (
__fd
, c⁄° *
__ª°ri˘
 
__fmt
, ...)

141  
	`__d¥ötf_chk
 (
__fd
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
,

142 
	`__va_¨g_∑ck
 ());

143 
	}
}

144 #ñi‡!
deföed
 
__˝lu•lus


145 
	#d¥ötf
(
fd
, ...) \

146 
	`__d¥ötf_chk
 (
fd
, 
__USE_FORTIFY_LEVEL
 - 1, 
__VA_ARGS__
)

	)

149 
__f‹tify_fun˘i⁄
 

150 
	$vd¥ötf
 (
__fd
, c⁄° *
__ª°ri˘
 
__fmt
, 
_G_va_li°
 
__≠
)

152  
	`__vd¥ötf_chk
 (
__fd
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
, 
__≠
);

153 
	}
}

156 #ifde‡
__USE_GNU


158 
	$__a•rötf_chk
 (**
__ª°ri˘
 
__±r
, 
__Êag
,

159 c⁄° *
__ª°ri˘
 
__fmt
, ...)

160 
__THROW
 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__¥ötf__
, 3, 4))Ë
__wur
;

161 
	$__va•rötf_chk
 (**
__ª°ri˘
 
__±r
, 
__Êag
,

162 c⁄° *
__ª°ri˘
 
__fmt
, 
_G_va_li°
 
__¨g
)

163 
__THROW
 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__¥ötf__
, 3, 0))Ë
__wur
;

164 
	$__ob°ack_¥ötf_chk
 (
ob°ack
 *
__ª°ri˘
 
__ob°ack
,

165 
__Êag
, c⁄° *
__ª°ri˘
 
__f‹m©
,

167 
__THROW
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 3, 4)));

168 
	$__ob°ack_v¥ötf_chk
 (
ob°ack
 *
__ª°ri˘
 
__ob°ack
,

169 
__Êag
,

170 c⁄° *
__ª°ri˘
 
__f‹m©
,

171 
_G_va_li°
 
__¨gs
)

172 
__THROW
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 3, 0)));

174 #ifde‡
__va_¨g_∑ck


175 
__f‹tify_fun˘i⁄
 

176 
	`__NTH
 (
	$a•rötf
 (**
__ª°ri˘
 
__±r
, c⁄° *__ª°ri˘ 
__fmt
, ...))

178  
	`__a•rötf_chk
 (
__±r
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
,

179 
	`__va_¨g_∑ck
 ());

180 
	}
}

182 
__f‹tify_fun˘i⁄
 

183 
__NTH
 (
	$__a•rötf
 (**
__ª°ri˘
 
__±r
, c⁄° *__ª°ri˘ 
__fmt
,

186  
	`__a•rötf_chk
 (
__±r
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
,

187 
	`__va_¨g_∑ck
 ());

188 
	}
}

190 
__f‹tify_fun˘i⁄
 

191 
__NTH
 (
	$ob°ack_¥ötf
 (
ob°ack
 *
__ª°ri˘
 
__ob°ack
,

192 c⁄° *
__ª°ri˘
 
__fmt
, ...))

194  
	`__ob°ack_¥ötf_chk
 (
__ob°ack
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
,

195 
	`__va_¨g_∑ck
 ());

196 
	}
}

197 #ñi‡!
deföed
 
__˝lu•lus


198 
	#a•rötf
(
±r
, ...) \

199 
	`__a•rötf_chk
 (
±r
, 
__USE_FORTIFY_LEVEL
 - 1, 
__VA_ARGS__
)

	)

200 
	#__a•rötf
(
±r
, ...) \

201 
	`__a•rötf_chk
 (
±r
, 
__USE_FORTIFY_LEVEL
 - 1, 
__VA_ARGS__
)

	)

202 
	#ob°ack_¥ötf
(
ob°ack
, ...) \

203 
	`__ob°ack_¥ötf_chk
 (
ob°ack
, 
__USE_FORTIFY_LEVEL
 - 1, 
__VA_ARGS__
)

	)

206 
__f‹tify_fun˘i⁄
 

207 
__NTH
 (
	$va•rötf
 (**
__ª°ri˘
 
__±r
, c⁄° *__ª°ri˘ 
__fmt
,

208 
_G_va_li°
 
__≠
))

210  
	`__va•rötf_chk
 (
__±r
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
, 
__≠
);

211 
	}
}

213 
__f‹tify_fun˘i⁄
 

214 
__NTH
 (
	$ob°ack_v¥ötf
 (
ob°ack
 *
__ª°ri˘
 
__ob°ack
,

215 c⁄° *
__ª°ri˘
 
__fmt
, 
_G_va_li°
 
__≠
))

217  
	`__ob°ack_v¥ötf_chk
 (
__ob°ack
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
,

218 
__≠
);

219 
	}
}

225 #i‡
__GLIBC_USE
 (
DEPRECATED_GETS
)

226 *
	$__gës_chk
 (*
__°r
, 
size_t
Ë
__wur
;

227 *
	`__REDIRECT
 (
__gës_w¨n
, (*
__°r
), 
gës
)

228 
__wur
 
	`__w¨«âr
 ("please use fgets or getline instead, gets can't "

231 
__f‹tify_fun˘i⁄
 
__wur
 *

232 
	$gës
 (*
__°r
)

234 i‡(
	`__bos
 (
__°r
Ë!(
size_t
) -1)

235  
	`__gës_chk
 (
__°r
, 
	`__bos
 (__str));

236  
	`__gës_w¨n
 (
__°r
);

237 
	}
}

240 *
	$__fgës_chk
 (*
__ª°ri˘
 
__s
, 
size_t
 
__size
, 
__n
,

241 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

242 *
	`__REDIRECT
 (
__fgës_Æüs
,

243 (*
__ª°ri˘
 
__s
, 
__n
,

244 
FILE
 *
__ª°ri˘
 
__°ªam
), 
fgës
Ë
__wur
;

245 *
	`__REDIRECT
 (
__fgës_chk_w¨n
,

246 (*
__ª°ri˘
 
__s
, 
size_t
 
__size
, 
__n
,

247 
FILE
 *
__ª°ri˘
 
__°ªam
), 
__fgës_chk
)

248 
__wur
 
	`__w¨«âr
 ("fgets called with bigger sizeÅhanÜength "

251 
__f‹tify_fun˘i⁄
 
__wur
 *

252 
	$fgës
 (*
__ª°ri˘
 
__s
, 
__n
, 
FILE
 *__ª°ri˘ 
__°ªam
)

254 i‡(
	`__bos
 (
__s
Ë!(
size_t
) -1)

256 i‡(!
	`__buûtö_c⁄°™t_p
 (
__n
) || __n <= 0)

257  
	`__fgës_chk
 (
__s
, 
	`__bos
 (__s), 
__n
, 
__°ªam
);

259 i‡((
size_t
Ë
__n
 > 
	`__bos
 (
__s
))

260  
	`__fgës_chk_w¨n
 (
__s
, 
	`__bos
 (__s), 
__n
, 
__°ªam
);

262  
	`__fgës_Æüs
 (
__s
, 
__n
, 
__°ªam
);

263 
	}
}

265 
size_t
 
	$__‰ód_chk
 (*
__ª°ri˘
 
__±r
, 
size_t
 
__±æí
,

266 
size_t
 
__size
, size_à
__n
,

267 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

268 
size_t
 
	`__REDIRECT
 (
__‰ód_Æüs
,

269 (*
__ª°ri˘
 
__±r
, 
size_t
 
__size
,

270 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__°ªam
),

271 
‰ód
Ë
__wur
;

272 
size_t
 
	`__REDIRECT
 (
__‰ód_chk_w¨n
,

273 (*
__ª°ri˘
 
__±r
, 
size_t
 
__±æí
,

274 
size_t
 
__size
, size_à
__n
,

275 
FILE
 *
__ª°ri˘
 
__°ªam
),

276 
__‰ód_chk
)

277 
__wur
 
	`__w¨«âr
 ("fread called with bigger size *ÇmembÅhanÜength "

280 
__f‹tify_fun˘i⁄
 
__wur
 
size_t


281 
	$‰ód
 (*
__ª°ri˘
 
__±r
, 
size_t
 
__size
, size_à
__n
,

282 
FILE
 *
__ª°ri˘
 
__°ªam
)

284 i‡(
	`__bos0
 (
__±r
Ë!(
size_t
) -1)

286 i‡(!
	`__buûtö_c⁄°™t_p
 (
__size
)

287 || !
	`__buûtö_c⁄°™t_p
 (
__n
)

288 || (
__size
 | 
__n
Ë>(((
size_t
) 1) << (8 *  (size_t) / 2)))

289  
	`__‰ód_chk
 (
__±r
, 
	`__bos0
 (__±r), 
__size
, 
__n
, 
__°ªam
);

291 i‡(
__size
 * 
__n
 > 
	`__bos0
 (
__±r
))

292  
	`__‰ód_chk_w¨n
 (
__±r
, 
	`__bos0
 (__±r), 
__size
, 
__n
, 
__°ªam
);

294  
	`__‰ód_Æüs
 (
__±r
, 
__size
, 
__n
, 
__°ªam
);

295 
	}
}

297 #ifde‡
__USE_GNU


298 *
	$__fgës_u∆ocked_chk
 (*
__ª°ri˘
 
__s
, 
size_t
 
__size
,

299 
__n
, 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

300 *
	`__REDIRECT
 (
__fgës_u∆ocked_Æüs
,

301 (*
__ª°ri˘
 
__s
, 
__n
,

302 
FILE
 *
__ª°ri˘
 
__°ªam
), 
fgës_u∆ocked
Ë
__wur
;

303 *
	`__REDIRECT
 (
__fgës_u∆ocked_chk_w¨n
,

304 (*
__ª°ri˘
 
__s
, 
size_t
 
__size
, 
__n
,

305 
FILE
 *
__ª°ri˘
 
__°ªam
), 
__fgës_u∆ocked_chk
)

306 
__wur
 
	`__w¨«âr
 ("fgets_unlocked called with bigger sizeÅhanÜength "

309 
__f‹tify_fun˘i⁄
 
__wur
 *

310 
	$fgës_u∆ocked
 (*
__ª°ri˘
 
__s
, 
__n
, 
FILE
 *__ª°ri˘ 
__°ªam
)

312 i‡(
	`__bos
 (
__s
Ë!(
size_t
) -1)

314 i‡(!
	`__buûtö_c⁄°™t_p
 (
__n
) || __n <= 0)

315  
	`__fgës_u∆ocked_chk
 (
__s
, 
	`__bos
 (__s), 
__n
, 
__°ªam
);

317 i‡((
size_t
Ë
__n
 > 
	`__bos
 (
__s
))

318  
	`__fgës_u∆ocked_chk_w¨n
 (
__s
, 
	`__bos
 (__s), 
__n
, 
__°ªam
);

320  
	`__fgës_u∆ocked_Æüs
 (
__s
, 
__n
, 
__°ªam
);

321 
	}
}

324 #ifde‡
__USE_MISC


325 #unde‡
‰ód_u∆ocked


326 
size_t
 
	$__‰ód_u∆ocked_chk
 (*
__ª°ri˘
 
__±r
, 
size_t
 
__±æí
,

327 
size_t
 
__size
, size_à
__n
,

328 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

329 
size_t
 
	`__REDIRECT
 (
__‰ód_u∆ocked_Æüs
,

330 (*
__ª°ri˘
 
__±r
, 
size_t
 
__size
,

331 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__°ªam
),

332 
‰ód_u∆ocked
Ë
__wur
;

333 
size_t
 
	`__REDIRECT
 (
__‰ód_u∆ocked_chk_w¨n
,

334 (*
__ª°ri˘
 
__±r
, 
size_t
 
__±æí
,

335 
size_t
 
__size
, size_à
__n
,

336 
FILE
 *
__ª°ri˘
 
__°ªam
),

337 
__‰ód_u∆ocked_chk
)

338 
__wur
 
	`__w¨«âr
 ("fread_unlocked called with bigger size *ÇmembÅhan "

341 
__f‹tify_fun˘i⁄
 
__wur
 
size_t


342 
	$‰ód_u∆ocked
 (*
__ª°ri˘
 
__±r
, 
size_t
 
__size
, size_à
__n
,

343 
FILE
 *
__ª°ri˘
 
__°ªam
)

345 i‡(
	`__bos0
 (
__±r
Ë!(
size_t
) -1)

347 i‡(!
	`__buûtö_c⁄°™t_p
 (
__size
)

348 || !
	`__buûtö_c⁄°™t_p
 (
__n
)

349 || (
__size
 | 
__n
Ë>(((
size_t
) 1) << (8 *  (size_t) / 2)))

350  
	`__‰ód_u∆ocked_chk
 (
__±r
, 
	`__bos0
 (__±r), 
__size
, 
__n
,

351 
__°ªam
);

353 i‡(
__size
 * 
__n
 > 
	`__bos0
 (
__±r
))

354  
	`__‰ód_u∆ocked_chk_w¨n
 (
__±r
, 
	`__bos0
 (__±r), 
__size
, 
__n
,

355 
__°ªam
);

358 #ifde‡
__USE_EXTERN_INLINES


359 i‡(
	`__buûtö_c⁄°™t_p
 (
__size
)

360 && 
	`__buûtö_c⁄°™t_p
 (
__n
)

361 && (
__size
 | 
__n
Ë< (((
size_t
) 1) << (8 *  (size_t) / 2))

362 && 
__size
 * 
__n
 <= 8)

364 
size_t
 
__˙t
 = 
__size
 * 
__n
;

365 *
__˝å
 = (*Ë
__±r
;

366 i‡(
__˙t
 == 0)

369 ; 
__˙t
 > 0; --__cnt)

371 
__c
 = 
	`_IO_gëc_u∆ocked
 (
__°ªam
);

372 i‡(
__c
 =
EOF
)

374 *
__˝å
++ = 
__c
;

376  (
__˝å
 - (*Ë
__±r
Ë/ 
__size
;

379  
	`__‰ód_u∆ocked_Æüs
 (
__±r
, 
__size
, 
__n
, 
__°ªam
);

380 
	}
}

	@/usr/include/bits/stdio_lim.h

18 #i‚de‡
_BITS_STDIO_LIM_H


19 
	#_BITS_STDIO_LIM_H
 1

	)

21 #i‚de‡
_STDIO_H


25 
	#L_tm≤am
 20

	)

26 
	#TMP_MAX
 238328

	)

27 
	#FILENAME_MAX
 4096

	)

29 #ifde‡
__USE_POSIX


30 
	#L_˘îmid
 9

	)

31 #i‡!
deföed
 
__USE_XOPEN2K
 || deföed 
__USE_GNU


32 
	#L_cu£rid
 9

	)

36 #unde‡
FOPEN_MAX


37 
	#FOPEN_MAX
 16

	)

	@/usr/include/bits/stdlib-bsearch.h

19 
__exã∫_ölöe
 *

20 
	$b£¨ch
 (c⁄° *
__key
, c⁄° *
__ba£
, 
size_t
 
__nmemb
, size_à
__size
,

21 
__com∑r_‚_t
 
__com∑r
)

23 
size_t
 
__l
, 
__u
, 
__idx
;

24 c⁄° *
__p
;

25 
__com∑ris⁄
;

27 
__l
 = 0;

28 
__u
 = 
__nmemb
;

29 
__l
 < 
__u
)

31 
__idx
 = (
__l
 + 
__u
) / 2;

32 
__p
 = (*Ë(((c⁄° *Ë
__ba£
Ë+ (
__idx
 * 
__size
));

33 
__com∑ris⁄
 = (*
__com∑r
Ë(
__key
, 
__p
);

34 i‡(
__com∑ris⁄
 < 0)

35 
__u
 = 
__idx
;

36 i‡(
__com∑ris⁄
 > 0)

37 
__l
 = 
__idx
 + 1;

39  (*Ë
__p
;

42  
NULL
;

43 
	}
}

	@/usr/include/bits/stdlib-float.h

19 #i‚de‡
_STDLIB_H


23 #ifde‡
__USE_EXTERN_INLINES


24 
__exã∫_ölöe
 

25 
__NTH
 (
	$©of
 (c⁄° *
__≈å
))

27  
	`°πod
 (
__≈å
, (**Ë
NULL
);

28 
	}
}

	@/usr/include/bits/stdlib-ldbl.h

19 #i‚de‡
_STDLIB_H


23 #ifdef 
__USE_ISOC99


24 
	$__LDBL_REDIR1_DECL
 (
°πﬁd
, 
°πod
)

27 #ifde‡
__USE_GNU


28 
	$__LDBL_REDIR1_DECL
 (
°πﬁd_l
, 
°πod_l
)

31 #i‡
	`__GLIBC_USE
 (
IEC_60559_BFP_EXT
)

32 
	$__LDBL_REDIR1_DECL
 (
°r‰oml
, 
°r‰omd
)

35 #ifde‡
__USE_MISC


36 
	$__LDBL_REDIR1_DECL
 (
qecvt
, 
ecvt
)

37 
	$__LDBL_REDIR1_DECL
 (
qfcvt
, 
fcvt
)

38 
	$__LDBL_REDIR1_DECL
 (
qgcvt
, 
gcvt
)

39 
	$__LDBL_REDIR1_DECL
 (
qecvt_r
, 
ecvt_r
)

40 
	$__LDBL_REDIR1_DECL
 (
qfcvt_r
, 
fcvt_r
)

	@/usr/include/bits/stdlib.h

19 #i‚de‡
_STDLIB_H


23 *
	$__ªÆ∑th_chk
 (c⁄° *
__ª°ri˘
 
__«me
,

24 *
__ª°ri˘
 
__ªsﬁved
,

25 
size_t
 
__ªsﬁvedÀn
Ë
__THROW
 
__wur
;

26 *
	`__REDIRECT_NTH
 (
__ªÆ∑th_Æüs
,

27 (c⁄° *
__ª°ri˘
 
__«me
,

28 *
__ª°ri˘
 
__ªsﬁved
), 
ªÆ∑th
Ë
__wur
;

29 *
	`__REDIRECT_NTH
 (
__ªÆ∑th_chk_w¨n
,

30 (c⁄° *
__ª°ri˘
 
__«me
,

31 *
__ª°ri˘
 
__ªsﬁved
,

32 
size_t
 
__ªsﬁvedÀn
), 
__ªÆ∑th_chk
Ë
__wur


33 
	`__w¨«âr
 ("secondárgument ofÑealpath must beÉither NULL orát "

36 
__f‹tify_fun˘i⁄
 
__wur
 *

37 
	`__NTH
 (
	$ªÆ∑th
 (c⁄° *
__ª°ri˘
 
__«me
, *__ª°ri˘ 
__ªsﬁved
))

39 i‡(
	`__bos
 (
__ªsﬁved
Ë!(
size_t
) -1)

41 #i‡
deföed
 
_LIBC_LIMITS_H_
 && deföed 
PATH_MAX


42 i‡(
	`__bos
 (
__ªsﬁved
Ë< 
PATH_MAX
)

43  
	`__ªÆ∑th_chk_w¨n
 (
__«me
, 
__ªsﬁved
, 
	`__bos
 (__resolved));

45  
	`__ªÆ∑th_chk
 (
__«me
, 
__ªsﬁved
, 
	`__bos
 (__resolved));

48  
	`__ªÆ∑th_Æüs
 (
__«me
, 
__ªsﬁved
);

49 
	}
}

52 
	$__±¢ame_r_chk
 (
__fd
, *
__buf
, 
size_t
 
__buÊí
,

53 
size_t
 
__ƒól
Ë
__THROW
 
	`__n⁄nuŒ
 ((2));

54 
	`__REDIRECT_NTH
 (
__±¢ame_r_Æüs
, (
__fd
, *
__buf
,

55 
size_t
 
__buÊí
), 
±¢ame_r
)

56 
	`__n⁄nuŒ
 ((2));

57 
	`__REDIRECT_NTH
 (
__±¢ame_r_chk_w¨n
,

58 (
__fd
, *
__buf
, 
size_t
 
__buÊí
,

59 
size_t
 
__ƒól
), 
__±¢ame_r_chk
)

60 
	`__n⁄nuŒ
 ((2)Ë
	`__w¨«âr
 ("ptsname_r called with buflen biggerÅhan "

63 
__f‹tify_fun˘i⁄
 

64 
	`__NTH
 (
	$±¢ame_r
 (
__fd
, *
__buf
, 
size_t
 
__buÊí
))

66 i‡(
	`__bos
 (
__buf
Ë!(
size_t
) -1)

68 i‡(!
	`__buûtö_c⁄°™t_p
 (
__buÊí
))

69  
	`__±¢ame_r_chk
 (
__fd
, 
__buf
, 
__buÊí
, 
	`__bos
 (__buf));

70 i‡(
__buÊí
 > 
	`__bos
 (
__buf
))

71  
	`__±¢ame_r_chk_w¨n
 (
__fd
, 
__buf
, 
__buÊí
, 
	`__bos
 (__buf));

73  
	`__±¢ame_r_Æüs
 (
__fd
, 
__buf
, 
__buÊí
);

74 
	}
}

77 
	$__w˘omb_chk
 (*
__s
, 
wch¨_t
 
__wch¨
, 
size_t
 
__buÊí
)

78 
__THROW
 
__wur
;

79 
	`__REDIRECT_NTH
 (
__w˘omb_Æüs
, (*
__s
, 
wch¨_t
 
__wch¨
),

80 
w˘omb
Ë
__wur
;

82 
__f‹tify_fun˘i⁄
 
__wur
 

83 
	`__NTH
 (
	$w˘omb
 (*
__s
, 
wch¨_t
 
__wch¨
))

88 
	#__STDLIB_MB_LEN_MAX
 16

	)

89 #i‡
deföed
 
MB_LEN_MAX
 && MB_LEN_MAX !
__STDLIB_MB_LEN_MAX


92 i‡(
	`__bos
 (
__s
Ë!(
size_t
Ë-1 && 
__STDLIB_MB_LEN_MAX
 > __bos (__s))

93  
	`__w˘omb_chk
 (
__s
, 
__wch¨
, 
	`__bos
 (__s));

94  
	`__w˘omb_Æüs
 (
__s
, 
__wch¨
);

95 
	}
}

98 
size_t
 
	$__mb°owcs_chk
 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

99 c⁄° *
__ª°ri˘
 
__§c
,

100 
size_t
 
__Àn
, size_à
__d°Àn
Ë
__THROW
;

101 
size_t
 
	`__REDIRECT_NTH
 (
__mb°owcs_Æüs
,

102 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

103 c⁄° *
__ª°ri˘
 
__§c
,

104 
size_t
 
__Àn
), 
mb°owcs
);

105 
size_t
 
	`__REDIRECT_NTH
 (
__mb°owcs_chk_w¨n
,

106 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

107 c⁄° *
__ª°ri˘
 
__§c
,

108 
size_t
 
__Àn
, size_à
__d°Àn
), 
__mb°owcs_chk
)

109 
	`__w¨«âr
 ("mbstowcs called with dst buffer smallerÅhanÜen "

112 
__f‹tify_fun˘i⁄
 
size_t


113 
	`__NTH
 (
	$mb°owcs
 (
wch¨_t
 *
__ª°ri˘
 
__d°
, c⁄° *__ª°ri˘ 
__§c
,

114 
size_t
 
__Àn
))

116 i‡(
	`__bos
 (
__d°
Ë!(
size_t
) -1)

118 i‡(!
	`__buûtö_c⁄°™t_p
 (
__Àn
))

119  
	`__mb°owcs_chk
 (
__d°
, 
__§c
, 
__Àn
,

120 
	`__bos
 (
__d°
Ë/  (
wch¨_t
));

122 i‡(
__Àn
 > 
	`__bos
 (
__d°
Ë/  (
wch¨_t
))

123  
	`__mb°owcs_chk_w¨n
 (
__d°
, 
__§c
, 
__Àn
,

124 
	`__bos
 (
__d°
Ë/  (
wch¨_t
));

126  
	`__mb°owcs_Æüs
 (
__d°
, 
__§c
, 
__Àn
);

127 
	}
}

130 
size_t
 
	$__wc°ombs_chk
 (*
__ª°ri˘
 
__d°
,

131 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
,

132 
size_t
 
__Àn
, size_à
__d°Àn
Ë
__THROW
;

133 
size_t
 
	`__REDIRECT_NTH
 (
__wc°ombs_Æüs
,

134 (*
__ª°ri˘
 
__d°
,

135 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
,

136 
size_t
 
__Àn
), 
wc°ombs
);

137 
size_t
 
	`__REDIRECT_NTH
 (
__wc°ombs_chk_w¨n
,

138 (*
__ª°ri˘
 
__d°
,

139 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
,

140 
size_t
 
__Àn
, size_à
__d°Àn
), 
__wc°ombs_chk
)

141 
	`__w¨«âr
 ("wcstombs called with dst buffer smallerÅhanÜen");

143 
__f‹tify_fun˘i⁄
 
size_t


144 
	`__NTH
 (
	$wc°ombs
 (*
__ª°ri˘
 
__d°
, c⁄° 
wch¨_t
 *__ª°ri˘ 
__§c
,

145 
size_t
 
__Àn
))

147 i‡(
	`__bos
 (
__d°
Ë!(
size_t
) -1)

149 i‡(!
	`__buûtö_c⁄°™t_p
 (
__Àn
))

150  
	`__wc°ombs_chk
 (
__d°
, 
__§c
, 
__Àn
, 
	`__bos
 (__dst));

151 i‡(
__Àn
 > 
	`__bos
 (
__d°
))

152  
	`__wc°ombs_chk_w¨n
 (
__d°
, 
__§c
, 
__Àn
, 
	`__bos
 (__dst));

154  
	`__wc°ombs_Æüs
 (
__d°
, 
__§c
, 
__Àn
);

155 
	}
}

	@/usr/include/bits/string_fortified.h

18 #i‚de‡
_BITS_STRING_FORTIFIED_H


19 
	#_BITS_STRING_FORTIFIED_H
 1

	)

21 #i‚de‡
_STRING_H


25 #i‡!
__GNUC_PREREQ
 (5,0)

26 
__w¨nde˛
 (
__w¨n_mem£t_zîo_Àn
,

30 
__f‹tify_fun˘i⁄
 *

31 
__NTH
 (
	$mem˝y
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
,

32 
size_t
 
__Àn
))

34  
	`__buûtö___mem˝y_chk
 (
__de°
, 
__§c
, 
__Àn
, 
	`__bos0
 (__dest));

35 
	}
}

37 
__f‹tify_fun˘i⁄
 *

38 
__NTH
 (
	$memmove
 (*
__de°
, c⁄° *
__§c
, 
size_t
 
__Àn
))

40  
	`__buûtö___memmove_chk
 (
__de°
, 
__§c
, 
__Àn
, 
	`__bos0
 (__dest));

41 
	}
}

43 #ifde‡
__USE_GNU


44 
__f‹tify_fun˘i⁄
 *

45 
__NTH
 (
	$memp˝y
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
,

46 
size_t
 
__Àn
))

48  
	`__buûtö___memp˝y_chk
 (
__de°
, 
__§c
, 
__Àn
, 
	`__bos0
 (__dest));

49 
	}
}

58 
__f‹tify_fun˘i⁄
 *

59 
__NTH
 (
	$mem£t
 (*
__de°
, 
__ch
, 
size_t
 
__Àn
))

63 #i‡!
	`__GNUC_PREREQ
 (5,0)

64 i‡(
	`__buûtö_c⁄°™t_p
 (
__Àn
) && __len == 0

65 && (!
	`__buûtö_c⁄°™t_p
 (
__ch
) || __ch != 0))

67 
	`__w¨n_mem£t_zîo_Àn
 ();

68  
__de°
;

71  
	`__buûtö___mem£t_chk
 (
__de°
, 
__ch
, 
__Àn
, 
	`__bos0
 (__dest));

72 
	}
}

74 #ifde‡
__USE_MISC


75 
	~<bôs/°rögs_f‹tifõd.h
>

77 
	$__ex∂icô_bzîo_chk
 (*
__de°
, 
size_t
 
__Àn
, size_à
__de°Àn
)

78 
__THROW
 
	`__n⁄nuŒ
 ((1));

80 
__f‹tify_fun˘i⁄
 

81 
	`__NTH
 (
	$ex∂icô_bzîo
 (*
__de°
, 
size_t
 
__Àn
))

83 
	`__ex∂icô_bzîo_chk
 (
__de°
, 
__Àn
, 
	`__bos0
 (__dest));

84 
	}
}

87 
__f‹tify_fun˘i⁄
 *

88 
__NTH
 (
	$°r˝y
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
))

90  
	`__buûtö___°r˝y_chk
 (
__de°
, 
__§c
, 
	`__bos
 (__dest));

91 
	}
}

93 #ifde‡
__USE_GNU


94 
__f‹tify_fun˘i⁄
 *

95 
__NTH
 (
	$°p˝y
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
))

97  
	`__buûtö___°p˝y_chk
 (
__de°
, 
__§c
, 
	`__bos
 (__dest));

98 
	}
}

102 
__f‹tify_fun˘i⁄
 *

103 
__NTH
 (
	$°∫˝y
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
,

104 
size_t
 
__Àn
))

106  
	`__buûtö___°∫˝y_chk
 (
__de°
, 
__§c
, 
__Àn
, 
	`__bos
 (__dest));

107 
	}
}

110 *
	$__°≤˝y_chk
 (*
__de°
, c⁄° *
__§c
, 
size_t
 
__n
,

111 
size_t
 
__de°Àn
Ë
__THROW
;

112 *
	`__REDIRECT_NTH
 (
__°≤˝y_Æüs
, (*
__de°
, c⁄° *
__§c
,

113 
size_t
 
__n
), 
°≤˝y
);

115 
__f‹tify_fun˘i⁄
 *

116 
	`__NTH
 (
	$°≤˝y
 (*
__de°
, c⁄° *
__§c
, 
size_t
 
__n
))

118 i‡(
	`__bos
 (
__de°
Ë!(
size_t
) -1

119 && (!
	`__buûtö_c⁄°™t_p
 (
__n
Ë|| __¿> 
	`__bos
 (
__de°
)))

120  
	`__°≤˝y_chk
 (
__de°
, 
__§c
, 
__n
, 
	`__bos
 (__dest));

121  
	`__°≤˝y_Æüs
 (
__de°
, 
__§c
, 
__n
);

122 
	}
}

125 
__f‹tify_fun˘i⁄
 *

126 
__NTH
 (
	$°rˇt
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
))

128  
	`__buûtö___°rˇt_chk
 (
__de°
, 
__§c
, 
	`__bos
 (__dest));

129 
	}
}

132 
__f‹tify_fun˘i⁄
 *

133 
__NTH
 (
	$°∫ˇt
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
,

134 
size_t
 
__Àn
))

136  
	`__buûtö___°∫ˇt_chk
 (
__de°
, 
__§c
, 
__Àn
, 
	`__bos
 (__dest));

137 
	}
}

	@/usr/include/bits/sys_errlist.h

19 #i‚de‡
_STDIO_H


25 #ifde‡ 
__USE_MISC


26 
sys_√º
;

27 c⁄° *c⁄° 
sys_îæi°
[];

29 #ifde‡ 
__USE_GNU


30 
_sys_√º
;

31 c⁄° *c⁄° 
_sys_îæi°
[];

	@/usr/include/bits/types.h

23 #i‚def 
_BITS_TYPES_H


24 
	#_BITS_TYPES_H
 1

	)

26 
	~<„©uªs.h
>

27 
	~<bôs/w‹dsize.h
>

30 
	t__u_ch¨
;

31 
	t__u_sh‹t
;

32 
	t__u_öt
;

33 
	t__u_l⁄g
;

36 sig√d 
	t__öt8_t
;

37 
	t__uöt8_t
;

38 sig√d 
	t__öt16_t
;

39 
	t__uöt16_t
;

40 sig√d 
	t__öt32_t
;

41 
	t__uöt32_t
;

42 #i‡
__WORDSIZE
 == 64

43 sig√d 
	t__öt64_t
;

44 
	t__uöt64_t
;

46 
__exãnsi⁄__
 sig√d 
	t__öt64_t
;

47 
__exãnsi⁄__
 
	t__uöt64_t
;

51 #i‡
__WORDSIZE
 == 64

52 
	t__quad_t
;

53 
	t__u_quad_t
;

55 
__exãnsi⁄__
 
	t__quad_t
;

56 
__exãnsi⁄__
 
	t__u_quad_t
;

60 #i‡
__WORDSIZE
 == 64

61 
	t__ötmax_t
;

62 
	t__uötmax_t
;

64 
__exãnsi⁄__
 
	t__ötmax_t
;

65 
__exãnsi⁄__
 
	t__uötmax_t
;

98 
	#__S16_TYPE
 

	)

99 
	#__U16_TYPE
 

	)

100 
	#__S32_TYPE
 

	)

101 
	#__U32_TYPE
 

	)

102 
	#__SLONGWORD_TYPE
 

	)

103 
	#__ULONGWORD_TYPE
 

	)

104 #i‡
__WORDSIZE
 == 32

105 
	#__SQUAD_TYPE
 
__quad_t


	)

106 
	#__UQUAD_TYPE
 
__u_quad_t


	)

107 
	#__SWORD_TYPE
 

	)

108 
	#__UWORD_TYPE
 

	)

109 
	#__SLONG32_TYPE
 

	)

110 
	#__ULONG32_TYPE
 

	)

111 
	#__S64_TYPE
 
__quad_t


	)

112 
	#__U64_TYPE
 
__u_quad_t


	)

115 
	#__STD_TYPE
 
__exãnsi⁄__
 

	)

116 #ñi‡
__WORDSIZE
 == 64

117 
	t__SQUAD_TYPE
 

	)

118 
	t__UQUAD_TYPE
 

	)

119 
	t__SWORD_TYPE
 

	)

120 
	t__UWORD_TYPE
 

	)

121 
	t__SLONG32_TYPE
 

	)

122 
	t__ULONG32_TYPE
 

	)

123 
	t__S64_TYPE
 

	)

124 
	t__U64_TYPE
 

	)

126 
	t__STD_TYPE
 

	)

130 
	~<bôs/ty≥sizes.h
>

133 
__STD_TYPE
 
	t__DEV_T_TYPE
 
	t__dev_t
;

134 
__STD_TYPE
 
__UID_T_TYPE
 
	g__uid_t
;

135 
__STD_TYPE
 
__GID_T_TYPE
 
	g__gid_t
;

136 
__STD_TYPE
 
__INO_T_TYPE
 
	g__öo_t
;

137 
__STD_TYPE
 
__INO64_T_TYPE
 
	g__öo64_t
;

138 
__STD_TYPE
 
__MODE_T_TYPE
 
	g__mode_t
;

139 
__STD_TYPE
 
__NLINK_T_TYPE
 
	g__∆ök_t
;

140 
__STD_TYPE
 
__OFF_T_TYPE
 
	g__off_t
;

141 
__STD_TYPE
 
__OFF64_T_TYPE
 
	g__off64_t
;

142 
__STD_TYPE
 
__PID_T_TYPE
 
	g__pid_t
;

143 
__STD_TYPE
 
__FSID_T_TYPE
 
	g__fsid_t
;

144 
__STD_TYPE
 
__CLOCK_T_TYPE
 
	g__˛ock_t
;

145 
__STD_TYPE
 
__RLIM_T_TYPE
 
	g__æim_t
;

146 
__STD_TYPE
 
__RLIM64_T_TYPE
 
	g__æim64_t
;

147 
__STD_TYPE
 
__ID_T_TYPE
 
	g__id_t
;

148 
__STD_TYPE
 
__TIME_T_TYPE
 
	g__time_t
;

149 
__STD_TYPE
 
__USECONDS_T_TYPE
 
	g__u£c⁄ds_t
;

150 
__STD_TYPE
 
__SUSECONDS_T_TYPE
 
	g__su£c⁄ds_t
;

152 
__STD_TYPE
 
__DADDR_T_TYPE
 
	g__daddr_t
;

153 
__STD_TYPE
 
__KEY_T_TYPE
 
	g__key_t
;

156 
__STD_TYPE
 
__CLOCKID_T_TYPE
 
	g__˛ockid_t
;

159 
__STD_TYPE
 
__TIMER_T_TYPE
 
	g__timî_t
;

162 
__STD_TYPE
 
__BLKSIZE_T_TYPE
 
	g__blksize_t
;

167 
__STD_TYPE
 
__BLKCNT_T_TYPE
 
	g__blk˙t_t
;

168 
__STD_TYPE
 
__BLKCNT64_T_TYPE
 
	g__blk˙t64_t
;

171 
__STD_TYPE
 
__FSBLKCNT_T_TYPE
 
	g__fsblk˙t_t
;

172 
__STD_TYPE
 
__FSBLKCNT64_T_TYPE
 
	g__fsblk˙t64_t
;

175 
__STD_TYPE
 
__FSFILCNT_T_TYPE
 
	g__fsfû˙t_t
;

176 
__STD_TYPE
 
__FSFILCNT64_T_TYPE
 
	g__fsfû˙t64_t
;

179 
__STD_TYPE
 
__FSWORD_T_TYPE
 
	g__fsw‹d_t
;

181 
__STD_TYPE
 
__SSIZE_T_TYPE
 
	g__ssize_t
;

184 
__STD_TYPE
 
__SYSCALL_SLONG_TYPE
 
	g__sysˇŒ_¶⁄g_t
;

186 
__STD_TYPE
 
__SYSCALL_ULONG_TYPE
 
	g__sysˇŒ_ul⁄g_t
;

190 
__off64_t
 
	t__loff_t
;

191 *
	t__ˇddr_t
;

194 
__STD_TYPE
 
__SWORD_TYPE
 
	g__öçå_t
;

197 
__STD_TYPE
 
__U32_TYPE
 
	g__sockÀn_t
;

202 
	t__sig_©omic_t
;

204 #unde‡
__STD_TYPE


	@/usr/include/bits/types/FILE.h

1 #i‚de‡
__FILE_deföed


2 
	#__FILE_deföed
 1

	)

4 
	g_IO_FILE
;

7 
_IO_FILE
 
	tFILE
;

	@/usr/include/bits/types/__FILE.h

1 #i‚de‡
____FILE_deföed


2 
	#____FILE_deföed
 1

	)

4 
	g_IO_FILE
;

5 
_IO_FILE
 
	t__FILE
;

	@/usr/include/bits/types/locale_t.h

19 #i‚de‡
_BITS_TYPES_LOCALE_T_H


20 
	#_BITS_TYPES_LOCALE_T_H
 1

	)

22 
	~<bôs/ty≥s/__loˇÀ_t.h
>

24 
__loˇÀ_t
 
	tloˇÀ_t
;

	@/usr/include/bits/types/struct_timespec.h

1 #i‚de‡
__time•ec_deföed


2 
	#__time•ec_deföed
 1

	)

4 
	~<bôs/ty≥s.h
>

8 
	stime•ec


10 
__time_t
 
	mtv_£c
;

11 
__sysˇŒ_¶⁄g_t
 
	mtv_n£c
;

	@/usr/include/bits/unistd.h

19 #i‚de‡
_UNISTD_H


23 
ssize_t
 
	$__ªad_chk
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

24 
size_t
 
__buÊí
Ë
__wur
;

25 
ssize_t
 
	`__REDIRECT
 (
__ªad_Æüs
, (
__fd
, *
__buf
,

26 
size_t
 
__nbyãs
), 
ªad
Ë
__wur
;

27 
ssize_t
 
	`__REDIRECT
 (
__ªad_chk_w¨n
,

28 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

29 
size_t
 
__buÊí
), 
__ªad_chk
)

30 
__wur
 
	`__w¨«âr
 ("read called with biggerÜengthÅhan size of "

33 
__f‹tify_fun˘i⁄
 
__wur
 
ssize_t


34 
	$ªad
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
)

36 i‡(
	`__bos0
 (
__buf
Ë!(
size_t
) -1)

38 i‡(!
	`__buûtö_c⁄°™t_p
 (
__nbyãs
))

39  
	`__ªad_chk
 (
__fd
, 
__buf
, 
__nbyãs
, 
	`__bos0
 (__buf));

41 i‡(
__nbyãs
 > 
	`__bos0
 (
__buf
))

42  
	`__ªad_chk_w¨n
 (
__fd
, 
__buf
, 
__nbyãs
, 
	`__bos0
 (__buf));

44  
	`__ªad_Æüs
 (
__fd
, 
__buf
, 
__nbyãs
);

45 
	}
}

47 #ifde‡
__USE_UNIX98


48 
ssize_t
 
	$__¥ód_chk
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

49 
__off_t
 
__off£t
, 
size_t
 
__bufsize
Ë
__wur
;

50 
ssize_t
 
	$__¥ód64_chk
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

51 
__off64_t
 
__off£t
, 
size_t
 
__bufsize
Ë
__wur
;

52 
ssize_t
 
	`__REDIRECT
 (
__¥ód_Æüs
,

53 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

54 
__off_t
 
__off£t
), 
¥ód
Ë
__wur
;

55 
ssize_t
 
	`__REDIRECT
 (
__¥ód64_Æüs
,

56 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

57 
__off64_t
 
__off£t
), 
¥ód64
Ë
__wur
;

58 
ssize_t
 
	`__REDIRECT
 (
__¥ód_chk_w¨n
,

59 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

60 
__off_t
 
__off£t
, 
size_t
 
__bufsize
), 
__¥ód_chk
)

61 
__wur
 
	`__w¨«âr
 ("pread called with biggerÜengthÅhan size of "

63 
ssize_t
 
	`__REDIRECT
 (
__¥ód64_chk_w¨n
,

64 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

65 
__off64_t
 
__off£t
, 
size_t
 
__bufsize
),

66 
__¥ód64_chk
)

67 
__wur
 
	`__w¨«âr
 ("pread64 called with biggerÜengthÅhan size of "

70 #i‚de‡
__USE_FILE_OFFSET64


71 
__f‹tify_fun˘i⁄
 
__wur
 
ssize_t


72 
	$¥ód
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
, 
__off_t
 
__off£t
)

74 i‡(
	`__bos0
 (
__buf
Ë!(
size_t
) -1)

76 i‡(!
	`__buûtö_c⁄°™t_p
 (
__nbyãs
))

77  
	`__¥ód_chk
 (
__fd
, 
__buf
, 
__nbyãs
, 
__off£t
, 
	`__bos0
 (__buf));

79 i‡–
__nbyãs
 > 
	`__bos0
 (
__buf
))

80  
	`__¥ód_chk_w¨n
 (
__fd
, 
__buf
, 
__nbyãs
, 
__off£t
,

81 
	`__bos0
 (
__buf
));

83  
	`__¥ód_Æüs
 (
__fd
, 
__buf
, 
__nbyãs
, 
__off£t
);

84 
	}
}

86 
__f‹tify_fun˘i⁄
 
__wur
 
ssize_t


87 
	$¥ód
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
, 
__off64_t
 
__off£t
)

89 i‡(
	`__bos0
 (
__buf
Ë!(
size_t
) -1)

91 i‡(!
	`__buûtö_c⁄°™t_p
 (
__nbyãs
))

92  
	`__¥ód64_chk
 (
__fd
, 
__buf
, 
__nbyãs
, 
__off£t
, 
	`__bos0
 (__buf));

94 i‡–
__nbyãs
 > 
	`__bos0
 (
__buf
))

95  
	`__¥ód64_chk_w¨n
 (
__fd
, 
__buf
, 
__nbyãs
, 
__off£t
,

96 
	`__bos0
 (
__buf
));

99  
	`__¥ód64_Æüs
 (
__fd
, 
__buf
, 
__nbyãs
, 
__off£t
);

100 
	}
}

103 #ifde‡
__USE_LARGEFILE64


104 
__f‹tify_fun˘i⁄
 
__wur
 
ssize_t


105 
	$¥ód64
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
, 
__off64_t
 
__off£t
)

107 i‡(
	`__bos0
 (
__buf
Ë!(
size_t
) -1)

109 i‡(!
	`__buûtö_c⁄°™t_p
 (
__nbyãs
))

110  
	`__¥ód64_chk
 (
__fd
, 
__buf
, 
__nbyãs
, 
__off£t
, 
	`__bos0
 (__buf));

112 i‡–
__nbyãs
 > 
	`__bos0
 (
__buf
))

113  
	`__¥ód64_chk_w¨n
 (
__fd
, 
__buf
, 
__nbyãs
, 
__off£t
,

114 
	`__bos0
 (
__buf
));

117  
	`__¥ód64_Æüs
 (
__fd
, 
__buf
, 
__nbyãs
, 
__off£t
);

118 
	}
}

122 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K


123 
ssize_t
 
	$__ªadlök_chk
 (c⁄° *
__ª°ri˘
 
__∑th
,

124 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
,

125 
size_t
 
__buÊí
)

126 
__THROW
 
	`__n⁄nuŒ
 ((1, 2)Ë
__wur
;

127 
ssize_t
 
	`__REDIRECT_NTH
 (
__ªadlök_Æüs
,

128 (c⁄° *
__ª°ri˘
 
__∑th
,

129 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
), 
ªadlök
)

130 
	`__n⁄nuŒ
 ((1, 2)Ë
__wur
;

131 
ssize_t
 
	`__REDIRECT_NTH
 (
__ªadlök_chk_w¨n
,

132 (c⁄° *
__ª°ri˘
 
__∑th
,

133 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
,

134 
size_t
 
__buÊí
), 
__ªadlök_chk
)

135 
	`__n⁄nuŒ
 ((1, 2)Ë
__wur
 
	`__w¨«âr
 ("readlink called with biggerÜength "

138 
__f‹tify_fun˘i⁄
 
	`__n⁄nuŒ
 ((1, 2)Ë
__wur
 
ssize_t


139 
	`__NTH
 (
	$ªadlök
 (c⁄° *
__ª°ri˘
 
__∑th
, *__ª°ri˘ 
__buf
,

140 
size_t
 
__Àn
))

142 i‡(
	`__bos
 (
__buf
Ë!(
size_t
) -1)

144 i‡(!
	`__buûtö_c⁄°™t_p
 (
__Àn
))

145  
	`__ªadlök_chk
 (
__∑th
, 
__buf
, 
__Àn
, 
	`__bos
 (__buf));

147 i‡–
__Àn
 > 
	`__bos
 (
__buf
))

148  
	`__ªadlök_chk_w¨n
 (
__∑th
, 
__buf
, 
__Àn
, 
	`__bos
 (__buf));

150  
	`__ªadlök_Æüs
 (
__∑th
, 
__buf
, 
__Àn
);

151 
	}
}

154 #ifde‡
__USE_ATFILE


155 
ssize_t
 
	$__ªadlök©_chk
 (
__fd
, c⁄° *
__ª°ri˘
 
__∑th
,

156 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
,

157 
size_t
 
__buÊí
)

158 
__THROW
 
	`__n⁄nuŒ
 ((2, 3)Ë
__wur
;

159 
ssize_t
 
	`__REDIRECT_NTH
 (
__ªadlök©_Æüs
,

160 (
__fd
, c⁄° *
__ª°ri˘
 
__∑th
,

161 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
),

162 
ªadlök©
)

163 
	`__n⁄nuŒ
 ((2, 3)Ë
__wur
;

164 
ssize_t
 
	`__REDIRECT_NTH
 (
__ªadlök©_chk_w¨n
,

165 (
__fd
, c⁄° *
__ª°ri˘
 
__∑th
,

166 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
,

167 
size_t
 
__buÊí
), 
__ªadlök©_chk
)

168 
	`__n⁄nuŒ
 ((2, 3)Ë
__wur
 
	`__w¨«âr
 ("readlinkat called with bigger "

172 
__f‹tify_fun˘i⁄
 
	`__n⁄nuŒ
 ((2, 3)Ë
__wur
 
ssize_t


173 
	`__NTH
 (
	$ªadlök©
 (
__fd
, c⁄° *
__ª°ri˘
 
__∑th
,

174 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
))

176 i‡(
	`__bos
 (
__buf
Ë!(
size_t
) -1)

178 i‡(!
	`__buûtö_c⁄°™t_p
 (
__Àn
))

179  
	`__ªadlök©_chk
 (
__fd
, 
__∑th
, 
__buf
, 
__Àn
, 
	`__bos
 (__buf));

181 i‡(
__Àn
 > 
	`__bos
 (
__buf
))

182  
	`__ªadlök©_chk_w¨n
 (
__fd
, 
__∑th
, 
__buf
, 
__Àn
,

183 
	`__bos
 (
__buf
));

185  
	`__ªadlök©_Æüs
 (
__fd
, 
__∑th
, 
__buf
, 
__Àn
);

186 
	}
}

189 *
	$__gëcwd_chk
 (*
__buf
, 
size_t
 
__size
, size_à
__buÊí
)

190 
__THROW
 
__wur
;

191 *
	`__REDIRECT_NTH
 (
__gëcwd_Æüs
,

192 (*
__buf
, 
size_t
 
__size
), 
gëcwd
Ë
__wur
;

193 *
	`__REDIRECT_NTH
 (
__gëcwd_chk_w¨n
,

194 (*
__buf
, 
size_t
 
__size
, size_à
__buÊí
),

195 
__gëcwd_chk
)

196 
__wur
 
	`__w¨«âr
 ("getcwd caller with biggerÜengthÅhan size of "

199 
__f‹tify_fun˘i⁄
 
__wur
 *

200 
	`__NTH
 (
	$gëcwd
 (*
__buf
, 
size_t
 
__size
))

202 i‡(
	`__bos
 (
__buf
Ë!(
size_t
) -1)

204 i‡(!
	`__buûtö_c⁄°™t_p
 (
__size
))

205  
	`__gëcwd_chk
 (
__buf
, 
__size
, 
	`__bos
 (__buf));

207 i‡(
__size
 > 
	`__bos
 (
__buf
))

208  
	`__gëcwd_chk_w¨n
 (
__buf
, 
__size
, 
	`__bos
 (__buf));

210  
	`__gëcwd_Æüs
 (
__buf
, 
__size
);

211 
	}
}

213 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED


214 *
	$__gëwd_chk
 (*
__buf
, 
size_t
 
buÊí
)

215 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

216 *
	`__REDIRECT_NTH
 (
__gëwd_w¨n
, (*
__buf
), 
gëwd
)

217 
	`__n⁄nuŒ
 ((1)Ë
__wur
 
	`__w¨«âr
 ("please use getcwd instead,ás getwd "

220 
__f‹tify_fun˘i⁄
 
	`__n⁄nuŒ
 ((1)Ë
__©åibuã_dïªˇãd__
 
__wur
 *

221 
	`__NTH
 (
	$gëwd
 (*
__buf
))

223 i‡(
	`__bos
 (
__buf
Ë!(
size_t
) -1)

224  
	`__gëwd_chk
 (
__buf
, 
	`__bos
 (__buf));

225  
	`__gëwd_w¨n
 (
__buf
);

226 
	}
}

229 
size_t
 
	$__c⁄f°r_chk
 (
__«me
, *
__buf
, 
size_t
 
__Àn
,

230 
size_t
 
__buÊí
Ë
__THROW
;

231 
size_t
 
	`__REDIRECT_NTH
 (
__c⁄f°r_Æüs
, (
__«me
, *
__buf
,

232 
size_t
 
__Àn
), 
c⁄f°r
);

233 
size_t
 
	`__REDIRECT_NTH
 (
__c⁄f°r_chk_w¨n
,

234 (
__«me
, *
__buf
, 
size_t
 
__Àn
,

235 
size_t
 
__buÊí
), 
__c⁄f°r_chk
)

236 
	`__w¨«âr
 ("confstr called with biggerÜengthÅhan size of destination "

239 
__f‹tify_fun˘i⁄
 
size_t


240 
	`__NTH
 (
	$c⁄f°r
 (
__«me
, *
__buf
, 
size_t
 
__Àn
))

242 i‡(
	`__bos
 (
__buf
Ë!(
size_t
) -1)

244 i‡(!
	`__buûtö_c⁄°™t_p
 (
__Àn
))

245  
	`__c⁄f°r_chk
 (
__«me
, 
__buf
, 
__Àn
, 
	`__bos
 (__buf));

247 i‡(
	`__bos
 (
__buf
Ë< 
__Àn
)

248  
	`__c⁄f°r_chk_w¨n
 (
__«me
, 
__buf
, 
__Àn
, 
	`__bos
 (__buf));

250  
	`__c⁄f°r_Æüs
 (
__«me
, 
__buf
, 
__Àn
);

251 
	}
}

254 
	$__gëgroups_chk
 (
__size
, 
__gid_t
 
__li°
[], 
size_t
 
__li°Àn
)

255 
__THROW
 
__wur
;

256 
	`__REDIRECT_NTH
 (
__gëgroups_Æüs
, (
__size
, 
__gid_t
 
__li°
[]),

257 
gëgroups
Ë
__wur
;

258 
	`__REDIRECT_NTH
 (
__gëgroups_chk_w¨n
,

259 (
__size
, 
__gid_t
 
__li°
[], 
size_t
 
__li°Àn
),

260 
__gëgroups_chk
)

261 
__wur
 
	`__w¨«âr
 ("getgroups called with bigger group countÅhan what "

264 
__f‹tify_fun˘i⁄
 

265 
	`__NTH
 (
	$gëgroups
 (
__size
, 
__gid_t
 
__li°
[]))

267 i‡(
	`__bos
 (
__li°
Ë!(
size_t
) -1)

269 i‡(!
	`__buûtö_c⁄°™t_p
 (
__size
) || __size < 0)

270  
	`__gëgroups_chk
 (
__size
, 
__li°
, 
	`__bos
 (__list));

272 i‡(
__size
 *  (
__gid_t
Ë> 
	`__bos
 (
__li°
))

273  
	`__gëgroups_chk_w¨n
 (
__size
, 
__li°
, 
	`__bos
 (__list));

275  
	`__gëgroups_Æüs
 (
__size
, 
__li°
);

276 
	}
}

279 
	$__ây«me_r_chk
 (
__fd
, *
__buf
, 
size_t
 
__buÊí
,

280 
size_t
 
__ƒól
Ë
__THROW
 
	`__n⁄nuŒ
 ((2));

281 
	`__REDIRECT_NTH
 (
__ây«me_r_Æüs
, (
__fd
, *
__buf
,

282 
size_t
 
__buÊí
), 
ây«me_r
)

283 
	`__n⁄nuŒ
 ((2));

284 
	`__REDIRECT_NTH
 (
__ây«me_r_chk_w¨n
,

285 (
__fd
, *
__buf
, 
size_t
 
__buÊí
,

286 
size_t
 
__ƒól
), 
__ây«me_r_chk
)

287 
	`__n⁄nuŒ
 ((2)Ë
	`__w¨«âr
 ("ttyname_r called with bigger buflenÅhan "

290 
__f‹tify_fun˘i⁄
 

291 
	`__NTH
 (
	$ây«me_r
 (
__fd
, *
__buf
, 
size_t
 
__buÊí
))

293 i‡(
	`__bos
 (
__buf
Ë!(
size_t
) -1)

295 i‡(!
	`__buûtö_c⁄°™t_p
 (
__buÊí
))

296  
	`__ây«me_r_chk
 (
__fd
, 
__buf
, 
__buÊí
, 
	`__bos
 (__buf));

298 i‡(
__buÊí
 > 
	`__bos
 (
__buf
))

299  
	`__ây«me_r_chk_w¨n
 (
__fd
, 
__buf
, 
__buÊí
, 
	`__bos
 (__buf));

301  
	`__ây«me_r_Æüs
 (
__fd
, 
__buf
, 
__buÊí
);

302 
	}
}

305 #ifde‡
__USE_POSIX199506


306 
	$__gëlogö_r_chk
 (*
__buf
, 
size_t
 
__buÊí
, size_à
__ƒól
)

307 
	`__n⁄nuŒ
 ((1));

308 
	`__REDIRECT
 (
__gëlogö_r_Æüs
, (*
__buf
, 
size_t
 
__buÊí
),

309 
gëlogö_r
Ë
	`__n⁄nuŒ
 ((1));

310 
	`__REDIRECT
 (
__gëlogö_r_chk_w¨n
,

311 (*
__buf
, 
size_t
 
__buÊí
, size_à
__ƒól
),

312 
__gëlogö_r_chk
)

313 
	`__n⁄nuŒ
 ((1)Ë
	`__w¨«âr
 ("getlogin_r called with bigger buflenÅhan "

316 
__f‹tify_fun˘i⁄
 

317 
	$gëlogö_r
 (*
__buf
, 
size_t
 
__buÊí
)

319 i‡(
	`__bos
 (
__buf
Ë!(
size_t
) -1)

321 i‡(!
	`__buûtö_c⁄°™t_p
 (
__buÊí
))

322  
	`__gëlogö_r_chk
 (
__buf
, 
__buÊí
, 
	`__bos
 (__buf));

324 i‡(
__buÊí
 > 
	`__bos
 (
__buf
))

325  
	`__gëlogö_r_chk_w¨n
 (
__buf
, 
__buÊí
, 
	`__bos
 (__buf));

327  
	`__gëlogö_r_Æüs
 (
__buf
, 
__buÊí
);

328 
	}
}

332 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_UNIX98


333 
	$__gëho°«me_chk
 (*
__buf
, 
size_t
 
__buÊí
, size_à
__ƒól
)

334 
__THROW
 
	`__n⁄nuŒ
 ((1));

335 
	`__REDIRECT_NTH
 (
__gëho°«me_Æüs
, (*
__buf
, 
size_t
 
__buÊí
),

336 
gëho°«me
Ë
	`__n⁄nuŒ
 ((1));

337 
	`__REDIRECT_NTH
 (
__gëho°«me_chk_w¨n
,

338 (*
__buf
, 
size_t
 
__buÊí
, size_à
__ƒól
),

339 
__gëho°«me_chk
)

340 
	`__n⁄nuŒ
 ((1)Ë
	`__w¨«âr
 ("gethostname called with bigger buflenÅhan "

343 
__f‹tify_fun˘i⁄
 

344 
	`__NTH
 (
	$gëho°«me
 (*
__buf
, 
size_t
 
__buÊí
))

346 i‡(
	`__bos
 (
__buf
Ë!(
size_t
) -1)

348 i‡(!
	`__buûtö_c⁄°™t_p
 (
__buÊí
))

349  
	`__gëho°«me_chk
 (
__buf
, 
__buÊí
, 
	`__bos
 (__buf));

351 i‡(
__buÊí
 > 
	`__bos
 (
__buf
))

352  
	`__gëho°«me_chk_w¨n
 (
__buf
, 
__buÊí
, 
	`__bos
 (__buf));

354  
	`__gëho°«me_Æüs
 (
__buf
, 
__buÊí
);

355 
	}
}

359 #i‡
deföed
 
__USE_MISC
 || (deföed 
__USE_XOPEN
 && !deföed 
__USE_UNIX98
)

360 
	$__gëdomaö«me_chk
 (*
__buf
, 
size_t
 
__buÊí
, size_à
__ƒól
)

361 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

362 
	`__REDIRECT_NTH
 (
__gëdomaö«me_Æüs
, (*
__buf
,

363 
size_t
 
__buÊí
),

364 
gëdomaö«me
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

365 
	`__REDIRECT_NTH
 (
__gëdomaö«me_chk_w¨n
,

366 (*
__buf
, 
size_t
 
__buÊí
, size_à
__ƒól
),

367 
__gëdomaö«me_chk
)

368 
	`__n⁄nuŒ
 ((1)Ë
__wur
 
	`__w¨«âr
 ("getdomainname called with bigger "

372 
__f‹tify_fun˘i⁄
 

373 
	`__NTH
 (
	$gëdomaö«me
 (*
__buf
, 
size_t
 
__buÊí
))

375 i‡(
	`__bos
 (
__buf
Ë!(
size_t
) -1)

377 i‡(!
	`__buûtö_c⁄°™t_p
 (
__buÊí
))

378  
	`__gëdomaö«me_chk
 (
__buf
, 
__buÊí
, 
	`__bos
 (__buf));

380 i‡(
__buÊí
 > 
	`__bos
 (
__buf
))

381  
	`__gëdomaö«me_chk_w¨n
 (
__buf
, 
__buÊí
, 
	`__bos
 (__buf));

383  
	`__gëdomaö«me_Æüs
 (
__buf
, 
__buÊí
);

384 
	}
}

	@/usr/include/bits/waitflags.h

19 #i‡!
deföed
 
_SYS_WAIT_H
 && !deföed 
_STDLIB_H


25 
	#WNOHANG
 1

	)

26 
	#WUNTRACED
 2

	)

29 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


30 
	#WSTOPPED
 2

	)

31 
	#WEXITED
 4

	)

32 
	#WCONTINUED
 8

	)

33 
	#WNOWAIT
 0x01000000

	)

36 
	#__WNOTHREAD
 0x20000000

	)

38 
	#__WALL
 0x40000000

	)

39 
	#__WCLONE
 0x80000000

	)

42 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


43 #i‚de‡
__ENUM_IDTYPE_T


44 
	#__ENUM_IDTYPE_T
 1

	)

48 #unde‡
P_ALL


49 #unde‡
P_PID


50 #unde‡
P_PGID


54 
	mP_ALL
,

55 
	mP_PID
,

56 
	mP_PGID


57 } 
	tidty≥_t
;

	@/usr/include/bits/waitstatus.h

19 #i‡!
deföed
 
_SYS_WAIT_H
 && !deföed 
_STDLIB_H


28 
	#__WEXITSTATUS
(
°©us
Ë(((°©usË& 0xff00Ë>> 8)

	)

31 
	#__WTERMSIG
(
°©us
Ë((°©usË& 0x7f)

	)

34 
	#__WSTOPSIG
(
°©us
Ë
	`__WEXITSTATUS
(°©us)

	)

37 
	#__WIFEXITED
(
°©us
Ë(
	`__WTERMSIG
(°©usË=0)

	)

40 
	#__WIFSIGNALED
(
°©us
) \

41 (((sig√d Ë(((
°©us
Ë& 0x7fË+ 1Ë>> 1Ë> 0)

	)

44 
	#__WIFSTOPPED
(
°©us
Ë(((°©usË& 0xffË=0x7f)

	)

48 #ifde‡
WCONTINUED


49 
	#__WIFCONTINUED
(
°©us
Ë((°©usË=
__W_CONTINUED
)

	)

53 
	#__WCOREDUMP
(
°©us
Ë((°©usË& 
__WCOREFLAG
)

	)

56 
	#__W_EXITCODE
(
ªt
, 
sig
Ë(‘ëË<< 8 | (sig))

	)

57 
	#__W_STOPCODE
(
sig
Ë((sigË<< 8 | 0x7f)

	)

58 
	#__W_CONTINUED
 0xffff

	)

59 
	#__WCOREFLAG
 0x80

	)

	@/usr/include/bits/wchar.h

19 #i‚de‡
_BITS_WCHAR_H


20 
	#_BITS_WCHAR_H
 1

	)

33 #ifde‡
__WCHAR_MAX__


34 
	#__WCHAR_MAX
 
__WCHAR_MAX__


	)

35 #ñi‡
L
'\0' - 1 > 0

36 
	#__WCHAR_MAX
 (0xffffffffu + 
L
'\0')

	)

38 
	#__WCHAR_MAX
 (0x7ffffff‡+ 
L
'\0')

	)

41 #ifde‡
__WCHAR_MIN__


42 
	#__WCHAR_MIN
 
__WCHAR_MIN__


	)

43 #ñi‡
L
'\0' - 1 > 0

44 
	#__WCHAR_MIN
 (
L
'\0' + 0)

	)

46 
	#__WCHAR_MIN
 (-
__WCHAR_MAX
 - 1)

	)

	@/usr/include/bits/wordsize.h

3 #i‡
deföed
 
__x86_64__
 && !deföed 
__ILP32__


4 
	#__WORDSIZE
 64

	)

6 
	#__WORDSIZE
 32

	)

7 
	#__WORDSIZE32_SIZE_ULONG
 0

	)

8 
	#__WORDSIZE32_PTRDIFF_LONG
 0

	)

11 #ifde‡
__x86_64__


12 
	#__WORDSIZE_TIME64_COMPAT32
 1

	)

14 
	#__SYSCALL_WORDSIZE
 64

	)

16 
	#__WORDSIZE_TIME64_COMPAT32
 0

	)

	@/usr/include/endian.h

18 #i‚def 
_ENDIAN_H


19 
	#_ENDIAN_H
 1

	)

21 
	~<„©uªs.h
>

31 
	#__LITTLE_ENDIAN
 1234

	)

32 
	#__BIG_ENDIAN
 4321

	)

33 
	#__PDP_ENDIAN
 3412

	)

36 
	~<bôs/ídün.h
>

40 #i‚de‡
__FLOAT_WORD_ORDER


41 
	#__FLOAT_WORD_ORDER
 
__BYTE_ORDER


	)

44 #ifdef 
__USE_MISC


45 
	#LITTLE_ENDIAN
 
__LITTLE_ENDIAN


	)

46 
	#BIG_ENDIAN
 
__BIG_ENDIAN


	)

47 
	#PDP_ENDIAN
 
__PDP_ENDIAN


	)

48 
	#BYTE_ORDER
 
__BYTE_ORDER


	)

51 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


52 
	#__LONG_LONG_PAIR
(
HI
, 
LO
ËLO, 
	)
HI

53 #ñi‡
__BYTE_ORDER
 =
__BIG_ENDIAN


54 
	#__LONG_LONG_PAIR
(
HI
, 
LO
ËHI, 
	)
LO

58 #i‡
deföed
 
__USE_MISC
 && !deföed 
__ASSEMBLER__


60 
	~<bôs/byãsw≠.h
>

61 
	~<bôs/uöä-idítôy.h
>

63 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


64 
	#htobe16
(
x
Ë
	`__bsw≠_16
 (x)

	)

65 
	#htﬁe16
(
x
Ë
	`__uöt16_idítôy
 (x)

	)

66 
	#be16toh
(
x
Ë
	`__bsw≠_16
 (x)

	)

67 
	#À16toh
(
x
Ë
	`__uöt16_idítôy
 (x)

	)

69 
	#htobe32
(
x
Ë
	`__bsw≠_32
 (x)

	)

70 
	#htﬁe32
(
x
Ë
	`__uöt32_idítôy
 (x)

	)

71 
	#be32toh
(
x
Ë
	`__bsw≠_32
 (x)

	)

72 
	#À32toh
(
x
Ë
	`__uöt32_idítôy
 (x)

	)

74 
	#htobe64
(
x
Ë
	`__bsw≠_64
 (x)

	)

75 
	#htﬁe64
(
x
Ë
	`__uöt64_idítôy
 (x)

	)

76 
	#be64toh
(
x
Ë
	`__bsw≠_64
 (x)

	)

77 
	#À64toh
(
x
Ë
	`__uöt64_idítôy
 (x)

	)

80 
	#htobe16
(
x
Ë
	`__uöt16_idítôy
 (x)

	)

81 
	#htﬁe16
(
x
Ë
	`__bsw≠_16
 (x)

	)

82 
	#be16toh
(
x
Ë
	`__uöt16_idítôy
 (x)

	)

83 
	#À16toh
(
x
Ë
	`__bsw≠_16
 (x)

	)

85 
	#htobe32
(
x
Ë
	`__uöt32_idítôy
 (x)

	)

86 
	#htﬁe32
(
x
Ë
	`__bsw≠_32
 (x)

	)

87 
	#be32toh
(
x
Ë
	`__uöt32_idítôy
 (x)

	)

88 
	#À32toh
(
x
Ë
	`__bsw≠_32
 (x)

	)

90 
	#htobe64
(
x
Ë
	`__uöt64_idítôy
 (x)

	)

91 
	#htﬁe64
(
x
Ë
	`__bsw≠_64
 (x)

	)

92 
	#be64toh
(
x
Ë
	`__uöt64_idítôy
 (x)

	)

93 
	#À64toh
(
x
Ë
	`__bsw≠_64
 (x)

	)

	@/usr/include/gnu/stubs.h

6 #i‡!
deföed
 
__x86_64__


7 
	~<gnu/°ubs-32.h
>

9 #i‡
deföed
 
__x86_64__
 && deföed 
__LP64__


10 
	~<gnu/°ubs-64.h
>

12 #i‡
deföed
 
__x86_64__
 && deföed 
__ILP32__


13 
	~<gnu/°ubs-x32.h
>

	@/usr/include/locale.h

22 #i‚def 
_LOCALE_H


23 
	#_LOCALE_H
 1

	)

25 
	~<„©uªs.h
>

27 
	#__√ed_NULL


	)

28 
	~<°ddef.h
>

29 
	~<bôs/loˇÀ.h
>

31 
	g__BEGIN_DECLS


35 
	#LC_CTYPE
 
__LC_CTYPE


	)

36 
	#LC_NUMERIC
 
__LC_NUMERIC


	)

37 
	#LC_TIME
 
__LC_TIME


	)

38 
	#LC_COLLATE
 
__LC_COLLATE


	)

39 
	#LC_MONETARY
 
__LC_MONETARY


	)

40 
	#LC_MESSAGES
 
__LC_MESSAGES


	)

41 
	#LC_ALL
 
__LC_ALL


	)

42 
	#LC_PAPER
 
__LC_PAPER


	)

43 
	#LC_NAME
 
__LC_NAME


	)

44 
	#LC_ADDRESS
 
__LC_ADDRESS


	)

45 
	#LC_TELEPHONE
 
__LC_TELEPHONE


	)

46 
	#LC_MEASUREMENT
 
__LC_MEASUREMENT


	)

47 
	#LC_IDENTIFICATION
 
__LC_IDENTIFICATION


	)

51 
	slc⁄v


55 *
	mdecimÆ_poöt
;

56 *
	mthoußnds_£p
;

62 *
	mgroupög
;

68 *
	möt_cuº_symbﬁ
;

69 *
	mcuºícy_symbﬁ
;

70 *
	mm⁄_decimÆ_poöt
;

71 *
	mm⁄_thoußnds_£p
;

72 *
	mm⁄_groupög
;

73 *
	mposôive_sign
;

74 *
	m√g©ive_sign
;

75 
	möt_‰ac_digôs
;

76 
	m‰ac_digôs
;

78 
	mp_cs_¥e˚des
;

80 
	mp_£p_by_•a˚
;

82 
	mn_cs_¥e˚des
;

84 
	mn_£p_by_•a˚
;

91 
	mp_sign_po¢
;

92 
	mn_sign_po¢
;

93 #ifde‡
__USE_ISOC99


95 
	möt_p_cs_¥e˚des
;

97 
	möt_p_£p_by_•a˚
;

99 
	möt_n_cs_¥e˚des
;

101 
	möt_n_£p_by_•a˚
;

108 
	möt_p_sign_po¢
;

109 
	möt_n_sign_po¢
;

111 
	m__öt_p_cs_¥e˚des
;

112 
	m__öt_p_£p_by_•a˚
;

113 
	m__öt_n_cs_¥e˚des
;

114 
	m__öt_n_£p_by_•a˚
;

115 
	m__öt_p_sign_po¢
;

116 
	m__öt_n_sign_po¢
;

122 *
	$£éoˇÀ
 (
__ˇãg‹y
, c⁄° *
__loˇÀ
Ë
__THROW
;

125 
lc⁄v
 *
	$loˇÀc⁄v
 (Ë
__THROW
;

128 #ifdef 
__USE_XOPEN2K8


135 
	~<bôs/ty≥s/loˇÀ_t.h
>

141 
loˇÀ_t
 
	$√wloˇÀ
 (
__ˇãg‹y_mask
, c⁄° *
__loˇÀ
,

142 
loˇÀ_t
 
__ba£
Ë
__THROW
;

148 
	#LC_CTYPE_MASK
 (1 << 
__LC_CTYPE
)

	)

149 
	#LC_NUMERIC_MASK
 (1 << 
__LC_NUMERIC
)

	)

150 
	#LC_TIME_MASK
 (1 << 
__LC_TIME
)

	)

151 
	#LC_COLLATE_MASK
 (1 << 
__LC_COLLATE
)

	)

152 
	#LC_MONETARY_MASK
 (1 << 
__LC_MONETARY
)

	)

153 
	#LC_MESSAGES_MASK
 (1 << 
__LC_MESSAGES
)

	)

154 
	#LC_PAPER_MASK
 (1 << 
__LC_PAPER
)

	)

155 
	#LC_NAME_MASK
 (1 << 
__LC_NAME
)

	)

156 
	#LC_ADDRESS_MASK
 (1 << 
__LC_ADDRESS
)

	)

157 
	#LC_TELEPHONE_MASK
 (1 << 
__LC_TELEPHONE
)

	)

158 
	#LC_MEASUREMENT_MASK
 (1 << 
__LC_MEASUREMENT
)

	)

159 
	#LC_IDENTIFICATION_MASK
 (1 << 
__LC_IDENTIFICATION
)

	)

160 
	#LC_ALL_MASK
 (
LC_CTYPE_MASK
 \

161 | 
LC_NUMERIC_MASK
 \

162 | 
LC_TIME_MASK
 \

163 | 
LC_COLLATE_MASK
 \

164 | 
LC_MONETARY_MASK
 \

165 | 
LC_MESSAGES_MASK
 \

166 | 
LC_PAPER_MASK
 \

167 | 
LC_NAME_MASK
 \

168 | 
LC_ADDRESS_MASK
 \

169 | 
LC_TELEPHONE_MASK
 \

170 | 
LC_MEASUREMENT_MASK
 \

171 | 
LC_IDENTIFICATION_MASK
 \

172 )

	)

176 
loˇÀ_t
 
	$du∂oˇÀ
 (
loˇÀ_t
 
__d©a£t
Ë
__THROW
;

180 
	$‰ìloˇÀ
 (
loˇÀ_t
 
__d©a£t
Ë
__THROW
;

187 
loˇÀ_t
 
	$u£loˇÀ
 (
loˇÀ_t
 
__d©a£t
Ë
__THROW
;

191 
	#LC_GLOBAL_LOCALE
 ((
loˇÀ_t
Ë-1L)

	)

195 
__END_DECLS


	@/usr/include/stdc-predef.h

18 #i‚def 
_STDC_PREDEF_H


19 
	#_STDC_PREDEF_H
 1

	)

36 #ifde‡
__GCC_IEC_559


37 #i‡
__GCC_IEC_559
 > 0

38 
	#__STDC_IEC_559__
 1

	)

41 
	#__STDC_IEC_559__
 1

	)

44 #ifde‡
__GCC_IEC_559_COMPLEX


45 #i‡
__GCC_IEC_559_COMPLEX
 > 0

46 
	#__STDC_IEC_559_COMPLEX__
 1

	)

49 
	#__STDC_IEC_559_COMPLEX__
 1

	)

58 
	#__STDC_ISO_10646__
 201706L

	)

61 
	#__STDC_NO_THREADS__
 1

	)

	@/usr/include/strings.h

18 #i‚def 
_STRINGS_H


19 
	#_STRINGS_H
 1

	)

21 
	~<„©uªs.h
>

22 
	#__√ed_size_t


	)

23 
	~<°ddef.h
>

26 #i‡
deföed
 
__˝lu•lus
 && 
__GNUC_PREREQ
 (4, 4)

27 
	#__CORRECT_ISO_CPP_STRINGS_H_PROTO


	)

30 
	g__BEGIN_DECLS


32 #i‡
deföed
 
__USE_MISC
 || !deföed 
__USE_XOPEN2K8


34 
	$bcmp
 (c⁄° *
__s1
, c⁄° *
__s2
, 
size_t
 
__n
)

35 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

38 
	$bc›y
 (c⁄° *
__§c
, *
__de°
, 
size_t
 
__n
)

39 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

42 
	$bzîo
 (*
__s
, 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

45 #ifde‡
__CORRECT_ISO_CPP_STRINGS_H_PROTO


48 *
	`ödex
 (*
__s
, 
__c
)

49 
__THROW
 
	`__asm
 ("ödex"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

50 c⁄° *
	`ödex
 (c⁄° *
__s
, 
__c
)

51 
__THROW
 
	`__asm
 ("ödex"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

53 #i‡
deföed
 
__OPTIMIZE__


54 
__exã∫_Æways_ölöe
 *

55 
	`ödex
 (*
__s
, 
__c
Ë
__THROW


57  
	`__buûtö_ödex
 (
__s
, 
__c
);

60 
__exã∫_Æways_ölöe
 const *

61 
	`ödex
 (c⁄° *
__s
, 
__c
Ë
__THROW


63  
	`__buûtö_ödex
 (
__s
, 
__c
);

66 
	}
}

68 *
	$ödex
 (c⁄° *
__s
, 
__c
)

69 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

73 #ifde‡
__CORRECT_ISO_CPP_STRINGS_H_PROTO


76 *
	`rödex
 (*
__s
, 
__c
)

77 
__THROW
 
	`__asm
 ("rödex"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

78 c⁄° *
	`rödex
 (c⁄° *
__s
, 
__c
)

79 
__THROW
 
	`__asm
 ("rödex"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

81 #i‡
deföed
 
__OPTIMIZE__


82 
__exã∫_Æways_ölöe
 *

83 
	`rödex
 (*
__s
, 
__c
Ë
__THROW


85  
	`__buûtö_rödex
 (
__s
, 
__c
);

88 
__exã∫_Æways_ölöe
 const *

89 
	`rödex
 (c⁄° *
__s
, 
__c
Ë
__THROW


91  
	`__buûtö_rödex
 (
__s
, 
__c
);

94 
	}
}

96 *
	$rödex
 (c⁄° *
__s
, 
__c
)

97 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

101 #i‡
deföed
 
__USE_MISC
 || !deföed 
__USE_XOPEN2K8
 || deföed 
__USE_XOPEN2K8XSI


104 
	$ffs
 (
__i
Ë
__THROW
 
__©åibuã_c⁄°__
;

109 #ifdef 
__USE_MISC


110 
	$ff¶
 (
__l
Ë
__THROW
 
__©åibuã_c⁄°__
;

111 
__exãnsi⁄__
 
	$ff¶l
 (
__Œ
)

112 
__THROW
 
__©åibuã_c⁄°__
;

116 
	$°rˇ£cmp
 (c⁄° *
__s1
, c⁄° *
__s2
)

117 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

120 
	$°∫ˇ£cmp
 (c⁄° *
__s1
, c⁄° *
__s2
, 
size_t
 
__n
)

121 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

123 #ifdef 
__USE_XOPEN2K8


125 
	~<bôs/ty≥s/loˇÀ_t.h
>

128 
	$°rˇ£cmp_l
 (c⁄° *
__s1
, c⁄° *
__s2
, 
loˇÀ_t
 
__loc
)

129 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2, 3));

133 
	$°∫ˇ£cmp_l
 (c⁄° *
__s1
, c⁄° *
__s2
,

134 
size_t
 
__n
, 
loˇÀ_t
 
__loc
)

135 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2, 4));

138 
__END_DECLS


140 #i‡
	`__GNUC_PREREQ
 (3,4Ë&& 
__USE_FORTIFY_LEVEL
 > 0 \

141 && 
deföed
 
__f‹tify_fun˘i⁄


143 #i‡
deföed
 
__USE_MISC
 || !deföed 
__USE_XOPEN2K8


144 
	~<bôs/°rögs_f‹tifõd.h
>

	@/usr/include/sys/cdefs.h

18 #i‚def 
_SYS_CDEFS_H


19 
	#_SYS_CDEFS_H
 1

	)

22 #i‚de‡
_FEATURES_H


23 
	~<„©uªs.h
>

29 #i‡
deföed
 
__GNUC__
 && !deföed 
__STDC__


34 #unde‡
__P


35 #unde‡
__PMT


37 #ifde‡
__GNUC__


41 #i‡
__GNUC_PREREQ
 (4, 6Ë&& !
deföed
 
_LIBC


42 
	#__LEAF
 , 
__Àaf__


	)

43 
	#__LEAF_ATTR
 
	`__©åibuã__
 ((
__Àaf__
))

	)

45 
	#__LEAF


	)

46 
	#__LEAF_ATTR


	)

54 #i‡!
deföed
 
__˝lu•lus
 && 
__GNUC_PREREQ
 (3, 3)

55 
	#__THROW
 
	`__©åibuã__
 ((
__nŸhrow__
 
__LEAF
))

	)

56 
	#__THROWNL
 
	`__©åibuã__
 ((
__nŸhrow__
))

	)

57 
	#__NTH
(
f˘
Ë
	`__©åibuã__
 ((
__nŸhrow__
 
__LEAF
)Ë
	)
fct

58 
	#__NTHNL
(
f˘
Ë
	`__©åibuã__
 ((
__nŸhrow__
)Ë
	)
fct

60 #i‡
deföed
 
__˝lu•lus
 && 
__GNUC_PREREQ
 (2,8)

61 
	#__THROW
 
	`throw
 ()

	)

62 
	#__THROWNL
 
	`throw
 ()

	)

63 
	#__NTH
(
f˘
Ë
__LEAF_ATTR
 f˘ 
	`throw
 ()

	)

64 
	#__NTHNL
(
f˘
Ëf˘ 
	`throw
 ()

	)

66 
	#__THROW


	)

67 
	#__THROWNL


	)

68 
	#__NTH
(
f˘
Ë
	)
fct

69 
	#__NTHNL
(
f˘
Ë
	)
fct

75 
	#__ölöe


	)

77 
	#__THROW


	)

78 
	#__THROWNL


	)

79 
	#__NTH
(
f˘
Ë
	)
fct

86 #i‡
deföed
 
__˛™g__
 && deföed 
__has_exãnsi⁄


87 
	#__glibc_˛™g_has_exãnsi⁄
(
ext
Ë
	`__has_exãnsi⁄
 (ext)

	)

89 
	#__glibc_˛™g_has_exãnsi⁄
(
ext
Ë0

	)

94 
	#__P
(
¨gs
Ë
	)
args

95 
	#__PMT
(
¨gs
Ë
	)
args

100 
	#__CONCAT
(
x
,
y
Ëx ## 
	)
y

101 
	#__STRING
(
x
Ë#x

	)

104 
	#__±r_t
 *

	)

108 #ifdef 
__˝lu•lus


109 
	#__BEGIN_DECLS
 "C" {

	)

110 
	#__END_DECLS
 }

	)

112 
	#__BEGIN_DECLS


	)

113 
	#__END_DECLS


	)

118 
	#__bos
(
±r
Ë
	`__buûtö_obje˘_size
 (±r, 
__USE_FORTIFY_LEVEL
 > 1)

	)

119 
	#__bos0
(
±r
Ë
	`__buûtö_obje˘_size
 (±r, 0)

	)

121 #i‡
__GNUC_PREREQ
 (4,3)

122 
	#__w¨nde˛
(
«me
, 
msg
) \

123 
	`«me
 (Ë
	`__©åibuã__
((
	`__w¨nög__
 (
msg
)))

	)

124 
	#__w¨«âr
(
msg
Ë
	`__©åibuã__
((
	`__w¨nög__
 (msg)))

	)

125 
	#__îr‹de˛
(
«me
, 
msg
) \

126 
	`«me
 (Ë
	`__©åibuã__
((
	`__îr‹__
 (
msg
)))

	)

128 
	#__w¨nde˛
(
«me
, 
msg
Ë
	`«me
 ()

	)

129 
	#__w¨«âr
(
msg
)

	)

130 
	#__îr‹de˛
(
«me
, 
msg
Ë
	`«me
 ()

	)

137 #i‡
deföed
 
__STDC_VERSION__
 && __STDC_VERSION__ >= 199901L

138 
	#__Êex¨r
 []

	)

139 
	#__glibc_c99_Êex¨r_avaûabÀ
 1

	)

140 #ñi‡
__GNUC_PREREQ
 (2,97)

143 
	#__Êex¨r
 []

	)

144 
	#__glibc_c99_Êex¨r_avaûabÀ
 1

	)

145 #ñi‡
deföed
 
__GNUC__


148 
	#__Êex¨r
 [0]

	)

149 
	#__glibc_c99_Êex¨r_avaûabÀ
 1

	)

152 
	#__Êex¨r
 [1]

	)

153 
	#__glibc_c99_Êex¨r_avaûabÀ
 0

	)

167 #i‡
deföed
 
__GNUC__
 && __GNUC__ >= 2

169 
	#__REDIRECT
(
«me
, 
¥Ÿo
, 
Æüs
Ë«mê¥Ÿÿ
	`__asm__
 (
	`__ASMNAME
 (#Æüs))

	)

170 #ifde‡
__˝lu•lus


171 
	#__REDIRECT_NTH
(
«me
, 
¥Ÿo
, 
Æüs
) \

172 
«me
 
¥Ÿo
 
__THROW
 
	`__asm__
 (
	`__ASMNAME
 (#Æüs))

	)

173 
	#__REDIRECT_NTHNL
(
«me
, 
¥Ÿo
, 
Æüs
) \

174 
«me
 
¥Ÿo
 
__THROWNL
 
	`__asm__
 (
	`__ASMNAME
 (#Æüs))

	)

176 
	#__REDIRECT_NTH
(
«me
, 
¥Ÿo
, 
Æüs
) \

177 
«me
 
¥Ÿo
 
	`__asm__
 (
	`__ASMNAME
 (#Æüs)Ë
__THROW


	)

178 
	#__REDIRECT_NTHNL
(
«me
, 
¥Ÿo
, 
Æüs
) \

179 
«me
 
¥Ÿo
 
	`__asm__
 (
	`__ASMNAME
 (#Æüs)Ë
__THROWNL


	)

181 
	#__ASMNAME
(
˙ame
Ë
	`__ASMNAME2
 (
__USER_LABEL_PREFIX__
, c«me)

	)

182 
	#__ASMNAME2
(
¥efix
, 
˙ame
Ë
	`__STRING
 (¥efixË
	)
cname

195 #i‡!
deföed
 
__GNUC__
 || __GNUC__ < 2

196 
	#__©åibuã__
(
xyz
Ë

	)

202 #i‡
__GNUC_PREREQ
 (2,96)

203 
	#__©åibuã_mÆloc__
 
	`__©åibuã__
 ((
__mÆloc__
))

	)

205 
	#__©åibuã_mÆloc__


	)

210 #i‡
__GNUC_PREREQ
 (4, 3)

211 
	#__©åibuã_Æloc_size__
(
∑øms
) \

212 
	`__©åibuã__
 ((
__Æloc_size__
 
∑øms
))

	)

214 
	#__©åibuã_Æloc_size__
(
∑øms
Ë

	)

220 #i‡
__GNUC_PREREQ
 (2,96)

221 
	#__©åibuã_puª__
 
	`__©åibuã__
 ((
__puª__
))

	)

223 
	#__©åibuã_puª__


	)

227 #i‡
__GNUC_PREREQ
 (2,5)

228 
	#__©åibuã_c⁄°__
 
	`__©åibuã__
 ((
__c⁄°__
))

	)

230 
	#__©åibuã_c⁄°__


	)

236 #i‡
__GNUC_PREREQ
 (3,1)

237 
	#__©åibuã_u£d__
 
	`__©åibuã__
 ((
__u£d__
))

	)

238 
	#__©åibuã_noölöe__
 
	`__©åibuã__
 ((
__noölöe__
))

	)

240 
	#__©åibuã_u£d__
 
	`__©åibuã__
 ((
__unu£d__
))

	)

241 
	#__©åibuã_noölöe__


	)

245 #i‡
__GNUC_PREREQ
 (3,2)

246 
	#__©åibuã_dïªˇãd__
 
	`__©åibuã__
 ((
__dïªˇãd__
))

	)

248 
	#__©åibuã_dïªˇãd__


	)

254 #i‡
__GNUC_PREREQ
 (4,5) || \

255 
	$__glibc_˛™g_has_exãnsi⁄
 (
__©åibuã_dïªˇãd_wôh_mesßge__
)

256 
	#__©åibuã_dïªˇãd_msg__
(
msg
) \

257 
	`__©åibuã__
 ((
	`__dïªˇãd__
 (
msg
)))

	)

259 
	#__©åibuã_dïªˇãd_msg__
(
msg
Ë
__©åibuã_dïªˇãd__


	)

268 #i‡
	`__GNUC_PREREQ
 (2,8)

269 
	#__©åibuã_f‹m©_¨g__
(
x
Ë
	`__©åibuã__
 ((
	`__f‹m©_¨g__
 (x)))

	)

271 
	#__©åibuã_f‹m©_¨g__
(
x
Ë

	)

278 #i‡
	`__GNUC_PREREQ
 (2,97)

279 
	#__©åibuã_f‹m©_°rfm⁄__
(
a
,
b
) \

280 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__°rfm⁄__
, 
a
, 
b
)))

	)

282 
	#__©åibuã_f‹m©_°rfm⁄__
(
a
,
b
Ë

	)

287 #i‡
	`__GNUC_PREREQ
 (3,3)

288 
	#__n⁄nuŒ
(
∑øms
Ë
	`__©åibuã__
 ((
__n⁄nuŒ__
Ö¨ams))

	)

290 
	#__n⁄nuŒ
(
∑øms
)

	)

295 #i‡
	`__GNUC_PREREQ
 (3,4)

296 
	#__©åibuã_w¨n_unu£d_ªsu…__
 \

297 
	`__©åibuã__
 ((
__w¨n_unu£d_ªsu…__
))

	)

298 #i‡
__USE_FORTIFY_LEVEL
 > 0

299 
	#__wur
 
__©åibuã_w¨n_unu£d_ªsu…__


	)

302 
	#__©åibuã_w¨n_unu£d_ªsu…__


	)

304 #i‚de‡
__wur


305 
	#__wur


	)

309 #i‡
	`__GNUC_PREREQ
 (3,2)

313 #unde‡
__Æways_ölöe


314 
	#__Æways_ölöe
 
__ölöe
 
	`__©åibuã__
 ((
__Æways_ölöe__
))

	)

316 #unde‡
__Æways_ölöe


317 
	#__Æways_ölöe
 
__ölöe


	)

322 #i‡
	`__GNUC_PREREQ
 (4,3)

323 
	#__©åibuã_¨tificül__
 
	`__©åibuã__
 ((
__¨tificül__
))

	)

325 
	#__©åibuã_¨tificül__


	)

337 #i‡(!
deföed
 
__˝lu•lus
 || 
	`__GNUC_PREREQ
 (4,3) \

338 || (
deföed
 
__˛™g__
 && (deföed 
__GNUC_STDC_INLINE__
 \

339 || 
deföed
 
__GNUC_GNU_INLINE__
)))

340 #i‡
deföed
 
__GNUC_STDC_INLINE__
 || deföed 
__˝lu•lus


341 
	#__exã∫_ölöe
 
__ölöe
 
	`__©åibuã__
 ((
__gnu_ölöe__
))

	)

342 
	#__exã∫_Æways_ölöe
 \

343 
__Æways_ölöe
 
	`__©åibuã__
 ((
__gnu_ölöe__
))

	)

345 
	#__exã∫_ölöe
 
__ölöe


	)

346 
	#__exã∫_Æways_ölöe
 
__Æways_ölöe


	)

350 #ifde‡
__exã∫_Æways_ölöe


351 
	#__f‹tify_fun˘i⁄
 
__exã∫_Æways_ölöe
 
__©åibuã_¨tificül__


	)

356 #i‡
	`__GNUC_PREREQ
 (4,3)

357 
	#__va_¨g_∑ck
(Ë
	`__buûtö_va_¨g_∑ck
 ()

	)

358 
	#__va_¨g_∑ck_Àn
(Ë
	`__buûtö_va_¨g_∑ck_Àn
 ()

	)

365 #i‡!
	`__GNUC_PREREQ
 (2,8)

366 
	#__exãnsi⁄__


	)

370 #i‡!
	`__GNUC_PREREQ
 (2,92)

371 
	#__ª°ri˘


	)

377 #i‡
	`__GNUC_PREREQ
 (3,1Ë&& !
deföed
 
__GNUG__


378 
	#__ª°ri˘_¨r
 
__ª°ri˘


	)

380 #ifde‡
__GNUC__


381 
	#__ª°ri˘_¨r


	)

383 #i‡
deföed
 
__STDC_VERSION__
 && __STDC_VERSION__ >= 199901L

384 
	#__ª°ri˘_¨r
 
ª°ri˘


	)

387 
	#__ª°ri˘_¨r


	)

392 #i‡
__GNUC__
 >= 3

393 
	#__glibc_u∆ikñy
(
c⁄d
Ë
	`__buûtö_ex≥˘
 ((c⁄d), 0)

	)

394 
	#__glibc_likñy
(
c⁄d
Ë
	`__buûtö_ex≥˘
 ((c⁄d), 1)

	)

396 
	#__glibc_u∆ikñy
(
c⁄d
Ë(c⁄d)

	)

397 
	#__glibc_likñy
(
c⁄d
Ë(c⁄d)

	)

400 #i‡(!
deföed
 
_N‹ëu∫
 \

401 && (
deföed
 
__STDC_VERSION__
 ? __STDC_VERSION__ : 0) < 201112 \

402 && !
	$__GNUC_PREREQ
 (4,7))

403 #i‡
	`__GNUC_PREREQ
 (2,8)

404 
	#_N‹ëu∫
 
	`__©åibuã__
 ((
__n‹ëu∫__
))

	)

406 
	#_N‹ëu∫


	)

410 #i‡
	`__GNUC_PREREQ
 (8, 0)

414 
	#__©åibuã_n⁄°rög__
 
	`__©åibuã__
 ((
__n⁄°rög__
))

	)

416 
	#__©åibuã_n⁄°rög__


	)

419 #i‡(!
deföed
 
_Sètic_as£π
 && !deföed 
__˝lu•lus
 \

420 && (
deföed
 
__STDC_VERSION__
 ? __STDC_VERSION__ : 0) < 201112 \

421 && (!
	`__GNUC_PREREQ
 (4, 6Ë|| 
deföed
 
__STRICT_ANSI__
))

422 
	#_Sètic_as£π
(
ex¥
, 
dügno°ic
) \

423 (*
	`__Sètic_as£π_fun˘i⁄
 ()) \

424 [!! (°ru˘ { 
__îr‹_if_√g©ive
: (
ex¥
Ë? 2 : -1; })]

	)

427 
	~<bôs/w‹dsize.h
>

428 
	~<bôs/l⁄g-doubÀ.h
>

430 #i‡
deföed
 
__LONG_DOUBLE_MATH_OPTIONAL
 && deföed 
__NO_LONG_DOUBLE_MATH


431 
	#__LDBL_COMPAT
 1

	)

432 #ifde‡
__REDIRECT


433 
	#__LDBL_REDIR1
(
«me
, 
¥Ÿo
, 
Æüs
Ë
	`__REDIRECT
 («me,ÖrŸo,álüs)

	)

434 
	#__LDBL_REDIR
(
«me
, 
¥Ÿo
) \

435 
	`__LDBL_REDIR1
 (
«me
, 
¥Ÿo
, 
__∆dbl_
##«me)

	)

436 
	#__LDBL_REDIR1_NTH
(
«me
, 
¥Ÿo
, 
Æüs
Ë
	`__REDIRECT_NTH
 («me,ÖrŸo,álüs)

	)

437 
	#__LDBL_REDIR_NTH
(
«me
, 
¥Ÿo
) \

438 
	`__LDBL_REDIR1_NTH
 (
«me
, 
¥Ÿo
, 
__∆dbl_
##«me)

	)

439 
	#__LDBL_REDIR1_DECL
(
«me
, 
Æüs
) \

440 
	`__ty≥of
 (
«me
Ë«mê
	`__asm
 (
	`__ASMNAME
 (#Æüs));

	)

441 
	#__LDBL_REDIR_DECL
(
«me
) \

442 
	`__ty≥of
 (
«me
Ë«mê
	`__asm
 (
	`__ASMNAME
 ("__∆dbl_" #«me));

	)

443 
	#__REDIRECT_LDBL
(
«me
, 
¥Ÿo
, 
Æüs
) \

444 
	`__LDBL_REDIR1
 (
«me
, 
¥Ÿo
, 
__∆dbl_
##
Æüs
)

	)

445 
	#__REDIRECT_NTH_LDBL
(
«me
, 
¥Ÿo
, 
Æüs
) \

446 
	`__LDBL_REDIR1_NTH
 (
«me
, 
¥Ÿo
, 
__∆dbl_
##
Æüs
)

	)

449 #i‡!
deföed
 
__LDBL_COMPAT
 || !deföed 
__REDIRECT


450 
	#__LDBL_REDIR1
(
«me
, 
¥Ÿo
, 
Æüs
Ë«mê
	)
proto

451 
	#__LDBL_REDIR
(
«me
, 
¥Ÿo
Ë«mê
	)
proto

452 
	#__LDBL_REDIR1_NTH
(
«me
, 
¥Ÿo
, 
Æüs
Ë«mê¥Ÿÿ
__THROW


	)

453 
	#__LDBL_REDIR_NTH
(
«me
, 
¥Ÿo
Ë«mê¥Ÿÿ
__THROW


	)

454 
	#__LDBL_REDIR_DECL
(
«me
)

	)

455 #ifde‡
__REDIRECT


456 
	#__REDIRECT_LDBL
(
«me
, 
¥Ÿo
, 
Æüs
Ë
	`__REDIRECT
 («me,ÖrŸo,álüs)

	)

457 
	#__REDIRECT_NTH_LDBL
(
«me
, 
¥Ÿo
, 
Æüs
) \

458 
	`__REDIRECT_NTH
 (
«me
, 
¥Ÿo
, 
Æüs
)

	)

467 #i‡
	`__GNUC_PREREQ
 (4,8Ë|| 
	`__glibc_˛™g_¥îeq
 (3,5)

468 
	#__glibc_ma¸o_w¨nög1
(
mesßge
Ë
	`_Pøgma
 (#mesßge)

	)

469 
	#__glibc_ma¸o_w¨nög
(
mesßge
) \

470 
	`__glibc_ma¸o_w¨nög1
 (
GCC
 
w¨nög
 
mesßge
)

	)

472 
	#__glibc_ma¸o_w¨nög
(
msg
)

	)

482 #i‡!
deföed
 
__˝lu•lus
 \

483 && (
	`__GNUC_PREREQ
 (4, 9) \

484 || 
	`__glibc_˛™g_has_exãnsi⁄
 (
c_gíîic_£À˘i⁄s
) \

485 || (!
deföed
 
__GNUC__
 && deföed 
__STDC_VERSION__
 \

486 && 
__STDC_VERSION__
 >= 201112L))

487 
	#__HAVE_GENERIC_SELECTION
 1

	)

489 
	#__HAVE_GENERIC_SELECTION
 0

	)

	@/usr/include/sys/types.h

22 #i‚def 
_SYS_TYPES_H


23 
	#_SYS_TYPES_H
 1

	)

25 
	~<„©uªs.h
>

27 
	g__BEGIN_DECLS


29 
	~<bôs/ty≥s.h
>

31 #ifdef 
__USE_MISC


32 #i‚de‡
__u_ch¨_deföed


33 
__u_ch¨
 
	tu_ch¨
;

34 
__u_sh‹t
 
	tu_sh‹t
;

35 
__u_öt
 
	tu_öt
;

36 
__u_l⁄g
 
	tu_l⁄g
;

37 
__quad_t
 
	tquad_t
;

38 
__u_quad_t
 
	tu_quad_t
;

39 
__fsid_t
 
	tfsid_t
;

40 
	#__u_ch¨_deföed


	)

44 
__loff_t
 
	tloff_t
;

46 #i‚de‡
__öo_t_deföed


47 #i‚de‡
__USE_FILE_OFFSET64


48 
__öo_t
 
	töo_t
;

50 
__öo64_t
 
	töo_t
;

52 
	#__öo_t_deföed


	)

54 #i‡
deföed
 
__USE_LARGEFILE64
 && !deföed 
__öo64_t_deföed


55 
__öo64_t
 
	töo64_t
;

56 
	#__öo64_t_deföed


	)

59 #i‚de‡
__dev_t_deföed


60 
__dev_t
 
	tdev_t
;

61 
	#__dev_t_deföed


	)

64 #i‚de‡
__gid_t_deföed


65 
__gid_t
 
	tgid_t
;

66 
	#__gid_t_deföed


	)

69 #i‚de‡
__mode_t_deföed


70 
__mode_t
 
	tmode_t
;

71 
	#__mode_t_deföed


	)

74 #i‚de‡
__∆ök_t_deföed


75 
__∆ök_t
 
	t∆ök_t
;

76 
	#__∆ök_t_deföed


	)

79 #i‚de‡
__uid_t_deföed


80 
__uid_t
 
	tuid_t
;

81 
	#__uid_t_deföed


	)

84 #i‚de‡
__off_t_deföed


85 #i‚de‡
__USE_FILE_OFFSET64


86 
__off_t
 
	toff_t
;

88 
__off64_t
 
	toff_t
;

90 
	#__off_t_deföed


	)

92 #i‡
deföed
 
__USE_LARGEFILE64
 && !deföed 
__off64_t_deföed


93 
__off64_t
 
	toff64_t
;

94 
	#__off64_t_deföed


	)

97 #i‚de‡
__pid_t_deföed


98 
__pid_t
 
	tpid_t
;

99 
	#__pid_t_deföed


	)

102 #i‡(
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8
) \

103 && !
deföed
 
__id_t_deföed


104 
__id_t
 
	tid_t
;

105 
	#__id_t_deföed


	)

108 #i‚de‡
__ssize_t_deföed


109 
__ssize_t
 
	tssize_t
;

110 
	#__ssize_t_deföed


	)

113 #ifdef 
__USE_MISC


114 #i‚de‡
__daddr_t_deföed


115 
__daddr_t
 
	tdaddr_t
;

116 
__ˇddr_t
 
	tˇddr_t
;

117 
	#__daddr_t_deföed


	)

121 #i‡(
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN
Ë&& !deföed 
__key_t_deföed


122 
__key_t
 
	tkey_t
;

123 
	#__key_t_deföed


	)

126 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8


127 
	~<bôs/ty≥s/˛ock_t.h
>

129 
	~<bôs/ty≥s/˛ockid_t.h
>

130 
	~<bôs/ty≥s/time_t.h
>

131 
	~<bôs/ty≥s/timî_t.h
>

133 #ifde‡
__USE_XOPEN


134 #i‚de‡
__u£c⁄ds_t_deföed


135 
__u£c⁄ds_t
 
	tu£c⁄ds_t
;

136 
	#__u£c⁄ds_t_deföed


	)

138 #i‚de‡
__su£c⁄ds_t_deföed


139 
__su£c⁄ds_t
 
	tsu£c⁄ds_t
;

140 
	#__su£c⁄ds_t_deföed


	)

144 
	#__√ed_size_t


	)

145 
	~<°ddef.h
>

147 #ifde‡
__USE_MISC


149 
	tul⁄g
;

150 
	tush‹t
;

151 
	tuöt
;

156 
	~<bôs/°döt-öä.h
>

158 #i‡!
__GNUC_PREREQ
 (2, 7)

161 
	tu_öt8_t
;

162 
	tu_öt16_t
;

163 
	tu_öt32_t
;

164 #i‡
__WORDSIZE
 == 64

165 
	tu_öt64_t
;

167 
__exãnsi⁄__
 
	tu_öt64_t
;

170 
	tªgi°î_t
;

175 
	#__u_ötN_t
(
N
, 
MODE
) \

176 
	tu_öt
##
	tN
##
	t_t
 
	t__©åibuã__
 ((
	t__mode__
 (
	tMODE
)))

	)

178 
	t__u_ötN_t
 (8, 
	t__QI__
);

179 
__u_ötN_t
 (16, 
__HI__
);

180 
__u_ötN_t
 (32, 
__SI__
);

181 
__u_ötN_t
 (64, 
__DI__
);

183 
	tªgi°î_t
 
	t__©åibuã__
 ((
	t__mode__
 (
	t__w‹d__
)));

189 
	#__BIT_TYPES_DEFINED__
 1

	)

192 #ifdef 
__USE_MISC


194 
	~<ídün.h
>

197 
	~<sys/£À˘.h
>

204 
	#__SYSMACROS_DEPRECATED_INCLUSION


	)

205 
	~<sys/sysma¸os.h
>

206 #unde‡
__SYSMACROS_DEPRECATED_INCLUSION


210 #i‡(
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K8
) \

211 && !
deföed
 
__blksize_t_deföed


212 
__blksize_t
 
	tblksize_t
;

213 
	#__blksize_t_deföed


	)

217 #i‚de‡
__USE_FILE_OFFSET64


218 #i‚de‡
__blk˙t_t_deföed


219 
__blk˙t_t
 
	tblk˙t_t
;

220 
	#__blk˙t_t_deföed


	)

222 #i‚de‡
__fsblk˙t_t_deföed


223 
__fsblk˙t_t
 
	tfsblk˙t_t
;

224 
	#__fsblk˙t_t_deföed


	)

226 #i‚de‡
__fsfû˙t_t_deföed


227 
__fsfû˙t_t
 
	tfsfû˙t_t
;

228 
	#__fsfû˙t_t_deföed


	)

231 #i‚de‡
__blk˙t_t_deföed


232 
__blk˙t64_t
 
	tblk˙t_t
;

233 
	#__blk˙t_t_deföed


	)

235 #i‚de‡
__fsblk˙t_t_deföed


236 
__fsblk˙t64_t
 
	tfsblk˙t_t
;

237 
	#__fsblk˙t_t_deföed


	)

239 #i‚de‡
__fsfû˙t_t_deföed


240 
__fsfû˙t64_t
 
	tfsfû˙t_t
;

241 
	#__fsfû˙t_t_deföed


	)

245 #ifde‡
__USE_LARGEFILE64


246 
__blk˙t64_t
 
	tblk˙t64_t
;

247 
__fsblk˙t64_t
 
	tfsblk˙t64_t
;

248 
__fsfû˙t64_t
 
	tfsfû˙t64_t
;

253 #i‡
deföed
 
__USE_POSIX199506
 || deföed 
__USE_UNIX98


254 
	~<bôs/±hªadty≥s.h
>

257 
	g__END_DECLS


	@/usr/include/bits/_G_config.h

4 #i‚de‡
_BITS_G_CONFIG_H


5 
	#_BITS_G_CONFIG_H
 1

	)

7 #i‡!
deföed
 
_BITS_LIBIO_H
 && !deföed 
_G_CONFIG_H


13 
	~<bôs/ty≥s.h
>

14 
	#__√ed_size_t


	)

15 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


16 
	#__√ed_wch¨_t


	)

18 
	#__√ed_NULL


	)

19 
	~<°ddef.h
>

21 
	~<bôs/ty≥s/__mb°©e_t.h
>

22 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


23 
	~<bôs/ty≥s/wöt_t.h
>

28 
__off_t
 
	m__pos
;

29 
__mb°©e_t
 
	m__°©e
;

30 } 
	t_G_Âos_t
;

33 
__off64_t
 
	m__pos
;

34 
__mb°©e_t
 
	m__°©e
;

35 } 
	t_G_Âos64_t
;

36 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


37 
	~<gc⁄v.h
>

40 
__gc⁄v_öfo
 
	m__cd
;

43 
__gc⁄v_öfo
 
	m__cd
;

44 
__gc⁄v_°ï_d©a
 
	m__d©a
;

45 } 
	m__comböed
;

46 } 
	t_G_ic⁄v_t
;

51 
	#_G_va_li°
 
__gnuc_va_li°


	)

53 
	#_G_HAVE_MMAP
 1

	)

54 
	#_G_HAVE_MREMAP
 1

	)

56 
	#_G_IO_IO_FILE_VERSION
 0x20001

	)

59 
	#_G_HAVE_ST_BLKSIZE
 
	`deföed
 (
_STATBUF_ST_BLKSIZE
)

	)

61 
	#_G_BUFSIZ
 8192

	)

	@/usr/include/bits/byteswap.h

19 #i‡!
deföed
 
_BYTESWAP_H
 && !deföed 
_NETINET_IN_H
 && !deföed 
_ENDIAN_H


23 #i‚de‡
_BITS_BYTESWAP_H


24 
	#_BITS_BYTESWAP_H
 1

	)

26 
	~<„©uªs.h
>

27 
	~<bôs/ty≥s.h
>

28 
	~<bôs/w‹dsize.h
>

31 
	#__bsw≠_c⁄°™t_16
(
x
) \

32 ((Ë((((
x
Ë>> 8Ë& 0xffË| (((xË& 0xffË<< 8)))

	)

35 
	~<bôs/byãsw≠-16.h
>

38 
	#__bsw≠_c⁄°™t_32
(
x
) \

39 ((((
x
) & 0xff000000) >> 24) | (((x) & 0x00ff0000) >> 8) | \

40 (((
x
Ë& 0x0000ff00Ë<< 8Ë| (((xË& 0x000000ffË<< 24))

	)

42 #ifde‡
__GNUC__


43 #i‡
__GNUC_PREREQ
 (4, 3)

44 
__ölöe
 

45 
	$__bsw≠_32
 (
__bsx
)

47  
	`__buûtö_bsw≠32
 (
__bsx
);

48 
	}
}

49 #ñi‡
__GNUC__
 >= 2

50 #i‡
__WORDSIZE
 =64 || (
deföed
 
__i486__
 || deföed 
__≥¡ium__
 \

51 || 
deföed
 
	g__≥¡ium¥o__
 || deföed 
	g__≥¡ium4__
 \

52 || 
deföed
 
	g__k8__
 || deföed 
	g__©hl⁄__
 \

53 || 
deföed
 
	g__k6__
 || deföed 
	g__noc⁄a__
 \

54 || 
deföed
 
	g__c‹e2__
 || deföed 
	g__geode__
 \

55 || 
deföed
 
	g__amdÁm10__
)

58 
	#__bsw≠_32
(
x
) \

59 (
__exãnsi⁄__
 \

60 ({ 
__v
, 
__x
 = (
x
); \

61 i‡(
	`__buûtö_c⁄°™t_p
 (
__x
)) \

62 
__v
 = 
	`__bsw≠_c⁄°™t_32
 (
__x
); \

64 
	`__asm__
 ("bsw≠ %0" : "Ù" (
__v
Ë: "0" (
__x
)); \

65 
__v
; }))

	)

67 
	#__bsw≠_32
(
x
) \

68 (
__exãnsi⁄__
 \

69 ({ 
__v
, 
__x
 = (
x
); \

70 i‡(
	`__buûtö_c⁄°™t_p
 (
__x
)) \

71 
__v
 = 
	`__bsw≠_c⁄°™t_32
 (
__x
); \

73 
	`__asm__
 ("rorw $8, %w0;" \

76 : "Ù" (
__v
) \

77 : "0" (
__x
) \

79 
__v
; }))

	)

82 
	#__bsw≠_32
(
x
) \

83 (
__exãnsi⁄__
 \

84 ({ 
__x
 = (
x
); 
	`__bsw≠_c⁄°™t_32
 (__x); }))

	)

87 
__ölöe
 

88 
	$__bsw≠_32
 (
__bsx
)

90  
	`__bsw≠_c⁄°™t_32
 (
__bsx
);

91 
	}
}

95 #i‡
__GNUC_PREREQ
 (2, 0)

97 
	#__bsw≠_c⁄°™t_64
(
x
) \

98 (
	`__exãnsi⁄__
 ((((
x
) & 0xff00000000000000ull) >> 56) \

99 | (((
x
) & 0x00ff000000000000ull) >> 40) \

100 | (((
x
) & 0x0000ff0000000000ull) >> 24) \

101 | (((
x
) & 0x000000ff00000000ull) >> 8) \

102 | (((
x
) & 0x00000000ff000000ull) << 8) \

103 | (((
x
) & 0x0000000000ff0000ull) << 24) \

104 | (((
x
) & 0x000000000000ff00ull) << 40) \

105 | (((
x
Ë& 0x00000000000000ffuŒË<< 56)))

	)

107 #i‡
__GNUC_PREREQ
 (4, 3)

108 
__ölöe
 
__uöt64_t


109 
	$__bsw≠_64
 (
__uöt64_t
 
__bsx
)

111  
	`__buûtö_bsw≠64
 (
__bsx
);

112 
	}
}

113 #ñi‡
__WORDSIZE
 == 64

114 
	#__bsw≠_64
(
x
) \

115 (
__exãnsi⁄__
 \

116 ({ 
__uöt64_t
 
__v
, 
__x
 = (
x
); \

117 i‡(
	`__buûtö_c⁄°™t_p
 (
__x
)) \

118 
__v
 = 
	`__bsw≠_c⁄°™t_64
 (
__x
); \

120 
	`__asm__
 ("bsw≠ %q0" : "Ù" (
__v
Ë: "0" (
__x
)); \

121 
__v
; }))

	)

123 
	#__bsw≠_64
(
x
) \

124 (
__exãnsi⁄__
 \

125 ({ uni⁄ { 
__exãnsi⁄__
 
__uöt64_t
 
__Œ
; \

126 
__l
[2]; } 
__w
, 
__r
; \

127 i‡(
	`__buûtö_c⁄°™t_p
 (
x
)) \

128 
__r
.
__Œ
 = 
	`__bsw≠_c⁄°™t_64
 (
x
); \

131 
__w
.
__Œ
 = (
x
); \

132 
__r
.
__l
[0] = 
	`__bsw≠_32
 (
__w
.__l[1]); \

133 
__r
.
__l
[1] = 
	`__bsw≠_32
 (
__w
.__l[0]); \

135 
__r
.
__Œ
; }))

	)

138 
	#__bsw≠_c⁄°™t_64
(
x
) \

139 ((((
x
) & 0xff00000000000000ull) >> 56) \

140 | (((
x
) & 0x00ff000000000000ull) >> 40) \

141 | (((
x
) & 0x0000ff0000000000ull) >> 24) \

142 | (((
x
) & 0x000000ff00000000ull) >> 8) \

143 | (((
x
) & 0x00000000ff000000ull) << 8) \

144 | (((
x
) & 0x0000000000ff0000ull) << 24) \

145 | (((
x
) & 0x000000000000ff00ull) << 40) \

146 | (((
x
Ë& 0x00000000000000ffuŒË<< 56))

	)

148 
__ölöe
 
__uöt64_t


149 
	$__bsw≠_64
 (
__uöt64_t
 
__bsx
)

151  
	`__bsw≠_c⁄°™t_64
 (
__bsx
);

152 
	}
}

	@/usr/include/bits/endian.h

3 #i‚de‡
_ENDIAN_H


7 
	#__BYTE_ORDER
 
__LITTLE_ENDIAN


	)

	@/usr/include/bits/floatn-common.h

20 #i‚de‡
_BITS_FLOATN_COMMON_H


21 
	#_BITS_FLOATN_COMMON_H


	)

23 
	~<„©uªs.h
>

24 
	~<bôs/l⁄g-doubÀ.h
>

34 
	#__HAVE_FLOAT16
 0

	)

35 
	#__HAVE_FLOAT32
 1

	)

36 
	#__HAVE_FLOAT64
 1

	)

37 
	#__HAVE_FLOAT32X
 1

	)

38 
	#__HAVE_FLOAT128X
 0

	)

52 
	#__HAVE_DISTINCT_FLOAT16
 
__HAVE_FLOAT16


	)

53 
	#__HAVE_DISTINCT_FLOAT32
 0

	)

54 
	#__HAVE_DISTINCT_FLOAT64
 0

	)

55 
	#__HAVE_DISTINCT_FLOAT32X
 0

	)

56 
	#__HAVE_DISTINCT_FLOAT64X
 0

	)

57 
	#__HAVE_DISTINCT_FLOAT128X
 
__HAVE_FLOAT128X


	)

62 #i‡
__GNUC_PREREQ
 (7, 0Ë&& !
deföed
 
__˝lu•lus


63 
	#__HAVE_FLOATN_NOT_TYPEDEF
 1

	)

65 
	#__HAVE_FLOATN_NOT_TYPEDEF
 0

	)

68 #i‚de‡
__ASSEMBLER__


73 #i‡
__HAVE_FLOAT16


74 #i‡!
__GNUC_PREREQ
 (7, 0Ë|| 
deföed
 
__˝lu•lus


76 
	#__f16
(
x
Ë((
_Flﬂt16
Ëx##
f
)

	)

78 
	#__f16
(
x
Ëx##
f16


	)

82 #i‡
__HAVE_FLOAT32


83 #i‡!
__GNUC_PREREQ
 (7, 0Ë|| 
deföed
 
__˝lu•lus


84 
	#__f32
(
x
Ëx##
f


	)

86 
	#__f32
(
x
Ëx##
f32


	)

90 #i‡
__HAVE_FLOAT64


91 #i‡!
__GNUC_PREREQ
 (7, 0Ë|| 
deföed
 
__˝lu•lus


92 #ifde‡
__NO_LONG_DOUBLE_MATH


93 
	#__f64
(
x
Ëx##
l


	)

95 
	#__f64
(
x
Ë
	)
x

98 
	#__f64
(
x
Ëx##
f64


	)

102 #i‡
__HAVE_FLOAT32X


103 #i‡!
__GNUC_PREREQ
 (7, 0Ë|| 
deföed
 
__˝lu•lus


104 
	#__f32x
(
x
Ë
	)
x

106 
	#__f32x
(
x
Ëx##
f32x


	)

110 #i‡
__HAVE_FLOAT64X


111 #i‡!
__GNUC_PREREQ
 (7, 0Ë|| 
deföed
 
__˝lu•lus


112 #i‡
__HAVE_FLOAT64X_LONG_DOUBLE


113 
	#__f64x
(
x
Ëx##
l


	)

115 
	#__f64x
(
x
Ë
	`__f128
 (x)

	)

118 
	#__f64x
(
x
Ëx##
f64x


	)

122 #i‡
__HAVE_FLOAT128X


123 #i‡!
__GNUC_PREREQ
 (7, 0Ë|| 
deföed
 
__˝lu•lus


126 
	#__f128x
(
x
Ëx##
f128x


	)

131 #i‡
__HAVE_FLOAT16


132 #i‡!
__GNUC_PREREQ
 (7, 0Ë|| 
deföed
 
__˝lu•lus


133 
_Com∂ex
 
	t__cÊﬂt16
 
	t__©åibuã__
 ((
	t__mode__
 (
	t__HC__
)));

134 
	#__CFLOAT16
 
__cÊﬂt16


	)

136 
	#__CFLOAT16
 
_Com∂ex
 
_Flﬂt16


	)

140 #i‡
__HAVE_FLOAT32


141 #i‡!
__GNUC_PREREQ
 (7, 0Ë|| 
deföed
 
__˝lu•lus


142 
	#__CFLOAT32
 
_Com∂ex
 

	)

144 
	#__CFLOAT32
 
_Com∂ex
 
_Flﬂt32


	)

148 #i‡
__HAVE_FLOAT64


149 #i‡!
__GNUC_PREREQ
 (7, 0Ë|| 
deföed
 
__˝lu•lus


150 #ifde‡
__NO_LONG_DOUBLE_MATH


151 
	#__CFLOAT64
 
_Com∂ex
 

	)

153 
	#__CFLOAT64
 
_Com∂ex
 

	)

156 
	#__CFLOAT64
 
_Com∂ex
 
_Flﬂt64


	)

160 #i‡
__HAVE_FLOAT32X


161 #i‡!
__GNUC_PREREQ
 (7, 0Ë|| 
deföed
 
__˝lu•lus


162 
	#__CFLOAT32X
 
_Com∂ex
 

	)

164 
	#__CFLOAT32X
 
_Com∂ex
 
_Flﬂt32x


	)

168 #i‡
__HAVE_FLOAT64X


169 #i‡!
__GNUC_PREREQ
 (7, 0Ë|| 
deföed
 
__˝lu•lus


170 #i‡
__HAVE_FLOAT64X_LONG_DOUBLE


171 
	#__CFLOAT64X
 
_Com∂ex
 

	)

173 
	#__CFLOAT64X
 
__CFLOAT128


	)

176 
	#__CFLOAT64X
 
_Com∂ex
 
_Flﬂt64x


	)

180 #i‡
__HAVE_FLOAT128X


181 #i‡!
__GNUC_PREREQ
 (7, 0Ë|| 
deföed
 
__˝lu•lus


184 
	#__CFLOAT128X
 
_Com∂ex
 
_Flﬂt128x


	)

189 #i‡
__HAVE_FLOAT16


191 #i‡!
__GNUC_PREREQ
 (7, 0Ë|| 
deföed
 
__˝lu•lus


192 
	t_Flﬂt16
 
	t__©åibuã__
 ((
	t__mode__
 (
	t__HF__
)));

195 #i‡!
__GNUC_PREREQ
 (7, 0)

196 
	#__buûtö_huge_vÆf16
(Ë((
_Flﬂt16
Ë
	`__buûtö_huge_vÆ
 ())

	)

197 
	#__buûtö_öff16
(Ë((
_Flﬂt16
Ë
	`__buûtö_öf
 ())

	)

198 
	#__buûtö_«nf16
(
x
Ë((
_Flﬂt16
Ë
	`__buûtö_«n
 (x))

	)

199 
	#__buûtö_«nsf16
(
x
Ë((
_Flﬂt16
Ë
	`__buûtö_«ns
 (x))

	)

204 #i‡
__HAVE_FLOAT32


206 #i‡!
__GNUC_PREREQ
 (7, 0Ë|| 
deföed
 
__˝lu•lus


207 
	t_Flﬂt32
;

210 #i‡!
__GNUC_PREREQ
 (7, 0)

211 
	#__buûtö_huge_vÆf32
(Ë(
	`__buûtö_huge_vÆf
 ())

	)

212 
	#__buûtö_öff32
(Ë(
	`__buûtö_öff
 ())

	)

213 
	#__buûtö_«nf32
(
x
Ë(
	`__buûtö_«nf
 (x))

	)

214 
	#__buûtö_«nsf32
(
x
Ë(
	`__buûtö_«nsf
 (x))

	)

219 #i‡
__HAVE_FLOAT64


228 #ifde‡
__NO_LONG_DOUBLE_MATH


230 #i‡!
__GNUC_PREREQ
 (7, 0Ë|| 
deföed
 
__˝lu•lus


231 
	t_Flﬂt64
;

234 #i‡!
__GNUC_PREREQ
 (7, 0)

235 
	#__buûtö_huge_vÆf64
(Ë(
	`__buûtö_huge_vÆl
 ())

	)

236 
	#__buûtö_öff64
(Ë(
	`__buûtö_öÊ
 ())

	)

237 
	#__buûtö_«nf64
(
x
Ë(
	`__buûtö_«∆
 (x))

	)

238 
	#__buûtö_«nsf64
(
x
Ë(
	`__buûtö_«n¶
 (x))

	)

243 #i‡!
__GNUC_PREREQ
 (7, 0Ë|| 
deföed
 
__˝lu•lus


244 
	t_Flﬂt64
;

247 #i‡!
__GNUC_PREREQ
 (7, 0)

248 
	#__buûtö_huge_vÆf64
(Ë(
	`__buûtö_huge_vÆ
 ())

	)

249 
	#__buûtö_öff64
(Ë(
	`__buûtö_öf
 ())

	)

250 
	#__buûtö_«nf64
(
x
Ë(
	`__buûtö_«n
 (x))

	)

251 
	#__buûtö_«nsf64
(
x
Ë(
	`__buûtö_«ns
 (x))

	)

258 #i‡
__HAVE_FLOAT32X


260 #i‡!
__GNUC_PREREQ
 (7, 0Ë|| 
deföed
 
__˝lu•lus


261 
	t_Flﬂt32x
;

264 #i‡!
__GNUC_PREREQ
 (7, 0)

265 
	#__buûtö_huge_vÆf32x
(Ë(
	`__buûtö_huge_vÆ
 ())

	)

266 
	#__buûtö_öff32x
(Ë(
	`__buûtö_öf
 ())

	)

267 
	#__buûtö_«nf32x
(
x
Ë(
	`__buûtö_«n
 (x))

	)

268 
	#__buûtö_«nsf32x
(
x
Ë(
	`__buûtö_«ns
 (x))

	)

273 #i‡
__HAVE_FLOAT64X


275 #i‡
__HAVE_FLOAT64X_LONG_DOUBLE


277 #i‡!
__GNUC_PREREQ
 (7, 0Ë|| 
deföed
 
__˝lu•lus


278 
	t_Flﬂt64x
;

281 #i‡!
__GNUC_PREREQ
 (7, 0)

282 
	#__buûtö_huge_vÆf64x
(Ë(
	`__buûtö_huge_vÆl
 ())

	)

283 
	#__buûtö_öff64x
(Ë(
	`__buûtö_öÊ
 ())

	)

284 
	#__buûtö_«nf64x
(
x
Ë(
	`__buûtö_«∆
 (x))

	)

285 
	#__buûtö_«nsf64x
(
x
Ë(
	`__buûtö_«n¶
 (x))

	)

290 #i‡!
__GNUC_PREREQ
 (7, 0Ë|| 
deföed
 
__˝lu•lus


291 
_Flﬂt128
 
	t_Flﬂt64x
;

294 #i‡!
__GNUC_PREREQ
 (7, 0)

295 
	#__buûtö_huge_vÆf64x
(Ë(
	`__buûtö_huge_vÆf128
 ())

	)

296 
	#__buûtö_öff64x
(Ë(
	`__buûtö_öff128
 ())

	)

297 
	#__buûtö_«nf64x
(
x
Ë(
	`__buûtö_«nf128
 (x))

	)

298 
	#__buûtö_«nsf64x
(
x
Ë(
	`__buûtö_«nsf128
 (x))

	)

305 #i‡
__HAVE_FLOAT128X


307 #i‡!
__GNUC_PREREQ
 (7, 0Ë|| 
deföed
 
__˝lu•lus


311 #i‡!
__GNUC_PREREQ
 (7, 0)

312 
	#__buûtö_huge_vÆf128x
(Ë((
_Flﬂt128x
Ë
	`__buûtö_huge_vÆ
 ())

	)

313 
	#__buûtö_öff128x
(Ë((
_Flﬂt128x
Ë
	`__buûtö_öf
 ())

	)

314 
	#__buûtö_«nf128x
(
x
Ë((
_Flﬂt128x
Ë
	`__buûtö_«n
 (x))

	)

315 
	#__buûtö_«nsf128x
(
x
Ë((
_Flﬂt128x
Ë
	`__buûtö_«ns
 (x))

	)

	@/usr/include/bits/getopt_core.h

20 #i‚de‡
_GETOPT_CORE_H


21 
	#_GETOPT_CORE_H
 1

	)

28 
__BEGIN_DECLS


36 *
›èrg
;

50 
›töd
;

55 
›ãº
;

59 
›t›t
;

91 
	$gë›t
 (
___¨gc
, *c⁄° *
___¨gv
, c⁄° *
__sh‹t›ts
)

92 
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

94 
__END_DECLS


	@/usr/include/bits/libio-ldbl.h

19 #i‚de‡
_BITS_LIBIO_LDBL_H


20 
	#_BITS_LIBIO_LDBL_H
 1

	)

22 #i‚de‡
_BITS_LIBIO_H


26 
	$__LDBL_REDIR_DECL
 (
_IO_vfsˇnf
)

27 
	$__LDBL_REDIR_DECL
 (
_IO_vÂrötf
)

	@/usr/include/bits/locale.h

19 #i‡!
deföed
 
_LOCALE_H
 && !deföed 
_LANGINFO_H


23 #i‚de‡
_BITS_LOCALE_H


24 
	#_BITS_LOCALE_H
 1

	)

26 
	#__LC_CTYPE
 0

	)

27 
	#__LC_NUMERIC
 1

	)

28 
	#__LC_TIME
 2

	)

29 
	#__LC_COLLATE
 3

	)

30 
	#__LC_MONETARY
 4

	)

31 
	#__LC_MESSAGES
 5

	)

32 
	#__LC_ALL
 6

	)

33 
	#__LC_PAPER
 7

	)

34 
	#__LC_NAME
 8

	)

35 
	#__LC_ADDRESS
 9

	)

36 
	#__LC_TELEPHONE
 10

	)

37 
	#__LC_MEASUREMENT
 11

	)

38 
	#__LC_IDENTIFICATION
 12

	)

	@/usr/include/bits/long-double.h

	@/usr/include/bits/pthreadtypes.h

19 #i‚de‡
_BITS_PTHREADTYPES_COMMON_H


20 
	#_BITS_PTHREADTYPES_COMMON_H
 1

	)

23 
	~<bôs/thªad-sh¨ed-ty≥s.h
>

27 
	t±hªad_t
;

34 
	m__size
[
__SIZEOF_PTHREAD_MUTEXATTR_T
];

35 
	m__Æign
;

36 } 
	t±hªad_muãx©å_t
;

43 
	m__size
[
__SIZEOF_PTHREAD_CONDATTR_T
];

44 
	m__Æign
;

45 } 
	t±hªad_c⁄d©å_t
;

49 
	t±hªad_key_t
;

53 
	t__ONCE_ALIGNMENT
 
	t±hªad_⁄˚_t
;

56 
	u±hªad_©å_t


58 
	m__size
[
__SIZEOF_PTHREAD_ATTR_T
];

59 
	m__Æign
;

61 #i‚de‡
__have_±hªad_©å_t


62 
±hªad_©å_t
 
	t±hªad_©å_t
;

63 
	#__have_±hªad_©å_t
 1

	)

69 
__±hªad_muãx_s
 
	m__d©a
;

70 
	m__size
[
__SIZEOF_PTHREAD_MUTEX_T
];

71 
	m__Æign
;

72 } 
	t±hªad_muãx_t
;

77 
__±hªad_c⁄d_s
 
	m__d©a
;

78 
	m__size
[
__SIZEOF_PTHREAD_COND_T
];

79 
__exãnsi⁄__
 
	m__Æign
;

80 } 
	t±hªad_c⁄d_t
;

83 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K


88 
__±hªad_rwlock_¨ch_t
 
	m__d©a
;

89 
	m__size
[
__SIZEOF_PTHREAD_RWLOCK_T
];

90 
	m__Æign
;

91 } 
	t±hªad_rwlock_t
;

95 
	m__size
[
__SIZEOF_PTHREAD_RWLOCKATTR_T
];

96 
	m__Æign
;

97 } 
	t±hªad_rwlock©å_t
;

101 #ifde‡
__USE_XOPEN2K


103 vﬁ©ûê
	t±hªad_•ölock_t
;

110 
	m__size
[
__SIZEOF_PTHREAD_BARRIER_T
];

111 
	m__Æign
;

112 } 
	t±hªad_b¨rõr_t
;

116 
	m__size
[
__SIZEOF_PTHREAD_BARRIERATTR_T
];

117 
	m__Æign
;

118 } 
	t±hªad_b¨rõøâr_t
;

	@/usr/include/bits/strings_fortified.h

19 #i‚de‡
__STRINGS_FORTIFIED


20 
	#__STRINGS_FORTIFIED
 1

	)

22 
__f‹tify_fun˘i⁄
 

23 
__NTH
 (
	$bc›y
 (c⁄° *
__§c
, *
__de°
, 
size_t
 
__Àn
))

25 (Ë
	`__buûtö___memmove_chk
 (
__de°
, 
__§c
, 
__Àn
, 
	`__bos0
 (__dest));

26 
	}
}

28 
__f‹tify_fun˘i⁄
 

29 
__NTH
 (
	$bzîo
 (*
__de°
, 
size_t
 
__Àn
))

31 (Ë
	`__buûtö___mem£t_chk
 (
__de°
, '\0', 
__Àn
, 
	`__bos0
 (__dest));

32 
	}
}

	@/usr/include/bits/types/__locale_t.h

20 #i‚de‡
_BITS_TYPES___LOCALE_T_H


21 
	#_BITS_TYPES___LOCALE_T_H
 1

	)

28 
	s__loˇÀ_°ru˘


31 
__loˇÀ_d©a
 *
	m__loˇÀs
[13];

34 c⁄° *
	m__˘y≥_b
;

35 c⁄° *
	m__˘y≥_tﬁowî
;

36 c⁄° *
	m__˘y≥_touµî
;

39 c⁄° *
	m__«mes
[13];

42 
__loˇÀ_°ru˘
 *
	t__loˇÀ_t
;

	@/usr/include/bits/types/clock_t.h

1 #i‚de‡
__˛ock_t_deföed


2 
	#__˛ock_t_deföed
 1

	)

4 
	~<bôs/ty≥s.h
>

7 
__˛ock_t
 
	t˛ock_t
;

	@/usr/include/bits/types/clockid_t.h

1 #i‚de‡
__˛ockid_t_deföed


2 
	#__˛ockid_t_deföed
 1

	)

4 
	~<bôs/ty≥s.h
>

7 
__˛ockid_t
 
	t˛ockid_t
;

	@/usr/include/bits/types/time_t.h

1 #i‚de‡
__time_t_deföed


2 
	#__time_t_deföed
 1

	)

4 
	~<bôs/ty≥s.h
>

7 
__time_t
 
	ttime_t
;

	@/usr/include/bits/types/timer_t.h

1 #i‚de‡
__timî_t_deföed


2 
	#__timî_t_deföed
 1

	)

4 
	~<bôs/ty≥s.h
>

7 
__timî_t
 
	ttimî_t
;

	@/usr/include/bits/typesizes.h

19 #i‚de‡
_BITS_TYPES_H


23 #i‚def 
_BITS_TYPESIZES_H


24 
	#_BITS_TYPESIZES_H
 1

	)

30 #i‡
deföed
 
__x86_64__
 && deföed 
__ILP32__


31 
	#__SYSCALL_SLONG_TYPE
 
__SQUAD_TYPE


	)

32 
	#__SYSCALL_ULONG_TYPE
 
__UQUAD_TYPE


	)

34 
	#__SYSCALL_SLONG_TYPE
 
__SLONGWORD_TYPE


	)

35 
	#__SYSCALL_ULONG_TYPE
 
__ULONGWORD_TYPE


	)

38 
	#__DEV_T_TYPE
 
__UQUAD_TYPE


	)

39 
	#__UID_T_TYPE
 
__U32_TYPE


	)

40 
	#__GID_T_TYPE
 
__U32_TYPE


	)

41 
	#__INO_T_TYPE
 
__SYSCALL_ULONG_TYPE


	)

42 
	#__INO64_T_TYPE
 
__UQUAD_TYPE


	)

43 
	#__MODE_T_TYPE
 
__U32_TYPE


	)

44 #ifde‡
__x86_64__


45 
	#__NLINK_T_TYPE
 
__SYSCALL_ULONG_TYPE


	)

46 
	#__FSWORD_T_TYPE
 
__SYSCALL_SLONG_TYPE


	)

48 
	#__NLINK_T_TYPE
 
__UWORD_TYPE


	)

49 
	#__FSWORD_T_TYPE
 
__SWORD_TYPE


	)

51 
	#__OFF_T_TYPE
 
__SYSCALL_SLONG_TYPE


	)

52 
	#__OFF64_T_TYPE
 
__SQUAD_TYPE


	)

53 
	#__PID_T_TYPE
 
__S32_TYPE


	)

54 
	#__RLIM_T_TYPE
 
__SYSCALL_ULONG_TYPE


	)

55 
	#__RLIM64_T_TYPE
 
__UQUAD_TYPE


	)

56 
	#__BLKCNT_T_TYPE
 
__SYSCALL_SLONG_TYPE


	)

57 
	#__BLKCNT64_T_TYPE
 
__SQUAD_TYPE


	)

58 
	#__FSBLKCNT_T_TYPE
 
__SYSCALL_ULONG_TYPE


	)

59 
	#__FSBLKCNT64_T_TYPE
 
__UQUAD_TYPE


	)

60 
	#__FSFILCNT_T_TYPE
 
__SYSCALL_ULONG_TYPE


	)

61 
	#__FSFILCNT64_T_TYPE
 
__UQUAD_TYPE


	)

62 
	#__ID_T_TYPE
 
__U32_TYPE


	)

63 
	#__CLOCK_T_TYPE
 
__SYSCALL_SLONG_TYPE


	)

64 
	#__TIME_T_TYPE
 
__SYSCALL_SLONG_TYPE


	)

65 
	#__USECONDS_T_TYPE
 
__U32_TYPE


	)

66 
	#__SUSECONDS_T_TYPE
 
__SYSCALL_SLONG_TYPE


	)

67 
	#__DADDR_T_TYPE
 
__S32_TYPE


	)

68 
	#__KEY_T_TYPE
 
__S32_TYPE


	)

69 
	#__CLOCKID_T_TYPE
 
__S32_TYPE


	)

70 
	#__TIMER_T_TYPE
 *

	)

71 
	#__BLKSIZE_T_TYPE
 
__SYSCALL_SLONG_TYPE


	)

72 
	#__FSID_T_TYPE
 såu˘ { 
__vÆ
[2]; }

	)

73 
	#__SSIZE_T_TYPE
 
__SWORD_TYPE


	)

74 
	#__CPU_MASK_TYPE
 
__SYSCALL_ULONG_TYPE


	)

76 #ifde‡
__x86_64__


80 
	#__OFF_T_MATCHES_OFF64_T
 1

	)

83 
	#__INO_T_MATCHES_INO64_T
 1

	)

86 
	#__RLIM_T_MATCHES_RLIM64_T
 1

	)

88 
	#__RLIM_T_MATCHES_RLIM64_T
 0

	)

92 
	#__FD_SETSIZE
 1024

	)

	@/usr/include/bits/uintn-identity.h

19 #i‡!
deföed
 
_NETINET_IN_H
 && !deföed 
_ENDIAN_H


23 #i‚de‡
_BITS_UINTN_IDENTITY_H


24 
	#_BITS_UINTN_IDENTITY_H
 1

	)

26 
	~<bôs/ty≥s.h
>

32 
__ölöe
 
__uöt16_t


33 
	$__uöt16_idítôy
 (
__uöt16_t
 
__x
)

35  
__x
;

36 
	}
}

38 
__ölöe
 
__uöt32_t


39 
	$__uöt32_idítôy
 (
__uöt32_t
 
__x
)

41  
__x
;

42 
	}
}

44 
__ölöe
 
__uöt64_t


45 
	$__uöt64_idítôy
 (
__uöt64_t
 
__x
)

47  
__x
;

48 
	}
}

	@/usr/include/gnu/stubs-32.h

6 #ifde‡
_LIBC


7 #îr‹ 
Aµliˇti⁄s
 
may
 
nŸ
 
deföe
 
the
 
ma¸o
 
_LIBC


10 
	#__°ub_chÊags


	)

11 
	#__°ub_Áâach


	)

12 
	#__°ub_fchÊags


	)

13 
	#__°ub_fdëach


	)

14 
	#__°ub_gây


	)

15 
	#__°ub_lchmod


	)

16 
	#__°ub_ªvoke


	)

17 
	#__°ub_£éogö


	)

18 
	#__°ub_sigªtu∫


	)

19 
	#__°ub_s°k


	)

20 
	#__°ub_°ty


	)

	@/usr/include/gnu/stubs-64.h

6 #ifde‡
_LIBC


7 #îr‹ 
Aµliˇti⁄s
 
may
 
nŸ
 
deföe
 
the
 
ma¸o
 
_LIBC


10 
	#__°ub___com∑t_bdÊush


	)

11 
	#__°ub_chÊags


	)

12 
	#__°ub_Áâach


	)

13 
	#__°ub_fchÊags


	)

14 
	#__°ub_fdëach


	)

15 
	#__°ub_gëmsg


	)

16 
	#__°ub_gây


	)

17 
	#__°ub_lchmod


	)

18 
	#__°ub_putmsg


	)

19 
	#__°ub_ªvoke


	)

20 
	#__°ub_£éogö


	)

21 
	#__°ub_sigªtu∫


	)

22 
	#__°ub_s°k


	)

23 
	#__°ub_°ty


	)

	@/usr/include/gnu/stubs-x32.h

6 #ifde‡
_LIBC


7 #îr‹ 
Aµliˇti⁄s
 
may
 
nŸ
 
deföe
 
the
 
ma¸o
 
_LIBC


10 
	#__°ub___com∑t_bdÊush


	)

11 
	#__°ub___com∑t_¸óã_moduÀ


	)

12 
	#__°ub___com∑t_gë_kî√l_syms


	)

13 
	#__°ub___com∑t_quîy_moduÀ


	)

14 
	#__°ub___com∑t_u£lib


	)

15 
	#__°ub_chÊags


	)

16 
	#__°ub_Áâach


	)

17 
	#__°ub_fchÊags


	)

18 
	#__°ub_fdëach


	)

19 
	#__°ub_gëmsg


	)

20 
	#__°ub_gây


	)

21 
	#__°ub_lchmod


	)

22 
	#__°ub_nfs£rv˘l


	)

23 
	#__°ub_putmsg


	)

24 
	#__°ub_ªvoke


	)

25 
	#__°ub_£éogö


	)

26 
	#__°ub_sigªtu∫


	)

27 
	#__°ub_s°k


	)

28 
	#__°ub_°ty


	)

	@/usr/include/linux/errno.h

1 
	~<asm/î∫o.h
>

	@/usr/include/sys/select.h

21 #i‚de‡
_SYS_SELECT_H


22 
	#_SYS_SELECT_H
 1

	)

24 
	~<„©uªs.h
>

27 
	~<bôs/ty≥s.h
>

30 
	~<bôs/£À˘.h
>

33 
	~<bôs/ty≥s/sig£t_t.h
>

36 
	~<bôs/ty≥s/time_t.h
>

37 
	~<bôs/ty≥s/°ru˘_timevÆ.h
>

38 #ifde‡
__USE_XOPEN2K


39 
	~<bôs/ty≥s/°ru˘_time•ec.h
>

42 #i‚de‡
__su£c⁄ds_t_deföed


43 
__su£c⁄ds_t
 
	tsu£c⁄ds_t
;

44 
	#__su£c⁄ds_t_deföed


	)

49 
	t__fd_mask
;

52 #unde‡
__NFDBITS


54 
	#__NFDBITS
 (8 * (Ë (
__fd_mask
))

	)

55 
	#__FD_ELT
(
d
Ë((dË/ 
__NFDBITS
)

	)

56 
	#__FD_MASK
(
d
Ë((
__fd_mask
Ë(1UL << ((dË% 
__NFDBITS
)))

	)

63 #ifde‡
__USE_XOPEN


64 
__fd_mask
 
	mfds_bôs
[
__FD_SETSIZE
 / 
__NFDBITS
];

65 
	#__FDS_BITS
(
£t
Ë((£t)->
fds_bôs
)

	)

67 
__fd_mask
 
	m__fds_bôs
[
__FD_SETSIZE
 / 
__NFDBITS
];

68 
	#__FDS_BITS
(
£t
Ë((£t)->
__fds_bôs
)

	)

70 } 
	tfd_£t
;

73 
	#FD_SETSIZE
 
__FD_SETSIZE


	)

75 #ifde‡
__USE_MISC


77 
__fd_mask
 
	tfd_mask
;

80 
	#NFDBITS
 
__NFDBITS


	)

85 
	#FD_SET
(
fd
, 
fd£ç
Ë
	`__FD_SET
 (fd, fd£ç)

	)

86 
	#FD_CLR
(
fd
, 
fd£ç
Ë
	`__FD_CLR
 (fd, fd£ç)

	)

87 
	#FD_ISSET
(
fd
, 
fd£ç
Ë
	`__FD_ISSET
 (fd, fd£ç)

	)

88 
	#FD_ZERO
(
fd£ç
Ë
	`__FD_ZERO
 (fd£ç)

	)

91 
__BEGIN_DECLS


101 
£À˘
 (
__nfds
, 
fd_£t
 *
__ª°ri˘
 
__ªadfds
,

102 
fd_£t
 *
__ª°ri˘
 
__wrôefds
,

103 
fd_£t
 *
__ª°ri˘
 
__ex˚±fds
,

104 
timevÆ
 *
__ª°ri˘
 
__timeout
);

106 #ifde‡
__USE_XOPEN2K


113 
p£À˘
 (
__nfds
, 
fd_£t
 *
__ª°ri˘
 
__ªadfds
,

114 
fd_£t
 *
__ª°ri˘
 
__wrôefds
,

115 
fd_£t
 *
__ª°ri˘
 
__ex˚±fds
,

116 c⁄° 
time•ec
 *
__ª°ri˘
 
__timeout
,

117 c⁄° 
__sig£t_t
 *
__ª°ri˘
 
__sigmask
);

122 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__GNUC__


123 
	~<bôs/£À˘2.h
>

126 
	g__END_DECLS


	@/usr/include/sys/sysmacros.h

19 #i‚de‡
_SYS_SYSMACROS_H_OUTER


21 #i‚de‡
__SYSMACROS_DEPRECATED_INCLUSION


22 
	#_SYS_SYSMACROS_H_OUTER
 1

	)

30 #unde‡
maj‹


31 #unde‡
mö‹


32 #unde‡
makedev


36 #i‚de‡
_SYS_SYSMACROS_H


37 
	#_SYS_SYSMACROS_H
 1

	)

39 
	~<„©uªs.h
>

40 
	~<bôs/ty≥s.h
>

41 
	~<bôs/sysma¸os.h
>

52 
	#__SYSMACROS_DM
(
symbﬁ
Ë
__SYSMACROS_DM1
 \

53 (
In
 
the
 
GNU
 
C
 
Libøry
, #symbﬁ 
is
 
deföed
\
n
\

54 
by
 <
sys
/
sysma¸os
.
h
>. 
F‹
 
hi°‹iˇl
 
com∑tibûôy
, 
ô
 
is
\
n
\

55 
cuºíéy
 
deföed
 
by
 <
sys
/
ty≥s
.
h
> 
as
 
wñl
, 
but
 
we
 
∂™
 
to
\
n
\

56 
ªmove
 
this
 
so⁄
. 
To
 
u£
 #symbﬁ, 
ö˛ude
 <
sys
/
sysma¸os
.
h
>\
n
\

57 
dúe˘ly
. 
If
 
you
 
did
 
nŸ
 
öãnd
 
to
 
u£
 
a
 
sy°em
-
deföed
 
ma¸o
\
n
\

58 #symbﬁ, 
you
 
should
 
undeföe
 
ô
 
a·î
 
ö˛udög
 <
sys
/
ty≥s
.
h
>.)

	)

62 
	#__SYSMACROS_DM1
(...Ë
	`__glibc_ma¸o_w¨nög
 (#__VA_ARGS__)

	)

64 
	#__SYSMACROS_DECL_TEMPL
(
πy≥
, 
«me
, 
¥Ÿo
) \

65 
πy≥
 
gnu_dev_
##
«me
 
¥Ÿo
 
__THROW
 
__©åibuã_c⁄°__
;

	)

67 
	#__SYSMACROS_IMPL_TEMPL
(
πy≥
, 
«me
, 
¥Ÿo
) \

68 
__exãnsi⁄__
 
__exã∫_ölöe
 
__©åibuã_c⁄°__
 
πy≥
 \

69 
	`__NTH
 (
gnu_dev_
##
«me
 
¥Ÿo
)

	)

71 
__BEGIN_DECLS


73 
	$__SYSMACROS_DECLARE_MAJOR
 (
__SYSMACROS_DECL_TEMPL
)

74 
	$__SYSMACROS_DECLARE_MINOR
 (
__SYSMACROS_DECL_TEMPL
)

75 
	$__SYSMACROS_DECLARE_MAKEDEV
 (
__SYSMACROS_DECL_TEMPL
)

77 #ifde‡
__USE_EXTERN_INLINES


79 
	$__SYSMACROS_DEFINE_MAJOR
 (
__SYSMACROS_IMPL_TEMPL
)

80 
	$__SYSMACROS_DEFINE_MINOR
 (
__SYSMACROS_IMPL_TEMPL
)

81 
	$__SYSMACROS_DEFINE_MAKEDEV
 (
__SYSMACROS_IMPL_TEMPL
)

85 
__END_DECLS


89 #i‚de‡
__SYSMACROS_NEED_IMPLEMENTATION


90 #unde‡
__SYSMACROS_DECL_TEMPL


91 #unde‡
__SYSMACROS_IMPL_TEMPL


92 #unde‡
__SYSMACROS_DECLARE_MAJOR


93 #unde‡
__SYSMACROS_DECLARE_MINOR


94 #unde‡
__SYSMACROS_DECLARE_MAKEDEV


95 #unde‡
__SYSMACROS_DEFINE_MAJOR


96 #unde‡
__SYSMACROS_DEFINE_MINOR


97 #unde‡
__SYSMACROS_DEFINE_MAKEDEV


100 #ifde‡
__SYSMACROS_DEPRECATED_INCLUSION


101 
	#maj‹
(
dev
Ë
	`__SYSMACROS_DM
 (
maj‹
Ë
	`gnu_dev_maj‹
 (dev)

	)

102 
	#mö‹
(
dev
Ë
	`__SYSMACROS_DM
 (
mö‹
Ë
	`gnu_dev_mö‹
 (dev)

	)

103 
	#makedev
(
maj
, 
mö
Ë
	`__SYSMACROS_DM
 (
makedev
Ë
	`gnu_dev_makedev
 (maj, mö)

	)

105 
	#maj‹
(
dev
Ë
	`gnu_dev_maj‹
 (dev)

	)

106 
	#mö‹
(
dev
Ë
	`gnu_dev_mö‹
 (dev)

	)

107 
	#makedev
(
maj
, 
mö
Ë
	`gnu_dev_makedev
 (maj, mö)

	)

	@/usr/include/asm/errno.h

1 
	~<asm-gíîic/î∫o.h
>

	@/usr/include/bits/byteswap-16.h

19 #i‚de‡
_BITS_BYTESWAP_H


23 #ifde‡
__GNUC__


24 #i‡
__GNUC__
 >= 2

25 
	#__bsw≠_16
(
x
) \

26 (
__exãnsi⁄__
 \

27 ({ 
__v
, 
__x
 = (Ë(
x
); \

28 i‡(
	`__buûtö_c⁄°™t_p
 (
__x
)) \

29 
__v
 = 
	`__bsw≠_c⁄°™t_16
 (
__x
); \

31 
	`__asm__
 ("rorw $8, %w0" \

32 : "Ù" (
__v
) \

33 : "0" (
__x
) \

35 
__v
; }))

	)

38 
	#__bsw≠_16
(
x
) \

39 (
__exãnsi⁄__
 \

40 ({ 
__x
 = (Ë(
x
); \

41 
	`__bsw≠_c⁄°™t_16
 (
__x
); }))

	)

44 
__ölöe
 

45 
	$__bsw≠_16
 (
__bsx
)

47  
	`__bsw≠_c⁄°™t_16
 (
__bsx
);

48 
	}
}

	@/usr/include/bits/select.h

18 #i‚de‡
_SYS_SELECT_H


22 
	~<bôs/w‹dsize.h
>

25 #i‡
deföed
 
__GNUC__
 && __GNUC__ >= 2

27 #i‡
__WORDSIZE
 == 64

28 
	#__FD_ZERO_STOS
 "°osq"

	)

30 
	#__FD_ZERO_STOS
 "°o¶"

	)

33 
	#__FD_ZERO
(
fd•
) \

35 
__d0
, 
__d1
; \

36 
__asm__
 
	`__vﬁ©ûe__
 ("˛d;Ñï; " 
__FD_ZERO_STOS
 \

37 : "=c" (
__d0
), "=D" (
__d1
) \

38 : "a" (0), "0" ( (
fd_£t
) \

39 /  (
__fd_mask
)), \

40 "1" (&
	`__FDS_BITS
 (
fd•
)[0]) \

42 } 0)

	)

48 
	#__FD_ZERO
(
£t
) \

50 
__i
; \

51 
fd_£t
 *
__¨r
 = (
£t
); \

52 
__i
 = 0; __ò<  (
fd_£t
Ë/  (
__fd_mask
); ++__i) \

53 
	`__FDS_BITS
 (
__¨r
)[
__i
] = 0; \

54 } 0)

	)

58 
	#__FD_SET
(
d
, 
£t
) \

59 ((Ë(
	`__FDS_BITS
 (
£t
)[
	`__FD_ELT
 (
d
)] |
	`__FD_MASK
 (d)))

	)

60 
	#__FD_CLR
(
d
, 
£t
) \

61 ((Ë(
	`__FDS_BITS
 (
£t
)[
	`__FD_ELT
 (
d
)] &~
	`__FD_MASK
 (d)))

	)

62 
	#__FD_ISSET
(
d
, 
£t
) \

63 ((
	`__FDS_BITS
 (
£t
)[
	`__FD_ELT
 (
d
)] & 
	`__FD_MASK
 (d)Ë!0)

	)

	@/usr/include/bits/select2.h

19 #i‚de‡
_SYS_SELECT_H


24 
__fdñt_chk
 (
__d
);

25 
	$__fdñt_w¨n
 (
__d
)

26 
	`__w¨«âr
 ("bit outside of fd_set selected");

27 #unde‡
__FD_ELT


28 
	#__FD_ELT
(
d
) \

29 
__exãnsi⁄__
 \

30 ({ 
__d
 = (
d
); \

31 (
	`__buûtö_c⁄°™t_p
 (
__d
) \

32 ? (0 <
__d
 && __d < 
__FD_SETSIZE
 \

33 ? (
__d
 / 
__NFDBITS
) \

34 : 
	`__fdñt_w¨n
 (
__d
)) \

35 : 
	`__fdñt_chk
 (
__d
)); 
	}
})

	)

	@/usr/include/bits/sysmacros.h

19 #i‚de‡
_BITS_SYSMACROS_H


20 
	#_BITS_SYSMACROS_H
 1

	)

22 #i‚de‡
_SYS_SYSMACROS_H


36 
	#__SYSMACROS_DECLARE_MAJOR
(
DECL_TEMPL
) \

37 
	`DECL_TEMPL
(, 
maj‹
, (
__dev_t
 
__dev
))

	)

39 
	#__SYSMACROS_DEFINE_MAJOR
(
DECL_TEMPL
) \

40 
	`__SYSMACROS_DECLARE_MAJOR
 (
DECL_TEMPL
) \

42 
__maj‹
; \

43 
__maj‹
 = ((
__dev
 & (
__dev_t
) 0x00000000000fff00u) >> 8); \

44 
__maj‹
 |((
__dev
 & (
__dev_t
) 0xfffff00000000000u) >> 32); \

45  
__maj‹
; \

46 }

	)

48 
	#__SYSMACROS_DECLARE_MINOR
(
DECL_TEMPL
) \

49 
	`DECL_TEMPL
(, 
mö‹
, (
__dev_t
 
__dev
))

	)

51 
	#__SYSMACROS_DEFINE_MINOR
(
DECL_TEMPL
) \

52 
	`__SYSMACROS_DECLARE_MINOR
 (
DECL_TEMPL
) \

54 
__mö‹
; \

55 
__mö‹
 = ((
__dev
 & (
__dev_t
) 0x00000000000000ffu) >> 0); \

56 
__mö‹
 |((
__dev
 & (
__dev_t
) 0x00000ffffff00000u) >> 12); \

57  
__mö‹
; \

58 }

	)

60 
	#__SYSMACROS_DECLARE_MAKEDEV
(
DECL_TEMPL
) \

61 
	`DECL_TEMPL
(
__dev_t
, 
makedev
, (
__maj‹
, 
__mö‹
))

	)

63 
	#__SYSMACROS_DEFINE_MAKEDEV
(
DECL_TEMPL
) \

64 
	`__SYSMACROS_DECLARE_MAKEDEV
 (
DECL_TEMPL
) \

66 
__dev_t
 
__dev
; \

67 
__dev
 = (((
__dev_t
Ë(
__maj‹
 & 0x00000fffu)) << 8); \

68 
__dev
 |(((
__dev_t
Ë(
__maj‹
 & 0xfffff000u)) << 32); \

69 
__dev
 |(((
__dev_t
Ë(
__mö‹
 & 0x000000ffu)) << 0); \

70 
__dev
 |(((
__dev_t
Ë(
__mö‹
 & 0xffffff00u)) << 12); \

71  
__dev
; \

72 }

	)

	@/usr/include/bits/thread-shared-types.h

19 #i‚de‡
_THREAD_SHARED_TYPES_H


20 
	#_THREAD_SHARED_TYPES_H
 1

	)

77 
	~<bôs/±hªadty≥s-¨ch.h
>

81 #i‡!
__PTHREAD_MUTEX_USE_UNION


82 
	s__±hªad_öã∫Æ_li°


84 
__±hªad_öã∫Æ_li°
 *
	m__¥ev
;

85 
__±hªad_öã∫Æ_li°
 *
	m__√xt
;

86 } 
	t__±hªad_li°_t
;

88 
	s__±hªad_öã∫Æ_¶i°


90 
__±hªad_öã∫Æ_¶i°
 *
	m__√xt
;

91 } 
	t__±hªad_¶i°_t
;

95 #i‡
__PTHREAD_MUTEX_LOCK_ELISION


96 #i‡!
__PTHREAD_MUTEX_USE_UNION


97 
	#__PTHREAD_SPINS_DATA
 \

98 
__•ös
; \

99 
__ñisi⁄


	)

100 
	#__PTHREAD_SPINS
 0, 0

	)

102 
	#__PTHREAD_SPINS_DATA
 \

105 
__e•ös
; \

106 
__ìlisi⁄
; \

107 } 
__ñisi⁄_d©a


	)

108 
	#__PTHREAD_SPINS
 { 0, 0 }

	)

109 
	#__•ös
 
__ñisi⁄_d©a
.
__e•ös


	)

110 
	#__ñisi⁄
 
__ñisi⁄_d©a
.
__ìlisi⁄


	)

113 
	#__PTHREAD_SPINS_DATA
 
__•ös


	)

115 
	#__PTHREAD_SPINS
 0

	)

118 
	s__±hªad_muãx_s


120 
__lock
 
	m__LOCK_ALIGNMENT
;

121 
	m__cou¡
;

122 
	m__ow√r
;

123 #i‡!
__PTHREAD_MUTEX_NUSERS_AFTER_KIND


124 
	m__nu£rs
;

128 
	m__köd
;

129 
	m__PTHREAD_COMPAT_PADDING_MID


130 #i‡
__PTHREAD_MUTEX_NUSERS_AFTER_KIND


131 
	m__nu£rs
;

133 #i‡!
__PTHREAD_MUTEX_USE_UNION


134 
	m__PTHREAD_SPINS_DATA
;

135 
__±hªad_li°_t
 
	m__li°
;

136 
	#__PTHREAD_MUTEX_HAVE_PREV
 1

	)

138 
__exãnsi⁄__
 union

140 
	m__PTHREAD_SPINS_DATA
;

141 
__±hªad_¶i°_t
 
	m__li°
;

143 
	#__PTHREAD_MUTEX_HAVE_PREV
 0

	)

145 
	m__PTHREAD_COMPAT_PADDING_END


151 
	s__±hªad_c⁄d_s


153 
__exãnsi⁄__
 union

155 
__exãnsi⁄__
 
	m__w£q
;

158 
	m__low
;

159 
	m__high
;

160 } 
	m__w£q32
;

162 
__exãnsi⁄__
 union

164 
__exãnsi⁄__
 
	m__g1_°¨t
;

167 
	m__low
;

168 
	m__high
;

169 } 
	m__g1_°¨t32
;

171 
	m__g_ªfs
[2] 
	m__LOCK_ALIGNMENT
;

172 
	m__g_size
[2];

173 
	m__g1_‹ig_size
;

174 
	m__wªfs
;

175 
	m__g_sig«ls
[2];

	@/usr/include/bits/types/__mbstate_t.h

1 #i‚de‡
____mb°©e_t_deföed


2 
	#____mb°©e_t_deföed
 1

	)

8 #i‚de‡
__WINT_TYPE__


9 
	#__WINT_TYPE__
 

	)

15 
	m__cou¡
;

18 
__WINT_TYPE__
 
	m__wch
;

19 
	m__wchb
[4];

20 } 
	m__vÆue
;

21 } 
	t__mb°©e_t
;

	@/usr/include/bits/types/sigset_t.h

1 #i‚de‡
__sig£t_t_deföed


2 
	#__sig£t_t_deföed
 1

	)

4 
	~<bôs/ty≥s/__sig£t_t.h
>

7 
__sig£t_t
 
	tsig£t_t
;

	@/usr/include/bits/types/struct_timeval.h

1 #i‚de‡
__timevÆ_deföed


2 
	#__timevÆ_deföed
 1

	)

4 
	~<bôs/ty≥s.h
>

8 
	stimevÆ


10 
__time_t
 
	mtv_£c
;

11 
__su£c⁄ds_t
 
	mtv_u£c
;

	@/usr/include/bits/types/wint_t.h

1 #i‚de‡
__wöt_t_deföed


2 
	#__wöt_t_deföed
 1

	)

9 #i‚de‡
_WINT_T


10 
	#_WINT_T
 1

	)

16 #i‚de‡
__WINT_TYPE__


17 
	#__WINT_TYPE__
 

	)

20 
__WINT_TYPE__
 
	twöt_t
;

	@/usr/include/gconv.h

22 #i‚de‡
_GCONV_H


23 
	#_GCONV_H
 1

	)

25 
	~<„©uªs.h
>

26 
	~<bôs/ty≥s/__mb°©e_t.h
>

27 
	~<bôs/ty≥s/wöt_t.h
>

29 
	#__√ed_size_t


	)

30 
	#__√ed_wch¨_t


	)

31 
	~<°ddef.h
>

34 
	#__UNKNOWN_10646_CHAR
 ((
wch¨_t
Ë0xfffd)

	)

39 
	m__GCONV_OK
 = 0,

40 
	m__GCONV_NOCONV
,

41 
	m__GCONV_NODB
,

42 
	m__GCONV_NOMEM
,

44 
	m__GCONV_EMPTY_INPUT
,

45 
	m__GCONV_FULL_OUTPUT
,

46 
	m__GCONV_ILLEGAL_INPUT
,

47 
	m__GCONV_INCOMPLETE_INPUT
,

49 
	m__GCONV_ILLEGAL_DESCRIPTOR
,

50 
	m__GCONV_INTERNAL_ERROR


57 
	m__GCONV_IS_LAST
 = 0x0001,

58 
	m__GCONV_IGNORE_ERRORS
 = 0x0002,

59 
	m__GCONV_SWAP
 = 0x0004,

60 
	m__GCONV_TRANSLIT
 = 0x0008

65 
	g__gc⁄v_°ï
;

66 
	g__gc⁄v_°ï_d©a
;

67 
	g__gc⁄v_lﬂded_obje˘
;

71 (*
	t__gc⁄v_f˘
Ë(
	t__gc⁄v_°ï
 *, 
	t__gc⁄v_°ï_d©a
 *,

73 **, 
	tsize_t
 *, , );

76 
	$wöt_t
 (*
	t__gc⁄v_btowc_f˘
Ë(
	t__gc⁄v_°ï
 *, );

79 (*
	t__gc⁄v_öô_f˘
Ë(
	t__gc⁄v_°ï
 *);

80 (*
	t__gc⁄v_íd_f˘
Ë(
	t__gc⁄v_°ï
 *);

84 
	s__gc⁄v_°ï


86 
__gc⁄v_lﬂded_obje˘
 *
__shlib_h™dÀ
;

87 c⁄° *
__mod«me
;

89 
__cou¡î
;

91 *
__‰om_«me
;

92 *
__to_«me
;

94 
__gc⁄v_f˘
 
__f˘
;

95 
__gc⁄v_btowc_f˘
 
__btowc_f˘
;

96 
__gc⁄v_öô_f˘
 
__öô_f˘
;

97 
__gc⁄v_íd_f˘
 
__íd_f˘
;

101 
__mö_√eded_‰om
;

102 
__max_√eded_‰om
;

103 
__mö_√eded_to
;

104 
__max_√eded_to
;

107 
__°©eful
;

109 *
__d©a
;

114 
	s__gc⁄v_°ï_d©a


116 *
__outbuf
;

117 *
__outbu„nd
;

121 
__Êags
;

125 
__övoˇti⁄_cou¡î
;

129 
__öã∫Æ_u£
;

131 
__mb°©e_t
 *
__°©ï
;

132 
__mb°©e_t
 
__°©e
;

138 
	s__gc⁄v_öfo


140 
size_t
 
__n°ïs
;

141 
__gc⁄v_°ï
 *
__°ïs
;

142 
__exãnsi⁄__
 
__gc⁄v_°ï_d©a
 
__d©a
[0];

143 } *
	t__gc⁄v_t
;

146 
	`__gc⁄v_å™¶ôî©e
 (
__gc⁄v_°ï
 *
°ï
,

147 
__gc⁄v_°ï_d©a
 *
°ï_d©a
,

148 c⁄° *
öbuf°¨t
,

149 c⁄° **
öbuÂ
,

150 c⁄° *
öbu„nd
,

151 **
outbuf°¨t
,

152 
size_t
 *
úªvîsibÀ
);

	@/usr/include/asm-generic/errno.h

2 #i‚de‡
_ASM_GENERIC_ERRNO_H


3 
	#_ASM_GENERIC_ERRNO_H


	)

5 
	~<asm-gíîic/î∫o-ba£.h
>

7 
	#EDEADLK
 35

	)

8 
	#ENAMETOOLONG
 36

	)

9 
	#ENOLCK
 37

	)

18 
	#ENOSYS
 38

	)

20 
	#ENOTEMPTY
 39

	)

21 
	#ELOOP
 40

	)

22 
	#EWOULDBLOCK
 
EAGAIN


	)

23 
	#ENOMSG
 42

	)

24 
	#EIDRM
 43

	)

25 
	#ECHRNG
 44

	)

26 
	#EL2NSYNC
 45

	)

27 
	#EL3HLT
 46

	)

28 
	#EL3RST
 47

	)

29 
	#ELNRNG
 48

	)

30 
	#EUNATCH
 49

	)

31 
	#ENOCSI
 50

	)

32 
	#EL2HLT
 51

	)

33 
	#EBADE
 52

	)

34 
	#EBADR
 53

	)

35 
	#EXFULL
 54

	)

36 
	#ENOANO
 55

	)

37 
	#EBADRQC
 56

	)

38 
	#EBADSLT
 57

	)

40 
	#EDEADLOCK
 
EDEADLK


	)

42 
	#EBFONT
 59

	)

43 
	#ENOSTR
 60

	)

44 
	#ENODATA
 61

	)

45 
	#ETIME
 62

	)

46 
	#ENOSR
 63

	)

47 
	#ENONET
 64

	)

48 
	#ENOPKG
 65

	)

49 
	#EREMOTE
 66

	)

50 
	#ENOLINK
 67

	)

51 
	#EADV
 68

	)

52 
	#ESRMNT
 69

	)

53 
	#ECOMM
 70

	)

54 
	#EPROTO
 71

	)

55 
	#EMULTIHOP
 72

	)

56 
	#EDOTDOT
 73

	)

57 
	#EBADMSG
 74

	)

58 
	#EOVERFLOW
 75

	)

59 
	#ENOTUNIQ
 76

	)

60 
	#EBADFD
 77

	)

61 
	#EREMCHG
 78

	)

62 
	#ELIBACC
 79

	)

63 
	#ELIBBAD
 80

	)

64 
	#ELIBSCN
 81

	)

65 
	#ELIBMAX
 82

	)

66 
	#ELIBEXEC
 83

	)

67 
	#EILSEQ
 84

	)

68 
	#ERESTART
 85

	)

69 
	#ESTRPIPE
 86

	)

70 
	#EUSERS
 87

	)

71 
	#ENOTSOCK
 88

	)

72 
	#EDESTADDRREQ
 89

	)

73 
	#EMSGSIZE
 90

	)

74 
	#EPROTOTYPE
 91

	)

75 
	#ENOPROTOOPT
 92

	)

76 
	#EPROTONOSUPPORT
 93

	)

77 
	#ESOCKTNOSUPPORT
 94

	)

78 
	#EOPNOTSUPP
 95

	)

79 
	#EPFNOSUPPORT
 96

	)

80 
	#EAFNOSUPPORT
 97

	)

81 
	#EADDRINUSE
 98

	)

82 
	#EADDRNOTAVAIL
 99

	)

83 
	#ENETDOWN
 100

	)

84 
	#ENETUNREACH
 101

	)

85 
	#ENETRESET
 102

	)

86 
	#ECONNABORTED
 103

	)

87 
	#ECONNRESET
 104

	)

88 
	#ENOBUFS
 105

	)

89 
	#EISCONN
 106

	)

90 
	#ENOTCONN
 107

	)

91 
	#ESHUTDOWN
 108

	)

92 
	#ETOOMANYREFS
 109

	)

93 
	#ETIMEDOUT
 110

	)

94 
	#ECONNREFUSED
 111

	)

95 
	#EHOSTDOWN
 112

	)

96 
	#EHOSTUNREACH
 113

	)

97 
	#EALREADY
 114

	)

98 
	#EINPROGRESS
 115

	)

99 
	#ESTALE
 116

	)

100 
	#EUCLEAN
 117

	)

101 
	#ENOTNAM
 118

	)

102 
	#ENAVAIL
 119

	)

103 
	#EISNAM
 120

	)

104 
	#EREMOTEIO
 121

	)

105 
	#EDQUOT
 122

	)

107 
	#ENOMEDIUM
 123

	)

108 
	#EMEDIUMTYPE
 124

	)

109 
	#ECANCELED
 125

	)

110 
	#ENOKEY
 126

	)

111 
	#EKEYEXPIRED
 127

	)

112 
	#EKEYREVOKED
 128

	)

113 
	#EKEYREJECTED
 129

	)

116 
	#EOWNERDEAD
 130

	)

117 
	#ENOTRECOVERABLE
 131

	)

119 
	#ERFKILL
 132

	)

121 
	#EHWPOISON
 133

	)

	@/usr/include/bits/pthreadtypes-arch.h

18 #i‚de‡
_BITS_PTHREADTYPES_ARCH_H


19 
	#_BITS_PTHREADTYPES_ARCH_H
 1

	)

21 
	~<bôs/w‹dsize.h
>

23 #ifde‡
__x86_64__


24 #i‡
__WORDSIZE
 == 64

25 
	#__SIZEOF_PTHREAD_MUTEX_T
 40

	)

26 
	#__SIZEOF_PTHREAD_ATTR_T
 56

	)

27 
	#__SIZEOF_PTHREAD_MUTEX_T
 40

	)

28 
	#__SIZEOF_PTHREAD_RWLOCK_T
 56

	)

29 
	#__SIZEOF_PTHREAD_BARRIER_T
 32

	)

31 
	#__SIZEOF_PTHREAD_MUTEX_T
 32

	)

32 
	#__SIZEOF_PTHREAD_ATTR_T
 32

	)

33 
	#__SIZEOF_PTHREAD_MUTEX_T
 32

	)

34 
	#__SIZEOF_PTHREAD_RWLOCK_T
 44

	)

35 
	#__SIZEOF_PTHREAD_BARRIER_T
 20

	)

38 
	#__SIZEOF_PTHREAD_MUTEX_T
 24

	)

39 
	#__SIZEOF_PTHREAD_ATTR_T
 36

	)

40 
	#__SIZEOF_PTHREAD_MUTEX_T
 24

	)

41 
	#__SIZEOF_PTHREAD_RWLOCK_T
 32

	)

42 
	#__SIZEOF_PTHREAD_BARRIER_T
 20

	)

44 
	#__SIZEOF_PTHREAD_MUTEXATTR_T
 4

	)

45 
	#__SIZEOF_PTHREAD_COND_T
 48

	)

46 
	#__SIZEOF_PTHREAD_CONDATTR_T
 4

	)

47 
	#__SIZEOF_PTHREAD_RWLOCKATTR_T
 8

	)

48 
	#__SIZEOF_PTHREAD_BARRIERATTR_T
 4

	)

51 
	#__PTHREAD_COMPAT_PADDING_MID


	)

52 
	#__PTHREAD_COMPAT_PADDING_END


	)

53 
	#__PTHREAD_MUTEX_LOCK_ELISION
 1

	)

54 #ifde‡
__x86_64__


55 
	#__PTHREAD_MUTEX_NUSERS_AFTER_KIND
 0

	)

56 
	#__PTHREAD_MUTEX_USE_UNION
 0

	)

58 
	#__PTHREAD_MUTEX_NUSERS_AFTER_KIND
 1

	)

59 
	#__PTHREAD_MUTEX_USE_UNION
 1

	)

62 
	#__LOCK_ALIGNMENT


	)

63 
	#__ONCE_ALIGNMENT


	)

65 
	s__±hªad_rwlock_¨ch_t


67 
	m__ªadîs
;

68 
	m__wrôîs
;

69 
	m__wΩha£_fuãx
;

70 
	m__wrôîs_fuãx
;

71 
	m__∑d3
;

72 
	m__∑d4
;

73 #ifde‡
__x86_64__


74 
	m__cur_wrôî
;

75 
	m__sh¨ed
;

76 sig√d 
	m__rwñisi⁄
;

77 #ifde‡ 
__ILP32__


78 
	m__∑d1
[3];

79 
	#__PTHREAD_RWLOCK_ELISION_EXTRA
 0, { 0, 0, 0 }

	)

81 
	m__∑d1
[7];

82 
	#__PTHREAD_RWLOCK_ELISION_EXTRA
 0, { 0, 0, 0, 0, 0, 0, 0 }

	)

84 
	m__∑d2
;

87 
	m__Êags
;

88 
	#__PTHREAD_RWLOCK_INT_FLAGS_SHARED
 1

	)

92 
	m__Êags
;

93 
	m__sh¨ed
;

94 sig√d 
	m__rwñisi⁄
;

95 
	#__PTHREAD_RWLOCK_ELISION_EXTRA
 0

	)

96 
	m__∑d2
;

97 
	m__cur_wrôî
;

101 #i‚de‡
__x86_64__


103 
	#__˛ónup_f˘_©åibuã
 
	`__©åibuã__
 ((
	`__ªg∑rm__
 (1)))

	)

	@/usr/include/bits/types/__sigset_t.h

1 #i‚de‡
____sig£t_t_deföed


2 
	#____sig£t_t_deföed


	)

4 
	#_SIGSET_NWORDS
 (1024 / (8 *  ()))

	)

7 
	m__vÆ
[
_SIGSET_NWORDS
];

8 } 
	t__sig£t_t
;

	@/usr/include/asm-generic/errno-base.h

2 #i‚de‡
_ASM_GENERIC_ERRNO_BASE_H


3 
	#_ASM_GENERIC_ERRNO_BASE_H


	)

5 
	#EPERM
 1

	)

6 
	#ENOENT
 2

	)

7 
	#ESRCH
 3

	)

8 
	#EINTR
 4

	)

9 
	#EIO
 5

	)

10 
	#ENXIO
 6

	)

11 
	#E2BIG
 7

	)

12 
	#ENOEXEC
 8

	)

13 
	#EBADF
 9

	)

14 
	#ECHILD
 10

	)

15 
	#EAGAIN
 11

	)

16 
	#ENOMEM
 12

	)

17 
	#EACCES
 13

	)

18 
	#EFAULT
 14

	)

19 
	#ENOTBLK
 15

	)

20 
	#EBUSY
 16

	)

21 
	#EEXIST
 17

	)

22 
	#EXDEV
 18

	)

23 
	#ENODEV
 19

	)

24 
	#ENOTDIR
 20

	)

25 
	#EISDIR
 21

	)

26 
	#EINVAL
 22

	)

27 
	#ENFILE
 23

	)

28 
	#EMFILE
 24

	)

29 
	#ENOTTY
 25

	)

30 
	#ETXTBSY
 26

	)

31 
	#EFBIG
 27

	)

32 
	#ENOSPC
 28

	)

33 
	#ESPIPE
 29

	)

34 
	#EROFS
 30

	)

35 
	#EMLINK
 31

	)

36 
	#EPIPE
 32

	)

37 
	#EDOM
 33

	)

38 
	#ERANGE
 34

	)

	@
1
.
1
/usr/include
411
8280
config/conf.c
config/conf.h
config/config.l
config/config.y
config/lex.yy.c
config/y.tab.c
device/eth/ethcontrol.c
device/eth/ethhandler.c
device/eth/ethinit.c
device/eth/ethmcast.c
device/eth/ethread.c
device/eth/ethwrite.c
device/lfs/lfdballoc.c
device/lfs/lfdbfree.c
device/lfs/lfflush.c
device/lfs/lfgetmode.c
device/lfs/lfiballoc.c
device/lfs/lfibclear.c
device/lfs/lfibget.c
device/lfs/lfibput.c
device/lfs/lflclose.c
device/lfs/lflcontrol.c
device/lfs/lflgetc.c
device/lfs/lflinit.c
device/lfs/lflputc.c
device/lfs/lflread.c
device/lfs/lflseek.c
device/lfs/lflwrite.c
device/lfs/lfscheck.c
device/lfs/lfsckfmt.c
device/lfs/lfscreate.c
device/lfs/lfsetup.c
device/lfs/lfsinit.c
device/lfs/lfsopen.c
device/lfs/lftruncate.c
device/nam/mount.c
device/nam/naminit.c
device/nam/nammap.c
device/nam/namopen.c
device/ram/ramclose.c
device/ram/raminit.c
device/ram/ramopen.c
device/ram/ramread.c
device/ram/ramwrite.c
device/rds/rdsbufalloc.c
device/rds/rdsclose.c
device/rds/rdscomm.c
device/rds/rdscontrol.c
device/rds/rdsinit.c
device/rds/rdsopen.c
device/rds/rdsprocess.c
device/rds/rdsread.c
device/rds/rdswrite.c
device/rfs/rflclose.c
device/rfs/rflgetc.c
device/rfs/rflinit.c
device/rfs/rflputc.c
device/rfs/rflread.c
device/rfs/rflseek.c
device/rfs/rflwrite.c
device/rfs/rfscomm.c
device/rfs/rfscontrol.c
device/rfs/rfsgetmode.c
device/rfs/rfsinit.c
device/rfs/rfsndmsg.c
device/rfs/rfsopen.c
device/tty/ttycontrol.c
device/tty/ttygetc.c
device/tty/ttyhandle_in.c
device/tty/ttyhandle_out.c
device/tty/ttyhandler.c
device/tty/ttyinit.c
device/tty/ttykickout.c
device/tty/ttyputc.c
device/tty/ttyread.c
device/tty/ttywrite.c
hello.c
include/apic.h
include/arp.h
include/bufpool.h
include/clock.h
include/conf.h
include/ctype.h
include/date.h
include/debug.h
include/delay.h
include/device.h
include/dhcp.h
include/dns.h
include/elf.h
include/ether.h
include/ethloop.h
include/file.h
include/filesys.h
include/flash.h
include/hpet.h
include/icmp.h
include/icu.h
include/interrupt.h
include/ip.h
include/kernel.h
include/ld.h
include/lfilesys.h
include/limits.h
include/load.h
include/mark.h
include/memory.h
include/multiboot.h
include/name.h
include/net.h
include/old_elf.h
include/pci.h
include/ports.h
include/process.h
include/prototypes.h
include/pxe.h
include/quark_eth.h
include/quark_irq.h
include/quark_pdat.h
include/queue.h
include/ramdisk.h
include/rdisksys.h
include/resched.h
include/rfilesys.h
include/sdmc.h
include/semaphore.h
include/shell.h
include/shprototypes.h
include/stdarg.h
include/stddef.h
include/stdio.h
include/stdlib.h
include/string.h
include/syscall_interface.h
include/syscall_interface_tab.h
include/testsuite.h
include/tftp.h
include/tty.h
include/uart.h
include/udp.h
include/xinu.h
lib/abs.c
lib/atoi.c
lib/atol.c
lib/bzero.c
lib/ctype_.c
lib/doprnt.c
lib/doscan.c
lib/fdoprnt.c
lib/fgetc.c
lib/fgets.c
lib/fprintf.c
lib/fputc.c
lib/fputs.c
lib/fscanf.c
lib/getchar.c
lib/labs.c
lib/memchr.c
lib/memcmp.c
lib/memcpy.c
lib/memset.c
lib/printf.c
lib/putchar.c
lib/qsort.c
lib/rand.c
lib/sprintf.c
lib/sscanf.c
lib/strchr.c
lib/strcmp.c
lib/strcpy.c
lib/strlen.c
lib/strncat.c
lib/strncmp.c
lib/strncpy.c
lib/strnlen.c
lib/strrchr.c
lib/strstr.c
mylib.c
net/arp.c
net/arp_dump.c
net/dhcp.c
net/dhcp_dump.c
net/dns.c
net/dot2ip.c
net/hexdump.c
net/icmp.c
net/ip.c
net/net.c
net/pdump.c
net/pxe.c
net/tftp.c
net/udp.c
shell/addargs.c
shell/lexan.c
shell/shell.c
shell/syscall_interface.c
shell/xsh_argecho.c
shell/xsh_arp.c
shell/xsh_cat.c
shell/xsh_clear.c
shell/xsh_date.c
shell/xsh_devdump.c
shell/xsh_echo.c
shell/xsh_exit.c
shell/xsh_help.c
shell/xsh_kill.c
shell/xsh_memdump.c
shell/xsh_memstat.c
shell/xsh_netinfo.c
shell/xsh_ping.c
shell/xsh_ps.c
shell/xsh_rdstest.c
shell/xsh_sleep.c
shell/xsh_udpdump.c
shell/xsh_udpecho.c
shell/xsh_udpserver.c
shell/xsh_uptime.c
system/apphello-contents.c
system/apphello_dyn_loading-contents.c
system/ascdate.c
system/bufinit.c
system/chprio.c
system/clkhandler.c
system/clkinit.c
system/close.c
system/conf.c
system/control.c
system/create.c
system/debug.c
system/dlclose.c
system/dlopen.c
system/dlsym.c
system/early_imr.c
system/evec.c
system/exit.c
system/fileclose.c
system/filelist.c
system/fileopen.c
system/fileregister.c
system/fileunregister.c
system/freebuf.c
system/freemem.c
system/getbuf.c
system/getc.c
system/getdev.c
system/getitem.c
system/getmem.c
system/getpid.c
system/getprio.c
system/getstk.c
system/getticks.c
system/gettime.c
system/getutime.c
system/init.c
system/initialize.c
system/insert.c
system/insertd.c
system/ioerr.c
system/ionull.c
system/kill.c
system/kprintf.c
system/libmy-contents.c
system/load.c
system/loadopen.c
system/main.c
system/mark.c
system/meminit.c
system/mkbufpool.c
system/my_load.c
system/newqueue.c
system/open.c
system/panic.c
system/pci.c
system/platinit.c
system/ptclear.c
system/ptcount.c
system/ptcreate.c
system/ptdelete.c
system/ptinit.c
system/ptrecv.c
system/ptreset.c
system/ptsend.c
system/putc.c
system/quark_irq.c
system/quark_pdat.c
system/queue.c
system/read.c
system/ready.c
system/receive.c
system/recvclr.c
system/recvtime.c
system/resched.c
system/resume.c
system/seek.c
system/semcount.c
system/semcreate.c
system/semdelete.c
system/semreset.c
system/send.c
system/signal.c
system/signaln.c
system/sleep.c
system/stacktrace.c
system/suspend.c
system/syscall_interface_tab.c
system/syscallhandler.c
system/syscallinit.c
system/testcase_1.c
system/testcase_2.c
system/testcase_3.c
system/testcase_4.c
system/unload.c
system/unsleep.c
system/userret.c
system/wait.c
system/wakeup.c
system/write.c
system/xdone.c
system/yield.c
/usr/include/alloca.h
/usr/include/bits/auxv.h
/usr/include/ctype.h
/usr/include/elf.h
/usr/include/errno.h
/usr/include/features.h
/usr/include/inttypes.h
/usr/include/libintl.h
/usr/include/malloc.h
/usr/include/memory.h
/usr/include/semaphore.h
/usr/include/stdint.h
/usr/include/stdio.h
/usr/include/stdlib.h
/usr/include/string.h
/usr/include/unistd.h
/usr/include/bits/confname.h
/usr/include/bits/environments.h
/usr/include/bits/errno.h
/usr/include/bits/floatn.h
/usr/include/bits/getopt_posix.h
/usr/include/bits/libc-header-start.h
/usr/include/bits/libio.h
/usr/include/bits/posix_opt.h
/usr/include/bits/semaphore.h
/usr/include/bits/stdint-intn.h
/usr/include/bits/stdint-uintn.h
/usr/include/bits/stdio-ldbl.h
/usr/include/bits/stdio.h
/usr/include/bits/stdio2.h
/usr/include/bits/stdio_lim.h
/usr/include/bits/stdlib-bsearch.h
/usr/include/bits/stdlib-float.h
/usr/include/bits/stdlib-ldbl.h
/usr/include/bits/stdlib.h
/usr/include/bits/string_fortified.h
/usr/include/bits/sys_errlist.h
/usr/include/bits/types.h
/usr/include/bits/types/FILE.h
/usr/include/bits/types/__FILE.h
/usr/include/bits/types/locale_t.h
/usr/include/bits/types/struct_timespec.h
/usr/include/bits/unistd.h
/usr/include/bits/waitflags.h
/usr/include/bits/waitstatus.h
/usr/include/bits/wchar.h
/usr/include/bits/wordsize.h
/usr/include/endian.h
/usr/include/gnu/stubs.h
/usr/include/locale.h
/usr/include/stdc-predef.h
/usr/include/strings.h
/usr/include/sys/cdefs.h
/usr/include/sys/types.h
/usr/include/bits/_G_config.h
/usr/include/bits/byteswap.h
/usr/include/bits/endian.h
/usr/include/bits/floatn-common.h
/usr/include/bits/getopt_core.h
/usr/include/bits/libio-ldbl.h
/usr/include/bits/locale.h
/usr/include/bits/long-double.h
/usr/include/bits/pthreadtypes.h
/usr/include/bits/strings_fortified.h
/usr/include/bits/types/__locale_t.h
/usr/include/bits/types/clock_t.h
/usr/include/bits/types/clockid_t.h
/usr/include/bits/types/time_t.h
/usr/include/bits/types/timer_t.h
/usr/include/bits/typesizes.h
/usr/include/bits/uintn-identity.h
/usr/include/gnu/stubs-32.h
/usr/include/gnu/stubs-64.h
/usr/include/gnu/stubs-x32.h
/usr/include/linux/errno.h
/usr/include/sys/select.h
/usr/include/sys/sysmacros.h
/usr/include/asm/errno.h
/usr/include/bits/byteswap-16.h
/usr/include/bits/select.h
/usr/include/bits/select2.h
/usr/include/bits/sysmacros.h
/usr/include/bits/thread-shared-types.h
/usr/include/bits/types/__mbstate_t.h
/usr/include/bits/types/sigset_t.h
/usr/include/bits/types/struct_timeval.h
/usr/include/bits/types/wint_t.h
/usr/include/gconv.h
/usr/include/asm-generic/errno.h
/usr/include/bits/pthreadtypes-arch.h
/usr/include/bits/types/__sigset_t.h
/usr/include/asm-generic/errno-base.h
